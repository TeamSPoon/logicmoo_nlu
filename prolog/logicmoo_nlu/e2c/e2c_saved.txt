
also_show_chat80(I):-
  notrace(into_text80(I, U)),
  keep_going(also_chat80(U, Res)), !,
  %ignore_must(also_chat80(U, Res)), !,
  rewrite_result(_SF, verb, _VF, Res, RW), !,
  print_reply([underline, fg(green)], RW), !.


also_chat80(U, Res):-
  Sol=sol(failed),
  ignore(((
            at_most(6, Check),
            no_repeats(E, parser_chat80:sent_to_parsed(U, E)),
            no_repeats(Res, parser_chat80:sent_to_prelogic(E, Res)),
            nb_setarg(1, Sol, Res),
            Check,
            %print_reply(cyan, E),
            %print_my_sent_reply(green, Res),
            %print_my_sent_reply(yellow, E),
            fail))),
  Sol=sol(Res),
  Res\==failed.

also_chat80(U, Res):-
  Sol=sol(failed),
  ignore(((
            at_most(6, Check),
            no_repeats(E, parser_chat80:sent_to_parsed(U, E)),
            Check,
            once(my_sent_to_prelogic(E, Res)),
            nb_setarg(1, Sol, Res),
            print_my_sent_reply(green, Res),
            fail))),
  Sol=sol(Res),
  Res\==failed, !.

% also_chat80(_U, _Res):- notrace(print_reply(red, failed_parse80())), !, fail.

at_most(N, Check):- gensym(at_most_, AM), flag(AM, _, 0), Check= (flag(AM, X, X+1), X<N).

print_my_sent_reply(Color, E):- rewrite_result(_SF, verb, _VF, E, Res), !, print_reply(Color, Res), !.

my_sent_to_prelogic(E, Res):-
  % print_reply(yellow, (E)),
  rewrite_result(_SF, verb, _VF, E, Res), !.








% Also some Eng-specific function words

macro(possessive(Word, Pron, Type),
      ( possessive:[sem= @possessive_pron_sem(Pron), sem_n_type=Type] --> [Word )).

macro(possessive_pronoun(Word, Pron),
      ( np:[sem= @np_possessive_nbar_sem(@possessive_pron_sem(Pron), @noun_sem(noun, one)),
	    sem_n_type=(\(numeric)), agr=3,
	    takes_post_mods=y, n_of_mod_type=none, takes_partitive=n,
	    @takes_no_pps, gapsin=GIn, gapsout=GIn] -->
	  Word )).

%==========================================================================

% Standard macros for nouns

%----------------------------------------------------------

% Noun with all inflected forms
%
% @noun([headache, headaches],
%       [symptom, headache], [symptom], [takes_det_type=null+def+indef, takes_loc_pp=y]).

macro(noun(SurfaceForms, [SemType, SemConstant], [SortalType], OtherFeats),
      @noun(SurfaceForms,
	    [sem = @noun_sem(SemType, SemConstant),
	     sem_n_type = SortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Noun with just singular or just plal
%
% @uninflected_noun(work,
%                   [loc, work], [loc], sg, [takes_det_type=null]).

macro(uninflected_noun(SurfaceForm, [SemType, SemConstant], [SortalType], Agr, OtherFeats),
      ( n:[sem = @noun_sem(SemType, SemConstant),
	   agr = Agr,
	   sem_n_type = SortalType |
	  OtherFeats] --> [SurfaceForm )).

%==========================================================================

% Standard macro for adjectives
%
% @adjective(severe, [degree, severe], [symptom], [adjpos=prenom+pred]).

macro(adjective(SurfaceForm, [SemType, SemConstant], [SortalType], OtherFeats),
      ( adj:[sem= @adj_sem(SemType, SemConstant),
	     subj_sem_n_type=SortalType |
	    OtherFeats] --> [SurfaceForm)).

%----------------------------------------------------------

% Verb taking object and particle
% e.g. "you switch on the light", or "you switch the light on"
%
% v_object_particle([switch, switches, switched, switched, switching],
%                   [action, switch], [agent, switchable, onoff], [takes_loc_pp=y]).

macro(v_object_particle(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType, ParticleType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1pl+nx0vplnx1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType,
	     sem_p_type=ParticleType |
	    OtherFeats])).

%----------------------------------------------------------

% (Nonmodal) verb taking ing-VP,
% e.g. "John stopped sleeping"
%
% @v_vp_ing([stop, stops, stopped, stopped, stopping], [state, stop_doing], [_AnyAgent], []).

macro(v_vp_ing(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vvx1_nonmodal,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     vp_vform=ing |
	    OtherFeats])).



macro(agr_vals, [[1, 2, 3], [sg, pl]]).
macro(vform_vals, [[base, imperative, finite, ing, en, en_passive, to, none]]).
macro(pre_post_type_vals, [[none]]).
macro(default_inv, n).

macro(imperative, base).
macro(infinitive, base).
macro(to, to).
macro(gerund_or_pseudo_gerund_vform, ing).
macro(perfect_vform, en).
macro(pronoun_value_in_unmoved_particle_verb_object, n).

% "what kind/sort of people" is plal, not singular
macro(kind_of(Agr, Agr), (kind, of)).
macro(kind_of(Agr, Agr), (sort, of)).
% "kinds/sorts of person/people"
macro(kind_of((3+pl), Agr), (kinds, of)).
macro(kind_of((3+pl), Agr), (sorts, of)).

macro(how_wh_degree_mod, how).

macro(of_prep, of).
macro(passive_by_prep, by).

macro(partitive_marker, of).
macro(det_nps_take_partitives, y).

macro(hour_minute_separator_oh_digit, []).
macro(hour_minute_separator_not_oh_digit, []).
macro(past_hour, past).
macro(to_hour, to).

macro(from_start_of_range, from).
macro(to_start_of_range, to).
macro(between, between).
macro(and, and).

macro(how_adj_premod, how).

%----------------------------------------------------------------

macro(noun([Sing, Plur], Feats), ( n:[agr=3+sg, Feats] --> [Sing ) ).
macro(noun([Sing, Plur], Feats), ( n:[agr=3+pl, Feats] --> [Plur ) ).

macro(verb([PresNot3S, Pres3S, Past, Perfect, Ing], Sem, Feats),
      ( v:[sem=Sem, vform=base, Feats] --> [PresNot3S ) ).
macro(verb([PresNot3S, Pres3S, Past, Perfect, Ing], Sem, Feats),
      ( v:[sem=[[tense, present] | Sem], agr=(\(3+sg)), vform=finite, Feats] --> [PresNot3S ) ).
macro(verb([PresNot3S, Pres3S, Past, Perfect, Ing], Sem, Feats),
      ( v:[sem=[[tense, present] | Sem], agr=3+sg, vform=finite, Feats] --> [Pres3S ) ).
macro(verb([PresNot3S, Pres3S, Past, Perfect, Ing], Sem, Feats),
      ( v:[sem=[[tense, past] | Sem], vform=finite, Feats] --> [Past ) ).
macro(verb([PresNot3S, Pres3S, Past, Perfect, Ing], Sem, Feats),
      ( v:[sem=Sem, vform=en, Feats] --> [Perfect ) ).
macro(verb([PresNot3S, Pres3S, Past, Perfect, Ing], Sem, Feats),
      ( v:[sem=[[aspect, continuous] | Sem], vform=ing, Feats] --> [Ing ) ).

macro(be_verb(Sem, Feats),
      ( v:[sem=Sem, vform=base, takes_advp=y, Feats] --> [be ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[tense, present] | Sem], agr=(1+sg), vform=finite, takes_advp=y, Feats] --> [( am ; '\'m' ) ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[tense, present] | Sem], agr=(3+sg), vform=finite, takes_advp=y, Feats] --> [( is ; '\'s' ) ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[tense, present] | Sem], agr=(2+pl), vform=finite, takes_advp=y, Feats] --> [( are ; '\'re' ) ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[tense, past] | Sem], agr=((1+3)+sg), vform=finite, takes_advp=y, Feats] --> [was ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[tense, past] | Sem], agr=(2+pl), vform=finite, takes_advp=y, Feats] --> [were ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=Sem, agr=_, vform=en, takes_advp=y, Feats] --> [been ) ).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[aspect, continuous] | Sem], agr=_, vform=ing, takes_advp=y, Feats] --> [being ) ).

macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, present] | Sem], agr=(1+sg), vform=finite, inv=n, takes_advp=y, Feats] --> [( ( am, not ) ; ( '\'m', not ) ) )).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, present] | Sem], agr=(1+sg), vform=finite, inv=y, takes_advp=y, Feats] --> ['aren''t' )).

macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, present] | Sem], agr=(3+sg), vform=finite, inv=n, takes_advp=y, Feats] --> [( ( is, not ) ; 'isn''t' ) )).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, present] | Sem], agr=(3+sg), vform=finite, inv=y, takes_advp=y, Feats] --> ['isn''t' )).

macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, present] | Sem], agr=(2+pl), vform=finite, inv=n, takes_advp=y, Feats] --> [( ( are, not ) ; 'aren''t' ) )).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, present] | Sem], agr=(2+pl), vform=finite, inv=y, takes_advp=y, Feats] --> ['aren''t' )).

macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, past] | Sem], agr=((1+3)+sg), vform=finite, inv=n, takes_advp=y, Feats] --> [( ( was, not ) ; 'wasn''t' ) )).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, past] | Sem], agr=((1+3)+sg), vform=finite, inv=y, takes_advp=y, Feats] --> ['wasn''t' )).

macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, past] | Sem], agr=(2+pl), vform=finite, inv=n, takes_advp=y, Feats] --> [( ( were, not ) ; 'weren''t' ) )).
macro(be_verb(Sem, Feats),
      ( v:[sem=[[polarity, negative], [tense, past] | Sem], agr=(2+pl), vform=finite, inv=y, takes_advp=y, Feats] --> ['weren''t' )).

macro(frequency_np(Sem, Surface),
      (np:[sem=[[frequency, Sem]], agr=3, wh=n, sem_n_type=timeunit, takes_post_mods=y, takes_frequency_pp=y,
	   gapsin=GIn, gapsout=GIn, pronoun=n] --> [Surface)).


% Macros for writing lexicon entries in general English grammar

%==========================================================================

% Name
%
% @name((john, smith), [john_smith], [agent], sg, []).

macro(name(SurfaceForm, [SemConstant], [SortalType], Agr, OtherFeats),
      ( name:[sem = @name_sem(SemConstant),
	   agr = Agr,
	   sem_n_type = SortalType |
	  OtherFeats] --> [SurfaceForm )).

%==========================================================================

% Standard macros for nouns

%----------------------------------------------------------

% Noun with both singular and plal forms
%
% @noun([headache, headaches],
%       [symptom, headache], [symptom], [takes_det_type=null+def+indef, takes_loc_pp=y]).

macro(noun(SurfaceForms, [SemType, SemConstant], [SortalType], OtherFeats),
      @noun(SurfaceForms,
	    [sem = @noun_sem(SemType, SemConstant),
	     sem_n_type = SortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Noun with just singular or just plal
%
% @uninflected_noun(work,
%                   [loc, work], [loc], sg, [takes_det_type=null]).

macro(uninflected_noun(SurfaceForm, [SemType, SemConstant], [SortalType], Agr, OtherFeats),
      ( n:[sem = @noun_sem(SemType, SemConstant),
	   agr = Agr,
	   sem_n_type = SortalType |
	  OtherFeats] --> [SurfaceForm )).

%==========================================================================

% Standard macro for adjectives
%
% @adjective(severe, [degree, severe], [symptom], [adjpos=prenom+pred]).

macro(adjective(SurfaceForm, [SemType, SemConstant], [SortalType], OtherFeats),
      ( adj:[sem= @adj_sem(SemType, SemConstant),
	     subj_sem_n_type=SortalType |
	    OtherFeats] --> [SurfaceForm)).

%==========================================================================

% Standard macro for adverbs
%
% @adverb(always, [freq, always], [temporal], [advpos=prev+postv])

macro(adverb(SurfaceForm, [SemType, SemConstant], [SortalType], OtherFeats),
      ( adv:[sem= @adv_sem(SemType, SemConstant),
	     adv_type=SortalType |
	    OtherFeats] --> [SurfaceForm)).

%==========================================================================

% Standard macro for prepositions
%
% @preposition(in, in_loc, [loc, body_part], []).

macro(preposition(SurfaceForm, SemConstant, [SemPPType, NPSortalType], OtherFeats),
      ( p:[sem = @prep_sem(SemConstant),
	   sem_pp_type = SemPPType,
	   obj_sem_n_type = NPSortalType |
	  OtherFeats] --> [SurfaceForm)).

%==========================================================================

% Standard macro for subordinating conjunctions
%
% @sc(if, if, [time], (s+vp), []).

macro(sc(SurfaceForm, SemConstant, [SemPPType], SCSType, OtherFeats),
      ( sc:[sem = @sc_sem(SemConstant),
	   sem_pp_type = SemPPType,
	   sc_s_type = SCSTypeSCSType |
	  OtherFeats] --> [SurfaceForm)).

%==========================================================================

% Standard macro for WH- lexical PPs
%
% @lexical_pp((at, home), [loc, at_home], [loc], [])

macro(lexical_pp(SurfaceForm, [SemType, SemConstant], [SortalType], OtherFeats),
      ( pp:[sem= [ @pp_sem(SemType, SemConstant)],
	    sem_pp_type=SortalType,
	    gapsin=Gaps, gapsout=Gaps,
	    wh=n |
	    OtherFeats] --> [SurfaceForm)).

%==========================================================================

% Standard macro for WH+ lexical PPs
%
% @wh_pp(where, [loc, where], [loc], [])

macro(wh_pp(SurfaceForm, [SemType, SemConstant], [SortalType], OtherFeats),
      ( pp:[sem= [ @wh_pp_sem(SemType, SemConstant)],
	    sem_pp_type=SortalType,
	    gapsin=Gaps, gapsout=Gaps,
	    wh=y |
	    OtherFeats] --> [SurfaceForm)).

%==========================================================================

% Standard macros for verbs

%----------------------------------------------------------

% Intransitive
% e.g. "John sleeps"
%
% @v_intransitive([sleep, sleeps, slept, slept, sleeping],
%                 [action, sleep], [agent], [takes_time_pp=y, takes_frequency_pp=y, takes_duration_pp=y]).

macro(v_intransitive(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0v,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Transitive
% e.g. "John drinks coffee" or "coffee is drunk by John"
%
% @v_transitive([drink, drinks, drank, drunk, drinking],
%               [action, drink], [agent, substance], [takes_time_pp=y, takes_duration_pp=y]).

macro(v_transitive(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Transitive without passive
% e.g. "John has fever" BUT NOT "fever is had by John"
%
% @v_transitive_no_passive([has, have, had, had, having],
%                          [state, have_symptom], [agent, symptom], [takes_time_pp=y, takes_duration_pp=y]).

macro(v_transitive_no_passive(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1_no_passive,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking measure NP
% e.g. "John ran 1000 metres"
%
% @v_measure([run, runs, ran, ran, running],
%               [action, run_distance], [agent, distance], [takes_time_pp=y]).

macro(v_measure(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1_measure,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Ditransitive
% e.g. "bright light gives you headaches" or "you are given headaches by bright light"
%
% @v_ditransitive([give, gives, gave, given, giving],
%                 [action, give], [cause+action, symptom, agent], [])

macro(v_ditransitive(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType, IndObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1x2,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType,
	     indobj_sem_n_type=IndObjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking PP complement
% e.g. "the pain radiates to the shoulder"
%
% @v_pp([radiate, radiates, radiated, radiated, radiating],
%       [state, radiate], [symptom, to], [can_be_gerund=n])

macro(v_pp(SurfaceForms, [SemType, SemConstant], [SubjSortalType, PPSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vpnx1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     pp_sem_pp_type=PPSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking ADJ complement
% e.g. "the pain becomes worse"
%
% @v_adj([become, becomes, became, became, becoming],
%        [event, become], [symptom], [])

macro(v_adj(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0va1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking object and particle
% e.g. "you switch on the light", or "you switch the light on"
%
% v_object_particle([switch, switches, switched, switched, switching],
%                   [action, switch], [agent, switchable, onoff], [takes_loc_pp=y]).

macro(v_object_particle(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType, ParticleType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1pl+nx0vplnx1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType,
	     sem_p_type=ParticleType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking object and PP,
% e.g. "you associate the pain with bright light" or "the pain is associated with bright light"
%
% @v_object_pp([associate, associates, associated, associated, associating],
%              [action, associate_with], [agent, cause+symptom, with], [])

macro(v_object_pp(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType, PPSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1pnx2,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType,
	     pp_sem_pp_type=PPSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking object and ADJ,
% e.g. "bright light makes the pain worse" or "the pain is made worse by bright light"
%
% @v_object_adj([make, makes, made, made, making],
%               [event, make_adj], [cause+action, agent+symptom], [])

macro(v_object_adj(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vx1a1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% (Nonmodal) verb taking ing-VP,
% e.g. "John stopped sleeping"
%
% @v_vp_ing([stop, stops, stopped, stopped, stopping], [state, stop_doing], [_AnyAgent], []).

macro(v_vp_ing(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vvx1_nonmodal,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     vp_vform=ing |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking to-VP,
% e.g. "John wants to sleep"
%
% @v_to_vp([want, wants, wanted, wanted, wanting], [state, want_to], [agent], []).

macro(v_to_vp(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vvx1_to,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking object and to-VP,
% e.g. "John allowed Mary to sleep"
%
% Don't allow post-mods here -
% if we do, we get bad problems with ambiguity and UG -> CFG compilation
% Not completely correct to block it, but cases where you require the post-mod
% to attach to the higher verb are rare, and usually it makes no difference anyway].
%
% @v_object_to_vp([allow, allows, allowed, allowed, allowing], [event, allow_to], [agent, agent], []).

macro(v_object_to_vp(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0x1vx2_to,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType,
	     vp_vform= @infinitive,
	     @takes_no_pps |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking clause,
% e.g. "John says he loves Mary"
%
% @v_clause([say, says, said, said, saying], [action, say_that], [agent], []).

macro(v_clause(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vs1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking embedded question,
% e.g. "John wonders whether Mary loves him"
%
% @v_question([wonder, wonders, wondered, wondered, wondering], [state, wonder], [agent], []).

macro(v_question(SurfaceForms, [SemType, SemConstant], [SubjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vsq1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% Verb taking object and embedded question,
% e.g. "John asked Mary whether she loved him"
%
% @v_object_question([ask, asks, asked, asked, asking], [action, ask_if], [agent, agent], []).

macro(v_object_question(SurfaceForms, [SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @verb(SurfaceForms,
	    [ @verb_sem(SemType, SemConstant)],
	    [subcat=nx0vnx1sq1,
	     inv= @default_inv,
	     subj_sem_n_type=SubjSortalType,
	     obj_sem_n_type=ObjSortalType |
	    OtherFeats])).

%----------------------------------------------------------

% "Be" taking an NP
% e.g. "it is a sharp pain" or "what are your activities"
%
% @be_np([verb, be], [behavior+finding, behavior+finding+time+degree+symptom], []).

macro(be_np([SemType, SemConstant], [SubjSortalType, ObjSortalType], OtherFeats),
      @be_verb([ @verb_sem(SemType, SemConstant)],
	       [subcat=nx0vnx1_be,
		subj_sem_n_type=SubjSortalType,
		obj_sem_n_type=ObjSortalType |
	       OtherFeats])).

%----------------------------------------------------------

% "Be" taking an ADJP
% e.g. "the pain is sharp"
%
% @be_adj([verb, be], [_AnySubjType], [takes_loc_pp=y, takes_time_pp=y]).

macro(be_adj([SemType, SemConstant], [SubjSortalType], OtherFeats),
      @be_verb([ @verb_sem(SemType, SemConstant)],
	       [subcat=nx0va1,
		subj_sem_n_type=SubjSortalType |
	       OtherFeats])).

%----------------------------------------------------------

% "Be" taking a PP
% e.g. "the pain is in the head" or "when you are at home"
%
% @be_pp([verb, be], [symptom+quant+agent, loc+time], []).

macro(be_pp([SemType, SemConstant], [SubjSortalType, PPSortalType], OtherFeats),
      @be_verb([ @verb_sem(SemType, SemConstant)],
	       [subcat=nx0vpnx1,
		subj_sem_n_type=SubjSortalType,
		pp_sem_pp_type=PPSortalType |
	       OtherFeats])).


include('$REGULUS/Grammar/Scandinavian/gen_lex.regulus').
include('$REGULUS/Grammar/Scandinavian/gen_content_word_macros.regulus').
include('$REGULUS/Grammar/Scandinavian/English/eng_content_word_macros.regulus').

macro(thing_type, (\(agent+numeric+date+time+unit+timeunit+frequency+none))).



