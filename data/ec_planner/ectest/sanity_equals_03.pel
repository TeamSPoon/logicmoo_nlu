:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
 %  loading(load_e_pl,'sanity_equals_03.e').

% predicate Neighbor(position,position)
predicate(neighbor(Neighbor_Param,Neighbor_Ret)).
==> mpred_prop(neighbor(position,position),predicate).
==> meta_argtypes(neighbor(position,position)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/sanity_equals_03.e:3
% [position1,position2]
% Neighbor(position1,position2) <-
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).

 /*  axiom_head(Axiom_head_Ret) ->
       (   Position1=1,
           Position2=2
       ;   Position1=1,
           Position2=3
       ;   Position1=1,
           Position2=4
       ;   Position1=2,
           Position2=3
       ;   Position1=2,
           Position2=4
       ;   Position1=3,
           Position2=4
       ;   Position1=5,
           Position2=6
       ;   Position1=5,
           Position2=7
       ;   Position1=5,
           Position2=8
       ;   Position1=6,
           Position2=7
       ;   Position1=6,
           Position2=8
       ;   Position1=7,
           Position2=8
       ;   Position2=1,
           Position1=2
       ;   Position2=1,
           Position1=3
       ;   Position2=1,
           Position1=4
       ;   Position2=2,
           Position1=3
       ;   Position2=2,
           Position1=4
       ;   Position2=3,
           Position1=4
       ;   Position2=5,
           Position1=6
       ;   Position2=5,
           Position1=7
       ;   Position2=5,
           Position1=8
       ;   Position2=6,
           Position1=7
       ;   Position2=6,
           Position1=8
       ;   Position2=7,
           Position1=8
       ;   Position1=4,
           Position2=7
       ;   Position2=4,
           Position1=7
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   call(Position1=1),
           call(Position2=2)
       ;   call(Position1=1),
           call(Position2=3)
       ;   call(Position1=1),
           call(Position2=4)
       ;   call(Position1=2),
           call(Position2=3)
       ;   call(Position1=2),
           call(Position2=4)
       ;   call(Position1=3),
           call(Position2=4)
       ;   call(Position1=5),
           call(Position2=6)
       ;   call(Position1=5),
           call(Position2=7)
       ;   call(Position1=5),
           call(Position2=8)
       ;   call(Position1=6),
           call(Position2=7)
       ;   call(Position1=6),
           call(Position2=8)
       ;   call(Position1=7),
           call(Position2=8)
       ;   call(Position2=1),
           call(Position1=2)
       ;   call(Position2=1),
           call(Position1=3)
       ;   call(Position2=1),
           call(Position1=4)
       ;   call(Position2=2),
           call(Position1=3)
       ;   call(Position2=2),
           call(Position1=4)
       ;   call(Position2=3),
           call(Position1=4)
       ;   call(Position2=5),
           call(Position1=6)
       ;   call(Position2=5),
           call(Position1=7)
       ;   call(Position2=5),
           call(Position1=8)
       ;   call(Position2=6),
           call(Position1=7)
       ;   call(Position2=6),
           call(Position1=8)
       ;   call(Position2=7),
           call(Position1=8)
       ;   call(Position1=4),
           call(Position2=7)
       ;   call(Position2=4),
           call(Position1=7)
       ).
 */

 /*  [(call(Position1=1), call(Position2=2);call(Position1=1), call(Position2=3);call(Position1=1), call(Position2=4);call(Position1=2), call(Position2=3);call(Position1=2), call(Position2=4);call(Position1=3), call(Position2=4);call(Position1=5), call(Position2=6);call(Position1=5), call(Position2=7);call(Position1=5), call(Position2=8);call(Position1=6), call(Position2=7);call(Position1=6), call(Position2=8);call(Position1=7), call(Position2=8);call(Position2=1), call(Position1=2);call(Position2=1), call(Position1=3);call(Position2=1), call(Position1=4);call(Position2=2), call(Position1=3);call(Position2=2), call(Position1=4);call(Position2=3), call(Position1=4);call(Position2=5), call(Position1=6);call(Position2=5), call(Position1=7);call(Position2=5), call(Position1=8);call(Position2=6), call(Position1=7);call(Position2=6), call(Position1=8);call(Position2=7), call(Position1=8);call(Position1=4), call(Position2=7);call(Position2=4), call(Position1=7))] ->
       ta(Axiom_head_Ret, neighbor(Position1, Position2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/sanity_equals_03.e:30
axiom(neighbor(Position1, Position2),
   
    [  (call(Position1=1), call(Position2=2);call(Position1=1), call(Position2=3);call(Position1=1), call(Position2=4);call(Position1=2), call(Position2=3);call(Position1=2), call(Position2=4);call(Position1=3), call(Position2=4);call(Position1=5), call(Position2=6);call(Position1=5), call(Position2=7);call(Position1=5), call(Position2=8);call(Position1=6), call(Position2=7);call(Position1=6), call(Position2=8);call(Position1=7), call(Position2=8);call(Position2=1), call(Position1=2);call(Position2=1), call(Position1=3);call(Position2=1), call(Position1=4);call(Position2=2), call(Position1=3);call(Position2=2), call(Position1=4);call(Position2=3), call(Position1=4);call(Position2=5), call(Position1=6);call(Position2=5), call(Position1=7);call(Position2=5), call(Position1=8);call(Position2=6), call(Position1=7);call(Position2=6), call(Position1=8);call(Position2=7), call(Position1=8);call(Position1=4), call(Position2=7);call(Position2=4), call(Position1=7))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/sanity_equals_03.e:34
%; Prolog code starts with ;:-
:- include(sanity_equals_01_extra).

