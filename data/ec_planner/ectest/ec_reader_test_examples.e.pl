:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
 %  loading(always,'ectest/ec_reader_test_examples.e').
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Holding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% option encoding 3
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% load foundations/EC.e

% sort person
==> sort(person).

% sort object
==> sort(object).

% event Hold(person,object)
 %  event(hold(person,object)).
==> mpred_prop(hold(person,object),event).
==> meta_argtypes(hold(person,object)).

% fluent Holding(person,object)
 %  fluent(holding(person,object)).
==> mpred_prop(holding(person,object),fluent).
==> meta_argtypes(holding(person,object)).

% person P1
==> t(person,p1).

% object O1
==> t(object,o1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:41
% Happens(Hold(P1,O1),0).
axiom(happens(hold(p1, o1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:43
% [person,object,time]
% Initiates(Hold(person,object),Holding(person,object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:44
axiom(initiates(hold(Person, Object), holding(Person, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:46
% !HoldsAt(Holding(P1,O1),0).
 %  not(initially(holding(p1,o1))).
axiom(not(initially(holding(p1, o1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:47
%;;; AUTO !ReleasedAt(Holding(P1,O1),0).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:49
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:50
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:52
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:53
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:82
% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:83
:- set_ec_option(trajectory, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:85
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:87
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:88
==> sort(object).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:89
==> subsort(height,integer).

% fluent Height(object,height)
 %  fluent(height(object,height)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:91
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% fluent Falling(object)
 %  fluent(falling(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:92
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% event StartFalling(object)
 %  event(startFalling(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:93
==> mpred_prop(startFalling(object),event).
==> meta_argtypes(startFalling(object)).

% event HitsGround(object)
 %  event(hitsGround(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:94
==> mpred_prop(hitsGround(object),event).
==> meta_argtypes(hitsGround(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:95
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:98
axiom(Height1=Height2,
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(height(Object, Height2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:100
% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:101
axiom(initiates(startFalling(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:103
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:104
axiom(releases(startFalling(Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:106
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset*offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:109
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset*Offset)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:111
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:114
axiom(happens(hitsGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:116
%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:122
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:123
axiom(initiates(hitsGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:125
% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:126
axiom(terminates(hitsGround(Object), falling(Object), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:128
% object Leaf
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:129
==> t(object,leaf).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:130
% !HoldsAt(Falling(Leaf),0).
 %  not(initially(falling(leaf))).
axiom(not(initially(falling(leaf))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:131
% HoldsAt(Height(Leaf,9),0).
axiom(initially(height(leaf, 9)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:132
% Happens(StartFalling(Leaf),0).
axiom(happens(startFalling(leaf), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:134
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:135
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:137
==> range(time,0,4).

% range offset 1 9
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:138
==> range(offset,1,9).

% range height 0 9
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:139
==> range(height,0,9).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:167
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:168
==> sort(object).

% sort xcoord: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:169
==> subsort(xcoord,integer).

% sort ycoord: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:170
==> subsort(ycoord,integer).

% sort grid
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:171
==> sort(grid).

% sort shape
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:172
==> sort(shape).

% sort color
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:173
==> sort(color).
%; constants

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:175
% shape Round,Square
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:176
==> t(shape,round).
==> t(shape,square).

% color Red,Green
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:177
==> t(color,red).
==> t(color,green).
%; predicates, fluents, and events

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:179
% predicate Equal(object,object)
 %  predicate(equal(object,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:180
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% predicate Shape(object,shape)
 %  predicate(shape(object,shape)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:181
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% predicate Color(object,color)
 %  predicate(color(object,color)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:182
==> mpred_prop(color(object,color),predicate).
==> meta_argtypes(color(object,color)).

% fluent Location(grid,object,xcoord,ycoord)
 %  fluent(location(grid,object,xcoord,ycoord)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:183
==> mpred_prop(location(grid,object,xcoord,ycoord),fluent).
==> meta_argtypes(location(grid,object,xcoord,ycoord)).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
 %  event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:184
==> mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).
==> meta_argtypes(move(grid,object,xcoord,ycoord,xcoord,ycoord)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:185
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:187
axiom(equal(Object2, Object1),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:189
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:192
axiom(Shape1=Shape2,
    [shape(Object, Shape1), shape(Object, Shape2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:194
%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:197
axiom(Color1=Color2,
    [color(Object, Color1), color(Object, Color2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:199
%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).

 /*   if(equal(Object1, Object2),
         exists([Shape],
                 (shape(Object1, Shape), shape(Object2, Shape)))).
 */

 /*  not(equal(Equal_Param, Shape_Param)) :-
       (   not(shape(Equal_Param, Shape_Ret))
       ;   not(shape(Shape_Param, Shape_Ret))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:202
axiom(not(equal(Equal_Param, Shape_Param)),
    [not(shape(Equal_Param, Shape_Ret))]).
axiom(not(equal(Equal_Param, Shape_Param)),
    [not(shape(Shape_Param, Shape_Ret))]).

 /*  shape(Shape_Param6, Shape_Ret7) :-
       equal(Shape_Param6, Equal_Ret).
 */
axiom(shape(Shape_Param6, Shape_Ret7),
    [equal(Shape_Param6, Equal_Ret)]).

 /*  shape(Shape_Param9, Shape_Ret11) :-
       equal(Equal_Param10, Shape_Param9).
 */
axiom(shape(Shape_Param9, Shape_Ret11),
    [equal(Equal_Param10, Shape_Param9)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:204
%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).

 /*   if(equal(Object1, Object2),
         exists([Color],
                 (color(Object1, Color), color(Object2, Color)))).
 */

 /*  not(equal(Equal_Param, Color_Param)) :-
       (   not(color(Equal_Param, Color_Ret))
       ;   not(color(Color_Param, Color_Ret))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:207
axiom(not(equal(Equal_Param, Color_Param)),
    [not(color(Equal_Param, Color_Ret))]).
axiom(not(equal(Equal_Param, Color_Param)),
    [not(color(Color_Param, Color_Ret))]).

 /*  color(Color_Param6, Color_Ret7) :-
       equal(Color_Param6, Equal_Ret).
 */
axiom(color(Color_Param6, Color_Ret7),
    [equal(Color_Param6, Equal_Ret)]).

 /*  color(Color_Param9, Color_Ret11) :-
       equal(Equal_Param10, Color_Param9).
 */
axiom(color(Color_Param9, Color_Ret11),
    [equal(Equal_Param10, Color_Param9)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:209
%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).

 /*   if(equal(Object1, Object2),
         if((holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)),
             (Xcoord1=Xcoord2, Ycoord1=Ycoord2))).
 */

 /*  not(equal(Equal_Param, Equal_Ret)) :-
       ( holds_at(location(Location_Param,
                           Equal_Param,
                           Equals_Param,
                           Equals_Param12),
                  Time8),
         holds_at(location(Location_Param,
                           Equal_Ret,
                           Equals_Ret,
                           Location_Ret),
                  Time8)
       ),
       (   not(equals(Equals_Param, Equals_Ret))
       ;   not(equals(Equals_Param12, Location_Ret))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:214
axiom(not(equal(Equal_Param, Equal_Ret)),
   
    [ not(equals(Equals_Param, Equals_Ret)),
      holds_at(location(Location_Param,
                        Equal_Param,
                        Equals_Param,
                        Equals_Param12),
               Time8),
      holds_at(location(Location_Param,
                        Equal_Ret,
                        Equals_Ret,
                        Location_Ret),
               Time8)
    ]).
axiom(not(equal(Equal_Param, Equal_Ret)),
   
    [ not(equals(Equals_Param12, Location_Ret)),
      holds_at(location(Location_Param,
                        Equal_Param,
                        Equals_Param,
                        Equals_Param12),
               Time8),
      holds_at(location(Location_Param,
                        Equal_Ret,
                        Equals_Ret,
                        Location_Ret),
               Time8)
    ]).

 /*  not(holds_at(location(Location_Param17, Equal_Param20, Equals_Param18, Equals_Param19), Time16)) :-
       holds_at(location(Location_Param17,
                         Equal_Ret23,
                         Equals_Ret22,
                         Location_Ret21),
                Time16),
       (   not(equals(Equals_Param18, Equals_Ret22))
       ;   not(equals(Equals_Param19, Location_Ret21))
       ),
       equal(Equal_Param20, Equal_Ret23).
 */
axiom(not(holds_at(location(Location_Param17, Equal_Param20, Equals_Param18, Equals_Param19), Time16)),
   
    [ not(equals(Equals_Param18, Equals_Ret22)),
      holds_at(location(Location_Param17,
                        Equal_Ret23,
                        Equals_Ret22,
                        Location_Ret21),
               Time16),
      equal(Equal_Param20, Equal_Ret23)
    ]).
axiom(not(holds_at(location(Location_Param17, Equal_Param20, Equals_Param18, Equals_Param19), Time16)),
   
    [ not(equals(Equals_Param19, Location_Ret21)),
      holds_at(location(Location_Param17,
                        Equal_Ret23,
                        Equals_Ret22,
                        Location_Ret21),
               Time16),
      equal(Equal_Param20, Equal_Ret23)
    ]).

 /*  not(holds_at(location(Location_Param25, Equal_Ret31, Equals_Ret30, Location_Ret29), Time24)) :-
       holds_at(location(Location_Param25,
                         Equal_Param28,
                         Equals_Param26,
                         Equals_Param27),
                Time24),
       (   not(equals(Equals_Param26, Equals_Ret30))
       ;   not(equals(Equals_Param27, Location_Ret29))
       ),
       equal(Equal_Param28, Equal_Ret31).
 */
axiom(not(holds_at(location(Location_Param25, Equal_Ret31, Equals_Ret30, Location_Ret29), Time24)),
   
    [ not(equals(Equals_Param26, Equals_Ret30)),
      holds_at(location(Location_Param25,
                        Equal_Param28,
                        Equals_Param26,
                        Equals_Param27),
               Time24),
      equal(Equal_Param28, Equal_Ret31)
    ]).
axiom(not(holds_at(location(Location_Param25, Equal_Ret31, Equals_Ret30, Location_Ret29), Time24)),
   
    [ not(equals(Equals_Param27, Location_Ret29)),
      holds_at(location(Location_Param25,
                        Equal_Param28,
                        Equals_Param26,
                        Equals_Param27),
               Time24),
      equal(Equal_Param28, Equal_Ret31)
    ]).

 /*  equals(Equals_Param33, Equals_Ret36) :-
       ( holds_at(location(Location_Param34,
                           Equal_Param35,
                           Equals_Param33,
                           Location_Ret37),
                  Time32),
         holds_at(location(Location_Param34,
                           Equal_Ret39,
                           Equals_Ret36,
                           Location_Ret38),
                  Time32)
       ),
       equal(Equal_Param35, Equal_Ret39).
 */
axiom(equals(Equals_Param33, Equals_Ret36),
   
    [ holds_at(location(Location_Param34,
                        Equal_Param35,
                        Equals_Param33,
                        Location_Ret37),
               Time32),
      holds_at(location(Location_Param34,
                        Equal_Ret39,
                        Equals_Ret36,
                        Location_Ret38),
               Time32),
      equal(Equal_Param35, Equal_Ret39)
    ]).

 /*  equals(Equals_Param41, Equals_Ret44) :-
       ( holds_at(location(Location_Param42,
                           Equal_Param43,
                           _,
                           Equals_Param41),
                  Time40),
         holds_at(location(Location_Param42,
                           Equal_Ret45,
                           _,
                           Equals_Ret44),
                  Time40)
       ),
       equal(Equal_Param43, Equal_Ret45).
 */
axiom(equals(Equals_Param41, Equals_Ret44),
   
    [ holds_at(location(Location_Param42,
                        Equal_Param43,
                        _,
                        Equals_Param41),
               Time40),
      holds_at(location(Location_Param42,
                        Equal_Ret45,
                        _,
                        Equals_Ret44),
               Time40),
      equal(Equal_Param43, Equal_Ret45)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:216
%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.

 /*   if((holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time)),
          (Xcoord1=Xcoord2, Ycoord1=Ycoord2)).
 */

 /*  not(holds_at(location(Location_Param, A, Equals_Param, Equals_Param10), Time7)) :-
       holds_at(location(Location_Param,
                         A,
                         Equals_Ret,
                         Location_Ret),
                Time7),
       (   not(equals(Equals_Param, Equals_Ret))
       ;   not(equals(Equals_Param10, Location_Ret))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:220
axiom(not(holds_at(location(Location_Param, A, Equals_Param, Equals_Param10), Time7)),
   
    [ not(equals(Equals_Param, Equals_Ret)),
      holds_at(location(Location_Param,
                        A,
                        Equals_Ret,
                        Location_Ret),
               Time7)
    ]).
axiom(not(holds_at(location(Location_Param, A, Equals_Param, Equals_Param10), Time7)),
   
    [ not(equals(Equals_Param10, Location_Ret)),
      holds_at(location(Location_Param,
                        A,
                        Equals_Ret,
                        Location_Ret),
               Time7)
    ]).

 /*  not(holds_at(location(Location_Param14, A, Equals_Ret18, Location_Ret17), Time13)) :-
       holds_at(location(Location_Param14,
                         A,
                         Equals_Param15,
                         Equals_Param16),
                Time13),
       (   not(equals(Equals_Param15, Equals_Ret18))
       ;   not(equals(Equals_Param16, Location_Ret17))
       ).
 */
axiom(not(holds_at(location(Location_Param14, A, Equals_Ret18, Location_Ret17), Time13)),
   
    [ not(equals(Equals_Param15, Equals_Ret18)),
      holds_at(location(Location_Param14,
                        A,
                        Equals_Param15,
                        Equals_Param16),
               Time13)
    ]).
axiom(not(holds_at(location(Location_Param14, A, Equals_Ret18, Location_Ret17), Time13)),
   
    [ not(equals(Equals_Param16, Location_Ret17)),
      holds_at(location(Location_Param14,
                        A,
                        Equals_Param15,
                        Equals_Param16),
               Time13)
    ]).

 /*  equals(Equals_Param20, Equals_Ret22) :-
       holds_at(location(Location_Param21,
                         A,
                         Equals_Param20,
                         Location_Ret23),
                Time19),
       holds_at(location(Location_Param21,
                         A,
                         Equals_Ret22,
                         Location_Ret24),
                Time19).
 */
axiom(equals(Equals_Param20, Equals_Ret22),
   
    [ holds_at(location(Location_Param21,
                        A,
                        Equals_Param20,
                        Location_Ret23),
               Time19),
      holds_at(location(Location_Param21,
                        A,
                        Equals_Ret22,
                        Location_Ret24),
               Time19)
    ]).

 /*  equals(Equals_Param26, Equals_Ret28) :-
       holds_at(location(Location_Param27,
                         A,
                         _,
                         Equals_Param26),
                Time25),
       holds_at(location(Location_Param27,
                         A,
                         _,
                         Equals_Ret28),
                Time25).
 */
axiom(equals(Equals_Param26, Equals_Ret28),
   
    [ holds_at(location(Location_Param27,
                        A,
                        _,
                        Equals_Param26),
               Time25),
      holds_at(location(Location_Param27,
                        A,
                        _,
                        Equals_Ret28),
               Time25)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:222
%; objects have locations
% [grid,object,time]
% (
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:224
% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).

 /*  exists([Xcoord,Ycoord],
          holds_at(location(Grid,
   			 Object,
   			 Xcoord,
   			 Ycoord),
   		Time)).
 */
axiom(holds_at(location(Location_Param, _, _, Location_Ret), Time5),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:226
%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:230
axiom(equal(Object1, Object2),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:232
%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:236
axiom(initiates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord2, Ycoord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:238
%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:241
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:243
axiom(terminates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord1, Ycoord1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:245
%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:258
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:261
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ equals(Ycoord1, Ycoord2+1),
      equals(Xcoord1, Xcoord2),
      holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ equals(Ycoord1, Ycoord2-1),
      equals(Xcoord1, Xcoord2),
      holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ equals(Xcoord1, Xcoord2+1),
      equals(Ycoord1, Ycoord2),
      holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ equals(Xcoord1, Xcoord2-1),
      equals(Ycoord1, Ycoord2),
      holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:263
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:289
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:291
% load examples/Cassimatis2002/PolySpace.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:293
% grid G1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:294
==> t(grid,g1).

% object X,Y,Screen1,Screen2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:295
==> t(object,x).
==> t(object,y).
==> t(object,screen1).
==> t(object,screen2).
%; perceptions:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:297
% Shape(X,Round).
shape(x,round).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:298
% Color(X,Red).
color(x,red).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:299
% Shape(Y,Round).
shape(y,round).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:300
% Color(Y,Red).
color(y,red).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:301
% Shape(Screen1,Square).
shape(screen1,square).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:302
% Color(Screen1,Green).
color(screen1,green).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:303
% Shape(Screen2,Square).
shape(screen2,square).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:304
% Color(Screen2,Green).
color(screen2,green).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:305
% [time]
 % HoldsAt(Location(G1,Screen1,2,0),time).
holds_at(location(g1,screen1,2,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:306
% [time]
 % HoldsAt(Location(G1,Screen2,4,0),time).
holds_at(location(g1,screen2,4,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:307
% HoldsAt(Location(G1,X,1,1),0).
axiom(initially(location(g1, x, 1, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:308
% HoldsAt(Location(G1,Y,5,1),4).
holds_at(location(g1,y,5,1),4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:310
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=5 & ycoord=1 & time=4 & Equal(X,Y).

 /*   if(({dif(Xcoord, 2)}, {dif(Xcoord, 4)}, (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))),
          (not(holds_at(location(g1, x, Xcoord, Ycoord), Time));Xcoord=5, Ycoord=1, Time=4, equal(x, y))).
 */

 /*  not({dif(X, 2)}) :-
       ( { dif(X, 4)
         },
         (   not(equals(X, 1))
         ;   not(equals(Equals_Param, 1))
         ;   not(equals(Time4, 0))
         )
       ),
       holds_at(location(g1, x, X, Equals_Param), Time4),
       (   not(equals(X, 5))
       ;   not(equals(Equals_Param, 1))
       ;   not(equals(Time4, 4))
       ;   not(equal(x, y))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:313
axiom(not({dif(X, 2)}),
   
    [ not(equals(X, 5)),
      not(equals(X, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(X, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Time4, 4)),
      not(equals(X, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equal(x, y)),
      not(equals(X, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(X, 5)),
      not(equals(Equals_Param, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Equals_Param, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Time4, 4)),
      not(equals(Equals_Param, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Equals_Param, 1)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(X, 5)),
      not(equals(Time4, 0)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Time4, 0)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Time4, 4)),
      not(equals(Time4, 0)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Time4, 0)),
      { dif(X, 4)
      },
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).

 /*  not({dif(X6, 4)}) :-
       (   not(equals(X6, 1))
       ;   not(equals(Equals_Param8, 1))
       ;   not(equals(Time7, 0))
       ),
       { dif(X6, 2)
       },
       holds_at(location(g1, x, X6, Equals_Param8), Time7),
       (   not(equals(X6, 5))
       ;   not(equals(Equals_Param8, 1))
       ;   not(equals(Time7, 4))
       ;   not(equal(x, y))
       ).
 */
axiom(not({dif(X6, 4)}),
   
    [ not(equals(X6, 5)),
      not(equals(X6, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(Equals_Param8, 1)),
      not(equals(X6, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(Time7, 4)),
      not(equals(X6, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equal(x, y)),
      not(equals(X6, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(X6, 5)),
      not(equals(Equals_Param8, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(Equals_Param8, 1)),
      not(equals(Equals_Param8, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(Time7, 4)),
      not(equals(Equals_Param8, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equal(x, y)),
      not(equals(Equals_Param8, 1)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(X6, 5)),
      not(equals(Time7, 0)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(Equals_Param8, 1)),
      not(equals(Time7, 0)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equals(Time7, 4)),
      not(equals(Time7, 0)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(not({dif(X6, 4)}),
   
    [ not(equal(x, y)),
      not(equals(Time7, 0)),
      { dif(X6, 2)
      },
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).

 /*  equals(X9, 1) :-
       { dif(X9, 4)
       },
       { dif(X9, 2)
       },
       holds_at(location(g1, x, X9, Equals_Param11), Time10),
       (   not(equals(X9, 5))
       ;   not(equals(Equals_Param11, 1))
       ;   not(equals(Time10, 4))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(X9, 1),
   
    [ not(equals(X9, 5)),
      dif(X9, 4),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).
axiom(equals(X9, 1),
   
    [ not(equals(Equals_Param11, 1)),
      dif(X9, 4),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).
axiom(equals(X9, 1),
   
    [ not(equals(Time10, 4)),
      dif(X9, 4),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).
axiom(equals(X9, 1),
   
    [ not(equal(x, y)),
      dif(X9, 4),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).

 /*  equals(Equals_Param14, 1) :-
       { dif(X12, 4)
       },
       { dif(X12, 2)
       },
       holds_at(location(g1, x, X12, Equals_Param14), Time13),
       (   not(equals(X12, 5))
       ;   not(equals(Equals_Param14, 1))
       ;   not(equals(Time13, 4))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Equals_Param14, 1),
   
    [ not(equals(X12, 5)),
      dif(X12, 4),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).
axiom(equals(Equals_Param14, 1),
   
    [ not(equals(Equals_Param14, 1)),
      dif(X12, 4),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).
axiom(equals(Equals_Param14, 1),
   
    [ not(equals(Time13, 4)),
      dif(X12, 4),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).
axiom(equals(Equals_Param14, 1),
   
    [ not(equal(x, y)),
      dif(X12, 4),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).

 /*  equals(Time16, 0) :-
       { dif(X15, 4)
       },
       { dif(X15, 2)
       },
       holds_at(location(g1, x, X15, Equals_Param17), Time16),
       (   not(equals(X15, 5))
       ;   not(equals(Equals_Param17, 1))
       ;   not(equals(Time16, 4))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Time16, 0),
   
    [ not(equals(X15, 5)),
      dif(X15, 4),
      dif(X15, 2),
      holds_at(location(g1, x, X15, Equals_Param17), Time16)
    ]).
axiom(equals(Time16, 0),
   
    [ not(equals(Equals_Param17, 1)),
      dif(X15, 4),
      dif(X15, 2),
      holds_at(location(g1, x, X15, Equals_Param17), Time16)
    ]).
axiom(equals(Time16, 0),
   
    [ not(equals(Time16, 4)),
      dif(X15, 4),
      dif(X15, 2),
      holds_at(location(g1, x, X15, Equals_Param17), Time16)
    ]).
axiom(equals(Time16, 0),
   
    [ not(equal(x, y)),
      dif(X15, 4),
      dif(X15, 2),
      holds_at(location(g1, x, X15, Equals_Param17), Time16)
    ]).

 /*  not(holds_at(location(g1, x, X18, Equals_Param20), Time19)) :-
       (   not(equals(X18, 5))
       ;   not(equals(Equals_Param20, 1))
       ;   not(equals(Time19, 4))
       ;   not(equal(x, y))
       ),
       { dif(X18, 2)
       },
       { dif(X18, 4)
       },
       (   not(equals(X18, 1))
       ;   not(equals(Equals_Param20, 1))
       ;   not(equals(Time19, 0))
       ).
 */
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(X18, 1)),
      not(equals(X18, 5)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equals(X18, 5)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 0)),
      not(equals(X18, 5)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(X18, 1)),
      not(equals(Equals_Param20, 1)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equals(Equals_Param20, 1)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 0)),
      not(equals(Equals_Param20, 1)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(X18, 1)),
      not(equals(Time19, 4)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equals(Time19, 4)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 0)),
      not(equals(Time19, 4)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(X18, 1)),
      not(equal(x, y)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equal(x, y)),
      dif(X18, 2),
      dif(X18, 4)
    ]).
axiom(not(holds_at(location(g1, x, X18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 0)),
      not(equal(x, y)),
      dif(X18, 2),
      dif(X18, 4)
    ]).

 /*  equals(X21, 5) :-
       holds_at(location(g1, x, X21, Equals_Param23), Time22),
       { dif(X21, 2)
       },
       { dif(X21, 4)
       },
       (   not(equals(X21, 1))
       ;   not(equals(Equals_Param23, 1))
       ;   not(equals(Time22, 0))
       ).
 */
axiom(equals(X21, 5),
   
    [ not(equals(X21, 1)),
      holds_at(location(g1, x, X21, Equals_Param23), Time22),
      dif(X21, 2),
      dif(X21, 4)
    ]).
axiom(equals(X21, 5),
   
    [ not(equals(Equals_Param23, 1)),
      holds_at(location(g1, x, X21, Equals_Param23), Time22),
      dif(X21, 2),
      dif(X21, 4)
    ]).
axiom(equals(X21, 5),
   
    [ not(equals(Time22, 0)),
      holds_at(location(g1, x, X21, Equals_Param23), Time22),
      dif(X21, 2),
      dif(X21, 4)
    ]).

 /*  equals(Equals_Param26, 1) :-
       holds_at(location(g1, x, X24, Equals_Param26), Time25),
       { dif(X24, 2)
       },
       { dif(X24, 4)
       },
       (   not(equals(X24, 1))
       ;   not(equals(Equals_Param26, 1))
       ;   not(equals(Time25, 0))
       ).
 */
axiom(equals(Equals_Param26, 1),
   
    [ not(equals(X24, 1)),
      holds_at(location(g1, x, X24, Equals_Param26), Time25),
      dif(X24, 2),
      dif(X24, 4)
    ]).
axiom(equals(Equals_Param26, 1),
   
    [ not(equals(Equals_Param26, 1)),
      holds_at(location(g1, x, X24, Equals_Param26), Time25),
      dif(X24, 2),
      dif(X24, 4)
    ]).
axiom(equals(Equals_Param26, 1),
   
    [ not(equals(Time25, 0)),
      holds_at(location(g1, x, X24, Equals_Param26), Time25),
      dif(X24, 2),
      dif(X24, 4)
    ]).

 /*  equals(Time28, 4) :-
       holds_at(location(g1, x, X27, Equals_Param29), Time28),
       { dif(X27, 2)
       },
       { dif(X27, 4)
       },
       (   not(equals(X27, 1))
       ;   not(equals(Equals_Param29, 1))
       ;   not(equals(Time28, 0))
       ).
 */
axiom(equals(Time28, 4),
   
    [ not(equals(X27, 1)),
      holds_at(location(g1, x, X27, Equals_Param29), Time28),
      dif(X27, 2),
      dif(X27, 4)
    ]).
axiom(equals(Time28, 4),
   
    [ not(equals(Equals_Param29, 1)),
      holds_at(location(g1, x, X27, Equals_Param29), Time28),
      dif(X27, 2),
      dif(X27, 4)
    ]).
axiom(equals(Time28, 4),
   
    [ not(equals(Time28, 0)),
      holds_at(location(g1, x, X27, Equals_Param29), Time28),
      dif(X27, 2),
      dif(X27, 4)
    ]).

 /*  equal(x, y) :-
       holds_at(location(g1, x, X30, Equals_Param32), Time31),
       { dif(X30, 2)
       },
       { dif(X30, 4)
       },
       (   not(equals(X30, 1))
       ;   not(equals(Equals_Param32, 1))
       ;   not(equals(Time31, 0))
       ).
 */
axiom(equal(x, y),
   
    [ not(equals(X30, 1)),
      holds_at(location(g1, x, X30, Equals_Param32), Time31),
      dif(X30, 2),
      dif(X30, 4)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Equals_Param32, 1)),
      holds_at(location(g1, x, X30, Equals_Param32), Time31),
      dif(X30, 2),
      dif(X30, 4)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Time31, 0)),
      holds_at(location(g1, x, X30, Equals_Param32), Time31),
      dif(X30, 2),
      dif(X30, 4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:315
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=5 & ycoord=1 & time=4) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).

 /*   if(({dif(Xcoord, 2)}, {dif(Xcoord, 4)}, (not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4)))),
          (not(holds_at(location(g1, y, Xcoord, Ycoord), Time));Xcoord=1, Ycoord=1, Time=0, equal(x, y))).
 */

 /*  not({dif(Y, 2)}) :-
       ( { dif(Y, 4)
         },
         (   not(equals(Y, 5))
         ;   not(equals(Equals_Param, 1))
         ;   not(equals(Time4, 4))
         )
       ),
       holds_at(location(g1, y, Y, Equals_Param), Time4),
       (   not(equals(Y, 1))
       ;   not(equals(Equals_Param, 1))
       ;   not(equals(Time4, 0))
       ;   not(equal(x, y))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:318
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Y, 1)),
      not(equals(Y, 5)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Y, 5)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Time4, 0)),
      not(equals(Y, 5)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Y, 5)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Y, 1)),
      not(equals(Equals_Param, 1)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Equals_Param, 1)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Time4, 0)),
      not(equals(Equals_Param, 1)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Equals_Param, 1)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Y, 1)),
      not(equals(Time4, 4)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Time4, 4)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Time4, 0)),
      not(equals(Time4, 4)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Time4, 4)),
      { dif(Y, 4)
      },
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).

 /*  not({dif(Y6, 4)}) :-
       (   not(equals(Y6, 5))
       ;   not(equals(Equals_Param8, 1))
       ;   not(equals(Time7, 4))
       ),
       { dif(Y6, 2)
       },
       holds_at(location(g1, y, Y6, Equals_Param8), Time7),
       (   not(equals(Y6, 1))
       ;   not(equals(Equals_Param8, 1))
       ;   not(equals(Time7, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Y6, 1)),
      not(equals(Y6, 5)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Equals_Param8, 1)),
      not(equals(Y6, 5)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Time7, 0)),
      not(equals(Y6, 5)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equal(x, y)),
      not(equals(Y6, 5)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Y6, 1)),
      not(equals(Equals_Param8, 1)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Equals_Param8, 1)),
      not(equals(Equals_Param8, 1)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Time7, 0)),
      not(equals(Equals_Param8, 1)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equal(x, y)),
      not(equals(Equals_Param8, 1)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Y6, 1)),
      not(equals(Time7, 4)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Equals_Param8, 1)),
      not(equals(Time7, 4)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equals(Time7, 0)),
      not(equals(Time7, 4)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(not({dif(Y6, 4)}),
   
    [ not(equal(x, y)),
      not(equals(Time7, 4)),
      { dif(Y6, 2)
      },
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).

 /*  equals(Y9, 5) :-
       { dif(Y9, 4)
       },
       { dif(Y9, 2)
       },
       holds_at(location(g1, y, Y9, Equals_Param11), Time10),
       (   not(equals(Y9, 1))
       ;   not(equals(Equals_Param11, 1))
       ;   not(equals(Time10, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Y9, 5),
   
    [ not(equals(Y9, 1)),
      dif(Y9, 4),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).
axiom(equals(Y9, 5),
   
    [ not(equals(Equals_Param11, 1)),
      dif(Y9, 4),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).
axiom(equals(Y9, 5),
   
    [ not(equals(Time10, 0)),
      dif(Y9, 4),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).
axiom(equals(Y9, 5),
   
    [ not(equal(x, y)),
      dif(Y9, 4),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).

 /*  equals(Equals_Param14, 1) :-
       { dif(Y12, 4)
       },
       { dif(Y12, 2)
       },
       holds_at(location(g1, y, Y12, Equals_Param14), Time13),
       (   not(equals(Y12, 1))
       ;   not(equals(Equals_Param14, 1))
       ;   not(equals(Time13, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Equals_Param14, 1),
   
    [ not(equals(Y12, 1)),
      dif(Y12, 4),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).
axiom(equals(Equals_Param14, 1),
   
    [ not(equals(Equals_Param14, 1)),
      dif(Y12, 4),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).
axiom(equals(Equals_Param14, 1),
   
    [ not(equals(Time13, 0)),
      dif(Y12, 4),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).
axiom(equals(Equals_Param14, 1),
   
    [ not(equal(x, y)),
      dif(Y12, 4),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).

 /*  equals(Time16, 4) :-
       { dif(Y15, 4)
       },
       { dif(Y15, 2)
       },
       holds_at(location(g1, y, Y15, Equals_Param17), Time16),
       (   not(equals(Y15, 1))
       ;   not(equals(Equals_Param17, 1))
       ;   not(equals(Time16, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Time16, 4),
   
    [ not(equals(Y15, 1)),
      dif(Y15, 4),
      dif(Y15, 2),
      holds_at(location(g1, y, Y15, Equals_Param17), Time16)
    ]).
axiom(equals(Time16, 4),
   
    [ not(equals(Equals_Param17, 1)),
      dif(Y15, 4),
      dif(Y15, 2),
      holds_at(location(g1, y, Y15, Equals_Param17), Time16)
    ]).
axiom(equals(Time16, 4),
   
    [ not(equals(Time16, 0)),
      dif(Y15, 4),
      dif(Y15, 2),
      holds_at(location(g1, y, Y15, Equals_Param17), Time16)
    ]).
axiom(equals(Time16, 4),
   
    [ not(equal(x, y)),
      dif(Y15, 4),
      dif(Y15, 2),
      holds_at(location(g1, y, Y15, Equals_Param17), Time16)
    ]).

 /*  not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)) :-
       (   not(equals(Y18, 1))
       ;   not(equals(Equals_Param20, 1))
       ;   not(equals(Time19, 0))
       ;   not(equal(x, y))
       ),
       { dif(Y18, 2)
       },
       { dif(Y18, 4)
       },
       (   not(equals(Y18, 5))
       ;   not(equals(Equals_Param20, 1))
       ;   not(equals(Time19, 4))
       ).
 */
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Y18, 5)),
      not(equals(Y18, 1)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equals(Y18, 1)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 4)),
      not(equals(Y18, 1)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Y18, 5)),
      not(equals(Equals_Param20, 1)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equals(Equals_Param20, 1)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 4)),
      not(equals(Equals_Param20, 1)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Y18, 5)),
      not(equals(Time19, 0)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equals(Time19, 0)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 4)),
      not(equals(Time19, 0)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Y18, 5)),
      not(equal(x, y)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Equals_Param20, 1)),
      not(equal(x, y)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).
axiom(not(holds_at(location(g1, y, Y18, Equals_Param20), Time19)),
   
    [ not(equals(Time19, 4)),
      not(equal(x, y)),
      dif(Y18, 2),
      dif(Y18, 4)
    ]).

 /*  equals(Y21, 1) :-
       holds_at(location(g1, y, Y21, Equals_Param23), Time22),
       { dif(Y21, 2)
       },
       { dif(Y21, 4)
       },
       (   not(equals(Y21, 5))
       ;   not(equals(Equals_Param23, 1))
       ;   not(equals(Time22, 4))
       ).
 */
axiom(equals(Y21, 1),
   
    [ not(equals(Y21, 5)),
      holds_at(location(g1, y, Y21, Equals_Param23), Time22),
      dif(Y21, 2),
      dif(Y21, 4)
    ]).
axiom(equals(Y21, 1),
   
    [ not(equals(Equals_Param23, 1)),
      holds_at(location(g1, y, Y21, Equals_Param23), Time22),
      dif(Y21, 2),
      dif(Y21, 4)
    ]).
axiom(equals(Y21, 1),
   
    [ not(equals(Time22, 4)),
      holds_at(location(g1, y, Y21, Equals_Param23), Time22),
      dif(Y21, 2),
      dif(Y21, 4)
    ]).

 /*  equals(Equals_Param26, 1) :-
       holds_at(location(g1, y, Y24, Equals_Param26), Time25),
       { dif(Y24, 2)
       },
       { dif(Y24, 4)
       },
       (   not(equals(Y24, 5))
       ;   not(equals(Equals_Param26, 1))
       ;   not(equals(Time25, 4))
       ).
 */
axiom(equals(Equals_Param26, 1),
   
    [ not(equals(Y24, 5)),
      holds_at(location(g1, y, Y24, Equals_Param26), Time25),
      dif(Y24, 2),
      dif(Y24, 4)
    ]).
axiom(equals(Equals_Param26, 1),
   
    [ not(equals(Equals_Param26, 1)),
      holds_at(location(g1, y, Y24, Equals_Param26), Time25),
      dif(Y24, 2),
      dif(Y24, 4)
    ]).
axiom(equals(Equals_Param26, 1),
   
    [ not(equals(Time25, 4)),
      holds_at(location(g1, y, Y24, Equals_Param26), Time25),
      dif(Y24, 2),
      dif(Y24, 4)
    ]).

 /*  equals(Time28, 0) :-
       holds_at(location(g1, y, Y27, Equals_Param29), Time28),
       { dif(Y27, 2)
       },
       { dif(Y27, 4)
       },
       (   not(equals(Y27, 5))
       ;   not(equals(Equals_Param29, 1))
       ;   not(equals(Time28, 4))
       ).
 */
axiom(equals(Time28, 0),
   
    [ not(equals(Y27, 5)),
      holds_at(location(g1, y, Y27, Equals_Param29), Time28),
      dif(Y27, 2),
      dif(Y27, 4)
    ]).
axiom(equals(Time28, 0),
   
    [ not(equals(Equals_Param29, 1)),
      holds_at(location(g1, y, Y27, Equals_Param29), Time28),
      dif(Y27, 2),
      dif(Y27, 4)
    ]).
axiom(equals(Time28, 0),
   
    [ not(equals(Time28, 4)),
      holds_at(location(g1, y, Y27, Equals_Param29), Time28),
      dif(Y27, 2),
      dif(Y27, 4)
    ]).

 /*  equal(x, y) :-
       holds_at(location(g1, y, Y30, Equals_Param32), Time31),
       { dif(Y30, 2)
       },
       { dif(Y30, 4)
       },
       (   not(equals(Y30, 5))
       ;   not(equals(Equals_Param32, 1))
       ;   not(equals(Time31, 4))
       ).
 */
axiom(equal(x, y),
   
    [ not(equals(Y30, 5)),
      holds_at(location(g1, y, Y30, Equals_Param32), Time31),
      dif(Y30, 2),
      dif(Y30, 4)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Equals_Param32, 1)),
      holds_at(location(g1, y, Y30, Equals_Param32), Time31),
      dif(Y30, 2),
      dif(Y30, 4)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Time31, 4)),
      holds_at(location(g1, y, Y30, Equals_Param32), Time31),
      dif(Y30, 2),
      dif(Y30, 4)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:320
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:321
==> range(time,0,4).

% range xcoord 0 5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:322
==> range(xcoord,0,5).

% range ycoord 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:323
==> range(ycoord,0,1).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:324
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:351
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:353
% load examples/Cassimatis2002/PolySpace.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:355
% grid G1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:356
==> t(grid,g1).

% object X,Y,Screen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:357
==> t(object,x).
==> t(object,y).
==> t(object,screen).
%; perceptions:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:359
% Shape(X,Round).
shape(x,round).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:360
% Color(X,Red).
color(x,red).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:361
% Shape(Y,Round).
shape(y,round).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:362
% Color(Y,Red).
color(y,red).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:363
% Shape(Screen,Square).
shape(screen,square).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:364
% Color(Screen,Green).
color(screen,green).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:365
% [time]
 % HoldsAt(Location(G1,Screen,2,0),time).
holds_at(location(g1,screen,2,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:366
% HoldsAt(Location(G1,X,1,1),0).
axiom(initially(location(g1, x, 1, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:367
% HoldsAt(Location(G1,Y,3,1),2).
holds_at(location(g1,y,3,1),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:369
% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=3 & ycoord=1 & time=2 & Equal(X,Y).

 /*   if(({dif(Xcoord, 2)}, (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))),
          (not(holds_at(location(g1, x, Xcoord, Ycoord), Time));Xcoord=3, Ycoord=1, Time=2, equal(x, y))).
 */

 /*  not({dif(X, 2)}) :-
       (   not(equals(X, 1))
       ;   not(equals(Equals_Param, 1))
       ;   not(equals(Time4, 0))
       ),
       holds_at(location(g1, x, X, Equals_Param), Time4),
       (   not(equals(X, 3))
       ;   not(equals(Equals_Param, 1))
       ;   not(equals(Time4, 2))
       ;   not(equal(x, y))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:372
axiom(not({dif(X, 2)}),
   
    [ not(equals(X, 3)),
      not(equals(X, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(X, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Time4, 2)),
      not(equals(X, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equal(x, y)),
      not(equals(X, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(X, 3)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Time4, 2)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(X, 3)),
      not(equals(Time4, 0)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Time4, 0)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equals(Time4, 2)),
      not(equals(Time4, 0)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).
axiom(not({dif(X, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Time4, 0)),
      holds_at(location(g1, x, X, Equals_Param), Time4)
    ]).

 /*  equals(X6, 1) :-
       { dif(X6, 2)
       },
       holds_at(location(g1, x, X6, Equals_Param8), Time7),
       (   not(equals(X6, 3))
       ;   not(equals(Equals_Param8, 1))
       ;   not(equals(Time7, 2))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(X6, 1),
   
    [ not(equals(X6, 3)),
      dif(X6, 2),
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(equals(X6, 1),
   
    [ not(equals(Equals_Param8, 1)),
      dif(X6, 2),
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(equals(X6, 1),
   
    [ not(equals(Time7, 2)),
      dif(X6, 2),
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).
axiom(equals(X6, 1),
   
    [ not(equal(x, y)),
      dif(X6, 2),
      holds_at(location(g1, x, X6, Equals_Param8), Time7)
    ]).

 /*  equals(Equals_Param11, 1) :-
       { dif(X9, 2)
       },
       holds_at(location(g1, x, X9, Equals_Param11), Time10),
       (   not(equals(X9, 3))
       ;   not(equals(Equals_Param11, 1))
       ;   not(equals(Time10, 2))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Equals_Param11, 1),
   
    [ not(equals(X9, 3)),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).
axiom(equals(Equals_Param11, 1),
   
    [ not(equals(Equals_Param11, 1)),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).
axiom(equals(Equals_Param11, 1),
   
    [ not(equals(Time10, 2)),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).
axiom(equals(Equals_Param11, 1),
   
    [ not(equal(x, y)),
      dif(X9, 2),
      holds_at(location(g1, x, X9, Equals_Param11), Time10)
    ]).

 /*  equals(Time13, 0) :-
       { dif(X12, 2)
       },
       holds_at(location(g1, x, X12, Equals_Param14), Time13),
       (   not(equals(X12, 3))
       ;   not(equals(Equals_Param14, 1))
       ;   not(equals(Time13, 2))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Time13, 0),
   
    [ not(equals(X12, 3)),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).
axiom(equals(Time13, 0),
   
    [ not(equals(Equals_Param14, 1)),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).
axiom(equals(Time13, 0),
   
    [ not(equals(Time13, 2)),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).
axiom(equals(Time13, 0),
   
    [ not(equal(x, y)),
      dif(X12, 2),
      holds_at(location(g1, x, X12, Equals_Param14), Time13)
    ]).

 /*  not(holds_at(location(g1, x, X15, Equals_Param17), Time16)) :-
       (   not(equals(X15, 3))
       ;   not(equals(Equals_Param17, 1))
       ;   not(equals(Time16, 2))
       ;   not(equal(x, y))
       ),
       { dif(X15, 2)
       },
       (   not(equals(X15, 1))
       ;   not(equals(Equals_Param17, 1))
       ;   not(equals(Time16, 0))
       ).
 */
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(X15, 1)), not(equals(X15, 3)), dif(X15, 2)]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
   
    [ not(equals(Equals_Param17, 1)),
      not(equals(X15, 3)),
      dif(X15, 2)
    ]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(Time16, 0)), not(equals(X15, 3)), dif(X15, 2)]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
   
    [ not(equals(X15, 1)),
      not(equals(Equals_Param17, 1)),
      dif(X15, 2)
    ]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
   
    [ not(equals(Equals_Param17, 1)),
      not(equals(Equals_Param17, 1)),
      dif(X15, 2)
    ]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
   
    [ not(equals(Time16, 0)),
      not(equals(Equals_Param17, 1)),
      dif(X15, 2)
    ]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(X15, 1)), not(equals(Time16, 2)), dif(X15, 2)]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
   
    [ not(equals(Equals_Param17, 1)),
      not(equals(Time16, 2)),
      dif(X15, 2)
    ]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(Time16, 0)), not(equals(Time16, 2)), dif(X15, 2)]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(X15, 1)), not(equal(x, y)), dif(X15, 2)]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(Equals_Param17, 1)), not(equal(x, y)), dif(X15, 2)]).
axiom(not(holds_at(location(g1, x, X15, Equals_Param17), Time16)),
    [not(equals(Time16, 0)), not(equal(x, y)), dif(X15, 2)]).

 /*  equals(X18, 3) :-
       holds_at(location(g1, x, X18, Equals_Param20), Time19),
       { dif(X18, 2)
       },
       (   not(equals(X18, 1))
       ;   not(equals(Equals_Param20, 1))
       ;   not(equals(Time19, 0))
       ).
 */
axiom(equals(X18, 3),
   
    [ not(equals(X18, 1)),
      holds_at(location(g1, x, X18, Equals_Param20), Time19),
      dif(X18, 2)
    ]).
axiom(equals(X18, 3),
   
    [ not(equals(Equals_Param20, 1)),
      holds_at(location(g1, x, X18, Equals_Param20), Time19),
      dif(X18, 2)
    ]).
axiom(equals(X18, 3),
   
    [ not(equals(Time19, 0)),
      holds_at(location(g1, x, X18, Equals_Param20), Time19),
      dif(X18, 2)
    ]).

 /*  equals(Equals_Param23, 1) :-
       holds_at(location(g1, x, X21, Equals_Param23), Time22),
       { dif(X21, 2)
       },
       (   not(equals(X21, 1))
       ;   not(equals(Equals_Param23, 1))
       ;   not(equals(Time22, 0))
       ).
 */
axiom(equals(Equals_Param23, 1),
   
    [ not(equals(X21, 1)),
      holds_at(location(g1, x, X21, Equals_Param23), Time22),
      dif(X21, 2)
    ]).
axiom(equals(Equals_Param23, 1),
   
    [ not(equals(Equals_Param23, 1)),
      holds_at(location(g1, x, X21, Equals_Param23), Time22),
      dif(X21, 2)
    ]).
axiom(equals(Equals_Param23, 1),
   
    [ not(equals(Time22, 0)),
      holds_at(location(g1, x, X21, Equals_Param23), Time22),
      dif(X21, 2)
    ]).

 /*  equals(Time25, 2) :-
       holds_at(location(g1, x, X24, Equals_Param26), Time25),
       { dif(X24, 2)
       },
       (   not(equals(X24, 1))
       ;   not(equals(Equals_Param26, 1))
       ;   not(equals(Time25, 0))
       ).
 */
axiom(equals(Time25, 2),
   
    [ not(equals(X24, 1)),
      holds_at(location(g1, x, X24, Equals_Param26), Time25),
      dif(X24, 2)
    ]).
axiom(equals(Time25, 2),
   
    [ not(equals(Equals_Param26, 1)),
      holds_at(location(g1, x, X24, Equals_Param26), Time25),
      dif(X24, 2)
    ]).
axiom(equals(Time25, 2),
   
    [ not(equals(Time25, 0)),
      holds_at(location(g1, x, X24, Equals_Param26), Time25),
      dif(X24, 2)
    ]).

 /*  equal(x, y) :-
       holds_at(location(g1, x, X27, Equals_Param29), Time28),
       { dif(X27, 2)
       },
       (   not(equals(X27, 1))
       ;   not(equals(Equals_Param29, 1))
       ;   not(equals(Time28, 0))
       ).
 */
axiom(equal(x, y),
   
    [ not(equals(X27, 1)),
      holds_at(location(g1, x, X27, Equals_Param29), Time28),
      dif(X27, 2)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Equals_Param29, 1)),
      holds_at(location(g1, x, X27, Equals_Param29), Time28),
      dif(X27, 2)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Time28, 0)),
      holds_at(location(g1, x, X27, Equals_Param29), Time28),
      dif(X27, 2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:374
% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=3 & ycoord=1 & time=2) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).

 /*   if(({dif(Xcoord, 2)}, (not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2)))),
          (not(holds_at(location(g1, y, Xcoord, Ycoord), Time));Xcoord=1, Ycoord=1, Time=0, equal(x, y))).
 */

 /*  not({dif(Y, 2)}) :-
       (   not(equals(Y, 3))
       ;   not(equals(Equals_Param, 1))
       ;   not(equals(Time4, 2))
       ),
       holds_at(location(g1, y, Y, Equals_Param), Time4),
       (   not(equals(Y, 1))
       ;   not(equals(Equals_Param, 1))
       ;   not(equals(Time4, 0))
       ;   not(equal(x, y))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:377
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Y, 1)),
      not(equals(Y, 3)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Y, 3)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Time4, 0)),
      not(equals(Y, 3)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Y, 3)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Y, 1)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Time4, 0)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Equals_Param, 1)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Y, 1)),
      not(equals(Time4, 2)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Equals_Param, 1)),
      not(equals(Time4, 2)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equals(Time4, 0)),
      not(equals(Time4, 2)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).
axiom(not({dif(Y, 2)}),
   
    [ not(equal(x, y)),
      not(equals(Time4, 2)),
      holds_at(location(g1, y, Y, Equals_Param), Time4)
    ]).

 /*  equals(Y6, 3) :-
       { dif(Y6, 2)
       },
       holds_at(location(g1, y, Y6, Equals_Param8), Time7),
       (   not(equals(Y6, 1))
       ;   not(equals(Equals_Param8, 1))
       ;   not(equals(Time7, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Y6, 3),
   
    [ not(equals(Y6, 1)),
      dif(Y6, 2),
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(equals(Y6, 3),
   
    [ not(equals(Equals_Param8, 1)),
      dif(Y6, 2),
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(equals(Y6, 3),
   
    [ not(equals(Time7, 0)),
      dif(Y6, 2),
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).
axiom(equals(Y6, 3),
   
    [ not(equal(x, y)),
      dif(Y6, 2),
      holds_at(location(g1, y, Y6, Equals_Param8), Time7)
    ]).

 /*  equals(Equals_Param11, 1) :-
       { dif(Y9, 2)
       },
       holds_at(location(g1, y, Y9, Equals_Param11), Time10),
       (   not(equals(Y9, 1))
       ;   not(equals(Equals_Param11, 1))
       ;   not(equals(Time10, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Equals_Param11, 1),
   
    [ not(equals(Y9, 1)),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).
axiom(equals(Equals_Param11, 1),
   
    [ not(equals(Equals_Param11, 1)),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).
axiom(equals(Equals_Param11, 1),
   
    [ not(equals(Time10, 0)),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).
axiom(equals(Equals_Param11, 1),
   
    [ not(equal(x, y)),
      dif(Y9, 2),
      holds_at(location(g1, y, Y9, Equals_Param11), Time10)
    ]).

 /*  equals(Time13, 2) :-
       { dif(Y12, 2)
       },
       holds_at(location(g1, y, Y12, Equals_Param14), Time13),
       (   not(equals(Y12, 1))
       ;   not(equals(Equals_Param14, 1))
       ;   not(equals(Time13, 0))
       ;   not(equal(x, y))
       ).
 */
axiom(equals(Time13, 2),
   
    [ not(equals(Y12, 1)),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).
axiom(equals(Time13, 2),
   
    [ not(equals(Equals_Param14, 1)),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).
axiom(equals(Time13, 2),
   
    [ not(equals(Time13, 0)),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).
axiom(equals(Time13, 2),
   
    [ not(equal(x, y)),
      dif(Y12, 2),
      holds_at(location(g1, y, Y12, Equals_Param14), Time13)
    ]).

 /*  not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)) :-
       (   not(equals(Y15, 1))
       ;   not(equals(Equals_Param17, 1))
       ;   not(equals(Time16, 0))
       ;   not(equal(x, y))
       ),
       { dif(Y15, 2)
       },
       (   not(equals(Y15, 3))
       ;   not(equals(Equals_Param17, 1))
       ;   not(equals(Time16, 2))
       ).
 */
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Y15, 3)), not(equals(Y15, 1)), dif(Y15, 2)]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
   
    [ not(equals(Equals_Param17, 1)),
      not(equals(Y15, 1)),
      dif(Y15, 2)
    ]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Time16, 2)), not(equals(Y15, 1)), dif(Y15, 2)]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
   
    [ not(equals(Y15, 3)),
      not(equals(Equals_Param17, 1)),
      dif(Y15, 2)
    ]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
   
    [ not(equals(Equals_Param17, 1)),
      not(equals(Equals_Param17, 1)),
      dif(Y15, 2)
    ]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
   
    [ not(equals(Time16, 2)),
      not(equals(Equals_Param17, 1)),
      dif(Y15, 2)
    ]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Y15, 3)), not(equals(Time16, 0)), dif(Y15, 2)]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
   
    [ not(equals(Equals_Param17, 1)),
      not(equals(Time16, 0)),
      dif(Y15, 2)
    ]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Time16, 2)), not(equals(Time16, 0)), dif(Y15, 2)]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Y15, 3)), not(equal(x, y)), dif(Y15, 2)]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Equals_Param17, 1)), not(equal(x, y)), dif(Y15, 2)]).
axiom(not(holds_at(location(g1, y, Y15, Equals_Param17), Time16)),
    [not(equals(Time16, 2)), not(equal(x, y)), dif(Y15, 2)]).

 /*  equals(Y18, 1) :-
       holds_at(location(g1, y, Y18, Equals_Param20), Time19),
       { dif(Y18, 2)
       },
       (   not(equals(Y18, 3))
       ;   not(equals(Equals_Param20, 1))
       ;   not(equals(Time19, 2))
       ).
 */
axiom(equals(Y18, 1),
   
    [ not(equals(Y18, 3)),
      holds_at(location(g1, y, Y18, Equals_Param20), Time19),
      dif(Y18, 2)
    ]).
axiom(equals(Y18, 1),
   
    [ not(equals(Equals_Param20, 1)),
      holds_at(location(g1, y, Y18, Equals_Param20), Time19),
      dif(Y18, 2)
    ]).
axiom(equals(Y18, 1),
   
    [ not(equals(Time19, 2)),
      holds_at(location(g1, y, Y18, Equals_Param20), Time19),
      dif(Y18, 2)
    ]).

 /*  equals(Equals_Param23, 1) :-
       holds_at(location(g1, y, Y21, Equals_Param23), Time22),
       { dif(Y21, 2)
       },
       (   not(equals(Y21, 3))
       ;   not(equals(Equals_Param23, 1))
       ;   not(equals(Time22, 2))
       ).
 */
axiom(equals(Equals_Param23, 1),
   
    [ not(equals(Y21, 3)),
      holds_at(location(g1, y, Y21, Equals_Param23), Time22),
      dif(Y21, 2)
    ]).
axiom(equals(Equals_Param23, 1),
   
    [ not(equals(Equals_Param23, 1)),
      holds_at(location(g1, y, Y21, Equals_Param23), Time22),
      dif(Y21, 2)
    ]).
axiom(equals(Equals_Param23, 1),
   
    [ not(equals(Time22, 2)),
      holds_at(location(g1, y, Y21, Equals_Param23), Time22),
      dif(Y21, 2)
    ]).

 /*  equals(Time25, 0) :-
       holds_at(location(g1, y, Y24, Equals_Param26), Time25),
       { dif(Y24, 2)
       },
       (   not(equals(Y24, 3))
       ;   not(equals(Equals_Param26, 1))
       ;   not(equals(Time25, 2))
       ).
 */
axiom(equals(Time25, 0),
   
    [ not(equals(Y24, 3)),
      holds_at(location(g1, y, Y24, Equals_Param26), Time25),
      dif(Y24, 2)
    ]).
axiom(equals(Time25, 0),
   
    [ not(equals(Equals_Param26, 1)),
      holds_at(location(g1, y, Y24, Equals_Param26), Time25),
      dif(Y24, 2)
    ]).
axiom(equals(Time25, 0),
   
    [ not(equals(Time25, 2)),
      holds_at(location(g1, y, Y24, Equals_Param26), Time25),
      dif(Y24, 2)
    ]).

 /*  equal(x, y) :-
       holds_at(location(g1, y, Y27, Equals_Param29), Time28),
       { dif(Y27, 2)
       },
       (   not(equals(Y27, 3))
       ;   not(equals(Equals_Param29, 1))
       ;   not(equals(Time28, 2))
       ).
 */
axiom(equal(x, y),
   
    [ not(equals(Y27, 3)),
      holds_at(location(g1, y, Y27, Equals_Param29), Time28),
      dif(Y27, 2)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Equals_Param29, 1)),
      holds_at(location(g1, y, Y27, Equals_Param29), Time28),
      dif(Y27, 2)
    ]).
axiom(equal(x, y),
   
    [ not(equals(Time28, 2)),
      holds_at(location(g1, y, Y27, Equals_Param29), Time28),
      dif(Y27, 2)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:379
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:380
==> range(time,0,2).

% range xcoord 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:381
==> range(xcoord,0,4).

% range ycoord 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:382
==> range(ycoord,0,2).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:383
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/BrewkaDixKonolige1997/Wine.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:413
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:416
% sort x
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:417
==> sort(x).

% x Person
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:418
==> t(x,person).

% predicate LikesWine(x)
 %  predicate(likesWine(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:420
==> mpred_prop(likesWine(x),predicate).
==> meta_argtypes(likesWine(x)).

% predicate Italian(x)
 %  predicate(italian(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:421
==> mpred_prop(italian(x),predicate).
==> meta_argtypes(italian(x)).

% predicate French(x)
 %  predicate(french(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:422
==> mpred_prop(french(x),predicate).
==> meta_argtypes(french(x)).

% predicate Ab1(x)
 %  predicate(ab1(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:423
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
 %  predicate(ab2(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:424
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:425
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).
axiom(likesWine(X),
    [italian(X), not(ab1(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:426
% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).
axiom(likesWine(X),
    [french(X), not(ab2(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:427
% [x]
 % Italian(x) -> !French(x).
axiom(not(french(X)),
    [italian(X)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:429
% Italian(Person) | French(Person).

 /*   (   italian(person)
      ;   french(person)
      ).
 */

 /*  italian(person) :-
       not(french(person)).
 */
axiom(italian(person),
    [not(french(person))]).

 /*  french(person) :-
       not(italian(person)).
 */
axiom(french(person),
    [not(italian(person))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:431
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:432
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:433
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:435
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:436
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Yale.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{HanksMcDermott:1987,
%;   author = "Steve Hanks and Drew V. McDermott",
%;   year = "1987",
%;   title = "Nonmonotonic logic and temporal projection",
%;   journal = "Artificial Intelligence",
%;   volume = "33",
%;   number = "3",
%;   pages = "379--412",
%; }
%;
%; \fullciteA[pp. 322--323]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:482
% option showpred off
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:483
:- set_ec_option(showpred, off).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:485
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:487
% event Load()
 %  event(load()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:488
==> mpred_prop(load(),event).
==> meta_argtypes(load()).

% event Shoot()
 %  event(shoot()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:489
==> mpred_prop(shoot(),event).
==> meta_argtypes(shoot()).

% event Sneeze()
 %  event(sneeze()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:490
==> mpred_prop(sneeze(),event).
==> meta_argtypes(sneeze()).

% fluent Loaded()
 %  fluent(loaded()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:491
==> mpred_prop(loaded(),fluent).
==> meta_argtypes(loaded()).

% fluent Alive()
 %  fluent(alive()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:492
==> mpred_prop(alive(),fluent).
==> meta_argtypes(alive()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:493
% [time]
 % Initiates(Load(),Loaded(),time).
axiom(initiates(load(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:494
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
axiom(terminates(shoot(), alive(), Time),
    [holds_at(loaded(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:495
% [time]
 % Terminates(Shoot(),Loaded(),time).
axiom(terminates(shoot(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:497
% HoldsAt(Alive(),0).
axiom(initially(alive()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:498
% !HoldsAt(Loaded(),0).
 %  not(initially(loaded())).
axiom(not(initially(loaded())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:499
% Happens(Load(),0).
axiom(happens(load(), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:500
% Happens(Sneeze(),1).
axiom(happens(sneeze(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:501
% Happens(Shoot(),2).
axiom(happens(shoot(), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:503
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:504
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:506
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:507
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StuffyRoom.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{GinsbergSmith:1988a,
%;   author = "Matthew L. Ginsberg and David E. Smith",
%;   year = "1988",
%;   title = "Reasoning about action \uppercase{I}: \uppercase{A} possible worlds approach",
%;   journal = "Artificial Intelligence",
%;   volume = "35",
%;   number = "2",
%;   pages = "165--195",
%; }
%;
%; \fullciteA[pp. 288--289]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added:
%; !HoldsAt(Blocked1(),0).
%; !HoldsAt(Blocked2(),0).
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:554
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:557
% event Close1()
 %  event(close1()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:558
==> mpred_prop(close1(),event).
==> meta_argtypes(close1()).

% event Close2()
 %  event(close2()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:559
==> mpred_prop(close2(),event).
==> meta_argtypes(close2()).

% event Start()
 %  event(start()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:560
==> mpred_prop(start(),event).
==> meta_argtypes(start()).

% fluent Blocked1()
 %  fluent(blocked1()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:561
==> mpred_prop(blocked1(),fluent).
==> meta_argtypes(blocked1()).

% fluent Blocked2()
 %  fluent(blocked2()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:562
==> mpred_prop(blocked2(),fluent).
==> meta_argtypes(blocked2()).

% fluent Stuffy()
 %  fluent(stuffy()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:563
==> mpred_prop(stuffy(),fluent).
==> meta_argtypes(stuffy()).

% noninertial Stuffy
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:564
==> noninertial(stuffy).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:565
% [time]
 % Initiates(Close1(),Blocked1(),time).
axiom(initiates(close1(), blocked1(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:566
% [time]
 % Initiates(Close2(),Blocked2(),time).
axiom(initiates(close2(), blocked2(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:568
% [time]
% HoldsAt(Stuffy(),time) <->
% HoldsAt(Blocked1(),time)&HoldsAt(Blocked2(),time).

 /*  holds_at(stuffy(), Time) <->
       holds_at(blocked1(), Time),
       holds_at(blocked2(), Time).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:570
axiom(holds_at(stuffy(), Time),
    [holds_at(blocked1(), Time), holds_at(blocked2(), Time)]).

 /*   if(holds_at(stuffy(), Time),
          (holds_at(blocked1(), Time), holds_at(blocked2(), Time))).
 */

 /*  not(holds_at(stuffy(), Time1)) :-
       (   not(holds_at(blocked1(), Time1))
       ;   not(holds_at(blocked2(), Time1))
       ).
 */
axiom(not(holds_at(stuffy(), Time1)),
    [not(holds_at(blocked1(), Time1))]).
axiom(not(holds_at(stuffy(), Time1)),
    [not(holds_at(blocked2(), Time1))]).

 /*  holds_at(blocked1(), Time2) :-
       holds_at(stuffy(), Time2).
 */
axiom(holds_at(blocked1(), Time2),
    [holds_at(stuffy(), Time2)]).

 /*  holds_at(blocked2(), Time3) :-
       holds_at(stuffy(), Time3).
 */
axiom(holds_at(blocked2(), Time3),
    [holds_at(stuffy(), Time3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:572
% [time]
 % Initiates(Start(),Blocked1(),time).
axiom(initiates(start(), blocked1(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:573
% [time]
 % Terminates(Start(),Blocked2(),time).
axiom(terminates(start(), blocked2(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:575
% !HoldsAt(Blocked1(),0).
 %  not(initially(blocked1())).
axiom(not(initially(blocked1())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:576
% !HoldsAt(Blocked2(),0).
 %  not(initially(blocked2())).
axiom(not(initially(blocked2())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:577
% Happens(Start(),0).
axiom(happens(start(), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:578
% Happens(Close2(),1).
axiom(happens(close2(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:580
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:581
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:583
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:584
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/BusRide.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:627
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:630
% fluent HasTicket()
 %  fluent(hasTicket()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:631
==> mpred_prop(hasTicket(),fluent).
==> meta_argtypes(hasTicket()).

% fluent OnRed()
 %  fluent(onRed()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:632
==> mpred_prop(onRed(),fluent).
==> meta_argtypes(onRed()).

% fluent OnYellow()
 %  fluent(onYellow()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:633
==> mpred_prop(onYellow(),fluent).
==> meta_argtypes(onYellow()).

% event Buy()
 %  event(buy()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:634
==> mpred_prop(buy(),event).
==> meta_argtypes(buy()).

% event Board()
 %  event(board()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:635
==> mpred_prop(board(),event).
==> meta_argtypes(board()).

% event BoardRed()
 %  event(boardRed()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:636
==> mpred_prop(boardRed(),event).
==> meta_argtypes(boardRed()).

% event BoardYellow()
 %  event(boardYellow()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:637
==> mpred_prop(boardYellow(),event).
==> meta_argtypes(boardYellow()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:638
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).

 /*   if(happens(board(), Time),
          (happens(boardRed(), Time);happens(boardYellow(), Time))).
 */

 /*  happens(boardRed(), Maptime) :-
       not(happens(boardYellow(), Maptime)),
       happens(board(), Maptime).
 */
axiom(happens(boardRed(), Maptime),
    [not(happens(boardYellow(), Maptime)), happens(board(), Maptime)]).

 /*  happens(boardYellow(), Maptime2) :-
       not(happens(boardRed(), Maptime2)),
       happens(board(), Maptime2).
 */
axiom(happens(boardYellow(), Maptime2),
    [not(happens(boardRed(), Maptime2)), happens(board(), Maptime2)]).

 /*  not(happens(board(), Maptime3)) :-
       not(happens(boardRed(), Maptime3)),
       not(happens(boardYellow(), Maptime3)).
 */
axiom(not(happens(board(), Maptime3)),
   
    [ not(happens(boardRed(), Maptime3)),
      not(happens(boardYellow(), Maptime3))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:640
% [time]
 % Initiates(Buy(),HasTicket(),time).
axiom(initiates(buy(), hasTicket(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:641
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).
axiom(initiates(boardRed(), onRed(), Time),
    [holds_at(hasTicket(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:642
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).
axiom(initiates(boardYellow(), onYellow(), Time),
    [holds_at(hasTicket(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:644
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).

 /*   not(( holds_at(onRed(), Time),
            holds_at(onYellow(), Time)
          )).
 */

 /*  not(holds_at(onRed(), Time1)) :-
       holds_at(onYellow(), Time1).
 */
axiom(not(holds_at(onRed(), Time1)),
    [holds_at(onYellow(), Time1)]).

 /*  not(holds_at(onYellow(), Time2)) :-
       holds_at(onRed(), Time2).
 */
axiom(not(holds_at(onYellow(), Time2)),
    [holds_at(onRed(), Time2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:645
% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).
axiom(holds_at(hasTicket(), Time),
    [holds_at(onRed(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:646
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).
axiom(holds_at(hasTicket(), Time),
    [holds_at(onYellow(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:648
% HoldsAt(OnRed(),2).
holds_at(onRed(),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:650
% !HoldsAt(HasTicket(),0).
 %  not(initially(hasTicket())).
axiom(not(initially(hasTicket())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:651
% Happens(Buy(),0).
axiom(happens(buy(), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:652
% Happens(Board(),1).
axiom(happens(board(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:653
%; ABDUCED Happens(BoardRed(), 1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:655
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:656
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:658
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:659
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/DeadOrAlive.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 324]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:695
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:698
% event Load()
 %  event(load()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:699
==> mpred_prop(load(),event).
==> meta_argtypes(load()).

% event Shoot()
 %  event(shoot()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:700
==> mpred_prop(shoot(),event).
==> meta_argtypes(shoot()).

% event Sneeze()
 %  event(sneeze()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:701
==> mpred_prop(sneeze(),event).
==> meta_argtypes(sneeze()).

% fluent Loaded()
 %  fluent(loaded()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:702
==> mpred_prop(loaded(),fluent).
==> meta_argtypes(loaded()).

% fluent Alive()
 %  fluent(alive()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:703
==> mpred_prop(alive(),fluent).
==> meta_argtypes(alive()).

% fluent Dead()
 %  fluent(dead()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:704
==> mpred_prop(dead(),fluent).
==> meta_argtypes(dead()).

% noninertial Dead
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:705
==> noninertial(dead).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:706
% [time]
 % Initiates(Load(),Loaded(),time).
axiom(initiates(load(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:707
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
axiom(terminates(shoot(), alive(), Time),
    [holds_at(loaded(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:708
% [time]
 % Terminates(Shoot(),Loaded(),time).
axiom(terminates(shoot(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:709
% [time]
 % HoldsAt(Dead(),time) <-> !HoldsAt(Alive(),time).

 /*  holds_at(dead(), Time) <->
       not(holds_at(alive(), Time)).
 */
axiom(holds_at(dead(), Time),
    [not(holds_at(alive(), Time))]).
axiom(not(holds_at(alive(), Time)),
    [holds_at(dead(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:711
% HoldsAt(Alive(),0).
axiom(initially(alive()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:712
% !HoldsAt(Loaded(),0).
 %  not(initially(loaded())).
axiom(not(initially(loaded())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:713
% Happens(Load(),0).
axiom(happens(load(), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:714
% Happens(Sneeze(),1).
axiom(happens(sneeze(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:715
% Happens(Shoot(),2).
axiom(happens(shoot(), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:717
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:718
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:720
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:721
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Supermarket.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[pp. 302--304]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; reformulated using the method of \fullciteA[pp. 460--461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; added:
%; !HoldsAt(Forwards(), 0).
%; !HoldsAt(Backwards(), 0).
%; !HoldsAt(Spinning(), 0).
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:773
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:776
% event Push()
 %  event(push()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:777
==> mpred_prop(push(),event).
==> meta_argtypes(push()).

% event Pull()
 %  event(pull()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:778
==> mpred_prop(pull(),event).
==> meta_argtypes(pull()).

% fluent Forwards()
 %  fluent(forwards()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:779
==> mpred_prop(forwards(),fluent).
==> meta_argtypes(forwards()).

% fluent Backwards()
 %  fluent(backwards()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:780
==> mpred_prop(backwards(),fluent).
==> meta_argtypes(backwards()).

% fluent Spinning()
 %  fluent(spinning()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:781
==> mpred_prop(spinning(),fluent).
==> meta_argtypes(spinning()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:782
% [time]
% !Happens(Pull(), time) ->
% Initiates(Push(), Forwards(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:784
axiom(initiates(push(), forwards(), Time),
    [not(happens(pull(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:786
% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Backwards(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:788
axiom(terminates(push(), backwards(), Time),
    [not(happens(pull(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:790
% [time]
% !Happens(Push(), time) ->
% Initiates(Pull(), Backwards(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:792
axiom(initiates(pull(), backwards(), Time),
    [not(happens(push(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:794
% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:796
axiom(terminates(pull(), forwards(), Time),
    [not(happens(push(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:798
% [time]
% Happens(Push(), time) ->
% Initiates(Pull(), Spinning(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:800
axiom(requires(push(), Time),
    [initiates(pull(), spinning(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:802
% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:804
axiom(requires(push(), Time),
    [terminates(pull(), forwards(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:806
% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Backwards(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:808
axiom(requires(push(), Time),
    [terminates(pull(), backwards(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:810
% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Spinning(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:812
axiom(terminates(push(), spinning(), Time),
    [not(happens(pull(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:814
% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Spinning(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:816
axiom(terminates(pull(), spinning(), Time),
    [not(happens(push(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:818
% !HoldsAt(Forwards(), 0).
 %  not(initially(forwards())).
axiom(not(initially(forwards())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:819
% !HoldsAt(Backwards(), 0).
 %  not(initially(backwards())).
axiom(not(initially(backwards())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:820
% !HoldsAt(Spinning(), 0).
 %  not(initially(spinning())).
axiom(not(initially(spinning())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:822
% Happens(Push(), 5).
axiom(happens(push(), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:823
% Happens(Pull(), 5).
axiom(happens(pull(), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:824
% Happens(Pull(), 10).
axiom(happens(pull(), t10),
    [is_time(10), b(t, t10), ignore(t+10=t10)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:825
% Happens(Push(), 10).
axiom(happens(push(), t10),
    [is_time(10), b(t, t10), ignore(t+10=t10)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:827
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:828
==> completion(happens).

% range time 0 12
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:830
==> range(time,0,12).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:831
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StolenCar.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Kautz:1986,
%;   author = "Henry A. Kautz",
%;   year = "1986",
%;   title = "The Logic of Persistence",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ifth \uppercase{N}ational \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "401--405",
%;   address = "Los Altos, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; \fullciteA[p. 359]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; abduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added !HoldsAt(CarParked(),0).
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:876
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:879
% event Park()
 %  event(park()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:880
==> mpred_prop(park(),event).
==> meta_argtypes(park()).

% event Steal()
 %  event(steal()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:881
==> mpred_prop(steal(),event).
==> meta_argtypes(steal()).

% fluent CarParked()
 %  fluent(carParked()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:882
==> mpred_prop(carParked(),fluent).
==> meta_argtypes(carParked()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:883
% [time]
 % Initiates(Park(),CarParked(),time).
axiom(initiates(park(), carParked(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:884
% [time]
 % Terminates(Steal(),CarParked(),time).
axiom(terminates(steal(), carParked(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:886
% !HoldsAt(CarParked(),0).
 %  not(initially(carParked())).
axiom(not(initially(carParked())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:887
% Happens(Park(),0).
axiom(happens(park(), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:888
%; ABDUCED Happens(Steal(), 1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:889
% !HoldsAt(CarParked(),2).
 %  not(holds_at(carParked(),2)).
axiom(not(holds_at(carParked(), t2)),
    [b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:891
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:892
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:893
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/MillerShanahan2002/Bowl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:927
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:930
% event LiftLeft()
 %  event(liftLeft()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:931
==> mpred_prop(liftLeft(),event).
==> meta_argtypes(liftLeft()).

% event LiftRight()
 %  event(liftRight()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:932
==> mpred_prop(liftRight(),event).
==> meta_argtypes(liftRight()).

% fluent Spilt()
 %  fluent(spilt()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:933
==> mpred_prop(spilt(),fluent).
==> meta_argtypes(spilt()).

% fluent Raised()
 %  fluent(raised()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:934
==> mpred_prop(raised(),fluent).
==> meta_argtypes(raised()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:935
% [time]
% !Happens(LiftRight(), time) ->
% Initiates(LiftLeft(), Spilt(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:937
axiom(initiates(liftLeft(), spilt(), Time),
    [not(happens(liftRight(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:939
% [time]
% !Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Spilt(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:941
axiom(initiates(liftRight(), spilt(), Time),
    [not(happens(liftLeft(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:943
% [time]
% Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Raised(), time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:945
axiom(requires(liftLeft(), Time),
    [initiates(liftRight(), raised(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:947
% !HoldsAt(Spilt(), 0).
 %  not(initially(spilt())).
axiom(not(initially(spilt())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:948
% !HoldsAt(Raised(), 0).
 %  not(initially(raised())).
axiom(not(initially(raised())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:949
% Happens(LiftLeft(), 2).
axiom(happens(liftLeft(), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:950
% Happens(LiftRight(), 2).
axiom(happens(liftRight(), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:952
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:953
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:955
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:956
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: showing that inconsistency results
%; without a cancellation rule
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1000
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1003
% sort x
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1004
==> sort(x).

% predicate Republican(x)
 %  predicate(republican(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1006
==> mpred_prop(republican(x),predicate).
==> meta_argtypes(republican(x)).

% predicate Quaker(x)
 %  predicate(quaker(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1007
==> mpred_prop(quaker(x),predicate).
==> meta_argtypes(quaker(x)).

% predicate Pacifist(x)
 %  predicate(pacifist(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1008
==> mpred_prop(pacifist(x),predicate).
==> meta_argtypes(pacifist(x)).

% predicate Ab1(x)
 %  predicate(ab1(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1009
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
 %  predicate(ab2(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1010
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x John
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1012
==> t(x,john).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1013
% Republican(John).
republican(john).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1014
% Quaker(John).
quaker(john).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1016
% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
axiom(not(pacifist(X)),
    [republican(X), not(ab1(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1017
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
axiom(pacifist(X),
    [quaker(X), not(ab2(X))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1019
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1020
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1021
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1023
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1024
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%; \fullciteA[p. 18]{BrewkaDixKonolige:1997}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1076
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1079
% sort x
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1080
==> sort(x).

% predicate Republican(x)
 %  predicate(republican(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1082
==> mpred_prop(republican(x),predicate).
==> meta_argtypes(republican(x)).

% predicate Quaker(x)
 %  predicate(quaker(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1083
==> mpred_prop(quaker(x),predicate).
==> meta_argtypes(quaker(x)).

% predicate Pacifist(x)
 %  predicate(pacifist(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1084
==> mpred_prop(pacifist(x),predicate).
==> meta_argtypes(pacifist(x)).

% predicate Ab1(x)
 %  predicate(ab1(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1085
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
 %  predicate(ab2(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1086
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x John
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1088
==> t(x,john).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1089
% Republican(John).
republican(john).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1090
% Quaker(John).
quaker(john).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1092
% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
axiom(not(pacifist(X)),
    [republican(X), not(ab1(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1093
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
axiom(pacifist(X),
    [quaker(X), not(ab2(X))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1094
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1094
% [x]
 % Republican(x) -> Ab2(x).
axiom(ab2(X),
    [republican(X)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1096
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1097
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1098
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1100
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1101
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1128
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1131
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1132
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1134
==> t(agent,nathan).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1136
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1138
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
 %  event(fallAsleep(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1139
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1140
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1142
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1143
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1145
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1147
% !HoldsAt(Awake(Nathan),0).
 %  not(initially(awake(nathan))).
axiom(not(initially(awake(nathan))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1148
% HoldsAt(Awake(Nathan),1).
holds_at(awake(nathan),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1150
%; abduced:
%; Happens(WakeUp(Nathan),0).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1153
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1154
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1155
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1182
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1185
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1186
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1188
==> t(agent,nathan).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1190
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1192
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
 %  event(fallAsleep(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1193
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1194
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1196
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1197
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1199
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1201
% Happens(WakeUp(Nathan),1).
axiom(happens(wakeUp(nathan), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1203
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1205
% !HoldsAt(Awake(Nathan),0).
 %  not(initially(awake(nathan))).
axiom(not(initially(awake(nathan))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1207
%; entailed:
%; HoldsAt(Awake(Nathan),3).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1210
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1211
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1213
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1214
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1241
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1244
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1245
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1247
==> t(agent,nathan).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1249
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1251
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
 %  event(fallAsleep(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1252
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1253
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1255
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1256
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1258
%; Delta
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1261
% Happens(WakeUp(agent),time) ->
% !HoldsAt(Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1262
axiom(requires(wakeUp(Agent), Time),
    [not(holds_at(awake(Agent), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1264
% Happens(WakeUp(Nathan),0).
axiom(happens(wakeUp(nathan), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1266
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1268
% HoldsAt(Awake(Nathan),1).
holds_at(awake(nathan),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1270
%; inferred:
%; !HoldsAt(Awake(Nathan),0).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1273
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1274
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1276
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1277
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1304
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1307
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1308
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1309
==> t(object,o1).

% fluent F(object)
 %  fluent(f(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1311
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% event E(object)
 %  event(e(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1313
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1314
% [object,time]
 % Releases(E(object),F(object),time).
axiom(releases(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1315
% [object,time]
 % Terminates(E(object),F(object),time).
axiom(terminates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1317
% Happens(E(O1),0).
axiom(happens(e(o1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1319
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1320
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1321
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1348
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1351
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1352
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1354
==> t(agent,nathan).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1356
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1358
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
 %  event(fallAsleep(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1359
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1360
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1362
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1363
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1365
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1367
% Happens(WakeUp(Nathan),1).
axiom(happens(wakeUp(nathan), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1369
%; entailed:
%; HoldsAt(Awake(Nathan),3).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1372
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1373
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1375
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1376
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1403
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1406
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1407
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1408
==> t(object,o1).

% event E(object)
 %  event(e(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1410
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).

% fluent F1(object)
 %  fluent(f1(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1412
==> mpred_prop(f1(object),fluent).
==> meta_argtypes(f1(object)).

% fluent F2(object)
 %  fluent(f2(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1413
==> mpred_prop(f2(object),fluent).
==> meta_argtypes(f2(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1414
% [object,time]
% Initiates(E(object),F1(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1415
axiom(initiates(e(Object), f1(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1417
% [object,time]
% HoldsAt(F1(object),time) <-> HoldsAt(F2(object),time).

 /*  holds_at(f1(Object), Time) <->
       holds_at(f2(Object), Time).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1418
axiom(holds_at(f1(Object), Time),
    [holds_at(f2(Object), Time)]).
axiom(holds_at(f2(Object), Time),
    [holds_at(f1(Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1420
% !HoldsAt(F2(O1),0).
 %  not(initially(f2(o1))).
axiom(not(initially(f2(o1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1421
% Happens(E(O1),0).
axiom(happens(e(o1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1423
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1424
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1425
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1452
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1455
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1456
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1457
==> t(object,o1).

% fluent F(object)
 %  fluent(f(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1459
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% event E(object)
 %  event(e(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1461
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1462
% [object,time]
 % Initiates(E(object),F(object),time).
axiom(initiates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1463
% [object,time]
 % Terminates(E(object),F(object),time).
axiom(terminates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1465
% Happens(E(O1),0).
axiom(happens(e(o1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1467
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1468
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1469
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1496
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1499
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1500
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1501
==> t(object,o1).

% fluent F(object)
 %  fluent(f(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1503
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% event E(object)
 %  event(e(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1505
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1506
% [object,time]
 % Releases(E(object),F(object),time).
axiom(releases(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1507
% [object,time]
 % Initiates(E(object),F(object),time).
axiom(initiates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1509
% Happens(E(O1),0).
axiom(happens(e(o1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1511
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1512
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1513
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/CameraWithFlash.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1540
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1543
% sort camera
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1544
==> sort(camera).

% camera Camera1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1546
==> t(camera,camera1).

% fluent ProperlyExposedPicture(camera)
 %  fluent(properlyExposedPicture(camera)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1548
==> mpred_prop(properlyExposedPicture(camera),fluent).
==> meta_argtypes(properlyExposedPicture(camera)).

% fluent ImproperlyExposedPicture(camera)
 %  fluent(improperlyExposedPicture(camera)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1549
==> mpred_prop(improperlyExposedPicture(camera),fluent).
==> meta_argtypes(improperlyExposedPicture(camera)).

% event ReleaseShutter(camera)
 %  event(releaseShutter(camera)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1551
==> mpred_prop(releaseShutter(camera),event).
==> meta_argtypes(releaseShutter(camera)).

% event TriggerFlash(camera)
 %  event(triggerFlash(camera)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1552
==> mpred_prop(triggerFlash(camera),event).
==> meta_argtypes(triggerFlash(camera)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1553
%; Sigma
% [camera,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1556
% Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ProperlyExposedPicture(camera),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1557
axiom(requires(triggerFlash(Camera), Time),
   
    [ initiates(releaseShutter(Camera),
                properlyExposedPicture(Camera),
                Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1559
% [camera,time]
% !Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ImproperlyExposedPicture(camera),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1561
axiom(initiates(releaseShutter(Camera), improperlyExposedPicture(Camera), Time),
    [not(happens(triggerFlash(Camera), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1563
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1565
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1565
% Happens(ReleaseShutter(Camera1),0).
axiom(happens(releaseShutter(camera1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1566
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1566
% Happens(TriggerFlash(Camera1),1).
axiom(happens(triggerFlash(camera1), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1567
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1567
% Happens(ReleaseShutter(Camera1),1).
axiom(happens(releaseShutter(camera1), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1569
%; added:
% [camera]
 % !HoldsAt(ImproperlyExposedPicture(camera),0).
 %  not(initially(improperlyExposedPicture(Camera))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1570
axiom(not(initially(improperlyExposedPicture(ImproperlyExposedPicture_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1571
% [camera]
 % !HoldsAt(ProperlyExposedPicture(camera),0).
 %  not(initially(properlyExposedPicture(Camera))).
axiom(not(initially(properlyExposedPicture(ProperlyExposedPicture_Ret))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1573
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1574
==> completion(delta).
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1576
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1577
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/MovingRobot.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1996,
%;   author = "Murray Shanahan",
%;   year = "1996",
%;   title = "Robotics and the common sense informatic situation",
%;   editor = "Wolfgang Wahlster",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{T}welfth \uppercase{E}uropean \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "684--688",
%;   address = "Chichester, UK",
%;   publisher = "John Wiley",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1615
% option renaming off
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1616
:- set_ec_option(renaming, off).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1618
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1620
% sort coord: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1621
==> subsort(coord,integer).

% sort direction: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1623
==> subsort(direction,integer).
%; 0 -> 0, 1 -> 90, 2 -> 180, 3 -> 370

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1625
% sort robot
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1626
==> sort(robot).

% robot Robot1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1628
==> t(robot,robot1).

% function Sin(direction): coord
 %  functional_predicate(sin(direction,coord)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1630
==> mpred_prop(sin(direction,coord),functional_predicate).
==> meta_argtypes(sin(direction,coord)).
resultIsa(sin,coord).

% function Cos(direction): coord
 %  functional_predicate(cos(direction,coord)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1631
==> mpred_prop(cos(direction,coord),functional_predicate).
==> meta_argtypes(cos(direction,coord)).
resultIsa(cos,coord).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1632
% Sin(0)=0.
sin(0,0).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1633
% Sin(1)=1.
sin(1,1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1634
% Sin(2)=2.
sin(2,2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1635
% Sin(3)=3.
sin(3,3).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1637
% Cos(0)=1.
cos(0,1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1638
% Cos(1)=2.
cos(1,2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1639
% Cos(2)=3.
cos(2,3).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1640
% Cos(3)=4.
cos(3,4).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1642
% fluent Direction(robot,direction)
 %  fluent(direction(robot,direction)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1643
==> mpred_prop(direction(robot,direction),fluent).
==> meta_argtypes(direction(robot,direction)).

% fluent Location(robot,coord,coord)
 %  fluent(location(robot,coord,coord)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1644
==> mpred_prop(location(robot,coord,coord),fluent).
==> meta_argtypes(location(robot,coord,coord)).

% event MoveLeftWheel(robot)
 %  event(moveLeftWheel(robot)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1646
==> mpred_prop(moveLeftWheel(robot),event).
==> meta_argtypes(moveLeftWheel(robot)).

% event MoveRightWheel(robot)
 %  event(moveRightWheel(robot)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1647
==> mpred_prop(moveRightWheel(robot),event).
==> meta_argtypes(moveRightWheel(robot)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1648
%; Sigma
% [robot,direction1,direction2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1651
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1-1)->
% Initiates(MoveLeftWheel(robot),Direction(robot,direction2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1654
axiom(initiates(moveLeftWheel(Robot), direction(Robot, Direction2), Time),
   
    [ not(happens(moveRightWheel(Robot), Time)),
      holds_at(direction(Robot, Direction1), Time),
      equals(Direction2, Direction1-1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1656
% [robot,direction,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveLeftWheel(robot),Direction(robot,direction),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1659
axiom(terminates(moveLeftWheel(Robot), direction(Robot, Direction), Time),
   
    [ not(happens(moveRightWheel(Robot), Time)),
      holds_at(direction(Robot, Direction), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1661
% [robot,direction1,direction2,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1+1)->
% Initiates(MoveRightWheel(robot),Direction(robot,direction2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1665
axiom(initiates(moveRightWheel(Robot), direction(Robot, Direction2), Time),
   
    [ not(happens(moveLeftWheel(Robot), Time)),
      holds_at(direction(Robot, Direction1), Time),
      equals(Direction2, Direction1+1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1667
% [robot,direction,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Direction(robot,direction),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1670
axiom(terminates(moveRightWheel(Robot), direction(Robot, Direction), Time),
   
    [ not(happens(moveLeftWheel(Robot), Time)),
      holds_at(direction(Robot, Direction), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1672
% [robot,direction,coord1,coord2,coord3,coord4,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Direction(robot,direction),time) &
% coord3 = coord1+Cos(direction) &
% coord4 = coord2+Sin(direction) ->
% Initiates(MoveRightWheel(robot),
%           Location(robot,coord3,coord4),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1680
axiom(initiates(moveRightWheel(Robot), location(Robot, Coord3, Coord4), Time),
   
    [ happens(moveLeftWheel(Robot), Time),
      holds_at(location(Robot, Coord1, Coord2), Time),
      holds_at(direction(Robot, Direction), Time),
      equals(Coord3, Coord1+cos(Direction)),
      equals(Coord4, Coord2+sin(Direction))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1682
% [robot,coord1,coord2,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) ->
%; FIX: Direction not needed!!
%; HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Location(robot,coord1,coord2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1687
axiom(terminates(moveRightWheel(Robot), location(Robot, Coord1, Coord2), Time),
   
    [ happens(moveLeftWheel(Robot), Time),
      holds_at(location(Robot, Coord1, Coord2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1689
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1691
% Happens(MoveRightWheel(Robot1),0).
axiom(happens(moveRightWheel(robot1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1692
% Happens(MoveLeftWheel(Robot1),1).
axiom(happens(moveLeftWheel(robot1), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1693
% Happens(MoveRightWheel(Robot1),1).
axiom(happens(moveRightWheel(robot1), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1695
%; Psi
% [robot,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1699
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Location(robot,coord3,coord4),time) ->
% coord1=coord3 &
% coord2=coord4.

 /*   if((holds_at(location(Robot, Coord1, Coord2), Time), holds_at(location(Robot, Coord3, Coord4), Time)),
          (Coord1=Coord3, Coord2=Coord4)).
 */

 /*  not(holds_at(location(Location_Param, Equals_Param, Equals_Param9), Time6)) :-
       holds_at(location(Location_Param,
                         Equals_Ret,
                         Location_Ret),
                Time6),
       (   not(equals(Equals_Param, Equals_Ret))
       ;   not(equals(Equals_Param9, Location_Ret))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1702
axiom(not(holds_at(location(Location_Param, Equals_Param, Equals_Param9), Time6)),
   
    [ not(equals(Equals_Param, Equals_Ret)),
      holds_at(location(Location_Param,
                        Equals_Ret,
                        Location_Ret),
               Time6)
    ]).
axiom(not(holds_at(location(Location_Param, Equals_Param, Equals_Param9), Time6)),
   
    [ not(equals(Equals_Param9, Location_Ret)),
      holds_at(location(Location_Param,
                        Equals_Ret,
                        Location_Ret),
               Time6)
    ]).

 /*  not(holds_at(location(Location_Param13, Equals_Ret17, Location_Ret16), Time12)) :-
       holds_at(location(Location_Param13,
                         Equals_Param14,
                         Equals_Param15),
                Time12),
       (   not(equals(Equals_Param14, Equals_Ret17))
       ;   not(equals(Equals_Param15, Location_Ret16))
       ).
 */
axiom(not(holds_at(location(Location_Param13, Equals_Ret17, Location_Ret16), Time12)),
   
    [ not(equals(Equals_Param14, Equals_Ret17)),
      holds_at(location(Location_Param13,
                        Equals_Param14,
                        Equals_Param15),
               Time12)
    ]).
axiom(not(holds_at(location(Location_Param13, Equals_Ret17, Location_Ret16), Time12)),
   
    [ not(equals(Equals_Param15, Location_Ret16)),
      holds_at(location(Location_Param13,
                        Equals_Param14,
                        Equals_Param15),
               Time12)
    ]).

 /*  equals(Equals_Param19, Equals_Ret21) :-
       holds_at(location(Location_Param20,
                         Equals_Param19,
                         Location_Ret22),
                Time18),
       holds_at(location(Location_Param20,
                         Equals_Ret21,
                         Location_Ret23),
                Time18).
 */
axiom(equals(Equals_Param19, Equals_Ret21),
   
    [ holds_at(location(Location_Param20,
                        Equals_Param19,
                        Location_Ret22),
               Time18),
      holds_at(location(Location_Param20,
                        Equals_Ret21,
                        Location_Ret23),
               Time18)
    ]).

 /*  equals(Equals_Param25, Equals_Ret27) :-
       holds_at(location(Location_Param26, _, Equals_Param25),
                Time24),
       holds_at(location(Location_Param26, _, Equals_Ret27),
                Time24).
 */
axiom(equals(Equals_Param25, Equals_Ret27),
   
    [ holds_at(location(Location_Param26, _, Equals_Param25),
               Time24),
      holds_at(location(Location_Param26, _, Equals_Ret27),
               Time24)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1704
% [robot,direction1,direction2,time]
% HoldsAt(Direction(robot,direction1),time) &
% HoldsAt(Direction(robot,direction2),time) ->
% direction1=direction2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1707
axiom(Direction1=Direction2,
   
    [ holds_at(direction(Robot, Direction1), Time),
      holds_at(direction(Robot, Direction2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1709
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1711
% HoldsAt(Location(Robot1,0,0),0).
axiom(initially(location(robot1, 0, 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1712
% HoldsAt(Direction(Robot1,0),0).
axiom(initially(direction(robot1, 0)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1714
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1715
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1717
==> range(time,0,3).

% range coord 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1718
==> range(coord,0,3).

% range direction 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1719
==> range(direction,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1720
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/PatHeadRubStomach.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1747
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1750
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1751
==> sort(agent).

% event PatHead(agent)
 %  event(patHead(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1753
==> mpred_prop(patHead(agent),event).
==> meta_argtypes(patHead(agent)).

% event RubStomach(agent)
 %  event(rubStomach(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1754
==> mpred_prop(rubStomach(agent),event).
==> meta_argtypes(rubStomach(agent)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1756
==> t(agent,nathan).
%; Delta
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1760
% Happens(PatHead(agent),time) ->
% !Happens(RubStomach(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1761
axiom(not(happens(rubStomach(Agent), Time)),
    [happens(patHead(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1763
% Happens(PatHead(Nathan),0) & Happens(RubStomach(Nathan),0).

 /*   happens(patHead(nathan), 0),
      happens(rubStomach(nathan), 0).
 */
axiom(happens(patHead(nathan), t),
    [is_time(0)]).
axiom(happens(rubStomach(nathan), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1765
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1766
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1767
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/MovingNewspaperAndBox.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1794
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1797
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1798
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1799
==> subsort(agent,object).

% sort physobj: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1800
==> subsort(physobj,object).

% sort room: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1801
==> subsort(room,object).

% fluent IN(object,object)
 %  fluent(in(object,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1803
==> mpred_prop(in(object,object),fluent).
==> meta_argtypes(in(object,object)).

% fluent INROOM(object,room)
 %  fluent(inroom(object,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1804
==> mpred_prop(inroom(object,room),fluent).
==> meta_argtypes(inroom(object,room)).

% noninertial INROOM
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1805
==> noninertial(inroom).

% event MOVE(agent,object,object,object)
 %  event(move(agent,object,object,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1807
==> mpred_prop(move(agent,object,object,object),event).
==> meta_argtypes(move(agent,object,object,object)).

% agent Lisa
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1809
==> t(agent,lisa).

% physobj Box, Newspaper
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1810
==> t(physobj,box).
==> t(physobj,newspaper).

% room Kitchen, LivingRoom
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1811
==> t(room,kitchen).
==> t(room,livingRoom).
%; Sigma
%; RS10
% [agent,physobj1,physobj2,room,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1816
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Initiates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1819
axiom(initiates(move(Agent, Physobj1, Room, Physobj2), in(Physobj1, Physobj2), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj1, Room), Time),
      holds_at(inroom(Physobj2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1821
%; RS11
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Terminates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1826
axiom(terminates(move(Agent, Physobj1, Room, Physobj2), in(Physobj1, Room), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj1, Room), Time),
      holds_at(inroom(Physobj2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1828
%; RS12
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1831
axiom(initiates(move(Agent, Physobj1, Physobj2, Room), in(Physobj1, Room), Time),
    [holds_at(in(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1833
%; RS13
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1836
axiom(terminates(move(Agent, Physobj1, Physobj2, Room), in(Physobj1, Physobj2), Time),
    [holds_at(in(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1838
%; RS14
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Initiates(MOVE(agent,agent,room1,room2),IN(agent,room2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1841
axiom(initiates(move(Agent, Agent, Room1, Room2), in(Agent, Room2), Time),
    [holds_at(in(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1843
%; RS15
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Terminates(MOVE(agent,agent,room1,room2),IN(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1846
axiom(terminates(move(Agent, Agent, Room1, Room2), in(Agent, Room1), Time),
    [holds_at(in(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1848
%; RS16
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Initiates(MOVE(agent,physobj,room,agent),IN(physobj,agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1852
axiom(initiates(move(Agent, Physobj, Room, Agent), in(Physobj, Agent), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1854
%; RS17
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Terminates(MOVE(agent,physobj,room,agent),IN(physobj,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1858
axiom(terminates(move(Agent, Physobj, Room, Agent), in(Physobj, Room), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1860
%; RS18
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj,agent,room),IN(physobj,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1864
axiom(initiates(move(Agent, Physobj, Agent, Room), in(Physobj, Room), Time),
   
    [ holds_at(in(Physobj, Agent), Time),
      holds_at(in(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1866
%; RS19
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj,agent,room),IN(physobj,agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1870
axiom(terminates(move(Agent, Physobj, Agent, Room), in(Physobj, Agent), Time),
   
    [ holds_at(in(Physobj, Agent), Time),
      holds_at(in(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1872
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1874
% Happens(MOVE(Lisa,Newspaper,LivingRoom,Box),0).
axiom(happens(move(lisa, newspaper, livingRoom, box), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1875
% Happens(MOVE(Lisa,Box,LivingRoom,Lisa),1).
axiom(happens(move(lisa, box, livingRoom, lisa), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1876
% Happens(MOVE(Lisa,Lisa,LivingRoom,Kitchen),2).
axiom(happens(move(lisa, lisa, livingRoom, kitchen), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1877
% Happens(MOVE(Lisa,Box,Lisa,Kitchen),3).
axiom(happens(move(lisa, box, lisa, kitchen), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1878
% Happens(MOVE(Lisa,Lisa,Kitchen,LivingRoom),4).
axiom(happens(move(lisa, lisa, kitchen, livingRoom), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1880
%; Psi
%; RS1
% [object,time]
 
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1883
% !HoldsAt(IN(object,object),time).
 %  not(holds_at(in(Object,Object),Time)).
axiom(not(holds_at(in(In_Param, In_Param), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1885
%; RS2
% [object1,object2,time]
% HoldsAt(IN(object1,object2),time) ->
% !HoldsAt(IN(object2,object1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1888
axiom(not(holds_at(in(Object2, Object1), Time)),
    [holds_at(in(Object1, Object2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1890
%; RS3
% [object1,object2,object3,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(IN(object2,object3),time) ->
% !HoldsAt(IN(object1,object3),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1894
axiom(not(holds_at(in(Object1, Object3), Time)),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(in(Object2, Object3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1896
%; RS4
% [object,object1,object2,time]
% HoldsAt(IN(object,object1),time) &
% HoldsAt(IN(object,object2),time) ->
% object1=object2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1900
axiom(Object1=Object2,
   
    [ holds_at(in(Object, Object1), Time),
      holds_at(in(Object, Object2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1902
%; RS7
% [object,room,time]
% HoldsAt(IN(object,room),time) ->
% HoldsAt(INROOM(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1905
axiom(holds_at(inroom(Object, Room), Time),
    [holds_at(in(Object, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1907
%; RS8
% [object1,object2,room,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(INROOM(object2,room),time) ->
% HoldsAt(INROOM(object1,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1911
axiom(holds_at(inroom(Object1, Room), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(inroom(Object2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1913
%; RS9
% [object,room1,room2,time]
% HoldsAt(INROOM(object,room1),time) &
% HoldsAt(INROOM(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1917
axiom(Room1=Room2,
   
    [ holds_at(inroom(Object, Room1), Time),
      holds_at(inroom(Object, Room2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1919
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1921
% HoldsAt(IN(Lisa,LivingRoom),0).
axiom(initially(in(lisa, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1922
% HoldsAt(IN(Newspaper,LivingRoom),0).
axiom(initially(in(newspaper, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1923
% HoldsAt(IN(Box,LivingRoom),0).
axiom(initially(in(box, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1925
%; added:
% [room1,room2,time]
 % !HoldsAt(INROOM(room1,room2),time).
 %  not(holds_at(inroom(Room1,Room2),Time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1926
axiom(not(holds_at(inroom(Inroom_Param, Inroom_Ret), Time3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1927
% [room,object,time]
 % !HoldsAt(IN(room,object),time).
 %  not(holds_at(in(Room,Object),Time)).
axiom(not(holds_at(in(In_Param, In_Ret), Time3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1929
%; entailed:
%; HoldsAt(IN(Lisa,LivingRoom),5).
%; HoldsAt(IN(Box,Kitchen),5).
%; HoldsAt(INROOM(Newspaper,Kitchen),5).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1934
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1935
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1937
==> range(time,0,5).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1938
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1973
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1976
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1977
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1978
==> sort(location).

% object O1, O2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1980
==> t(object,o1).
==> t(object,o2).

% location L1, L2, L3, L4, L5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1981
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).
==> t(location,l4).
==> t(location,l5).

% predicate Adjacent(location,location)
 %  predicate(adjacent(location,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1983
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).

% predicate Equal(object,object)
 %  predicate(equal(object,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1984
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% fluent At(object,location)
 %  fluent(at(object,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1986
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% event Move(object,location,location)
 %  event(move(object,location,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1987
==> mpred_prop(move(object,location,location),event).
==> meta_argtypes(move(object,location,location)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1988
%; Sigma
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1991
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1993
axiom(initiates(move(Object, Location1, Location2), at(Object, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1995
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:1998
axiom(terminates(move(Object, Location1, Location2), at(Object, Location1), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2000
%; Psi
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2003
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2005
axiom(Location1=Location2,
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(at(Object, Location2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2007
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2008
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
          holds_at(at(Object,Location),Time)).
 */

 /*  holds_at(at(At_Param, Location4), Time5) :-
       some(Location4, '$kolem_Fn_351'(At_Param, Time5)).
 */
axiom(holds_at(at(At_Param, Location4), Time5),
    [some(Location4, '$kolem_Fn_351'(At_Param, Time5))]).

 /*  not(some(Location7, '$kolem_Fn_351'(Fn_351_Param, Time8))) :-
       not(holds_at(at(Fn_351_Param, Location7), Time8)).
 */
axiom(not(some(Location7, '$kolem_Fn_351'(Fn_351_Param, Time8))),
    [not(holds_at(at(Fn_351_Param, Location7), Time8))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2010
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2013
axiom(equal(Object1, Object2),
   
    [ holds_at(at(Object1, Location), Time),
      holds_at(at(Object2, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2015
% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2017
axiom(adjacent(Location1, Location2),
    [adjacent(Location2, Location1)]).
axiom(adjacent(Location2, Location1),
    [adjacent(Location1, Location2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2019
% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2021
axiom(equal(Object1, Object2),
    [equal(Object2, Object1)]).
axiom(equal(Object2, Object1),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2023
%; Gamma
% [location1,location2]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2026
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2) |
% (location1=L3 & location2=L4) |
% (location1=L4 & location2=L3) |
% (location1=L4 & location2=L5) |
% (location1=L5 & location2=L4).

 /*  adjacent(Location1, Location2) <->
       (   Location1=l1,
           Location2=l2
       ;   Location1=l2,
           Location2=l1
       ;   Location1=l2,
           Location2=l3
       ;   Location1=l3,
           Location2=l2
       ;   Location1=l3,
           Location2=l4
       ;   Location1=l4,
           Location2=l3
       ;   Location1=l4,
           Location2=l5
       ;   Location1=l5,
           Location2=l4
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2034
axiom(adjacent(Location1, Location2),
    [equals(Location1, l1), equals(Location2, l2)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l2), equals(Location2, l1)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l2), equals(Location2, l3)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l3), equals(Location2, l2)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l3), equals(Location2, l4)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l4), equals(Location2, l3)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l4), equals(Location2, l5)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l5), equals(Location2, l4)]).

 /*   if(adjacent(Location1, Location2),
          (Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2;Location1=l3, Location2=l4;Location1=l4, Location2=l3;Location1=l4, Location2=l5;Location1=l5, Location2=l4)).
 */
todo_later(if(adjacent(Location1, Location2),  (Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2;Location1=l3, Location2=l4;Location1=l4, Location2=l3;Location1=l4, Location2=l5;Location1=l5, Location2=l4)), [(not(adjacent(Adjacent_Param, Equals_Param)):-(not(equals(Adjacent_Param, l1));not(equals(Equals_Param, l2))), (not(equals(Adjacent_Param, l2));not(equals(Equals_Param, l1))), (not(equals(Adjacent_Param, l2));not(equals(Equals_Param, l3))), (not(equals(Adjacent_Param, l3));not(equals(Equals_Param, l2))), (not(equals(Adjacent_Param, l3));not(equals(Equals_Param, l4))), (not(equals(Adjacent_Param, l4));not(equals(Equals_Param, l3))), (not(equals(Adjacent_Param, l4));not(equals(Equals_Param, l5))), (not(equals(Adjacent_Param, l5));not(equals(Equals_Param, l4)))),  (equals(Equals_Param4, l1):-((not(equals(Equals_Param4, l2));not(equals(Equals_Param5, l1))), (not(equals(Equals_Param4, l2));not(equals(Equals_Param5, l3))), (not(equals(Equals_Param4, l3));not(equals(Equals_Param5, l2))), (not(equals(Equals_Param4, l3));not(equals(Equals_Param5, l4))), (not(equals(Equals_Param4, l4));not(equals(Equals_Param5, l3))), (not(equals(Equals_Param4, l4));not(equals(Equals_Param5, l5))), (not(equals(Equals_Param4, l5));not(equals(Equals_Param5, l4)))), adjacent(Equals_Param4, Equals_Param5)),  (equals(Equals_Param6, l2):-((not(equals(Equals_Param7, l2));not(equals(Equals_Param6, l1))), (not(equals(Equals_Param7, l2));not(equals(Equals_Param6, l3))), (not(equals(Equals_Param7, l3));not(equals(Equals_Param6, l2))), (not(equals(Equals_Param7, l3));not(equals(Equals_Param6, l4))), (not(equals(Equals_Param7, l4));not(equals(Equals_Param6, l3))), (not(equals(Equals_Param7, l4));not(equals(Equals_Param6, l5))), (not(equals(Equals_Param7, l5));not(equals(Equals_Param6, l4)))), adjacent(Equals_Param7, Equals_Param6)),  (equals(Equals_Param8, l2):-((not(equals(Equals_Param8, l2));not(equals(Equals_Param9, l3))), (not(equals(Equals_Param8, l3));not(equals(Equals_Param9, l2))), (not(equals(Equals_Param8, l3));not(equals(Equals_Param9, l4))), (not(equals(Equals_Param8, l4));not(equals(Equals_Param9, l3))), (not(equals(Equals_Param8, l4));not(equals(Equals_Param9, l5))), (not(equals(Equals_Param8, l5));not(equals(Equals_Param9, l4)))), (not(equals(Equals_Param8, l1));not(equals(Equals_Param9, l2))), adjacent(Equals_Param8, Equals_Param9)),  (equals(Equals_Param10, l1):-((not(equals(Equals_Param11, l2));not(equals(Equals_Param10, l3))), (not(equals(Equals_Param11, l3));not(equals(Equals_Param10, l2))), (not(equals(Equals_Param11, l3));not(equals(Equals_Param10, l4))), (not(equals(Equals_Param11, l4));not(equals(Equals_Param10, l3))), (not(equals(Equals_Param11, l4));not(equals(Equals_Param10, l5))), (not(equals(Equals_Param11, l5));not(equals(Equals_Param10, l4)))), (not(equals(Equals_Param11, l1));not(equals(Equals_Param10, l2))), adjacent(Equals_Param11, Equals_Param10)),  (equals(Equals_Param12, l2):-((not(equals(Equals_Param12, l3));not(equals(Equals_Param13, l2))), (not(equals(Equals_Param12, l3));not(equals(Equals_Param13, l4))), (not(equals(Equals_Param12, l4));not(equals(Equals_Param13, l3))), (not(equals(Equals_Param12, l4));not(equals(Equals_Param13, l5))), (not(equals(Equals_Param12, l5));not(equals(Equals_Param13, l4)))), (not(equals(Equals_Param12, l2));not(equals(Equals_Param13, l1))), (not(equals(Equals_Param12, l1));not(equals(Equals_Param13, l2))), adjacent(Equals_Param12, Equals_Param13)),  (equals(Equals_Param14, l3):-((not(equals(Equals_Param15, l3));not(equals(Equals_Param14, l2))), (not(equals(Equals_Param15, l3));not(equals(Equals_Param14, l4))), (not(equals(Equals_Param15, l4));not(equals(Equals_Param14, l3))), (not(equals(Equals_Param15, l4));not(equals(Equals_Param14, l5))), (not(equals(Equals_Param15, l5));not(equals(Equals_Param14, l4)))), (not(equals(Equals_Param15, l2));not(equals(Equals_Param14, l1))), (not(equals(Equals_Param15, l1));not(equals(Equals_Param14, l2))), adjacent(Equals_Param15, Equals_Param14)),  (equals(Equals_Param16, l3):-((not(equals(Equals_Param16, l3));not(equals(Equals_Param17, l4))), (not(equals(Equals_Param16, l4));not(equals(Equals_Param17, l3))), (not(equals(Equals_Param16, l4));not(equals(Equals_Param17, l5))), (not(equals(Equals_Param16, l5));not(equals(Equals_Param17, l4)))), (not(equals(Equals_Param16, l2));not(equals(Equals_Param17, l3))), (not(equals(Equals_Param16, l2));not(equals(Equals_Param17, l1))), (not(equals(Equals_Param16, l1));not(equals(Equals_Param17, l2))), adjacent(Equals_Param16, Equals_Param17)),  (equals(Equals_Param18, l2):-((not(equals(Equals_Param19, l3));not(equals(Equals_Param18, l4))), (not(equals(Equals_Param19, l4));not(equals(Equals_Param18, l3))), (not(equals(Equals_Param19, l4));not(equals(Equals_Param18, l5))), (not(equals(Equals_Param19, l5));not(equals(Equals_Param18, l4)))), (not(equals(Equals_Param19, l2));not(equals(Equals_Param18, l3))), (not(equals(Equals_Param19, l2));not(equals(Equals_Param18, l1))), (not(equals(Equals_Param19, l1));not(equals(Equals_Param18, l2))), adjacent(Equals_Param19, Equals_Param18)),  (equals(Equals_Param20, l3):-((not(equals(Equals_Param20, l4));not(equals(Equals_Param21, l3))), (not(equals(Equals_Param20, l4));not(equals(Equals_Param21, l5))), (not(equals(Equals_Param20, l5));not(equals(Equals_Param21, l4)))), (not(equals(Equals_Param20, l3));not(equals(Equals_Param21, l2))), (not(equals(Equals_Param20, l2));not(equals(Equals_Param21, l3))), (not(equals(Equals_Param20, l2));not(equals(Equals_Param21, l1))), (not(equals(Equals_Param20, l1));not(equals(Equals_Param21, l2))), adjacent(Equals_Param20, Equals_Param21)),  (equals(Equals_Param22, l4):-((not(equals(Equals_Param23, l4));not(equals(Equals_Param22, l3))), (not(equals(Equals_Param23, l4));not(equals(Equals_Param22, l5))), (not(equals(Equals_Param23, l5));not(equals(Equals_Param22, l4)))), (not(equals(Equals_Param23, l3));not(equals(Equals_Param22, l2))), (not(equals(Equals_Param23, l2));not(equals(Equals_Param22, l3))), (not(equals(Equals_Param23, l2));not(equals(Equals_Param22, l1))), (not(equals(Equals_Param23, l1));not(equals(Equals_Param22, l2))), adjacent(Equals_Param23, Equals_Param22)),  (equals(Equals_Param24, l4):-((not(equals(Equals_Param24, l4));not(equals(Equals_Param25, l5))), (not(equals(Equals_Param24, l5));not(equals(Equals_Param25, l4)))), (not(equals(Equals_Param24, l3));not(equals(Equals_Param25, l4))), (not(equals(Equals_Param24, l3));not(equals(Equals_Param25, l2))), (not(equals(Equals_Param24, l2));not(equals(Equals_Param25, l3))), (not(equals(Equals_Param24, l2));not(equals(Equals_Param25, l1))), (not(equals(Equals_Param24, l1));not(equals(Equals_Param25, l2))), adjacent(Equals_Param24, Equals_Param25)),  (equals(Equals_Param26, l3):-((not(equals(Equals_Param27, l4));not(equals(Equals_Param26, l5))), (not(equals(Equals_Param27, l5));not(equals(Equals_Param26, l4)))), (not(equals(Equals_Param27, l3));not(equals(Equals_Param26, l4))), (not(equals(Equals_Param27, l3));not(equals(Equals_Param26, l2))), (not(equals(Equals_Param27, l2));not(equals(Equals_Param26, l3))), (not(equals(Equals_Param27, l2));not(equals(Equals_Param26, l1))), (not(equals(Equals_Param27, l1));not(equals(Equals_Param26, l2))), adjacent(Equals_Param27, Equals_Param26)),  (equals(Equals_Param28, l4):-(not(equals(Equals_Param28, l5));not(equals(Equals_Param29, l4))), (not(equals(Equals_Param28, l4));not(equals(Equals_Param29, l3))), (not(equals(Equals_Param28, l3));not(equals(Equals_Param29, l4))), (not(equals(Equals_Param28, l3));not(equals(Equals_Param29, l2))), (not(equals(Equals_Param28, l2));not(equals(Equals_Param29, l3))), (not(equals(Equals_Param28, l2));not(equals(Equals_Param29, l1))), (not(equals(Equals_Param28, l1));not(equals(Equals_Param29, l2))), adjacent(Equals_Param28, Equals_Param29)),  (equals(Equals_Param30, l5):-(not(equals(Equals_Param31, l5));not(equals(Equals_Param30, l4))), (not(equals(Equals_Param31, l4));not(equals(Equals_Param30, l3))), (not(equals(Equals_Param31, l3));not(equals(Equals_Param30, l4))), (not(equals(Equals_Param31, l3));not(equals(Equals_Param30, l2))), (not(equals(Equals_Param31, l2));not(equals(Equals_Param30, l3))), (not(equals(Equals_Param31, l2));not(equals(Equals_Param30, l1))), (not(equals(Equals_Param31, l1));not(equals(Equals_Param30, l2))), adjacent(Equals_Param31, Equals_Param30)),  (equals(Equals_Param32, l5):-(not(equals(Equals_Param32, l4));not(equals(Equals_Param33, l5))), (not(equals(Equals_Param32, l4));not(equals(Equals_Param33, l3))), (not(equals(Equals_Param32, l3));not(equals(Equals_Param33, l4))), (not(equals(Equals_Param32, l3));not(equals(Equals_Param33, l2))), (not(equals(Equals_Param32, l2));not(equals(Equals_Param33, l3))), (not(equals(Equals_Param32, l2));not(equals(Equals_Param33, l1))), (not(equals(Equals_Param32, l1));not(equals(Equals_Param33, l2))), adjacent(Equals_Param32, Equals_Param33)),  (equals(Equals_Param34, l4):-(not(equals(Equals_Param35, l4));not(equals(Equals_Param34, l5))), (not(equals(Equals_Param35, l4));not(equals(Equals_Param34, l3))), (not(equals(Equals_Param35, l3));not(equals(Equals_Param34, l4))), (not(equals(Equals_Param35, l3));not(equals(Equals_Param34, l2))), (not(equals(Equals_Param35, l2));not(equals(Equals_Param34, l3))), (not(equals(Equals_Param35, l2));not(equals(Equals_Param34, l1))), (not(equals(Equals_Param35, l1));not(equals(Equals_Param34, l2))), adjacent(Equals_Param35, Equals_Param34))], 17==17).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2036
% HoldsAt(At(O1,L1),0).
axiom(initially(at(o1, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2037
% [object]
 % !HoldsAt(At(object,L5),0).
 %  not(initially(at(Object,l5))).
axiom(not(initially(at(At_Param, l5))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2039
% HoldsAt(At(O2,L5),4).
holds_at(at(o2,l5),4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2040
% [object]
 % !HoldsAt(At(object,L1),4).
 %  not(holds_at(at(Object,l1),4)).
axiom(not(holds_at(at(At_Param, l1), t4)),
    [b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2042
% [object,time]
 % !HoldsAt(At(object,L3),time).
 %  not(holds_at(at(Object,l3),Time)).
axiom(not(holds_at(at(At_Param, l3), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2044
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2048
axiom(requires(move(Object, Location1, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2050
% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2053
axiom(happens(move(Object2, Location1, Location2), Time),
   
    [ equal(Object1, Object2),
      happens(move(Object1, Location1, Location2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2055
%; entailed: !Equal(O1,O2).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2057
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2058
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2059
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2094
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2097
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2098
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2099
==> sort(location).

% object O1, O2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2101
==> t(object,o1).
==> t(object,o2).

% location L1, L2, L3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2102
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% predicate Adjacent(location,location)
 %  predicate(adjacent(location,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2104
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).

% predicate Equal(object,object)
 %  predicate(equal(object,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2105
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% fluent At(object,location)
 %  fluent(at(object,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2107
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% event Move(object,location,location)
 %  event(move(object,location,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2108
==> mpred_prop(move(object,location,location),event).
==> meta_argtypes(move(object,location,location)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2109
%; Sigma
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2112
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2114
axiom(initiates(move(Object, Location1, Location2), at(Object, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2116
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2119
axiom(terminates(move(Object, Location1, Location2), at(Object, Location1), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2121
%; Psi
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2124
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2126
axiom(Location1=Location2,
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(at(Object, Location2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2128
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2129
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
          holds_at(at(Object,Location),Time)).
 */

 /*  holds_at(at(At_Param, Location4), Time5) :-
       some(Location4, '$kolem_Fn_352'(At_Param, Time5)).
 */
axiom(holds_at(at(At_Param, Location4), Time5),
    [some(Location4, '$kolem_Fn_352'(At_Param, Time5))]).

 /*  not(some(Location7, '$kolem_Fn_352'(Fn_352_Param, Time8))) :-
       not(holds_at(at(Fn_352_Param, Location7), Time8)).
 */
axiom(not(some(Location7, '$kolem_Fn_352'(Fn_352_Param, Time8))),
    [not(holds_at(at(Fn_352_Param, Location7), Time8))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2131
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2134
axiom(equal(Object1, Object2),
   
    [ holds_at(at(Object1, Location), Time),
      holds_at(at(Object2, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2136
% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2138
axiom(adjacent(Location1, Location2),
    [adjacent(Location2, Location1)]).
axiom(adjacent(Location2, Location1),
    [adjacent(Location1, Location2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2140
% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2142
axiom(equal(Object1, Object2),
    [equal(Object2, Object1)]).
axiom(equal(Object2, Object1),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2144
%; Gamma
% [location1,location2]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2147
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2).

 /*  adjacent(Location1, Location2) <->
       (   Location1=l1,
           Location2=l2
       ;   Location1=l2,
           Location2=l1
       ;   Location1=l2,
           Location2=l3
       ;   Location1=l3,
           Location2=l2
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2151
axiom(adjacent(Location1, Location2),
    [equals(Location1, l1), equals(Location2, l2)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l2), equals(Location2, l1)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l2), equals(Location2, l3)]).
axiom(adjacent(Location1, Location2),
    [equals(Location1, l3), equals(Location2, l2)]).

 /*   if(adjacent(Location1, Location2),
          (Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2)).
 */

 /*  not(adjacent(Adjacent_Param, Equals_Param)) :-
       (   not(equals(Adjacent_Param, l1))
       ;   not(equals(Equals_Param, l2))
       ),
       (   not(equals(Adjacent_Param, l2))
       ;   not(equals(Equals_Param, l1))
       ),
       (   not(equals(Adjacent_Param, l2))
       ;   not(equals(Equals_Param, l3))
       ),
       (   not(equals(Adjacent_Param, l3))
       ;   not(equals(Equals_Param, l2))
       ).
 */
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Equals_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Equals_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l1)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l1)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Equals_Param, l3)),
      not(equals(Equals_Param, l1)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Equals_Param, l3)),
      not(equals(Equals_Param, l1)),
      not(equals(Adjacent_Param, l1))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Equals_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Equals_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l1)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Adjacent_Param, l2)),
      not(equals(Equals_Param, l1)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Adjacent_Param, l3)),
      not(equals(Equals_Param, l3)),
      not(equals(Equals_Param, l1)),
      not(equals(Equals_Param, l2))
    ]).
axiom(not(adjacent(Adjacent_Param, Equals_Param)),
   
    [ not(equals(Equals_Param, l2)),
      not(equals(Equals_Param, l3)),
      not(equals(Equals_Param, l1)),
      not(equals(Equals_Param, l2))
    ]).

 /*  equals(Equals_Param4, l1) :-
       ( (   not(equals(Equals_Param4, l2))
         ;   not(equals(Equals_Param5, l1))
         ),
         (   not(equals(Equals_Param4, l2))
         ;   not(equals(Equals_Param5, l3))
         ),
         (   not(equals(Equals_Param4, l3))
         ;   not(equals(Equals_Param5, l2))
         )
       ),
       adjacent(Equals_Param4, Equals_Param5).
 */
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param4, l3)),
      not(equals(Equals_Param4, l2)),
      not(equals(Equals_Param4, l2)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param5, l2)),
      not(equals(Equals_Param4, l2)),
      not(equals(Equals_Param4, l2)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param4, l3)),
      not(equals(Equals_Param5, l3)),
      not(equals(Equals_Param4, l2)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param5, l2)),
      not(equals(Equals_Param5, l3)),
      not(equals(Equals_Param4, l2)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param4, l3)),
      not(equals(Equals_Param4, l2)),
      not(equals(Equals_Param5, l1)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param5, l2)),
      not(equals(Equals_Param4, l2)),
      not(equals(Equals_Param5, l1)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param4, l3)),
      not(equals(Equals_Param5, l3)),
      not(equals(Equals_Param5, l1)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, l1),
   
    [ not(equals(Equals_Param5, l2)),
      not(equals(Equals_Param5, l3)),
      not(equals(Equals_Param5, l1)),
      adjacent(Equals_Param4, Equals_Param5)
    ]).

 /*  equals(Equals_Param6, l2) :-
       ( (   not(equals(Equals_Param7, l2))
         ;   not(equals(Equals_Param6, l1))
         ),
         (   not(equals(Equals_Param7, l2))
         ;   not(equals(Equals_Param6, l3))
         ),
         (   not(equals(Equals_Param7, l3))
         ;   not(equals(Equals_Param6, l2))
         )
       ),
       adjacent(Equals_Param7, Equals_Param6).
 */
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param7, l3)),
      not(equals(Equals_Param7, l2)),
      not(equals(Equals_Param7, l2)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param6, l2)),
      not(equals(Equals_Param7, l2)),
      not(equals(Equals_Param7, l2)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param7, l3)),
      not(equals(Equals_Param6, l3)),
      not(equals(Equals_Param7, l2)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param6, l2)),
      not(equals(Equals_Param6, l3)),
      not(equals(Equals_Param7, l2)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param7, l3)),
      not(equals(Equals_Param7, l2)),
      not(equals(Equals_Param6, l1)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param6, l2)),
      not(equals(Equals_Param7, l2)),
      not(equals(Equals_Param6, l1)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param7, l3)),
      not(equals(Equals_Param6, l3)),
      not(equals(Equals_Param6, l1)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, l2),
   
    [ not(equals(Equals_Param6, l2)),
      not(equals(Equals_Param6, l3)),
      not(equals(Equals_Param6, l1)),
      adjacent(Equals_Param7, Equals_Param6)
    ]).

 /*  equals(Equals_Param8, l2) :-
       ( (   not(equals(Equals_Param8, l2))
         ;   not(equals(Equals_Param9, l3))
         ),
         (   not(equals(Equals_Param8, l3))
         ;   not(equals(Equals_Param9, l2))
         )
       ),
       (   not(equals(Equals_Param8, l1))
       ;   not(equals(Equals_Param9, l2))
       ),
       adjacent(Equals_Param8, Equals_Param9).
 */
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param8, l1)),
      not(equals(Equals_Param8, l3)),
      not(equals(Equals_Param8, l2)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param8, l3)),
      not(equals(Equals_Param8, l2)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param8, l1)),
      not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param8, l2)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param8, l2)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param8, l1)),
      not(equals(Equals_Param8, l3)),
      not(equals(Equals_Param9, l3)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param8, l3)),
      not(equals(Equals_Param9, l3)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param8, l1)),
      not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param9, l3)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, l2),
   
    [ not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param9, l2)),
      not(equals(Equals_Param9, l3)),
      adjacent(Equals_Param8, Equals_Param9)
    ]).

 /*  equals(Equals_Param10, l1) :-
       ( (   not(equals(Equals_Param11, l2))
         ;   not(equals(Equals_Param10, l3))
         ),
         (   not(equals(Equals_Param11, l3))
         ;   not(equals(Equals_Param10, l2))
         )
       ),
       (   not(equals(Equals_Param11, l1))
       ;   not(equals(Equals_Param10, l2))
       ),
       adjacent(Equals_Param11, Equals_Param10).
 */
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param11, l1)),
      not(equals(Equals_Param11, l3)),
      not(equals(Equals_Param11, l2)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param11, l3)),
      not(equals(Equals_Param11, l2)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param11, l1)),
      not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param11, l2)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param11, l2)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param11, l1)),
      not(equals(Equals_Param11, l3)),
      not(equals(Equals_Param10, l3)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param11, l3)),
      not(equals(Equals_Param10, l3)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param11, l1)),
      not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param10, l3)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, l1),
   
    [ not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param10, l2)),
      not(equals(Equals_Param10, l3)),
      adjacent(Equals_Param11, Equals_Param10)
    ]).

 /*  equals(Equals_Param12, l2) :-
       (   not(equals(Equals_Param12, l3))
       ;   not(equals(Equals_Param13, l2))
       ),
       (   not(equals(Equals_Param12, l2))
       ;   not(equals(Equals_Param13, l1))
       ),
       (   not(equals(Equals_Param12, l1))
       ;   not(equals(Equals_Param13, l2))
       ),
       adjacent(Equals_Param12, Equals_Param13).
 */
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param12, l1)),
      not(equals(Equals_Param12, l2)),
      not(equals(Equals_Param12, l3)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param13, l2)),
      not(equals(Equals_Param12, l2)),
      not(equals(Equals_Param12, l3)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param12, l1)),
      not(equals(Equals_Param13, l1)),
      not(equals(Equals_Param12, l3)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param13, l2)),
      not(equals(Equals_Param13, l1)),
      not(equals(Equals_Param12, l3)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param12, l1)),
      not(equals(Equals_Param12, l2)),
      not(equals(Equals_Param13, l2)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param13, l2)),
      not(equals(Equals_Param12, l2)),
      not(equals(Equals_Param13, l2)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param12, l1)),
      not(equals(Equals_Param13, l1)),
      not(equals(Equals_Param13, l2)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).
axiom(equals(Equals_Param12, l2),
   
    [ not(equals(Equals_Param13, l2)),
      not(equals(Equals_Param13, l1)),
      not(equals(Equals_Param13, l2)),
      adjacent(Equals_Param12, Equals_Param13)
    ]).

 /*  equals(Equals_Param14, l3) :-
       (   not(equals(Equals_Param15, l3))
       ;   not(equals(Equals_Param14, l2))
       ),
       (   not(equals(Equals_Param15, l2))
       ;   not(equals(Equals_Param14, l1))
       ),
       (   not(equals(Equals_Param15, l1))
       ;   not(equals(Equals_Param14, l2))
       ),
       adjacent(Equals_Param15, Equals_Param14).
 */
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param15, l1)),
      not(equals(Equals_Param15, l2)),
      not(equals(Equals_Param15, l3)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param14, l2)),
      not(equals(Equals_Param15, l2)),
      not(equals(Equals_Param15, l3)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param15, l1)),
      not(equals(Equals_Param14, l1)),
      not(equals(Equals_Param15, l3)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param14, l2)),
      not(equals(Equals_Param14, l1)),
      not(equals(Equals_Param15, l3)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param15, l1)),
      not(equals(Equals_Param15, l2)),
      not(equals(Equals_Param14, l2)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param14, l2)),
      not(equals(Equals_Param15, l2)),
      not(equals(Equals_Param14, l2)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param15, l1)),
      not(equals(Equals_Param14, l1)),
      not(equals(Equals_Param14, l2)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).
axiom(equals(Equals_Param14, l3),
   
    [ not(equals(Equals_Param14, l2)),
      not(equals(Equals_Param14, l1)),
      not(equals(Equals_Param14, l2)),
      adjacent(Equals_Param15, Equals_Param14)
    ]).

 /*  equals(Equals_Param16, l3) :-
       (   not(equals(Equals_Param16, l2))
       ;   not(equals(Equals_Param17, l3))
       ),
       (   not(equals(Equals_Param16, l2))
       ;   not(equals(Equals_Param17, l1))
       ),
       (   not(equals(Equals_Param16, l1))
       ;   not(equals(Equals_Param17, l2))
       ),
       adjacent(Equals_Param16, Equals_Param17).
 */
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param16, l1)),
      not(equals(Equals_Param16, l2)),
      not(equals(Equals_Param16, l2)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param17, l2)),
      not(equals(Equals_Param16, l2)),
      not(equals(Equals_Param16, l2)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param16, l1)),
      not(equals(Equals_Param17, l1)),
      not(equals(Equals_Param16, l2)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param17, l2)),
      not(equals(Equals_Param17, l1)),
      not(equals(Equals_Param16, l2)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param16, l1)),
      not(equals(Equals_Param16, l2)),
      not(equals(Equals_Param17, l3)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param17, l2)),
      not(equals(Equals_Param16, l2)),
      not(equals(Equals_Param17, l3)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param16, l1)),
      not(equals(Equals_Param17, l1)),
      not(equals(Equals_Param17, l3)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).
axiom(equals(Equals_Param16, l3),
   
    [ not(equals(Equals_Param17, l2)),
      not(equals(Equals_Param17, l1)),
      not(equals(Equals_Param17, l3)),
      adjacent(Equals_Param16, Equals_Param17)
    ]).

 /*  equals(Equals_Param18, l2) :-
       (   not(equals(Equals_Param19, l2))
       ;   not(equals(Equals_Param18, l3))
       ),
       (   not(equals(Equals_Param19, l2))
       ;   not(equals(Equals_Param18, l1))
       ),
       (   not(equals(Equals_Param19, l1))
       ;   not(equals(Equals_Param18, l2))
       ),
       adjacent(Equals_Param19, Equals_Param18).
 */
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param19, l1)),
      not(equals(Equals_Param19, l2)),
      not(equals(Equals_Param19, l2)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param18, l2)),
      not(equals(Equals_Param19, l2)),
      not(equals(Equals_Param19, l2)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param19, l1)),
      not(equals(Equals_Param18, l1)),
      not(equals(Equals_Param19, l2)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param18, l2)),
      not(equals(Equals_Param18, l1)),
      not(equals(Equals_Param19, l2)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param19, l1)),
      not(equals(Equals_Param19, l2)),
      not(equals(Equals_Param18, l3)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param18, l2)),
      not(equals(Equals_Param19, l2)),
      not(equals(Equals_Param18, l3)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param19, l1)),
      not(equals(Equals_Param18, l1)),
      not(equals(Equals_Param18, l3)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).
axiom(equals(Equals_Param18, l2),
   
    [ not(equals(Equals_Param18, l2)),
      not(equals(Equals_Param18, l1)),
      not(equals(Equals_Param18, l3)),
      adjacent(Equals_Param19, Equals_Param18)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2153
% HoldsAt(At(O1,L1),0).
axiom(initially(at(o1, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2154
% [object]
 % !HoldsAt(At(object,L3),0).
 %  not(initially(at(Object,l3))).
axiom(not(initially(at(At_Param, l3))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2156
% [object]
 % !HoldsAt(At(object,L1),1).
 %  not(holds_at(at(Object,l1),1)).
axiom(not(holds_at(at(At_Param, l1), start)),
    [b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2157
% [object]
 % !HoldsAt(At(object,L3),1).
 %  not(holds_at(at(Object,l3),1)).
axiom(not(holds_at(at(At_Param, l3), start)),
    [b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2159
% HoldsAt(At(O2,L3),2).
holds_at(at(o2,l3),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2160
% [object]
 % !HoldsAt(At(object,L1),2).
 %  not(holds_at(at(Object,l1),2)).
axiom(not(holds_at(at(At_Param, l1), t2)),
    [b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2162
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2166
axiom(requires(move(Object, Location1, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2168
% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2171
axiom(happens(move(Object2, Location1, Location2), Time),
   
    [ equal(Object1, Object2),
      happens(move(Object1, Location1, Location2), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2173
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2174
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2175
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RunningAndDriving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2202
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2205
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2206
==> sort(agent).

% sort location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2207
==> sort(location).

% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2209
==> t(agent,james).

% location Bookstore
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2210
==> t(location,bookstore).

% fluent Tired(agent)
 %  fluent(tired(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2212
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% event Go(agent,location)
 %  event(go(agent,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2214
==> mpred_prop(go(agent,location),event).
==> meta_argtypes(go(agent,location)).

% event Run(agent,location)
 %  event(run(agent,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2215
==> mpred_prop(run(agent,location),event).
==> meta_argtypes(run(agent,location)).

% event Drive(agent,location)
 %  event(drive(agent,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2216
==> mpred_prop(drive(agent,location),event).
==> meta_argtypes(drive(agent,location)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2217
% [agent,location,time]
% Happens(Go(agent,location),time) ->
% Happens(Run(agent,location),time) | Happens(Drive(agent,location),time).

 /*   if(happens(go(Agent, Location), Time),
          (happens(run(Agent, Location), Time);happens(drive(Agent, Location), Time))).
 */

 /*  happens(run(Run_Param, Run_Ret), Maptime) :-
       not(happens(drive(Run_Param, Run_Ret), Maptime)),
       happens(go(Run_Param, Run_Ret), Maptime).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2219
axiom(happens(run(Run_Param, Run_Ret), Maptime),
   
    [ not(happens(drive(Run_Param, Run_Ret), Maptime)),
      happens(go(Run_Param, Run_Ret), Maptime)
    ]).

 /*  happens(drive(Drive_Param, Drive_Ret), Maptime6) :-
       not(happens(run(Drive_Param, Drive_Ret), Maptime6)),
       happens(go(Drive_Param, Drive_Ret), Maptime6).
 */
axiom(happens(drive(Drive_Param, Drive_Ret), Maptime6),
   
    [ not(happens(run(Drive_Param, Drive_Ret), Maptime6)),
      happens(go(Drive_Param, Drive_Ret), Maptime6)
    ]).

 /*  not(happens(go(Go_Param, Go_Ret), Maptime9)) :-
       not(happens(run(Go_Param, Go_Ret), Maptime9)),
       not(happens(drive(Go_Param, Go_Ret), Maptime9)).
 */
axiom(not(happens(go(Go_Param, Go_Ret), Maptime9)),
   
    [ not(happens(run(Go_Param, Go_Ret), Maptime9)),
      not(happens(drive(Go_Param, Go_Ret), Maptime9))
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2221
% xor Run, Drive
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2222
xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2223
% [agent,location,time]
 % Initiates(Run(agent,location),Tired(agent),time).
axiom(initiates(run(Agent, Location), tired(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2225
% !HoldsAt(Tired(James),0).
 %  not(initially(tired(james))).
axiom(not(initially(tired(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2226
% Happens(Go(James,Bookstore),0).
axiom(happens(go(james, bookstore), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2227
% HoldsAt(Tired(James),1).
holds_at(tired(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2229
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2230
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2231
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2258
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2259
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2261
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2263
% sort dealer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2264
==> sort(dealer).

% sort wheel
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2265
==> sort(wheel).

% sort value: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2266
==> subsort(value,integer).

% wheel Wheel1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2268
==> t(wheel,wheel1).

% dealer Dealer1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2269
==> t(dealer,dealer1).

% fluent WheelNumberDeterminer(wheel,value)
 %  fluent(wheelNumberDeterminer(wheel,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2271
==> mpred_prop(wheelNumberDeterminer(wheel,value),fluent).
==> meta_argtypes(wheelNumberDeterminer(wheel,value)).

% fluent WheelNumber(wheel,value)
 %  fluent(wheelNumber(wheel,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2272
==> mpred_prop(wheelNumber(wheel,value),fluent).
==> meta_argtypes(wheelNumber(wheel,value)).

% noninertial WheelNumberDeterminer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2273
==> noninertial(wheelNumberDeterminer).

% event Spin(dealer,wheel)
 %  event(spin(dealer,wheel)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2275
==> mpred_prop(spin(dealer,wheel),event).
==> meta_argtypes(spin(dealer,wheel)).

% event Reset(dealer,wheel)
 %  event(reset(dealer,wheel)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2276
==> mpred_prop(reset(dealer,wheel),event).
==> meta_argtypes(reset(dealer,wheel)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2277
% [wheel,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2278
% {value}% HoldsAt(WheelNumberDeterminer(wheel,value),time).

 /*  exists([Value],
          holds_at(wheelNumberDeterminer(Wheel,Value),
   		Time)).
 */

 /*  holds_at(wheelNumberDeterminer(WheelNumberDeterminer_Param, Some_Param), Time4) :-
       some(Some_Param,
            '$kolem_Fn_353'(WheelNumberDeterminer_Param, Time4)).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2279
axiom(holds_at(wheelNumberDeterminer(WheelNumberDeterminer_Param, Some_Param), Time4),
   
    [ some(Some_Param,
           '$kolem_Fn_353'(WheelNumberDeterminer_Param, Time4))
    ]).

 /*  not(some(Some_Param8, '$kolem_Fn_353'(Fn_353_Param, Time7))) :-
       not(holds_at(wheelNumberDeterminer(Fn_353_Param, Some_Param8),
                    Time7)).
 */
axiom(not(some(Some_Param8, '$kolem_Fn_353'(Fn_353_Param, Time7))),
   
    [ not(holds_at(wheelNumberDeterminer(Fn_353_Param, Some_Param8),
                   Time7))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2281
% [wheel,value1,value2,time]
% HoldsAt(WheelNumberDeterminer(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2284
axiom(Value1=Value2,
   
    [ holds_at(wheelNumberDeterminer(Wheel, Value1), Time),
      holds_at(wheelNumberDeterminer(Wheel, Value2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2286
% [dealer,wheel,value,time]
% HoldsAt(WheelNumberDeterminer(wheel,value),time) ->
% Initiates(Spin(dealer,wheel),WheelNumber(wheel,value),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2288
axiom(initiates(spin(Dealer, Wheel), wheelNumber(Wheel, Value), Time),
    [holds_at(wheelNumberDeterminer(Wheel, Value), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2290
% [dealer,wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(dealer,wheel),WheelNumber(wheel,value1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2294
axiom(terminates(spin(Dealer, Wheel), wheelNumber(Wheel, Value1), Time),
   
    [ holds_at(wheelNumber(Wheel, Value1), Time),
      holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
      { dif(Value1, Value2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2296
% [dealer,wheel,value,time]
% Terminates(Reset(dealer,wheel),WheelNumber(wheel,value),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2297
axiom(terminates(reset(Dealer, Wheel), wheelNumber(Wheel, Value), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2299
% [wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumber(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2302
axiom(Value1=Value2,
   
    [ holds_at(wheelNumber(Wheel, Value1), Time),
      holds_at(wheelNumber(Wheel, Value2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2304
% [value]
 % !HoldsAt(WheelNumber(Wheel1,value),0).
 %  not(initially(wheelNumber(wheel1,Value))).
axiom(not(initially(wheelNumber(wheel1, WheelNumber_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2306
% Happens(Spin(Dealer1,Wheel1),0).
axiom(happens(spin(dealer1, wheel1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2307
%;Happens(Reset(Dealer1,Wheel1),1).
%; added to prune models


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2310
% HoldsAt(WheelNumberDeterminer(Wheel1, 1),1).
holds_at(wheelNumberDeterminer(wheel1,1),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2312
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2313
==> completion(happens).

% range value 1 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2315
==> range(value,1,3).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2316
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2317
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2355
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2356
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2358
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2360
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2361
==> sort(agent).

% agent MusicStore, Jen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2362
==> t(agent,musicStore).
==> t(agent,jen).

% sort product
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2364
==> sort(product).

% product BritneyCD
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2365
==> t(product,britneyCD).

% sort f
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2367
==> sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2368
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% f DeliveredMusicStoreJenBritneyCD
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2369
==> t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2370
==> t(f,ePOSentJenMusicStore1).

% sort amount: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2372
==> subsort(amount,integer).

% fluent C(agent,agent,f)
 %  fluent(c(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2374
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
 %  fluent(cc(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2375
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% event CreateC(agent,agent,f)
 %  event(createC(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2377
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
 %  event(createCC(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2378
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% event DischargeC(agent,agent,f)
 %  event(dischargeC(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2379
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
 %  event(dischargeCC(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2380
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% fluent QuoteSent(agent,agent,product,amount)
 %  fluent(quoteSent(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2382
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
 %  fluent(purchaseRequested(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2383
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% fluent Delivered(agent,agent,product)
 %  fluent(delivered(agent,agent,product)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2384
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
 %  fluent(ePOSent(agent,agent,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2385
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% event SendQuote(agent,agent,product,amount)
 %  event(sendQuote(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2387
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
 %  event(requestPurchase(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2388
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% event Deliver(agent,agent,product)
 %  event(deliver(agent,agent,product)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2389
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
 %  event(sendEPO(agent,agent,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2390
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2391
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2394
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2396
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2397
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2399
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2400
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2402
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2403
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2405
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2408
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2410
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2413
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2415
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2418
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2420
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2423
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2425
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2434
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, musicStore),
      equals(Agent2, jen),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, purchaseRequestedJenMusicStoreBritneyCD1),
      equals(F2, deliveredMusicStoreJenBritneyCD)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2436
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2446
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, jen),
      equals(Agent2, musicStore),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, deliveredMusicStoreJenBritneyCD),
      equals(F2, ePOSentJenMusicStore1),
      not(holds_at(delivered(Agent2, Agent1, Product),
                   Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2448
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2450
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2450
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2453
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2455
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2455
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2458
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2460
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2460
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2463
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2465
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2465
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2468
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2470
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2470
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2473
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2475
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2475
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2478
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2480
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2480
% Happens(SendQuote(MusicStore,Jen,BritneyCD,1),0).
axiom(happens(sendQuote(musicStore, jen, britneyCD, 1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2481
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2481
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),1).
axiom(happens(requestPurchase(jen, musicStore, britneyCD, 1), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2482
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2482
% Happens(Deliver(MusicStore,Jen,BritneyCD),3).
axiom(happens(deliver(musicStore, jen, britneyCD), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2483
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2483
% Happens(SendEPO(Jen,MusicStore,1),5).
axiom(happens(sendEPO(jen, musicStore, 1), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2485
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2488
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).

 /*  not(initially(quoteSent(Agent1,
   			Agent2,
   			Product,
   			Amount))).
 */
axiom(not(initially(quoteSent(QuoteSent_Param, _, _, QuoteSent_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2490
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).

 /*  not(initially(purchaseRequested(Agent1,
   				Agent2,
   				Product,
   				Amount))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2491
axiom(not(initially(purchaseRequested(PurchaseRequested_Param, _, _, PurchaseRequested_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2493
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
 %  not(initially(delivered(Agent1,Agent2,Product))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2494
axiom(not(initially(delivered(Delivered_Param, _, Delivered_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2496
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
 %  not(initially(c(Agent1,Agent2,F))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2497
axiom(not(initially(c(C_Param, _, C_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2499
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
 %  not(initially(cc(Agent1,Agent2,F1,F2))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2500
axiom(not(initially(cc(Cc_Param, _, _, Cc_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2502
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
 %  not(initially(ePOSent(Agent1,Agent2,Amount))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2503
axiom(not(initially(ePOSent(EPOSent_Param, _, EPOSent_Ret))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2505
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2506
==> completion(delta).
==> completion(happens).

% range time 0 7
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2508
==> range(time,0,7).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2509
==> range(offset,1,1).

% range amount 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2510
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2548
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2549
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2551
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2553
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2554
==> sort(agent).

% agent MusicStore, Jen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2555
==> t(agent,musicStore).
==> t(agent,jen).

% sort product
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2557
==> sort(product).

% product BritneyCD
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2558
==> t(product,britneyCD).

% sort f
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2560
==> sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2561
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% f DeliveredMusicStoreJenBritneyCD
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2562
==> t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2563
==> t(f,ePOSentJenMusicStore1).

% sort amount: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2565
==> subsort(amount,integer).

% fluent C(agent,agent,f)
 %  fluent(c(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2567
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
 %  fluent(cc(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2568
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% event CreateC(agent,agent,f)
 %  event(createC(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2570
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
 %  event(createCC(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2571
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% event DischargeC(agent,agent,f)
 %  event(dischargeC(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2572
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
 %  event(dischargeCC(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2573
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% fluent QuoteSent(agent,agent,product,amount)
 %  fluent(quoteSent(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2575
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
 %  fluent(purchaseRequested(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2576
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% fluent Delivered(agent,agent,product)
 %  fluent(delivered(agent,agent,product)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2577
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
 %  fluent(ePOSent(agent,agent,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2578
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% event SendQuote(agent,agent,product,amount)
 %  event(sendQuote(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2580
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
 %  event(requestPurchase(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2581
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% event Deliver(agent,agent,product)
 %  event(deliver(agent,agent,product)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2582
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
 %  event(sendEPO(agent,agent,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2583
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2584
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2587
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2589
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2590
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2592
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2593
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2595
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2596
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2598
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2601
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2603
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2606
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2608
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2611
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2613
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2616
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2618
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2627
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, musicStore),
      equals(Agent2, jen),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, purchaseRequestedJenMusicStoreBritneyCD1),
      equals(F2, deliveredMusicStoreJenBritneyCD)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2629
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2639
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, jen),
      equals(Agent2, musicStore),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, deliveredMusicStoreJenBritneyCD),
      equals(F2, ePOSentJenMusicStore1),
      not(holds_at(delivered(Agent2, Agent1, Product),
                   Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2641
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2643
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2643
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2646
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2648
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2648
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2651
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2653
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2653
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2656
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2658
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2658
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2661
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2663
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2663
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2666
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2668
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2668
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2671
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2673
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2673
% Happens(Deliver(MusicStore,Jen,BritneyCD),0).
axiom(happens(deliver(musicStore, jen, britneyCD), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2674
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2674
% Happens(SendEPO(Jen,MusicStore,1),2).
axiom(happens(sendEPO(jen, musicStore, 1), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2676
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2679
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).

 /*  not(initially(quoteSent(Agent1,
   			Agent2,
   			Product,
   			Amount))).
 */
axiom(not(initially(quoteSent(QuoteSent_Param, _, _, QuoteSent_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2681
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).

 /*  not(initially(purchaseRequested(Agent1,
   				Agent2,
   				Product,
   				Amount))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2682
axiom(not(initially(purchaseRequested(PurchaseRequested_Param, _, _, PurchaseRequested_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2684
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
 %  not(initially(delivered(Agent1,Agent2,Product))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2685
axiom(not(initially(delivered(Delivered_Param, _, Delivered_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2687
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
 %  not(initially(c(Agent1,Agent2,F))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2688
axiom(not(initially(c(C_Param, _, C_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2690
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
 %  not(initially(cc(Agent1,Agent2,F1,F2))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2691
axiom(not(initially(cc(Cc_Param, _, _, Cc_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2693
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
 %  not(initially(ePOSent(Agent1,Agent2,Amount))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2694
axiom(not(initially(ePOSent(EPOSent_Param, _, EPOSent_Ret))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2696
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2697
==> completion(delta).
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2699
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2700
==> range(offset,1,1).

% range amount 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2701
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2739
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2740
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2742
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2744
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2745
==> sort(agent).

% agent MusicStore, Jen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2746
==> t(agent,musicStore).
==> t(agent,jen).

% sort product
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2748
==> sort(product).

% product BritneyCD
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2749
==> t(product,britneyCD).

% sort f
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2751
==> sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2752
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% f DeliveredMusicStoreJenBritneyCD
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2753
==> t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2754
==> t(f,ePOSentJenMusicStore1).

% sort amount: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2756
==> subsort(amount,integer).

% fluent C(agent,agent,f)
 %  fluent(c(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2758
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
 %  fluent(cc(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2759
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% event CreateC(agent,agent,f)
 %  event(createC(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2761
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
 %  event(createCC(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2762
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% event DischargeC(agent,agent,f)
 %  event(dischargeC(agent,agent,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2763
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
 %  event(dischargeCC(agent,agent,f,f)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2764
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% fluent QuoteSent(agent,agent,product,amount)
 %  fluent(quoteSent(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2766
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
 %  fluent(purchaseRequested(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2767
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% fluent Delivered(agent,agent,product)
 %  fluent(delivered(agent,agent,product)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2768
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
 %  fluent(ePOSent(agent,agent,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2769
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% event SendQuote(agent,agent,product,amount)
 %  event(sendQuote(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2771
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
 %  event(requestPurchase(agent,agent,product,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2772
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% event Deliver(agent,agent,product)
 %  event(deliver(agent,agent,product)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2773
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
 %  event(sendEPO(agent,agent,amount)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2774
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2775
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2778
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2780
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2781
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2783
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2784
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2786
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2787
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2789
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2792
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2794
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2797
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2799
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2802
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2804
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2807
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2809
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2818
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, musicStore),
      equals(Agent2, jen),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, purchaseRequestedJenMusicStoreBritneyCD1),
      equals(F2, deliveredMusicStoreJenBritneyCD)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2820
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2830
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, jen),
      equals(Agent2, musicStore),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, deliveredMusicStoreJenBritneyCD),
      equals(F2, ePOSentJenMusicStore1),
      not(holds_at(delivered(Agent2, Agent1, Product),
                   Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2832
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2834
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2834
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2837
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2839
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2839
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2842
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2844
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2844
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2847
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2849
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2849
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2852
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2854
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2854
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2857
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2859
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2859
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2862
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2864
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2864
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),0).
axiom(happens(requestPurchase(jen, musicStore, britneyCD, 1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2865
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2865
% Happens(Deliver(MusicStore,Jen,BritneyCD),2).
axiom(happens(deliver(musicStore, jen, britneyCD), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2866
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2866
% Happens(SendEPO(Jen,MusicStore,1),4).
axiom(happens(sendEPO(jen, musicStore, 1), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2868
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2871
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).

 /*  not(initially(quoteSent(Agent1,
   			Agent2,
   			Product,
   			Amount))).
 */
axiom(not(initially(quoteSent(QuoteSent_Param, _, _, QuoteSent_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2873
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).

 /*  not(initially(purchaseRequested(Agent1,
   				Agent2,
   				Product,
   				Amount))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2874
axiom(not(initially(purchaseRequested(PurchaseRequested_Param, _, _, PurchaseRequested_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2876
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
 %  not(initially(delivered(Agent1,Agent2,Product))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2877
axiom(not(initially(delivered(Delivered_Param, _, Delivered_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2879
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
 %  not(initially(c(Agent1,Agent2,F))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2880
axiom(not(initially(c(C_Param, _, C_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2882
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
 %  not(initially(cc(Agent1,Agent2,F1,F2))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2883
axiom(not(initially(cc(Cc_Param, _, _, Cc_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2885
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
 %  not(initially(ePOSent(Agent1,Agent2,Amount))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2886
axiom(not(initially(ePOSent(EPOSent_Param, _, EPOSent_Ret))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2888
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2889
==> completion(delta).
==> completion(happens).

% range time 0 6
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2891
==> range(time,0,6).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2892
==> range(offset,1,1).

% range amount 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2893
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Vision.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{ShanahanRandell:2004,
%;   author = "Murray Shanahan and David A. Randell",
%;   year = "2004",
%;   title = "A logic-based formulation of active visual perception",
%;   editor = "Didier Dubois and Christopher A. Welty and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{N}inth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "64--72",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2931
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2932
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2934
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2936
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2937
==> sort(object).

% sort shape
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2938
==> sort(shape).

% sort aspect
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2939
==> sort(aspect).

% object Object1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2941
==> t(object,object1).

% aspect Aspect1, Aspect2, Aspect3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2942
==> t(aspect,aspect1).
==> t(aspect,aspect2).
==> t(aspect,aspect3).

% shape Shape1, Shape2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2943
==> t(shape,shape1).
==> t(shape,shape2).

% predicate Shape(object,shape)
 %  predicate(shape(object,shape)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2945
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% predicate Arc(shape,aspect,aspect)
 %  predicate(arc(shape,aspect,aspect)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2946
==> mpred_prop(arc(shape,aspect,aspect),predicate).
==> meta_argtypes(arc(shape,aspect,aspect)).

% fluent Aspect(object,aspect)
 %  fluent(aspect(object,aspect)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2947
==> mpred_prop(aspect(object,aspect),fluent).
==> meta_argtypes(aspect(object,aspect)).

% event Change(object,aspect,aspect)
 %  event(change(object,aspect,aspect)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2948
==> mpred_prop(change(object,aspect,aspect),event).
==> meta_argtypes(change(object,aspect,aspect)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2949
%; Sigma
% [object,aspect1,aspect2,shape,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2952
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Initiates(Change(object,aspect1,aspect2),Aspect(object,aspect2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2956
axiom(initiates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect2), Time),
   
    [ arc(Shape, Aspect1, Aspect2),
      holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape)
    ]).
axiom(initiates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect2), Time),
   
    [ arc(Shape, Aspect2, Aspect1),
      holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2958
% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Terminates(Change(object,aspect1,aspect2),Aspect(object,aspect1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2963
axiom(terminates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect1), Time),
   
    [ arc(Shape, Aspect1, Aspect2),
      holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape)
    ]).
axiom(terminates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect1), Time),
   
    [ arc(Shape, Aspect2, Aspect1),
      holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2965
%; preconditions (added)
% [object,aspect1,aspect2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2968
% Happens(Change(object,aspect1,aspect2),time) ->
% HoldsAt(Aspect(object,aspect1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2969
axiom(requires(change(Object, Aspect1, Aspect2), Time),
    [holds_at(aspect(Object, Aspect1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2971
% [object,aspect1,aspect2,aspect3,time]
% Happens(Change(object,aspect1,aspect2),time) &
% Happens(Change(object,aspect1,aspect3),time) ->
% aspect2=aspect3.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2974
axiom(Aspect2=Aspect3,
   
    [ happens(change(Object, Aspect1, Aspect2), Time),
      happens(change(Object, Aspect1, Aspect3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2976
%; Psi
% [object,shape1,shape2]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2979
% Shape(object,shape1) &
% Shape(object,shape2) ->
% shape1=shape2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2981
axiom(Shape1=Shape2,
    [shape(Object, Shape1), shape(Object, Shape2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2983
% [object,aspect1,aspect2,time]
% HoldsAt(Aspect(object,aspect1),time) &
% HoldsAt(Aspect(object,aspect2),time) ->
% aspect1=aspect2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2986
axiom(Aspect1=Aspect2,
   
    [ holds_at(aspect(Object, Aspect1), Time),
      holds_at(aspect(Object, Aspect2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2988
% [aspect1,aspect2]
% Arc(Shape1,aspect1,aspect2) <->
% (aspect1=Aspect1 & aspect2=Aspect2).

 /*  arc(shape1, Aspect1, Aspect2) <->
       Aspect1=aspect1,
       Aspect2=aspect2.
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2990
axiom(arc(shape1, Aspect1, Aspect2),
    [equals(Aspect1, aspect1), equals(Aspect2, aspect2)]).

 /*   if(arc(shape1, Aspect1, Aspect2),
          (Aspect1=aspect1, Aspect2=aspect2)).
 */

 /*  not(arc(shape1, Equals_Param, Equals_Param3)) :-
       (   not(equals(Equals_Param, aspect1))
       ;   not(equals(Equals_Param3, aspect2))
       ).
 */
axiom(not(arc(shape1, Equals_Param, Equals_Param3)),
    [not(equals(Equals_Param, aspect1))]).
axiom(not(arc(shape1, Equals_Param, Equals_Param3)),
    [not(equals(Equals_Param3, aspect2))]).

 /*  equals(Equals_Param4, aspect1) :-
       arc(shape1, Equals_Param4, Arc_Ret).
 */
axiom(equals(Equals_Param4, aspect1),
    [arc(shape1, Equals_Param4, Arc_Ret)]).

 /*  equals(Equals_Param6, aspect2) :-
       arc(shape1, _, Equals_Param6).
 */
axiom(equals(Equals_Param6, aspect2),
    [arc(shape1, _, Equals_Param6)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2992
% [aspect1,aspect2]
% Arc(Shape2,aspect1,aspect2) <->
% ((aspect1=Aspect1 & aspect2=Aspect3) |
%  (aspect1=Aspect3 & aspect2=Aspect2)).

 /*  arc(shape2, Aspect1, Aspect2) <->
       (   Aspect1=aspect1,
           Aspect2=aspect3
       ;   Aspect1=aspect3,
           Aspect2=aspect2
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2995
axiom(arc(shape2, Aspect1, Aspect2),
    [equals(Aspect1, aspect1), equals(Aspect2, aspect3)]).
axiom(arc(shape2, Aspect1, Aspect2),
    [equals(Aspect1, aspect3), equals(Aspect2, aspect2)]).

 /*   if(arc(shape2, Aspect1, Aspect2),
          (Aspect1=aspect1, Aspect2=aspect3;Aspect1=aspect3, Aspect2=aspect2)).
 */

 /*  not(arc(shape2, Equals_Param, Equals_Param3)) :-
       (   not(equals(Equals_Param, aspect1))
       ;   not(equals(Equals_Param3, aspect3))
       ),
       (   not(equals(Equals_Param, aspect3))
       ;   not(equals(Equals_Param3, aspect2))
       ).
 */
axiom(not(arc(shape2, Equals_Param, Equals_Param3)),
   
    [ not(equals(Equals_Param, aspect3)),
      not(equals(Equals_Param, aspect1))
    ]).
axiom(not(arc(shape2, Equals_Param, Equals_Param3)),
   
    [ not(equals(Equals_Param3, aspect2)),
      not(equals(Equals_Param, aspect1))
    ]).
axiom(not(arc(shape2, Equals_Param, Equals_Param3)),
   
    [ not(equals(Equals_Param, aspect3)),
      not(equals(Equals_Param3, aspect3))
    ]).
axiom(not(arc(shape2, Equals_Param, Equals_Param3)),
   
    [ not(equals(Equals_Param3, aspect2)),
      not(equals(Equals_Param3, aspect3))
    ]).

 /*  equals(Equals_Param4, aspect1) :-
       (   not(equals(Equals_Param4, aspect3))
       ;   not(equals(Equals_Param5, aspect2))
       ),
       arc(shape2, Equals_Param4, Equals_Param5).
 */
axiom(equals(Equals_Param4, aspect1),
   
    [ not(equals(Equals_Param4, aspect3)),
      arc(shape2, Equals_Param4, Equals_Param5)
    ]).
axiom(equals(Equals_Param4, aspect1),
   
    [ not(equals(Equals_Param5, aspect2)),
      arc(shape2, Equals_Param4, Equals_Param5)
    ]).

 /*  equals(Equals_Param6, aspect3) :-
       (   not(equals(Equals_Param7, aspect3))
       ;   not(equals(Equals_Param6, aspect2))
       ),
       arc(shape2, Equals_Param7, Equals_Param6).
 */
axiom(equals(Equals_Param6, aspect3),
   
    [ not(equals(Equals_Param7, aspect3)),
      arc(shape2, Equals_Param7, Equals_Param6)
    ]).
axiom(equals(Equals_Param6, aspect3),
   
    [ not(equals(Equals_Param6, aspect2)),
      arc(shape2, Equals_Param7, Equals_Param6)
    ]).

 /*  equals(Equals_Param8, aspect3) :-
       (   not(equals(Equals_Param8, aspect1))
       ;   not(equals(Equals_Param9, aspect3))
       ),
       arc(shape2, Equals_Param8, Equals_Param9).
 */
axiom(equals(Equals_Param8, aspect3),
   
    [ not(equals(Equals_Param8, aspect1)),
      arc(shape2, Equals_Param8, Equals_Param9)
    ]).
axiom(equals(Equals_Param8, aspect3),
   
    [ not(equals(Equals_Param9, aspect3)),
      arc(shape2, Equals_Param8, Equals_Param9)
    ]).

 /*  equals(Equals_Param10, aspect2) :-
       (   not(equals(Equals_Param11, aspect1))
       ;   not(equals(Equals_Param10, aspect3))
       ),
       arc(shape2, Equals_Param11, Equals_Param10).
 */
axiom(equals(Equals_Param10, aspect2),
   
    [ not(equals(Equals_Param11, aspect1)),
      arc(shape2, Equals_Param11, Equals_Param10)
    ]).
axiom(equals(Equals_Param10, aspect2),
   
    [ not(equals(Equals_Param10, aspect3)),
      arc(shape2, Equals_Param11, Equals_Param10)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2997
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:2999
% HoldsAt(Aspect(Object1,Aspect1),0).
axiom(initially(aspect(object1, aspect1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3000
% HoldsAt(Aspect(Object1,Aspect2),1).
holds_at(aspect(object1,aspect2),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3002
%;completion Delta Happens

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3004
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3005
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3006
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Workflow.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{CicekliYildirim:2000,
%;   author = "Nihan Kesim Cicekli and Yakup Yildirim",
%;   year = "2000",
%;   title = "Formalizing workflows using the event calculus",
%;   editor = "Mohamed T. Ibrahim and Josef K{\"{u}}ng and Norman Revell",
%;   booktitle = "Database and Expert Systems Applications",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1873",
%;   pages = "222--231",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; @unpublished{WFMC:1999,
%;   author = "{Workflow Management Coalition}",
%;   year = "1999",
%;   title = "\uppercase{W}orkflow \uppercase{M}anagement \uppercase{C}oalition Terminology \& Glossary",
%;   howpublished = "Document Number WFMC-TC-1011, Document Status -- Issue 3.0, Workflow Management Coalition, Winchester, UK",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3053
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3054
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3056
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3058
% sort activity
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3059
==> sort(activity).

% sort condition
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3060
==> sort(condition).

% activity A, B, C1, C2, C3, D, E1, E2, E3, F, G
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3061
==> t(activity,a).
==> t(activity,b).
==> t(activity,c1).
==> t(activity,c2).
==> t(activity,c3).
==> t(activity,d).
==> t(activity,e1).
==> t(activity,e2).
==> t(activity,e3).
==> t(activity,f).
==> t(activity,g).

% condition E1C, E2C, E3C, FC
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3062
==> t(condition,e1c).
==> t(condition,e2c).
==> t(condition,e3c).
==> t(condition,fc).

% fluent Active(activity)
 %  fluent(active(activity)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3064
==> mpred_prop(active(activity),fluent).
==> meta_argtypes(active(activity)).

% fluent Completed(activity)
 %  fluent(completed(activity)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3065
==> mpred_prop(completed(activity),fluent).
==> meta_argtypes(completed(activity)).

% fluent Condition(condition)
 %  fluent(condition(condition)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3066
==> mpred_prop(condition(condition),fluent).
==> meta_argtypes(condition(condition)).

% noninertial Condition
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3067
==> noninertial(condition).

% event Start(activity)
 %  event(start(activity)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3069
==> mpred_prop(start(activity),event).
==> meta_argtypes(start(activity)).

% event End(activity)
 %  event(end(activity)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3070
==> mpred_prop(end(activity),event).
==> meta_argtypes(end(activity)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3071
%; Sigma
% [activity,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3074
% Initiates(Start(activity),Active(activity),time).
axiom(initiates(start(Activity), active(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3076
% [activity,time]
% Terminates(Start(activity),Completed(activity),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3077
axiom(terminates(start(Activity), completed(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3079
% [activity,time]
% Initiates(End(activity),Completed(activity),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3080
axiom(initiates(end(Activity), completed(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3082
% [activity,time]
% Terminates(End(activity),Active(activity),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3083
axiom(terminates(end(Activity), active(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3085
%; Delta
%; A; B

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3088
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3088
% [time]
% !HoldsAt(Active(B),time) &
% !HoldsAt(Completed(A),time-1) &
% HoldsAt(Completed(A),time) ->
% Happens(Start(B),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3092
axiom(happens(start(b), start),
   
    [ not(holds_at(active(b), start)),
      not(holds_at(completed(a), t)),
      holds_at(completed(a), start),
      b(t, start),
      ignore(start-1=t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3094
%; B; AND-split C1, C2, C3

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3095
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3095
% [time]
% !HoldsAt(Active(C1),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3099
axiom(happens(start(c1), start),
   
    [ not(holds_at(active(c1), start)),
      not(holds_at(completed(b), t)),
      holds_at(completed(b), start),
      b(t, start),
      ignore(start-1=t)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3101
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3101
% [time]
% !HoldsAt(Active(C2),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3105
axiom(happens(start(c2), start),
   
    [ not(holds_at(active(c2), start)),
      not(holds_at(completed(b), t)),
      holds_at(completed(b), start),
      b(t, start),
      ignore(start-1=t)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3107
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3107
% [time]
% !HoldsAt(Active(C3),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C3),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3111
axiom(happens(start(c3), start),
   
    [ not(holds_at(active(c3), start)),
      not(holds_at(completed(b), t)),
      holds_at(completed(b), start),
      b(t, start),
      ignore(start-1=t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3113
%; AND-join C1, C2, C3; D

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3114
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3114
% [time]
% !HoldsAt(Active(D),time) &
% ((!HoldsAt(Completed(C1),time-1) & HoldsAt(Completed(C1),time))|
%  (!HoldsAt(Completed(C2),time-1) & HoldsAt(Completed(C2),time))|
%  (!HoldsAt(Completed(C3),time-1) & HoldsAt(Completed(C3),time))) &
% HoldsAt(Completed(C1),time) &
% HoldsAt(Completed(C2),time) &
% HoldsAt(Completed(C3),time) ->
% Happens(Start(D),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3122
axiom(happens(start(d), start),
   
    [ not(holds_at(completed(c1), t)),
      holds_at(completed(c1), start),
      not(holds_at(active(d), start)),
      holds_at(completed(c1), start),
      holds_at(completed(c2), start),
      holds_at(completed(c3), start),
      b(t, start),
      ignore(start-1=t)
    ]).
axiom(happens(start(d), start),
   
    [ not(holds_at(completed(c2), t)),
      holds_at(completed(c2), start),
      not(holds_at(active(d), start)),
      holds_at(completed(c1), start),
      holds_at(completed(c2), start),
      holds_at(completed(c3), start),
      b(t, start),
      ignore(start-1=t)
    ]).
axiom(happens(start(d), start),
   
    [ not(holds_at(completed(c3), t)),
      holds_at(completed(c3), start),
      not(holds_at(active(d), start)),
      holds_at(completed(c1), start),
      holds_at(completed(c2), start),
      holds_at(completed(c3), start),
      b(t, start),
      ignore(start-1=t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3124
%; D; XOR-split E1, E2, E3

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3125
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3125
% [time]
% !HoldsAt(Active(E1),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E1C),time) ->
% Happens(Start(E1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3130
axiom(happens(start(e1), start),
   
    [ not(holds_at(active(e1), start)),
      not(holds_at(completed(d), t)),
      holds_at(completed(d), start),
      holds_at(condition(e1c), start),
      b(t, start),
      ignore(start-1=t)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3132
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3132
% [time]
% !HoldsAt(Active(E2),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E2C),time) ->
% Happens(Start(E2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3137
axiom(happens(start(e2), start),
   
    [ not(holds_at(active(e2), start)),
      not(holds_at(completed(d), t)),
      holds_at(completed(d), start),
      holds_at(condition(e2c), start),
      b(t, start),
      ignore(start-1=t)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3139
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3139
% [time]
% !HoldsAt(Active(E3),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E3C),time) ->
% Happens(Start(E3),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3144
axiom(happens(start(e3), start),
   
    [ not(holds_at(active(e3), start)),
      not(holds_at(completed(d), t)),
      holds_at(completed(d), start),
      holds_at(condition(e3c), start),
      b(t, start),
      ignore(start-1=t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3146
%; XOR-join E1, E2, E3; F

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3147
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3147
% [time]
% !HoldsAt(Active(F),time) &
% ((!HoldsAt(Completed(E1),time-1) & HoldsAt(Completed(E1),time))|
%  (!HoldsAt(Completed(E2),time-1) & HoldsAt(Completed(E2),time))|
%  (!HoldsAt(Completed(E3),time-1) & HoldsAt(Completed(E3),time))) ->
% Happens(Start(F),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3152
axiom(happens(start(f), start),
   
    [ not(holds_at(completed(e1), t)),
      holds_at(completed(e1), start),
      not(holds_at(active(f), start)),
      b(t, start),
      ignore(start-1=t)
    ]).
axiom(happens(start(f), start),
   
    [ not(holds_at(completed(e2), t)),
      holds_at(completed(e2), start),
      not(holds_at(active(f), start)),
      b(t, start),
      ignore(start-1=t)
    ]).
axiom(happens(start(f), start),
   
    [ not(holds_at(completed(e3), t)),
      holds_at(completed(e3), start),
      not(holds_at(active(f), start)),
      b(t, start),
      ignore(start-1=t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3154
%; while (FC) F; G

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3155
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3155
% [time]
% !HoldsAt(Active(F),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% HoldsAt(Condition(FC),time) ->
% Happens(Start(F),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3160
axiom(happens(start(f), start),
   
    [ not(holds_at(active(f), start)),
      not(holds_at(completed(f), t)),
      holds_at(completed(f), start),
      holds_at(condition(fc), start),
      b(t, start),
      ignore(start-1=t)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3162
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3162
% [time]
% !HoldsAt(Active(G),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% !HoldsAt(Condition(FC),time) ->
% Happens(Start(G),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3167
axiom(happens(start(g), start),
   
    [ not(holds_at(active(g), start)),
      not(holds_at(completed(f), t)),
      holds_at(completed(f), start),
      not(holds_at(condition(fc), start)),
      b(t, start),
      ignore(start-1=t)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3169
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3169
% Happens(Start(A),0).
axiom(happens(start(a), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3170
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3170
% Happens(End(A),1).
axiom(happens(end(a), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3171
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3171
% Happens(End(B),3).
axiom(happens(end(b), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3172
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3172
% Happens(End(C1),5).
axiom(happens(end(c1), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3173
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3173
% Happens(End(C2),6).
axiom(happens(end(c2), t6),
    [is_time(6), b(t, t6), ignore(t+6=t6)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3174
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3174
% Happens(End(C3),7).
axiom(happens(end(c3), t7),
    [is_time(7), b(t, t7), ignore(t+7=t7)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3175
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3175
% Happens(End(D),9).
axiom(happens(end(d), t9),
    [is_time(9), b(t, t9), ignore(t+9=t9)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3176
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3176
% Happens(End(E2),11).
axiom(happens(end(e2), t11),
    [is_time(11), b(t, t11), ignore(t+11=t11)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3177
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3177
% Happens(End(F),13).
axiom(happens(end(f), t13),
    [is_time(13), b(t, t13), ignore(t+13=t13)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3178
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3178
% Happens(End(F),15).
axiom(happens(end(f), t15),
    [is_time(15), b(t, t15), ignore(t+15=t15)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3180
%; Gamma
% [activity]
 % !HoldsAt(Active(activity),0).
 %  not(initially(active(Activity))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3182
axiom(not(initially(active(Active_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3183
% [activity]
 % !HoldsAt(Completed(activity),0).
 %  not(initially(completed(Activity))).
axiom(not(initially(completed(Completed_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3184
% [time]
 % time=% 14 <-> HoldsAt(Condition(FC),time).

 /*  Time=14 <->
       holds_at(condition(fc), Time).
 */
axiom(Time=14,
    [holds_at(condition(fc), Time)]).
axiom(holds_at(condition(fc), Time),
    [equals(Time, 14)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3185
% [time]
 % !HoldsAt(Condition(E1C),time).
 %  not(holds_at(condition(e1c),Time)).
axiom(not(holds_at(condition(e1c), Time1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3186
% [time]
 % time=% 10 <-> HoldsAt(Condition(E2C),time).

 /*  Time=10 <->
       holds_at(condition(e2c), Time).
 */
axiom(Time=10,
    [holds_at(condition(e2c), Time)]).
axiom(holds_at(condition(e2c), Time),
    [equals(Time, 10)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3187
% [time]
 % !HoldsAt(Condition(E3C),time).
 %  not(holds_at(condition(e3c),Time)).
axiom(not(holds_at(condition(e3c), Time1)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3189
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3190
==> completion(delta).
==> completion(happens).

% range time 0 18
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3192
==> range(time,0,18).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3193
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3229
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3231
% load foundations/ECCausal.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3233
% sort switch
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3234
==> sort(switch).

% sort relay
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3235
==> sort(relay).

% sort light
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3236
==> sort(light).

% switch S1, S2, S3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3238
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% relay R
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3239
==> t(relay,r).

% light L
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3240
==> t(light,l).

% event Light(light)
 %  event(light(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3242
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% event Close(switch)
 %  event(close(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3243
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% event Open(switch)
 %  event(open(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3244
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% event Activate(relay)
 %  event(activate(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3245
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% fluent Lit(light)
 %  fluent(lit(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3247
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% fluent Closed(switch)
 %  fluent(closed(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3248
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% fluent Activated(relay)
 %  fluent(activated(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3249
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3250
% [time]
% Stopped(Lit(L),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S2),time) ->
% Happens(Light(L),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3254
axiom(happens(light(l), Time),
   
    [ stopped(lit(l), Time),
      initiated(closed(s1), Time),
      initiated(closed(s2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3256
% [time]
% Started(Closed(S2),time) &
% Initiated(Activated(R),time) ->
% Happens(Open(S2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3259
axiom(happens(open(s2), Time),
    [started(closed(s2), Time), initiated(activated(r), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3261
% [time]
% Stopped(Activated(R),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S3),time) ->
% Happens(Activate(R),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3265
axiom(happens(activate(r), Time),
   
    [ stopped(activated(r), Time),
      initiated(closed(s1), Time),
      initiated(closed(s3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3267
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3268
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3269
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3270
% [light,time]
 % Initiates(Light(light),Lit(light),time).
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3272
% !HoldsAt(Closed(S1),0).
 %  not(initially(closed(s1))).
axiom(not(initially(closed(s1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3273
% HoldsAt(Closed(S2),0).
axiom(initially(closed(s2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3274
% HoldsAt(Closed(S3),0).
axiom(initially(closed(s3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3275
% !HoldsAt(Activated(R),0).
 %  not(initially(activated(r))).
axiom(not(initially(activated(r))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3276
% !HoldsAt(Lit(L),0).
 %  not(initially(lit(l))).
axiom(not(initially(lit(l))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3278
% Happens(Close(S1),0).
axiom(happens(close(s1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3280
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3281
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3283
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3284
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Effect Axioms)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3314
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3315
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3317
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3319
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3320
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3321
==> subsort(agent,object).

% sort room
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3322
==> sort(room).

% object Book
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3324
==> t(object,book).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3325
==> t(agent,nathan).

% room LivingRoom, Kitchen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3326
==> t(room,livingRoom).
==> t(room,kitchen).

% event LetGoOf(agent,object)
 %  event(letGoOf(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3328
==> mpred_prop(letGoOf(agent,object),event).
==> meta_argtypes(letGoOf(agent,object)).

% event PickUp(agent,object)
 %  event(pickUp(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3329
==> mpred_prop(pickUp(agent,object),event).
==> meta_argtypes(pickUp(agent,object)).

% event Walk(agent,room,room)
 %  event(walk(agent,room,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3330
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% fluent InRoom(object,room)
 %  fluent(inRoom(object,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3332
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% fluent Holding(agent,object)
 %  fluent(holding(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3333
==> mpred_prop(holding(agent,object),fluent).
==> meta_argtypes(holding(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3334
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3337
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3339
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3341
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [{dif(Room1, Room2)}]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3343
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3346
axiom(initiates(pickUp(Agent, Object), holding(Agent, Object), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(inRoom(Object, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3348
% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3350
axiom(terminates(letGoOf(Agent, Object), holding(Agent, Object), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3352
% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) ->
% Initiates(Walk(agent,room1,room2),InRoom(object,room2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3354
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Object, Room2), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3356
% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) &
% room1!=room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(object,room1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3359
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Object, Room1), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      { dif(Room1, Room2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3361
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3363
% Happens(PickUp(Nathan,Book),0).
axiom(happens(pickUp(nathan, book), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3364
% Happens(Walk(Nathan,LivingRoom,Kitchen),1).
axiom(happens(walk(nathan, livingRoom, kitchen), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3366
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3369
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3371
axiom(Room1=Room2,
   
    [ holds_at(inRoom(Object, Room1), Time),
      holds_at(inRoom(Object, Room2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3373
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3375
% HoldsAt(InRoom(Nathan,LivingRoom),0).
axiom(initially(inRoom(nathan, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3376
% HoldsAt(InRoom(Book,LivingRoom),0).
axiom(initially(inRoom(book, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3378
%; added:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3379
% !HoldsAt(Holding(Nathan,Book),0).
 %  not(initially(holding(nathan,book))).
axiom(not(initially(holding(nathan, book))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3380
% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
 %  not(holds_at(holding(Agent,Agent),Time)).
axiom(not(holds_at(holding(Holding_Param, Holding_Param), Time2)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3382
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3383
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3385
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3386
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3422
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3425
% sort switch
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3426
==> sort(switch).

% sort relay
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3427
==> sort(relay).

% sort light
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3428
==> sort(light).

% switch S1, S2, S3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3430
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% relay R
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3431
==> t(relay,r).

% light L
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3432
==> t(light,l).

% event Light(light)
 %  event(light(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3434
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% event Unlight(light)
 %  event(unlight(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3435
==> mpred_prop(unlight(light),event).
==> meta_argtypes(unlight(light)).

% event Close(switch)
 %  event(close(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3436
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% event Open(switch)
 %  event(open(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3437
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% event Activate(relay)
 %  event(activate(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3438
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% fluent Lit(light)
 %  fluent(lit(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3440
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% fluent Closed(switch)
 %  fluent(closed(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3441
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% fluent Activated(relay)
 %  fluent(activated(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3442
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3443
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3447
axiom(happens(light(l), Time),
   
    [ not(holds_at(lit(l), Time)),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3449
% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3452
axiom(happens(unlight(l), Time),
    [not(holds_at(closed(s1), Time)), holds_at(lit(l), Time)]).
axiom(happens(unlight(l), Time),
    [not(holds_at(closed(s2), Time)), holds_at(lit(l), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3454
% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3457
axiom(happens(open(s2), Time),
    [holds_at(closed(s2), Time), holds_at(activated(r), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3459
% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3463
axiom(happens(activate(r), Time),
   
    [ not(holds_at(activated(r), Time)),
      holds_at(closed(s1), Time),
      holds_at(closed(s3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3465
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3466
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3467
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3468
% [light,time]
 % Initiates(Light(light),Lit(light),time).
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3469
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).
axiom(terminates(unlight(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3471
% !HoldsAt(Closed(S1),0).
 %  not(initially(closed(s1))).
axiom(not(initially(closed(s1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3472
% HoldsAt(Closed(S2),0).
axiom(initially(closed(s2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3473
% HoldsAt(Closed(S3),0).
axiom(initially(closed(s3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3474
% !HoldsAt(Activated(R),0).
 %  not(initially(activated(r))).
axiom(not(initially(activated(r))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3475
% !HoldsAt(Lit(L),0).
 %  not(initially(lit(l))).
axiom(not(initially(lit(l))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3477
% Happens(Close(S1),0).
axiom(happens(close(s1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3479
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3480
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3482
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3483
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ShanahanCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3520
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3523
% sort switch
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3524
==> sort(switch).

% sort relay
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3525
==> sort(relay).

% sort light
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3526
==> sort(light).

% switch S1, S2, S3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3528
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% relay R
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3529
==> t(relay,r).

% light L
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3530
==> t(light,l).

% event Light(light)
 %  event(light(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3532
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% event Unlight(light)
 %  event(unlight(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3533
==> mpred_prop(unlight(light),event).
==> meta_argtypes(unlight(light)).

% event Close(switch)
 %  event(close(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3534
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% event Open(switch)
 %  event(open(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3535
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% event Activate(relay)
 %  event(activate(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3536
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% event Deactivate(relay)
 %  event(deactivate(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3537
==> mpred_prop(deactivate(relay),event).
==> meta_argtypes(deactivate(relay)).

% fluent Lit(light)
 %  fluent(lit(light)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3539
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% fluent Closed(switch)
 %  fluent(closed(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3540
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% fluent Activated(relay)
 %  fluent(activated(relay)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3541
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3542
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3546
axiom(happens(light(l), Time),
   
    [ not(holds_at(lit(l), Time)),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3548
% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3551
axiom(happens(unlight(l), Time),
    [not(holds_at(closed(s1), Time)), holds_at(lit(l), Time)]).
axiom(happens(unlight(l), Time),
    [not(holds_at(closed(s2), Time)), holds_at(lit(l), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3553
% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3556
axiom(happens(open(s2), Time),
    [holds_at(closed(s2), Time), holds_at(activated(r), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3558
% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3563
axiom(happens(activate(r), Time),
   
    [ not(holds_at(activated(r), Time)),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      holds_at(closed(s3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3565
% [time]
% HoldsAt(Activated(R),time) &
% (!HoldsAt(Closed(S1),time) |
%  !HoldsAt(Closed(S2),time) |
%  !HoldsAt(Closed(S3),time)) ->
% Happens(Deactivate(R),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3570
axiom(happens(deactivate(r), Time),
    [not(holds_at(closed(s1), Time)), holds_at(activated(r), Time)]).
axiom(happens(deactivate(r), Time),
    [not(holds_at(closed(s2), Time)), holds_at(activated(r), Time)]).
axiom(happens(deactivate(r), Time),
    [not(holds_at(closed(s3), Time)), holds_at(activated(r), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3572
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3573
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3574
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3575
% [relay,time]
 % Terminates(Deactivate(relay),Activated(relay),time).
axiom(terminates(deactivate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3576
% [light,time]
 % Initiates(Light(light),Lit(light),time).
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3577
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).
axiom(terminates(unlight(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3579
% !HoldsAt(Closed(S1),0).
 %  not(initially(closed(s1))).
axiom(not(initially(closed(s1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3580
% HoldsAt(Closed(S2),0).
axiom(initially(closed(s2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3581
% HoldsAt(Closed(S3),0).
axiom(initially(closed(s3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3582
% !HoldsAt(Activated(R),0).
 %  not(initially(activated(r))).
axiom(not(initially(activated(r))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3583
% !HoldsAt(Lit(L),0).
 %  not(initially(lit(l))).
axiom(not(initially(lit(l))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3585
% Happens(Close(S1),0).
axiom(happens(close(s1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3587
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3588
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3590
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3591
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Release Axioms and State Constraints)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3620
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3623
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3624
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3625
==> subsort(agent,object).

% sort room
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3626
==> sort(room).

% object Book
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3628
==> t(object,book).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3629
==> t(agent,nathan).

% room LivingRoom, Kitchen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3630
==> t(room,livingRoom).
==> t(room,kitchen).

% event LetGoOf(agent,object)
 %  event(letGoOf(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3632
==> mpred_prop(letGoOf(agent,object),event).
==> meta_argtypes(letGoOf(agent,object)).

% event PickUp(agent,object)
 %  event(pickUp(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3633
==> mpred_prop(pickUp(agent,object),event).
==> meta_argtypes(pickUp(agent,object)).

% event Walk(agent,room,room)
 %  event(walk(agent,room,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3634
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% fluent InRoom(object,room)
 %  fluent(inRoom(object,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3636
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% fluent Holding(agent,object)
 %  fluent(holding(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3637
==> mpred_prop(holding(agent,object),fluent).
==> meta_argtypes(holding(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3638
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3641
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3643
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3645
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [{dif(Room1, Room2)}]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3647
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3650
axiom(initiates(pickUp(Agent, Object), holding(Agent, Object), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(inRoom(Object, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3652
% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3654
axiom(terminates(letGoOf(Agent, Object), holding(Agent, Object), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3656
% [agent,object,room,time]
% Releases(PickUp(agent,object),InRoom(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3657
axiom(releases(pickUp(Agent, Object), inRoom(Object, Room), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3659
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) ->
% Initiates(LetGoOf(agent,object),InRoom(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3661
axiom(initiates(letGoOf(Agent, Object), inRoom(Object, Room), Time),
    [holds_at(inRoom(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3663
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3665
% Happens(PickUp(Nathan,Book),0).
axiom(happens(pickUp(nathan, book), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3666
% Happens(Walk(Nathan,LivingRoom,Kitchen),1).
axiom(happens(walk(nathan, livingRoom, kitchen), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3668
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3671
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3673
axiom(Room1=Room2,
   
    [ holds_at(inRoom(Object, Room1), Time),
      holds_at(inRoom(Object, Room2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3675
% [agent,object,room,time]
% HoldsAt(Holding(agent,object),time) &
% HoldsAt(InRoom(agent,room),time) ->
% HoldsAt(InRoom(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3678
axiom(holds_at(inRoom(Object, Room), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      holds_at(inRoom(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3680
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3682
% HoldsAt(InRoom(Nathan,LivingRoom),0).
axiom(initially(inRoom(nathan, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3683
% HoldsAt(InRoom(Book,LivingRoom),0).
axiom(initially(inRoom(book, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3685
%; added:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3686
% !HoldsAt(Holding(Nathan,Book),0).
 %  not(initially(holding(nathan,book))).
axiom(not(initially(holding(nathan, book))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3687
% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
 %  not(holds_at(holding(Agent,Agent),Time)).
axiom(not(holds_at(holding(Holding_Param, Holding_Param), Time2)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3689
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3690
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3692
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3693
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/HotAirBalloon.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{MillerShanahan:1999,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "1999",
%;   title = "The event calculus in classical logic---\uppercase{A}lternative axiomatisations",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "4",
%;   number = "016",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3729
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3730
:- set_ec_option(encoding, 3).

% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3731
:- set_ec_option(trajectory, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3733
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3735
% sort balloon
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3736
==> sort(balloon).

% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3737
==> sort(agent).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3738
==> subsort(height,integer).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3740
==> t(agent,nathan).

% balloon Balloon
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3741
==> t(balloon,balloon).

% fluent HeaterOn(balloon)
 %  fluent(heaterOn(balloon)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3743
==> mpred_prop(heaterOn(balloon),fluent).
==> meta_argtypes(heaterOn(balloon)).

% fluent Height(balloon,height)
 %  fluent(height(balloon,height)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3744
==> mpred_prop(height(balloon,height),fluent).
==> meta_argtypes(height(balloon,height)).

% noninertial Height
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3745
==> noninertial(height).

% event TurnOnHeater(agent,balloon)
 %  event(turnOnHeater(agent,balloon)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3747
==> mpred_prop(turnOnHeater(agent,balloon),event).
==> meta_argtypes(turnOnHeater(agent,balloon)).

% event TurnOffHeater(agent,balloon)
 %  event(turnOffHeater(agent,balloon)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3748
==> mpred_prop(turnOffHeater(agent,balloon),event).
==> meta_argtypes(turnOffHeater(agent,balloon)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3749
%; Sigma
% [agent,balloon,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3752
% Initiates(TurnOnHeater(agent,balloon),HeaterOn(balloon),time).
axiom(initiates(turnOnHeater(Agent, Balloon), heaterOn(Balloon), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3754
% [agent,balloon,time]
% Terminates(TurnOffHeater(agent,balloon),HeaterOn(balloon),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3755
axiom(terminates(turnOffHeater(Agent, Balloon), heaterOn(Balloon), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3757
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3759
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3759
% Happens(TurnOnHeater(Nathan,Balloon),0).
axiom(happens(turnOnHeater(nathan, balloon), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3760
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3760
% Happens(TurnOffHeater(Nathan,Balloon),2).
axiom(happens(turnOffHeater(nathan, balloon), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3762
%; Psi
% [balloon,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3765
% HoldsAt(Height(balloon,height1),time) &
% HoldsAt(Height(balloon,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3767
axiom(Height1=Height2,
   
    [ holds_at(height(Balloon, Height1), Time),
      holds_at(height(Balloon, Height2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3769
%; Pi
% [balloon,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3772
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 + offset) ->
% Trajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3774
axiom(trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset),
   
    [ holds_at(height(Balloon, Height1), Time),
      equals(Height2, Height1+Offset)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3776
% [balloon,height1,height2,offset,time]
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 - offset) ->
% AntiTrajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3779
axiom(antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset),
   
    [ holds_at(height(Balloon, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3781
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3783
% HoldsAt(Height(Balloon,0),0).
axiom(initially(height(balloon, 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3785
%; added:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3786
% !HoldsAt(HeaterOn(Balloon),0).
 %  not(initially(heaterOn(balloon))).
axiom(not(initially(heaterOn(balloon))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3788
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3789
==> completion(delta).
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3791
==> range(time,0,3).

% range height 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3792
==> range(height,0,2).

% range offset 1 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3793
==> range(offset,1,2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithEvents.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3820
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3823
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3824
==> sort(object).

% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3825
==> sort(agent).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3826
==> subsort(height,integer).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3828
==> t(agent,nathan).

% object Apple
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3829
==> t(object,apple).

% fluent Falling(object)
 %  fluent(falling(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3831
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% fluent Height(object,height)
 %  fluent(height(object,height)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3832
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% event Drop(agent,object)
 %  event(drop(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3834
==> mpred_prop(drop(agent,object),event).
==> meta_argtypes(drop(agent,object)).

% event HitGround(object)
 %  event(hitGround(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3835
==> mpred_prop(hitGround(object),event).
==> meta_argtypes(hitGround(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3836
%; Sigma
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3839
% Initiates(Drop(agent,object),Falling(object),time).
axiom(initiates(drop(Agent, Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3841
% [agent,object,height,time]
% Releases(Drop(agent,object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3842
axiom(releases(drop(Agent, Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3844
% [object,time]
% Terminates(HitGround(object),Falling(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3845
axiom(terminates(hitGround(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3847
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitGround(object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3849
axiom(initiates(hitGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3851
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3853
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3853
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3856
axiom(happens(hitGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3858
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3858
% Happens(Drop(Nathan,Apple),0).
axiom(happens(drop(nathan, apple), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3860
%; Psi
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3863
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3865
axiom(Height1=Height2,
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(height(Object, Height2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3867
%; Pi
% [object,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3870
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3872
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3874
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3876
% !HoldsAt(Falling(Apple),0).
 %  not(initially(falling(apple))).
axiom(not(initially(falling(apple))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3877
% HoldsAt(Height(Apple,3),0).
axiom(initially(height(apple, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3879
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3880
==> completion(delta).
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3882
==> range(time,0,5).

% range height 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3883
==> range(height,0,3).

% range offset 1 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3884
==> range(offset,1,3).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithAntiTrajectory.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3911
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3912
:- set_ec_option(encoding, 3).

% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3913
:- set_ec_option(trajectory, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3915
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3917
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3918
==> sort(object).

% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3919
==> sort(agent).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3920
==> subsort(height,integer).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3922
==> t(agent,nathan).

% object Apple
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3923
==> t(object,apple).

% fluent Falling(object)
 %  fluent(falling(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3925
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% fluent Height(object,height)
 %  fluent(height(object,height)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3926
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% noninertial Height
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3927
==> noninertial(height).

% event Drop(agent,object)
 %  event(drop(agent,object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3929
==> mpred_prop(drop(agent,object),event).
==> meta_argtypes(drop(agent,object)).

% event HitGround(object)
 %  event(hitGround(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3930
==> mpred_prop(hitGround(object),event).
==> meta_argtypes(hitGround(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3931
%; Sigma
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3934
% Initiates(Drop(agent,object),Falling(object),time).
axiom(initiates(drop(Agent, Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3936
% [object,time]
% Terminates(HitGround(object),Falling(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3937
axiom(terminates(hitGround(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3939
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3941
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3941
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3944
axiom(happens(hitGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3946
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3946
% Happens(Drop(Nathan,Apple),0).
axiom(happens(drop(nathan, apple), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3948
%; Psi
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3951
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3953
axiom(Height1=Height2,
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(height(Object, Height2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3955
%; Pi
% [object,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3958
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3960
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3962
% [object,height,offset,time]
% HoldsAt(Height(object,height),time) ->
% AntiTrajectory(Falling(object),time,Height(object,height),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3964
axiom(antiTrajectory(falling(Object), Time, height(Object, Height), Offset),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3966
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3968
% !HoldsAt(Falling(Apple),0).
 %  not(initially(falling(apple))).
axiom(not(initially(falling(apple))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3969
% HoldsAt(Height(Apple,3),0).
axiom(initially(height(apple, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3971
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3972
==> completion(delta).
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3974
==> range(time,0,5).

% range height 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3975
==> range(height,0,3).

% range offset 1 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:3976
==> range(offset,1,3).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4003
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4006
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4007
==> sort(agent).

% sort phone
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4008
==> sort(phone).

% agent Agent1, Agent2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4010
==> t(agent,agent1).
==> t(agent,agent2).

% phone Phone1, Phone2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4011
==> t(phone,phone1).
==> t(phone,phone2).

% fluent Ringing(phone,phone)
 %  fluent(ringing(phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4013
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% fluent DialTone(phone)
 %  fluent(dialTone(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4014
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% fluent BusySignal(phone)
 %  fluent(busySignal(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4015
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% fluent Idle(phone)
 %  fluent(idle(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4016
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% fluent Connected(phone,phone)
 %  fluent(connected(phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4017
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% fluent Disconnected(phone)
 %  fluent(disconnected(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4018
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% event PickUp(agent,phone)
 %  event(pickUp(agent,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4020
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% event SetDown(agent,phone)
 %  event(setDown(agent,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4021
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% event Dial(agent,phone,phone)
 %  event(dial(agent,phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4022
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4023
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4026
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4027
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4029
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4031
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4033
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4035
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4037
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4039
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4041
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4044
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4046
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4049
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4051
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4054
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4056
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4059
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      not(holds_at(idle(Phone2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4061
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4064
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      not(holds_at(idle(Phone2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4066
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4068
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4070
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4072
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4074
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4076
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4078
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4080
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4082
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4084
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4086
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4088
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4090
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4092
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4094
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4096
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4098
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4100
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4102
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4104
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4106
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4108
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4110
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4112
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4114
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4116
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4118
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4120
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4122
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4124
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4126
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4128
% Happens(PickUp(Agent1,Phone1),0).
axiom(happens(pickUp(agent1, phone1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4129
% Happens(Dial(Agent1,Phone1,Phone2),1).
axiom(happens(dial(agent1, phone1, phone2), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4130
% Happens(PickUp(Agent2,Phone2),2).
axiom(happens(pickUp(agent2, phone2), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4132
%; Psi
% [phone,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4135
% !HoldsAt(Ringing(phone,phone),time).
 %  not(holds_at(ringing(Phone,Phone),Time)).
axiom(not(holds_at(ringing(Ringing_Param, Ringing_Param), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4137
% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4140
axiom(not(holds_at(ringing(Phone2, Phone1), Time)),
   
    [ holds_at(ringing(Phone1, Phone2), Time),
      dif(Phone1, Phone2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4142
% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
 %  not(holds_at(connected(Phone,Phone),Time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4143
axiom(not(holds_at(connected(Connected_Param, Connected_Param), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4145
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4148
axiom(not(holds_at(connected(Phone2, Phone1), Time)),
   
    [ holds_at(connected(Phone1, Phone2), Time),
      dif(Phone1, Phone2)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4150
% mutex Idle, DialTone, BusySignal, Disconnected
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4151
mutex(idle).
mutex(dialTone).
mutex(busySignal).
mutex(disconnected).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4152
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).

 /*   if(holds_at(idle(Phone1), Time),
          (not(holds_at(ringing(Phone1, Phone2), Time)), not(holds_at(connected(Phone1, Phone2), Time)))).
 */

 /*  not(holds_at(idle(Ringing_Param), Time3)) :-
       (   holds_at(ringing(Ringing_Param, Ringing_Ret), Time3)
       ;   holds_at(connected(Ringing_Param, Ringing_Ret), Time3)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4155
axiom(not(holds_at(idle(Ringing_Param), Time3)),
    [holds_at(ringing(Ringing_Param, Ringing_Ret), Time3)]).
axiom(not(holds_at(idle(Ringing_Param), Time3)),
    [holds_at(connected(Ringing_Param, Ringing_Ret), Time3)]).

 /*  not(holds_at(ringing(Ringing_Param7, Ringing_Ret8), Time6)) :-
       holds_at(idle(Ringing_Param7), Time6).
 */
axiom(not(holds_at(ringing(Ringing_Param7, Ringing_Ret8), Time6)),
    [holds_at(idle(Ringing_Param7), Time6)]).

 /*  not(holds_at(connected(Connected_Param, Connected_Ret), Time9)) :-
       holds_at(idle(Connected_Param), Time9).
 */
axiom(not(holds_at(connected(Connected_Param, Connected_Ret), Time9)),
    [holds_at(idle(Connected_Param), Time9)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4157
%; etc.
%; Gamma
% [phone]
 
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4161
% HoldsAt(Idle(phone),0).
axiom(initially(idle(Phone)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4163
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4164
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4166
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4167
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4194
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4197
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4198
==> sort(agent).

% sort phone
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4199
==> sort(phone).

% agent Agent1, Agent2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4201
==> t(agent,agent1).
==> t(agent,agent2).

% phone Phone1, Phone2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4202
==> t(phone,phone1).
==> t(phone,phone2).

% fluent Ringing(phone,phone)
 %  fluent(ringing(phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4204
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% fluent DialTone(phone)
 %  fluent(dialTone(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4205
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% fluent BusySignal(phone)
 %  fluent(busySignal(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4206
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% fluent Idle(phone)
 %  fluent(idle(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4207
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% fluent Connected(phone,phone)
 %  fluent(connected(phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4208
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% fluent Disconnected(phone)
 %  fluent(disconnected(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4209
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% event PickUp(agent,phone)
 %  event(pickUp(agent,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4211
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% event SetDown(agent,phone)
 %  event(setDown(agent,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4212
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% event Dial(agent,phone,phone)
 %  event(dial(agent,phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4213
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4214
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4217
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4218
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4220
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4222
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4224
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4226
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4228
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4230
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4232
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4235
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4237
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4240
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4242
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4245
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4247
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4250
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      not(holds_at(idle(Phone2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4252
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4255
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      not(holds_at(idle(Phone2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4257
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4259
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4261
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4263
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4265
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4267
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4269
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4271
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4273
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4275
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4277
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4279
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4281
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4283
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4285
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4287
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4289
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4291
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4293
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4295
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4297
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4299
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4301
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4303
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4305
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4307
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4309
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4311
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4313
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4315
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4317
%; Delta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4319
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4319
% Happens(PickUp(Agent1,Phone1),0).
axiom(happens(pickUp(agent1, phone1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4320
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4320
% Happens(Dial(Agent1,Phone1,Phone2),1).
axiom(happens(dial(agent1, phone1, phone2), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4321
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4321
% Happens(PickUp(Agent2,Phone2),2).
axiom(happens(pickUp(agent2, phone2), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4323
%; Gamma
% [phone]
 % HoldsAt(Idle(phone),0).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4325
axiom(initially(idle(Phone)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4326
% [phone]
 % !HoldsAt(DialTone(phone),0).
 %  not(initially(dialTone(Phone))).
axiom(not(initially(dialTone(DialTone_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4327
% [phone]
 % !HoldsAt(BusySignal(phone),0).
 %  not(initially(busySignal(Phone))).
axiom(not(initially(busySignal(BusySignal_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4328
% [phone1,phone2]
 % !HoldsAt(Ringing(phone1,phone2),0).
 %  not(initially(ringing(Phone1,Phone2))).
axiom(not(initially(ringing(Ringing_Param, Ringing_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4329
% [phone1,phone2]
 % !HoldsAt(Connected(phone1,phone2),0).
 %  not(initially(connected(Phone1,Phone2))).
axiom(not(initially(connected(Connected_Param, Connected_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4330
% [phone]
 % !HoldsAt(Disconnected(phone),0).
 %  not(initially(disconnected(Phone))).
axiom(not(initially(disconnected(Disconnected_Ret))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4332
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4333
==> completion(delta).
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4335
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4336
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultLocation.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4363
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4366
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4367
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4368
==> subsort(agent,object).

% sort device: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4369
==> subsort(device,object).

% sort tv: device
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4370
==> subsort(tv,device).

% sort room
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4371
==> sort(room).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4373
==> t(agent,nathan).

% tv TV
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4374
==> t(tv,tv).

% room LivingRoom, Kitchen
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4375
==> t(room,livingRoom).
==> t(room,kitchen).

% event TurnOn(agent,device)
 %  event(turnOn(agent,device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4377
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).

% event Walk(agent,room,room)
 %  event(walk(agent,room,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4378
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% fluent InRoom(object,room)
 %  fluent(inRoom(object,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4380
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% fluent On(device)
 %  fluent(on(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4381
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
 %  fluent(pluggedIn(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4382
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
 %  fluent(brokenSwitch(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4383
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% predicate Ab1(device,time)
 %  predicate(ab1(device,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4385
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% predicate Ab2(room,time)
 %  predicate(ab2(room,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4386
==> mpred_prop(ab2(room,time),predicate).
==> meta_argtypes(ab2(room,time)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4387
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4390
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4392
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4394
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [{dif(Room1, Room2)}]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4396
% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4398
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4400
%; Delta
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4403
% Happens(Walk(agent,room1,room2),time) ->
% room1!=room2 &
% HoldsAt(InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4405
axiom(requires(walk(Agent, Room1, Room2), Time),
   
    [ { dif(Room1, Room2)
      },
      holds_at(inRoom(Agent, Room1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4407
% [agent,device,time]
% Happens(TurnOn(agent,device),time) ->
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4409
% {room}%  HoldsAt(InRoom(agent,room),time) &
%        HoldsAt(InRoom(device,room),time).

 /*   exists([Room],
             if(happens(turnOn(Agent, Device), Time),
                 (holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Device, Room), Time)))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_354'(Fn_354_Param, InRoom_Param, Maptime))) :-
       happens(turnOn(Fn_354_Param, InRoom_Param), Maptime),
       (   not(holds_at(inRoom(Fn_354_Param, Some_Param),
                        Maptime))
       ;   not(holds_at(inRoom(InRoom_Param, Some_Param),
                        Maptime))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4410
axiom(not(some(Some_Param, '$kolem_Fn_354'(Fn_354_Param, InRoom_Param, Maptime))),
   
    [ not(holds_at(inRoom(Fn_354_Param, Some_Param), Maptime)),
      happens(turnOn(Fn_354_Param, InRoom_Param), Maptime)
    ]).
axiom(not(some(Some_Param, '$kolem_Fn_354'(Fn_354_Param, InRoom_Param, Maptime))),
   
    [ not(holds_at(inRoom(InRoom_Param, Some_Param), Maptime)),
      happens(turnOn(Fn_354_Param, InRoom_Param), Maptime)
    ]).

 /*  not(happens(turnOn(TurnOn_Param, InRoom_Param11), Maptime9)) :-
       (   not(holds_at(inRoom(TurnOn_Param, Some_Param12),
                        Maptime9))
       ;   not(holds_at(inRoom(InRoom_Param11, Some_Param12),
                        Maptime9))
       ),
       some(Some_Param12,
            '$kolem_Fn_354'(TurnOn_Param, InRoom_Param11, Maptime9)).
 */
axiom(not(happens(turnOn(TurnOn_Param, InRoom_Param11), Maptime9)),
   
    [ not(holds_at(inRoom(TurnOn_Param, Some_Param12),
                   Maptime9)),
      some(Some_Param12,
           '$kolem_Fn_354'(TurnOn_Param,
                           InRoom_Param11,
                           Maptime9))
    ]).
axiom(not(happens(turnOn(TurnOn_Param, InRoom_Param11), Maptime9)),
   
    [ not(holds_at(inRoom(InRoom_Param11, Some_Param12),
                   Maptime9)),
      some(Some_Param12,
           '$kolem_Fn_354'(TurnOn_Param,
                           InRoom_Param11,
                           Maptime9))
    ]).

 /*  holds_at(inRoom(InRoom_Param14, Some_Param15), Time13) :-
       happens(turnOn(InRoom_Param14, TurnOn_Ret), Time13),
       some(Some_Param15,
            '$kolem_Fn_354'(InRoom_Param14, TurnOn_Ret, Time13)).
 */
axiom(holds_at(inRoom(InRoom_Param14, Some_Param15), Time13),
   
    [ happens(turnOn(InRoom_Param14, TurnOn_Ret), Time13),
      some(Some_Param15,
           '$kolem_Fn_354'(InRoom_Param14, TurnOn_Ret, Time13))
    ]).

 /*  holds_at(inRoom(InRoom_Param18, Some_Param20), Time17) :-
       happens(turnOn(TurnOn_Param19, InRoom_Param18), Time17),
       some(Some_Param20,
            '$kolem_Fn_354'(TurnOn_Param19, InRoom_Param18, Time17)).
 */
axiom(holds_at(inRoom(InRoom_Param18, Some_Param20), Time17),
   
    [ happens(turnOn(TurnOn_Param19, InRoom_Param18), Time17),
      some(Some_Param20,
           '$kolem_Fn_354'(TurnOn_Param19,
                           InRoom_Param18,
                           Time17))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4412
% [event1,event2,time]
% Happens(event1,time) &
% Happens(event2,time) ->
% event1=event2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4415
axiom(Event1=Event2,
    [happens(Event1, Time), happens(Event2, Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4417
%; Theta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4419
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4419
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [holds_at(brokenSwitch(Device), Time)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4420
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4420
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [not(holds_at(pluggedIn(Device), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4422
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4425
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4427
axiom(Room1=Room2,
   
    [ holds_at(inRoom(Object, Room1), Time),
      holds_at(inRoom(Object, Room2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4429
%; Gamma
% [tv]
 % !HoldsAt(On(tv),0).
 %  not(initially(on(Tv))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4431
axiom(not(initially(on(On_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4432
% [tv]
 % !HoldsAt(BrokenSwitch(tv),0).
 %  not(initially(brokenSwitch(Tv))).
axiom(not(initially(brokenSwitch(BrokenSwitch_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4433
% [tv]
 % HoldsAt(PluggedIn(tv),0).
axiom(initially(pluggedIn(Tv)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4435
% HoldsAt(InRoom(Nathan,Kitchen),0).
axiom(initially(inRoom(nathan, kitchen)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4437
% [time]
% !Ab2(LivingRoom,time) ->
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4439
% {tv}%  HoldsAt(InRoom(tv,LivingRoom),time).

 /*  exists([Tv],
          if(not(ab2(livingRoom,Time)),
   	  holds_at(inRoom(Tv,livingRoom),Time))).
 */

 /*  holds_at(inRoom(InRoom_Param, livingRoom), Time3) :-
       not(ab2(livingRoom, Time3)),
       some(InRoom_Param, '$kolem_Fn_355'(Time3)).
 */
axiom(holds_at(inRoom(InRoom_Param, livingRoom), Time3),
   
    [ not(ab2(livingRoom, Time3)),
      some(InRoom_Param, '$kolem_Fn_355'(Time3))
    ]).

 /*  ab2(livingRoom, Time5) :-
       not(holds_at(inRoom(InRoom_Param6, livingRoom), Time5)),
       some(InRoom_Param6, '$kolem_Fn_355'(Time5)).
 */
axiom(ab2(livingRoom, Time5),
   
    [ not(holds_at(inRoom(InRoom_Param6, livingRoom), Time5)),
      some(InRoom_Param6, '$kolem_Fn_355'(Time5))
    ]).

 /*  not(some(Some_Param, '$kolem_Fn_355'(Time7))) :-
       not(holds_at(inRoom(Some_Param, livingRoom), Time7)),
       not(ab2(livingRoom, Time7)).
 */
axiom(not(some(Some_Param, '$kolem_Fn_355'(Time7))),
   
    [ not(holds_at(inRoom(Some_Param, livingRoom), Time7)),
      not(ab2(livingRoom, Time7))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4441
%; goal
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4443
% {tv} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4443
% Happens(TurnOn(Nathan,tv),1).
 %  exists([Tv],happens(turnOn(nathan,Tv),1)).

 /*  happens(turnOn(nathan, Some_Param), 1) :-
       some(Some_Param, '$kolem_Fn_356').
 */
axiom(happens(turnOn(nathan, Some_Param), start),
    [some(Some_Param, '$kolem_Fn_356'), b(t, start), ignore(t+1=start)]).

 /*  not(some(Some_Param3, '$kolem_Fn_356')) :-
       not(happens(turnOn(nathan, Some_Param3), 1)).
 */
axiom(not(some(Some_Param3, '$kolem_Fn_356')),
   
    [ not(happens(turnOn(nathan, Some_Param3), start)),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4445
%; for two TVs:
%;[tv,time] !HoldsAt(InRoom(tv,Kitchen),time).
%;[tv,time] {room} HoldsAt(InRoom(tv,room),time).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4449
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4450
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4451
==> completion(theta).
==> completion(ab2).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4453
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4454
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/Device.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4481
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4484
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4485
==> sort(agent).

% sort device
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4486
==> sort(device).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4488
==> t(agent,nathan).

% device Device1, AntiqueDevice1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4489
==> t(device,device1).
==> t(device,antiqueDevice1).

% predicate Ab1(device,time)
 %  predicate(ab1(device,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4491
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% fluent On(device)
 %  fluent(on(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4493
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
 %  fluent(pluggedIn(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4494
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
 %  fluent(brokenSwitch(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4495
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% event TurnOn(agent,device)
 %  event(turnOn(agent,device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4497
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4498
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4501
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4502
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4504
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4506
% Happens(TurnOn(Nathan,Device1),0).
axiom(happens(turnOn(nathan, device1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4508
%; Theta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4510
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4510
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [holds_at(brokenSwitch(Device), Time)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4511
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4511
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [not(holds_at(pluggedIn(Device), Time))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4512
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4512
% [time]
 % Ab1(AntiqueDevice1,time).
ab1(antiqueDevice1,Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4514
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4516
% !HoldsAt(On(Device1),0).
 %  not(initially(on(device1))).
axiom(not(initially(on(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4517
% !HoldsAt(BrokenSwitch(Device1),0).
 %  not(initially(brokenSwitch(device1))).
axiom(not(initially(brokenSwitch(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4518
% HoldsAt(PluggedIn(Device1),0).
axiom(initially(pluggedIn(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4520
%; added:
% [time]
 % !HoldsAt(On(AntiqueDevice1),time).
 %  not(holds_at(on(antiqueDevice1),Time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4521
axiom(not(holds_at(on(antiqueDevice1), Time1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4522
% [time]
 % HoldsAt(PluggedIn(AntiqueDevice1),time).
holds_at(pluggedIn(antiqueDevice1),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4524
%; entailed:
%; HoldsAt(On(Device1),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4527
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4528
==> completion(theta).
==> completion(ab1).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4529
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4531
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4532
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/ErraticDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4559
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4562
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4563
==> sort(agent).

% sort device
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4564
==> sort(device).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4566
==> t(agent,nathan).

% device Device1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4567
==> t(device,device1).

% predicate Ab1(device,time)
 %  predicate(ab1(device,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4569
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% fluent On(device)
 %  fluent(on(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4571
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
 %  fluent(pluggedIn(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4572
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
 %  fluent(brokenSwitch(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4573
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% fluent Erratic(device)
 %  fluent(erratic(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4574
==> mpred_prop(erratic(device),fluent).
==> meta_argtypes(erratic(device)).

% fluent DeterminingFluent(device)
 %  fluent(determiningFluent(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4576
==> mpred_prop(determiningFluent(device),fluent).
==> meta_argtypes(determiningFluent(device)).

% noninertial DeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4577
==> noninertial(determiningFluent).

% event TurnOn(agent,device)
 %  event(turnOn(agent,device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4579
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4580
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4583
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4584
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4586
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4588
% Happens(TurnOn(Nathan,Device1),0).
axiom(happens(turnOn(nathan, device1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4590
%; Theta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4593
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4593
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [holds_at(brokenSwitch(Device), Time)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4594
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4594
% [device,time]
% HoldsAt(Erratic(device),time) & HoldsAt(DeterminingFluent(device),time) ->
% Ab1(device,time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4596
axiom(ab1(Device, Time),
   
    [ holds_at(erratic(Device), Time),
      holds_at(determiningFluent(Device), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4598
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4598
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [not(holds_at(pluggedIn(Device), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4600
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4602
% !HoldsAt(On(Device1),0).
 %  not(initially(on(device1))).
axiom(not(initially(on(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4603
% !HoldsAt(BrokenSwitch(Device1),0).
 %  not(initially(brokenSwitch(device1))).
axiom(not(initially(brokenSwitch(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4604
% HoldsAt(Erratic(Device1),0).
axiom(initially(erratic(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4605
% HoldsAt(PluggedIn(Device1),0).
axiom(initially(pluggedIn(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4607
%; added:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4608
% HoldsAt(DeterminingFluent(Device1),1).
holds_at(determiningFluent(device1),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4610
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4611
==> completion(theta).
==> completion(ab1).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4612
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4614
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4615
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultEvent.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4642
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4643
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4645
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4647
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4648
==> sort(agent).

% sort clock
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4649
==> sort(clock).

% fluent Beeping(clock)
 %  fluent(beeping(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4651
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% fluent AlarmTime(clock,time)
 %  fluent(alarmTime(clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4652
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% fluent AlarmOn(clock)
 %  fluent(alarmOn(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4653
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% event SetAlarmTime(agent,clock,time)
 %  event(setAlarmTime(agent,clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4655
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
 %  event(startBeeping(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4656
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% event TurnOnAlarm(agent,clock)
 %  event(turnOnAlarm(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4657
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
 %  event(turnOffAlarm(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4658
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% predicate Ab1(clock,time)
 %  predicate(ab1(clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4660
==> mpred_prop(ab1(clock,time),predicate).
==> meta_argtypes(ab1(clock,time)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4662
==> t(agent,nathan).

% clock Clock
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4663
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4667
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4669
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4671
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4674
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4676
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4677
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4679
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4680
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4682
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4683
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4685
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4686
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4688
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4691
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) &
% !Ab1(clock,time) ->
% Happens(StartBeeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4694
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time),
      not(ab1(Clock, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4696
% Happens(SetAlarmTime(Nathan,Clock,2),0).
axiom(happens(setAlarmTime(nathan, clock, 2), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4697
% Happens(TurnOnAlarm(Nathan,Clock),1).
axiom(happens(turnOnAlarm(nathan, clock), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4699
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4702
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4704
axiom(Time1=Time2,
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      holds_at(alarmTime(Clock, Time2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4706
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4708
% !HoldsAt(AlarmOn(Clock),0).
 %  not(initially(alarmOn(clock))).
axiom(not(initially(alarmOn(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4709
% !HoldsAt(Beeping(Clock),0).
 %  not(initially(beeping(clock))).
axiom(not(initially(beeping(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4710
% HoldsAt(AlarmTime(Clock,3),0).
axiom(initially(alarmTime(clock, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4712
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4713
==> completion(happens).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4714
==> completion(theta).
==> completion(ab1).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4716
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4717
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodD.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4746
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4749
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4750
==> sort(object).

% object A,B
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4752
==> t(object,a).
==> t(object,b).

% fluent P(object)
 %  fluent(p(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4754
==> mpred_prop(p(object),fluent).
==> meta_argtypes(p(object)).

% fluent Q(object)
 %  fluent(q(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4755
==> mpred_prop(q(object),fluent).
==> meta_argtypes(q(object)).

% fluent R(object)
 %  fluent(r(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4756
==> mpred_prop(r(object),fluent).
==> meta_argtypes(r(object)).

% predicate Ab1(object,time)
 %  predicate(ab1(object,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4758
==> mpred_prop(ab1(object,time),predicate).
==> meta_argtypes(ab1(object,time)).

% predicate Ab2(object,time)
 %  predicate(ab2(object,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4759
==> mpred_prop(ab2(object,time),predicate).
==> meta_argtypes(ab2(object,time)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4760
% [object,time]
% HoldsAt(P(object),time) & !Ab1(object,time) ->
% HoldsAt(Q(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4762
axiom(holds_at(q(Object), Time),
    [holds_at(p(Object), Time), not(ab1(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4764
% [object,time]
% HoldsAt(R(object),time) & !Ab2(object,time) ->
% !HoldsAt(Q(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4766
axiom(not(holds_at(q(Object), Time)),
    [holds_at(r(Object), Time), not(ab2(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4768
% [object,time]
% HoldsAt(R(object),time) -> HoldsAt(P(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4769
axiom(holds_at(p(Object), Time),
    [holds_at(r(Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4771
% HoldsAt(R(A),0).
axiom(initially(r(a)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4772
% HoldsAt(P(B),0).
axiom(initially(p(b)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4773
% !HoldsAt(R(B),0).
 %  not(initially(r(b))).
axiom(not(initially(r(b))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4775
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4776
% [object,time]
% HoldsAt(R(object),time) -> Ab1(object,time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4777
axiom(ab1(Object, Time),
    [holds_at(r(Object), Time)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4779
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4780
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4781
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4783
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4784
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/BrokenDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4811
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4814
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4815
==> sort(agent).

% sort device
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4816
==> sort(device).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4818
==> t(agent,nathan).

% device Device1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4819
==> t(device,device1).

% predicate Ab1(device,time)
 %  predicate(ab1(device,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4821
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% fluent On(device)
 %  fluent(on(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4823
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
 %  fluent(pluggedIn(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4824
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
 %  fluent(brokenSwitch(device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4825
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% event TurnOn(agent,device)
 %  event(turnOn(agent,device)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4827
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4828
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4831
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4832
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4834
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4836
% Happens(TurnOn(Nathan,Device1),0).
axiom(happens(turnOn(nathan, device1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4838
%; Theta

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4840
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4840
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [holds_at(brokenSwitch(Device), Time)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4841
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4841
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
axiom(ab1(Device, Time),
    [not(holds_at(pluggedIn(Device), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4843
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4845
% !HoldsAt(On(Device1),0).
 %  not(initially(on(device1))).
axiom(not(initially(on(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4846
% HoldsAt(BrokenSwitch(Device1),0).
axiom(initially(brokenSwitch(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4848
%; added:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4849
% HoldsAt(PluggedIn(Device1),0).
axiom(initially(pluggedIn(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4851
%; entailed:
%; !HoldsAt(On(Device1),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4854
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4855
==> completion(theta).
==> completion(ab1).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4856
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4858
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4859
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodB.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4888
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4891
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4892
==> sort(object).

% object A,B
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4894
==> t(object,a).
==> t(object,b).

% fluent P(object)
 %  fluent(p(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4896
==> mpred_prop(p(object),fluent).
==> meta_argtypes(p(object)).

% fluent Q(object)
 %  fluent(q(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4897
==> mpred_prop(q(object),fluent).
==> meta_argtypes(q(object)).

% predicate Ab(object,time)
 %  predicate(ab(object,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4898
==> mpred_prop(ab(object,time),predicate).
==> meta_argtypes(ab(object,time)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4899
% [object,time]
% HoldsAt(P(object),time) & !Ab(object,time) ->
% HoldsAt(Q(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4901
axiom(holds_at(q(Object), Time),
    [holds_at(p(Object), Time), not(ab(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4903
% HoldsAt(P(A),0).
axiom(initially(p(a)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4904
% HoldsAt(P(B),0).
axiom(initially(p(b)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4906
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4906
% Ab(A,0).
ab(a,0).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4908
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4909
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4910
==> range(offset,1,1).

% completion Theta Ab
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4912
==> completion(theta).
==> completion(ab).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/ModelFinding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4939
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4942
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4943
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4945
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4946
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4947
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4948
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
axiom(requires(wakeUp(Agent), Time),
    [not(holds_at(awake(Agent), Time))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4950
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4951
==> t(agent,james).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4953
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4954
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Postdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4979
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4982
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4983
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4985
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4986
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4987
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4988
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
axiom(requires(wakeUp(Agent), Time),
    [not(holds_at(awake(Agent), Time))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4990
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4991
==> t(agent,james).

% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4991
% Happens(WakeUp(James),0).
axiom(happens(wakeUp(james), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4992
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4994
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4995
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4997
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:4998
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5023
% option timediff off
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5024
:- set_ec_option(timediff, off).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5026
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5028
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5029
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5031
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5032
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5033
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5035
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5036
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5036
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5037
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5037
% Happens(WakeUp(James),0).
axiom(happens(wakeUp(james), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5039
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5040
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5042
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5043
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5068
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5071
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5072
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5074
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5075
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5076
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5078
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5079
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5079
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5080
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5080
% Happens(WakeUp(James),0).
axiom(happens(wakeUp(james), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5082
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5083
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5085
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5086
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Abduction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5111
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5114
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5115
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5117
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5118
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5119
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5121
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5122
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5122
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5123
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5125
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5126
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5127
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/AlarmClock.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5152
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5155
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5156
==> sort(agent).

% sort clock
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5157
==> sort(clock).

% fluent Beeping(clock)
 %  fluent(beeping(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5159
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% fluent AlarmTime(clock,time)
 %  fluent(alarmTime(clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5160
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% fluent AlarmOn(clock)
 %  fluent(alarmOn(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5161
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% event SetAlarmTime(agent,clock,time)
 %  event(setAlarmTime(agent,clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5163
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
 %  event(startBeeping(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5164
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% event TurnOnAlarm(agent,clock)
 %  event(turnOnAlarm(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5165
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
 %  event(turnOffAlarm(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5166
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5168
==> t(agent,nathan).

% clock Clock
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5169
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5173
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5175
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5177
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5180
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5182
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5183
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5185
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5186
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5188
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5189
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5191
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5192
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5194
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5197
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5199
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5201
% Happens(SetAlarmTime(Nathan,Clock,2),0).
axiom(happens(setAlarmTime(nathan, clock, 2), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5202
% Happens(TurnOnAlarm(Nathan,Clock),1).
axiom(happens(turnOnAlarm(nathan, clock), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5204
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5207
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5209
axiom(Time1=Time2,
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      holds_at(alarmTime(Clock, Time2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5211
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5213
% !HoldsAt(AlarmOn(Clock),0).
 %  not(initially(alarmOn(clock))).
axiom(not(initially(alarmOn(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5214
% !HoldsAt(Beeping(Clock),0).
 %  not(initially(beeping(clock))).
axiom(not(initially(beeping(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5215
% HoldsAt(AlarmTime(Clock,3),0).
axiom(initially(alarmTime(clock, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5217
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5218
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5220
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5221
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/BankAccountServiceFee.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5248
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5249
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5251
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5253
% sort account
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5254
==> sort(account).

% sort value: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5255
==> subsort(value,integer).

% account Account1, Account2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5257
==> t(account,account1).
==> t(account,account2).

% predicate EndOfMonth(time)
 %  predicate(endOfMonth(time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5259
==> mpred_prop(endOfMonth(time),predicate).
==> meta_argtypes(endOfMonth(time)).

% function ServiceFee(account): value
 %  functional_predicate(serviceFee(account,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5260
==> mpred_prop(serviceFee(account,value),functional_predicate).
==> meta_argtypes(serviceFee(account,value)).
resultIsa(serviceFee,value).

% function MinimumBalance(account): value
 %  functional_predicate(minimumBalance(account,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5261
==> mpred_prop(minimumBalance(account,value),functional_predicate).
==> meta_argtypes(minimumBalance(account,value)).
resultIsa(minimumBalance,value).

% fluent ServiceFeeCharged(account)
 %  fluent(serviceFeeCharged(account)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5263
==> mpred_prop(serviceFeeCharged(account),fluent).
==> meta_argtypes(serviceFeeCharged(account)).

% fluent Balance(account,value)
 %  fluent(balance(account,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5264
==> mpred_prop(balance(account,value),fluent).
==> meta_argtypes(balance(account,value)).

% event Transfer(account,account,value)
 %  event(transfer(account,account,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5266
==> mpred_prop(transfer(account,account,value),event).
==> meta_argtypes(transfer(account,account,value)).

% event MonthlyReset(account)
 %  event(monthlyReset(account)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5267
==> mpred_prop(monthlyReset(account),event).
==> meta_argtypes(monthlyReset(account)).

% event ChargeServiceFee(account)
 %  event(chargeServiceFee(account)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5268
==> mpred_prop(chargeServiceFee(account),event).
==> meta_argtypes(chargeServiceFee(account)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5269
%; Sigma
% [account1,account2,value1,value2,value3,value4,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5272
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value2+value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account2,value4),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5277
axiom(initiates(transfer(Account1, Account2, Value3), balance(Account2, Value4), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      Value1>=Value3,
      equals(Value4, Value2+Value3)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5279
% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account2,value2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5284
axiom(terminates(transfer(Account1, Account2, Value3), balance(Account2, Value2), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      Value1>=Value3
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5286
% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value1-value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account1,value4),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5292
axiom(initiates(transfer(Account1, Account2, Value3), balance(Account1, Value4), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      Value1>=Value3,
      equals(Value4, Value1-Value3)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5294
% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account1,value1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5299
axiom(terminates(transfer(Account1, Account2, Value3), balance(Account1, Value1), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      Value1>=Value3
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5301
% [account,time]
% Initiates(ChargeServiceFee(account),ServiceFeeCharged(account),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5302
axiom(initiates(chargeServiceFee(Account), serviceFeeCharged(Account), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5304
% [account,time]
% Terminates(MonthlyReset(account),ServiceFeeCharged(account),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5305
axiom(terminates(monthlyReset(Account), serviceFeeCharged(Account), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5307
% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% value2 = (value1-ServiceFee(account)) ->
% Initiates(ChargeServiceFee(account),
%           Balance(account,value2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5312
axiom(initiates(chargeServiceFee(Account), balance(Account, Value2), Time),
   
    [ holds_at(balance(Account, Value1), Time),
      equals(Value2, Value1-serviceFee(Account))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5314
% [account,value,time]
% HoldsAt(Balance(account,value),time) ->
% Terminates(ChargeServiceFee(account),Balance(account,value),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5316
axiom(terminates(chargeServiceFee(Account), balance(Account, Value), Time),
    [holds_at(balance(Account, Value), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5318
%; Delta
% [account,value,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5321
% HoldsAt(Balance(account,value),time) &
% value<MinimumBalance(account) &
% !HoldsAt(ServiceFeeCharged(account),time) ->
% Happens(ChargeServiceFee(account),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5324
axiom(happens(chargeServiceFee(Account), Time),
   
    [ holds_at(balance(Account, Value), Time),
      comparison(Value, minimumBalance(Account), <),
      not(holds_at(serviceFeeCharged(Account), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5326
% [account,time]
% EndOfMonth(time) ->
% Happens(MonthlyReset(account),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5328
axiom(happens(monthlyReset(Account), Time),
    [endOfMonth(Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5330
% Happens(Transfer(Account1,Account2,1),0).
axiom(happens(transfer(account1, account2, 1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5331
% Happens(Transfer(Account1,Account2,1),0).
axiom(happens(transfer(account1, account2, 1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5333
%; Psi
% [account,value1,value2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5336
% HoldsAt(Balance(account,value1),time) &
% HoldsAt(Balance(account,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5338
axiom(Value1=Value2,
   
    [ holds_at(balance(Account, Value1), Time),
      holds_at(balance(Account, Value2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5340
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5342
% !HoldsAt(ServiceFeeCharged(Account1),0).
 %  not(initially(serviceFeeCharged(account1))).
axiom(not(initially(serviceFeeCharged(account1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5343
% !HoldsAt(ServiceFeeCharged(Account2),0).
 %  not(initially(serviceFeeCharged(account2))).
axiom(not(initially(serviceFeeCharged(account2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5344
% HoldsAt(Balance(Account1,3),0).
axiom(initially(balance(account1, 3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5345
% HoldsAt(Balance(Account2,1),0).
axiom(initially(balance(account2, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5346
% MinimumBalance(Account1)=3.
minimumBalance(account1,3).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5347
% MinimumBalance(Account2)=1.
minimumBalance(account2,1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5348
% ServiceFee(Account1)=1.
serviceFee(account1,1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5349
% ServiceFee(Account2)=1.
serviceFee(account2,1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5350
% [time]
 % !EndOfMonth(time).
 %  not(endOfMonth(Time)).
axiom(not(endOfMonth(EndOfMonth_Ret)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5352
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5353
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5355
==> range(time,0,3).

% range value 1 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5356
==> range(value,1,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5357
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/Counter.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{DeneckerDupreBelleghem:1998,
%;   author = "Marc Denecker and Daniele Theseider Dupr\'{e} and Kristof Van Belleghem",
%;   year = "1998",
%;   title = "An inductive definition approach to ramifications",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "3",
%;   number = "007",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5393
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5396
% sort counter
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5397
==> sort(counter).

% counter Counter1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5398
==> t(counter,counter1).

% event FalseToTrue(counter)
 %  event(falseToTrue(counter)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5400
==> mpred_prop(falseToTrue(counter),event).
==> meta_argtypes(falseToTrue(counter)).

% event TrueToFalse(counter)
 %  event(trueToFalse(counter)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5401
==> mpred_prop(trueToFalse(counter),event).
==> meta_argtypes(trueToFalse(counter)).

% fluent Count(counter,integer)
 %  fluent(count(counter,integer)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5403
==> mpred_prop(count(counter,integer),fluent).
==> meta_argtypes(count(counter,integer)).

% fluent True(counter)
 %  fluent(true(counter)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5404
==> mpred_prop(true(counter),fluent).
==> meta_argtypes(true(counter)).

% fluent InputLine(counter)
 %  fluent(inputLine(counter)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5405
==> mpred_prop(inputLine(counter),fluent).
==> meta_argtypes(inputLine(counter)).

% noninertial InputLine
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5406
==> noninertial(inputLine).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5407
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5407
% [counter,time]
% !HoldsAt(True(counter),time) &
% HoldsAt(InputLine(counter),time) ->
% Happens(FalseToTrue(counter),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5410
axiom(happens(falseToTrue(Counter), Time),
   
    [ not(holds_at(true(Counter), Time)),
      holds_at(inputLine(Counter), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5412
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5412
% [counter,time]
% HoldsAt(True(counter),time) &
% !HoldsAt(InputLine(counter),time) ->
% Happens(TrueToFalse(counter),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5415
axiom(happens(trueToFalse(Counter), Time),
   
    [ holds_at(true(Counter), Time),
      not(holds_at(inputLine(Counter), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5417
% [counter,time]
 % Initiates(FalseToTrue(counter),True(counter),time).
axiom(initiates(falseToTrue(Counter), true(Counter), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5419
% [counter,time]
 % Terminates(TrueToFalse(counter),True(counter),time).
axiom(terminates(trueToFalse(Counter), true(Counter), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5421
% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% (integer2 = (integer1 + 1)) ->
% Initiates(FalseToTrue(counter),Count(counter,integer2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5424
axiom(initiates(falseToTrue(Counter), count(Counter, Integer2), Time),
   
    [ holds_at(count(Counter, Integer1), Time),
      equals(Integer2, Integer1+1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5426
% [counter,integer,time]
% HoldsAt(Count(counter,integer),time) ->
% Terminates(FalseToTrue(counter),Count(counter,integer),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5428
axiom(terminates(falseToTrue(Counter), count(Counter, Integer), Time),
    [holds_at(count(Counter, Integer), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5430
% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% HoldsAt(Count(counter,integer2),time) ->
% integer1 = integer2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5433
axiom(Integer1=Integer2,
   
    [ holds_at(count(Counter, Integer1), Time),
      holds_at(count(Counter, Integer2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5435
% !HoldsAt(True(Counter1),0).
 %  not(initially(true(counter1))).
axiom(not(initially(true(counter1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5436
% !HoldsAt(InputLine(Counter1),0).
 %  not(initially(inputLine(counter1))).
axiom(not(initially(inputLine(counter1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5437
% HoldsAt(InputLine(Counter1),1).
holds_at(inputLine(counter1),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5438
% HoldsAt(InputLine(Counter1),2).
holds_at(inputLine(counter1),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5439
% HoldsAt(InputLine(Counter1),3).
holds_at(inputLine(counter1),3).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5440
% !HoldsAt(InputLine(Counter1),4).
 %  not(holds_at(inputLine(counter1),4)).
axiom(not(holds_at(inputLine(counter1), t4)),
    [b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5441
% !HoldsAt(InputLine(Counter1),5).
 %  not(holds_at(inputLine(counter1),5)).
axiom(not(holds_at(inputLine(counter1), t5)),
    [b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5442
% !HoldsAt(InputLine(Counter1),6).
 %  not(holds_at(inputLine(counter1),6)).
axiom(not(holds_at(inputLine(counter1), t6)),
    [b(t, t6), ignore(t+6=t6)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5443
% HoldsAt(InputLine(Counter1),7).
holds_at(inputLine(counter1),7).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5444
% HoldsAt(InputLine(Counter1),8).
holds_at(inputLine(counter1),8).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5445
% HoldsAt(InputLine(Counter1),9).
holds_at(inputLine(counter1),9).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5447
% HoldsAt(Count(Counter1,0),0).
axiom(initially(count(counter1, 0)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5449
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5450
==> completion(happens).

% range integer 0 6
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5452
==> range(integer,0,6).

% range time 0 10
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5453
==> range(time,0,10).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5454
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TeacherTells.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5481
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5482
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5484
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5486
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5487
==> sort(agent).

% sort room
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5488
==> sort(room).

% sort fact
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5489
==> sort(fact).

% agent Teacher, Student
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5491
==> t(agent,teacher).
==> t(agent,student).

% room Kitchen, Classroom
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5492
==> t(room,kitchen).
==> t(room,classroom).

% fact Fact1, Fact2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5493
==> t(fact,fact1).
==> t(fact,fact2).

% fluent InRoom(agent,room)
 %  fluent(inRoom(agent,room)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5495
==> mpred_prop(inRoom(agent,room),fluent).
==> meta_argtypes(inRoom(agent,room)).

% fluent ListeningTo(agent,agent)
 %  fluent(listeningTo(agent,agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5496
==> mpred_prop(listeningTo(agent,agent),fluent).
==> meta_argtypes(listeningTo(agent,agent)).

% fluent Know(agent,fact)
 %  fluent(know(agent,fact)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5497
==> mpred_prop(know(agent,fact),fluent).
==> meta_argtypes(know(agent,fact)).

% event Tell(agent,agent,fact)
 %  event(tell(agent,agent,fact)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5499
==> mpred_prop(tell(agent,agent,fact),event).
==> meta_argtypes(tell(agent,agent,fact)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5500
%; Sigma
% [agent1,agent2,fact,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5503
% (
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5503
% {room} HoldsAt(InRoom(agent1,room),time) &
%         HoldsAt(InRoom(agent2,room),time)) &
% HoldsAt(ListeningTo(agent2,agent1),time) ->
% Initiates(Tell(agent1,agent2,fact),Know(agent2,fact),time).

 /*   exists([Room],
             if(((holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time)), holds_at(listeningTo(Agent2, Agent1), Time)),
                initiates(tell(Agent1, Agent2, Fact),
                          know(Agent2, Fact),
                          Time))).
 */

 /*  initiates(tell(Tell_Param, Know_Param, Tell_Ret), know(Know_Param, Tell_Ret), Time6) :-
       ( ( holds_at(inRoom(Tell_Param, Some_Param), Time6),
           holds_at(inRoom(Know_Param, Some_Param), Time6)
         ),
         holds_at(listeningTo(Know_Param, Tell_Param), Time6)
       ),
       some(Some_Param,
            '$kolem_Fn_357'(Tell_Param,
                            Time6,
                            Know_Param,
                            Tell_Ret)).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5506
axiom(initiates(tell(Tell_Param, Know_Param, Tell_Ret), know(Know_Param, Tell_Ret), Time6),
   
    [ holds_at(inRoom(Tell_Param, Some_Param), Time6),
      holds_at(inRoom(Know_Param, Some_Param), Time6),
      holds_at(listeningTo(Know_Param, Tell_Param), Time6),
      some(Some_Param,
           '$kolem_Fn_357'(Tell_Param,
                           Time6,
                           Know_Param,
                           Tell_Ret))
    ]).

 /*  not(holds_at(inRoom(InRoom_Param, Some_Param14), Time11)) :-
       holds_at(inRoom(InRoom_Param13, Some_Param14), Time11),
       holds_at(listeningTo(InRoom_Param13, InRoom_Param),
                Time11),
       not(initiates(tell(InRoom_Param,
                          InRoom_Param13,
                          Tell_Ret15),
                     know(InRoom_Param13, Tell_Ret15),
                     Time11)),
       some(Some_Param14,
            '$kolem_Fn_357'(InRoom_Param,
                            Time11,
                            InRoom_Param13,
                            Tell_Ret15)).
 */
axiom(not(holds_at(inRoom(InRoom_Param, Some_Param14), Time11)),
   
    [ holds_at(inRoom(InRoom_Param13, Some_Param14), Time11),
      holds_at(listeningTo(InRoom_Param13, InRoom_Param),
               Time11),
      not(initiates(tell(InRoom_Param,
                         InRoom_Param13,
                         Tell_Ret15),
                    know(InRoom_Param13, Tell_Ret15),
                    Time11)),
      some(Some_Param14,
           '$kolem_Fn_357'(InRoom_Param,
                           Time11,
                           InRoom_Param13,
                           Tell_Ret15))
    ]).

 /*  not(holds_at(inRoom(InRoom_Param17, Some_Param19), Time16)) :-
       holds_at(inRoom(InRoom_Param18, Some_Param19), Time16),
       holds_at(listeningTo(InRoom_Param17, InRoom_Param18),
                Time16),
       not(initiates(tell(InRoom_Param18,
                          InRoom_Param17,
                          Tell_Ret20),
                     know(InRoom_Param17, Tell_Ret20),
                     Time16)),
       some(Some_Param19,
            '$kolem_Fn_357'(InRoom_Param18,
                            Time16,
                            InRoom_Param17,
                            Tell_Ret20)).
 */
axiom(not(holds_at(inRoom(InRoom_Param17, Some_Param19), Time16)),
   
    [ holds_at(inRoom(InRoom_Param18, Some_Param19), Time16),
      holds_at(listeningTo(InRoom_Param17, InRoom_Param18),
               Time16),
      not(initiates(tell(InRoom_Param18,
                         InRoom_Param17,
                         Tell_Ret20),
                    know(InRoom_Param17, Tell_Ret20),
                    Time16)),
      some(Some_Param19,
           '$kolem_Fn_357'(InRoom_Param18,
                           Time16,
                           InRoom_Param17,
                           Tell_Ret20))
    ]).

 /*  not(holds_at(listeningTo(ListeningTo_Param, InRoom_Param23), Time21)) :-
       ( holds_at(inRoom(InRoom_Param23, Some_Param24), Time21),
         holds_at(inRoom(ListeningTo_Param, Some_Param24),
                  Time21)
       ),
       not(initiates(tell(InRoom_Param23,
                          ListeningTo_Param,
                          Tell_Ret25),
                     know(ListeningTo_Param, Tell_Ret25),
                     Time21)),
       some(Some_Param24,
            '$kolem_Fn_357'(InRoom_Param23,
                            Time21,
                            ListeningTo_Param,
                            Tell_Ret25)).
 */
axiom(not(holds_at(listeningTo(ListeningTo_Param, InRoom_Param23), Time21)),
   
    [ holds_at(inRoom(InRoom_Param23, Some_Param24), Time21),
      holds_at(inRoom(ListeningTo_Param, Some_Param24),
               Time21),
      not(initiates(tell(InRoom_Param23,
                         ListeningTo_Param,
                         Tell_Ret25),
                    know(ListeningTo_Param, Tell_Ret25),
                    Time21)),
      some(Some_Param24,
           '$kolem_Fn_357'(InRoom_Param23,
                           Time21,
                           ListeningTo_Param,
                           Tell_Ret25))
    ]).

 /*  not(some(Some_Param27, '$kolem_Fn_357'(Fn_357_Param, Time26, Know_Param29, Fn_357_Ret))) :-
       not(initiates(tell(Fn_357_Param, Know_Param29, Fn_357_Ret),
                     know(Know_Param29, Fn_357_Ret),
                     Time26)),
       ( holds_at(inRoom(Fn_357_Param, Some_Param27), Time26),
         holds_at(inRoom(Know_Param29, Some_Param27), Time26)
       ),
       holds_at(listeningTo(Know_Param29, Fn_357_Param), Time26).
 */
axiom(not(some(Some_Param27, '$kolem_Fn_357'(Fn_357_Param, Time26, Know_Param29, Fn_357_Ret))),
   
    [ not(initiates(tell(Fn_357_Param,
                         Know_Param29,
                         Fn_357_Ret),
                    know(Know_Param29, Fn_357_Ret),
                    Time26)),
      holds_at(inRoom(Fn_357_Param, Some_Param27), Time26),
      holds_at(inRoom(Know_Param29, Some_Param27), Time26),
      holds_at(listeningTo(Know_Param29, Fn_357_Param),
               Time26)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5508
%; Delta


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5510
% Happens(Tell(Teacher,Student,Fact1),0).
axiom(happens(tell(teacher, student, fact1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5512
%; Psi
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5515
% HoldsAt(InRoom(agent,room1),time) &
% HoldsAt(InRoom(agent,room2),time) ->
% room1 = room2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5517
axiom(Room1=Room2,
   
    [ holds_at(inRoom(Agent, Room1), Time),
      holds_at(inRoom(Agent, Room2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5519
%; Gamma
% [agent,fact]
 % !HoldsAt(Know(agent,fact),0).
 %  not(initially(know(Agent,Fact))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5521
axiom(not(initially(know(Know_Param, Know_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5522
% [agent1,agent2]
 % HoldsAt(ListeningTo(agent1,agent2),0).
axiom(initially(listeningTo(Agent1, Agent2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5523
% [agent]
 % HoldsAt(InRoom(agent,Classroom),0).
axiom(initially(inRoom(Agent, classroom)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5525
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5526
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5528
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5529
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/MixingPaints.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5556
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5559
% sort palette
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5560
==> sort(palette).

% sort color
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5561
==> sort(color).

% palette Palette1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5563
==> t(palette,palette1).

% color Red, Yellow, Blue, Green
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5564
==> t(color,red).
==> t(color,yellow).
==> t(color,blue).
==> t(color,green).

% event PlaceOnPalette(palette,color)
 %  event(placeOnPalette(palette,color)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5566
==> mpred_prop(placeOnPalette(palette,color),event).
==> meta_argtypes(placeOnPalette(palette,color)).

% fluent OnPalette(palette,color)
 %  fluent(onPalette(palette,color)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5567
==> mpred_prop(onPalette(palette,color),fluent).
==> meta_argtypes(onPalette(palette,color)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5568
% [palette,color,time]
% !Happens(PlaceOnPalette(palette,Yellow),time) |
% !Happens(PlaceOnPalette(palette,Blue),time) ->
% Initiates(PlaceOnPalette(palette,color),OnPalette(palette,color),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5571
axiom(initiates(placeOnPalette(Palette, Color), onPalette(Palette, Color), Time),
    [not(happens(placeOnPalette(Palette, yellow), Time))]).
axiom(initiates(placeOnPalette(Palette, Color), onPalette(Palette, Color), Time),
    [not(happens(placeOnPalette(Palette, blue), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5573
% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% color1 = Blue &
% color2 = Green ->
% Initiates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5577
axiom(initiates(placeOnPalette(Palette, Color1), onPalette(Palette, Color2), Time),
   
    [ happens(placeOnPalette(Palette, yellow), Time),
      equals(Color1, blue),
      equals(Color2, green)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5579
% [palette,color1,color2,time]
% !(Happens(PlaceOnPalette(palette,Yellow),time) &
%   Happens(PlaceOnPalette(palette,Blue),time)) &
% HoldsAt(OnPalette(palette,color1),time) &
% color1 != color2 ->
% Terminates(PlaceOnPalette(palette,color2),OnPalette(palette,color1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5584
axiom(terminates(placeOnPalette(Palette, Color2), onPalette(Palette, Color1), Time),
   
    [ not(happens(placeOnPalette(Palette, yellow), Time)),
      holds_at(onPalette(Palette, Color1), Time),
      { dif(Color1, Color2)
      }
    ]).
axiom(terminates(placeOnPalette(Palette, Color2), onPalette(Palette, Color1), Time),
   
    [ not(happens(placeOnPalette(Palette, blue), Time)),
      holds_at(onPalette(Palette, Color1), Time),
      { dif(Color1, Color2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5586
% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% HoldsAt(OnPalette(palette,color2),time) &
% color1 = Blue &
% color2 != Green ->
% Terminates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5591
axiom(terminates(placeOnPalette(Palette, Color1), onPalette(Palette, Color2), Time),
   
    [ happens(placeOnPalette(Palette, yellow), Time),
      holds_at(onPalette(Palette, Color2), Time),
      equals(Color1, blue),
      { dif(Color2, green)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5593
%; state constraint
% [palette,color1,color2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5596
% HoldsAt(OnPalette(palette,color1),time) &
% HoldsAt(OnPalette(palette,color2),time) ->
% color1 = color2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5598
axiom(Color1=Color2,
   
    [ holds_at(onPalette(Palette, Color1), Time),
      holds_at(onPalette(Palette, Color2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5600
%; (1) place green over red


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5601
% HoldsAt(OnPalette(Palette1,Red),0).
axiom(initially(onPalette(palette1, red)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5602
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5602
% Happens(PlaceOnPalette(Palette1,Green),0).
axiom(happens(placeOnPalette(palette1, green), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5604
%; (2) place yellow+blue over green

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5605
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5605
% Happens(PlaceOnPalette(Palette1,Yellow),1).
axiom(happens(placeOnPalette(palette1, yellow), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5606
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5606
% Happens(PlaceOnPalette(Palette1,Blue),1).
axiom(happens(placeOnPalette(palette1, blue), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5608
%; (3) place yellow

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5609
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5609
% Happens(PlaceOnPalette(Palette1,Yellow),2).
axiom(happens(placeOnPalette(palette1, yellow), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5611
%; (4) place blue

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5612
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5612
% Happens(PlaceOnPalette(Palette1,Blue),3).
axiom(happens(placeOnPalette(palette1, blue), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5614
%; (5) place green

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5615
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5615
% Happens(PlaceOnPalette(Palette1,Yellow),4).
axiom(happens(placeOnPalette(palette1, yellow), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5616
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5616
% Happens(PlaceOnPalette(Palette1,Blue),4).
axiom(happens(placeOnPalette(palette1, blue), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5618
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5619
==> completion(delta).
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5621
==> range(time,0,5).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5622
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/SnoozeAlarm.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Alarm Clock with snooze alarm added
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5651
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5654
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5655
==> sort(agent).

% sort clock
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5656
==> sort(clock).

% fluent Beeping(clock)
 %  fluent(beeping(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5658
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% fluent AlarmTime(clock,time)
 %  fluent(alarmTime(clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5659
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% fluent AlarmOn(clock)
 %  fluent(alarmOn(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5660
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% event SetAlarmTime(agent,clock,time)
 %  event(setAlarmTime(agent,clock,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5662
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
 %  event(startBeeping(clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5663
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% event TurnOnAlarm(agent,clock)
 %  event(turnOnAlarm(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5664
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
 %  event(turnOffAlarm(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5665
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% event PressSnooze(agent,clock)
 %  event(pressSnooze(agent,clock)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5667
==> mpred_prop(pressSnooze(agent,clock),event).
==> meta_argtypes(pressSnooze(agent,clock)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5669
==> t(agent,nathan).

% clock Clock
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5670
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5674
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5676
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5678
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5681
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5683
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5684
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5686
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5687
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5689
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5690
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5692
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5693
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5695
%; added axioms:
% [agent,clock,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5698
% HoldsAt(Beeping(clock),time) &
% time2 = time+9 ->
% Initiates(PressSnooze(agent,clock),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5700
axiom(initiates(pressSnooze(Agent, Clock), alarmTime(Clock, Time2), Time),
   
    [ holds_at(beeping(Clock), Time),
      equals(Time2, Time+9)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5702
% [agent,clock,time1,time2,time]
% HoldsAt(Beeping(clock),time) &
% HoldsAt(AlarmTime(clock,time1),time) &
% time2 = time+9 &
% time1 != time2 ->
% Terminates(PressSnooze(agent,clock),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5707
axiom(terminates(pressSnooze(Agent, Clock), alarmTime(Clock, Time1), Time),
   
    [ holds_at(beeping(Clock), Time),
      holds_at(alarmTime(Clock, Time1), Time),
      equals(Time2, Time+9),
      { dif(Time1, Time2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5709
% [agent,clock,time]
% Terminates(PressSnooze(agent,clock),Beeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5710
axiom(terminates(pressSnooze(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5712
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5715
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5717
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5719
% Happens(SetAlarmTime(Nathan,Clock,2),0).
axiom(happens(setAlarmTime(nathan, clock, 2), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5720
% Happens(TurnOnAlarm(Nathan,Clock),1).
axiom(happens(turnOnAlarm(nathan, clock), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5721
% Happens(PressSnooze(Nathan,Clock),4).
axiom(happens(pressSnooze(nathan, clock), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5723
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5726
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5728
axiom(Time1=Time2,
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      holds_at(alarmTime(Clock, Time2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5730
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5732
% !HoldsAt(AlarmOn(Clock),0).
 %  not(initially(alarmOn(clock))).
axiom(not(initially(alarmOn(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5733
% !HoldsAt(Beeping(Clock),0).
 %  not(initially(beeping(clock))).
axiom(not(initially(beeping(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5734
% HoldsAt(AlarmTime(Clock,3),0).
axiom(initially(alarmTime(clock, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5736
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5737
==> completion(happens).

% range time 0 15
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5739
==> range(time,0,15).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5740
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TelephoneBugs.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Telephone
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5769
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5772
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5773
==> sort(agent).

% sort phone
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5774
==> sort(phone).

% agent Agent1, Agent2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5776
==> t(agent,agent1).
==> t(agent,agent2).

% phone Phone1, Phone2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5777
==> t(phone,phone1).
==> t(phone,phone2).

% fluent Ringing(phone,phone)
 %  fluent(ringing(phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5779
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% fluent DialTone(phone)
 %  fluent(dialTone(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5780
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% fluent BusySignal(phone)
 %  fluent(busySignal(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5781
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% fluent Idle(phone)
 %  fluent(idle(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5782
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% fluent Connected(phone,phone)
 %  fluent(connected(phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5783
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% fluent Disconnected(phone)
 %  fluent(disconnected(phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5784
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% event PickUp(agent,phone)
 %  event(pickUp(agent,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5786
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% event SetDown(agent,phone)
 %  event(setDown(agent,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5787
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% event Dial(agent,phone,phone)
 %  event(dial(agent,phone,phone)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5788
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5789
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5792
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5793
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5795
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5797
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5799
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5801
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5803
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5805
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5807
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5810
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5812
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5815
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5817
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5820
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5822
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5825
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      not(holds_at(idle(Phone2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5827
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5830
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      not(holds_at(idle(Phone2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5832
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5834
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5836
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5838
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5840
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5842
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5844
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5846
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5848
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5850
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5852
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5854
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5856
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5858
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5860
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5862
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5864
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5866
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5868
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5870
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5872
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5874
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5876
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5878
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5880
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5882
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5884
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5886
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5888
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5890
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5892
%; Delta
%; (1) Two agents dial each other simultaneously without first
%; picking up phone.


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5896
% Happens(Dial(Agent1,Phone1,Phone2),0).
axiom(happens(dial(agent1, phone1, phone2), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5897
% Happens(Dial(Agent2,Phone2,Phone1),0).
axiom(happens(dial(agent2, phone2, phone1), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5899
%; (2) Two agents dial each other simultaneously.


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5900
% Happens(PickUp(Agent1,Phone1),1).
axiom(happens(pickUp(agent1, phone1), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5901
% Happens(PickUp(Agent2,Phone2),1).
axiom(happens(pickUp(agent2, phone2), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5902
% Happens(Dial(Agent1,Phone1,Phone2),2).
axiom(happens(dial(agent1, phone1, phone2), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5903
% Happens(Dial(Agent2,Phone2,Phone1),2).
axiom(happens(dial(agent2, phone2, phone1), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5904
% Happens(SetDown(Agent1,Phone1),3).
axiom(happens(setDown(agent1, phone1), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5905
% Happens(SetDown(Agent2,Phone2),3).
axiom(happens(setDown(agent2, phone2), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5907
%; (3) One agent dials another agent just as the other
%; agent picks up the phone.


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5909
% Happens(PickUp(Agent1,Phone1),4).
axiom(happens(pickUp(agent1, phone1), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5910
% Happens(Dial(Agent1,Phone1,Phone2),5).
axiom(happens(dial(agent1, phone1, phone2), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5911
% Happens(PickUp(Agent2,Phone2),5).
axiom(happens(pickUp(agent2, phone2), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5913
%; Psi
% [phone,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5916
% !HoldsAt(Ringing(phone,phone),time).
 %  not(holds_at(ringing(Phone,Phone),Time)).
axiom(not(holds_at(ringing(Ringing_Param, Ringing_Param), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5918
% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5921
axiom(not(holds_at(ringing(Phone2, Phone1), Time)),
   
    [ holds_at(ringing(Phone1, Phone2), Time),
      dif(Phone1, Phone2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5923
% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
 %  not(holds_at(connected(Phone,Phone),Time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5924
axiom(not(holds_at(connected(Connected_Param, Connected_Param), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5926
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5929
axiom(not(holds_at(connected(Phone2, Phone1), Time)),
   
    [ holds_at(connected(Phone1, Phone2), Time),
      dif(Phone1, Phone2)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5931
% mutex Idle, DialTone, BusySignal, Disconnected
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5932
mutex(idle).
mutex(dialTone).
mutex(busySignal).
mutex(disconnected).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5933
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).

 /*   if(holds_at(idle(Phone1), Time),
          (not(holds_at(ringing(Phone1, Phone2), Time)), not(holds_at(connected(Phone1, Phone2), Time)))).
 */

 /*  not(holds_at(idle(Ringing_Param), Time3)) :-
       (   holds_at(ringing(Ringing_Param, Ringing_Ret), Time3)
       ;   holds_at(connected(Ringing_Param, Ringing_Ret), Time3)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5936
axiom(not(holds_at(idle(Ringing_Param), Time3)),
    [holds_at(ringing(Ringing_Param, Ringing_Ret), Time3)]).
axiom(not(holds_at(idle(Ringing_Param), Time3)),
    [holds_at(connected(Ringing_Param, Ringing_Ret), Time3)]).

 /*  not(holds_at(ringing(Ringing_Param7, Ringing_Ret8), Time6)) :-
       holds_at(idle(Ringing_Param7), Time6).
 */
axiom(not(holds_at(ringing(Ringing_Param7, Ringing_Ret8), Time6)),
    [holds_at(idle(Ringing_Param7), Time6)]).

 /*  not(holds_at(connected(Connected_Param, Connected_Ret), Time9)) :-
       holds_at(idle(Connected_Param), Time9).
 */
axiom(not(holds_at(connected(Connected_Param, Connected_Ret), Time9)),
    [holds_at(idle(Connected_Param), Time9)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5938
%; contradicts (3) above:
%;[phone1,phone2,time]
%;HoldsAt(DialTone(phone2),time) ->
%;!HoldsAt(Ringing(phone1,phone2),time) &
%;!HoldsAt(Connected(phone1,phone2),time).
%; etc.
%; Gamma
% [phone]
 
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5948
% HoldsAt(Idle(phone),0).
axiom(initially(idle(Phone)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5950
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5951
==> completion(happens).

% range time 0 6
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5953
==> range(time,0,6).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5954
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/HungryCat.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{WinikoffEtAl:2002,
%;   author = "Michael Winikoff and Lin Padgham and James Harland and John Thangarajah",
%;   year = "2002",
%;   title = "Declarative \& procedural goals in intelligent agent systems",
%;   editor = "Dieter Fensel and Fausto Giunchiglia and Deborah McGuinness and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{E}ighth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "470--481",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5992
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5995
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5996
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5997
==> subsort(agent,object).

% sort food: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5998
==> subsort(food,object).

% sort surface
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:5999
==> sort(surface).

% sort plan
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6000
==> sort(plan).

% reified sort belief
 %  reified_sort(belief).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6002
==> mpred_prop(belief,reified_sort).

% agent Cat
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6004
==> t(agent,cat).

% surface Floor, Chair, Shelf, Table
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6005
==> t(surface,floor).
==> t(surface,chair).
==> t(surface,shelf).
==> t(surface,table).

% food Food1, Food2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6006
==> t(food,food1).
==> t(food,food2).

% plan P1, P1a, P1b, P2, P2a
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6007
==> t(plan,p1).
==> t(plan,p1a).
==> t(plan,p1b).
==> t(plan,p2).
==> t(plan,p2a).

% predicate SelectedPlan(agent,belief,plan,time)
 %  predicate(selectedPlan(agent,belief,plan,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6009
==> mpred_prop(selectedPlan(agent,belief,plan,time),predicate).
==> meta_argtypes(selectedPlan(agent,belief,plan,time)).

% predicate SoundPlan(agent,belief,plan,time)
 %  predicate(soundPlan(agent,belief,plan,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6010
==> mpred_prop(soundPlan(agent,belief,plan,time),predicate).
==> meta_argtypes(soundPlan(agent,belief,plan,time)).

% fluent On(object,surface)
 %  fluent(on(object,surface)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6012
==> mpred_prop(on(object,surface),fluent).
==> meta_argtypes(on(object,surface)).

% fluent Goal(agent,belief)
 %  fluent(goal(agent,belief)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6013
==> mpred_prop(goal(agent,belief),fluent).
==> meta_argtypes(goal(agent,belief)).

% fluent CanJump(surface,surface)
 %  fluent(canJump(surface,surface)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6014
==> mpred_prop(canJump(surface,surface),fluent).
==> meta_argtypes(canJump(surface,surface)).

% fluent Plan(agent,belief,plan)
 %  fluent(plan(agent,belief,plan)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6015
==> mpred_prop(plan(agent,belief,plan),fluent).
==> meta_argtypes(plan(agent,belief,plan)).

% fluent Satiated(agent)
 %  fluent(satiated(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6016
==> mpred_prop(satiated(agent),fluent).
==> meta_argtypes(satiated(agent)).

% fluent Believe(agent,belief)
 %  fluent(believe(agent,belief)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6017
==> mpred_prop(believe(agent,belief),fluent).
==> meta_argtypes(believe(agent,belief)).

% event AddPlan(agent,belief,plan)
 %  event(addPlan(agent,belief,plan)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6019
==> mpred_prop(addPlan(agent,belief,plan),event).
==> meta_argtypes(addPlan(agent,belief,plan)).

% event DropPlan(agent,belief,plan)
 %  event(dropPlan(agent,belief,plan)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6020
==> mpred_prop(dropPlan(agent,belief,plan),event).
==> meta_argtypes(dropPlan(agent,belief,plan)).

% event Jump(agent,surface,surface)
 %  event(jump(agent,surface,surface)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6021
==> mpred_prop(jump(agent,surface,surface),event).
==> meta_argtypes(jump(agent,surface,surface)).

% event Move(surface,surface,surface)
 %  event(move(surface,surface,surface)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6022
==> mpred_prop(move(surface,surface,surface),event).
==> meta_argtypes(move(surface,surface,surface)).

% event Eat(agent,food)
 %  event(eat(agent,food)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6023
==> mpred_prop(eat(agent,food),event).
==> meta_argtypes(eat(agent,food)).

% event Wait(agent)
 %  event(wait(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6024
==> mpred_prop(wait(agent),event).
==> meta_argtypes(wait(agent)).

% belief BSatiated(agent)
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6026
==> t(belief,'bSatiated(agent)').

% belief BCanJump(surface,surface)
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6027
==> t(belief,'bCanJump(surface').
==> t(belief,'surface)').

% belief BOn(object,surface)
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6028
==> t(belief,'bOn(object').
==> t(belief,'surface)').
%; Sigma
%; A5
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6033
% Initiates(AddPlan(agent,belief,plan),Plan(agent,belief,plan),time).
axiom(initiates(addPlan(Agent, Belief, Plan), plan(Agent, Belief, Plan), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6035
%; A6
% [agent,belief,plan,time]
% Terminates(DropPlan(agent,belief,plan),Plan(agent,belief,plan),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6037
axiom(terminates(dropPlan(Agent, Belief, Plan), plan(Agent, Belief, Plan), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6039
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Initiates(Jump(agent,surface1,surface2),On(agent,surface2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6042
axiom(initiates(jump(Agent, Surface1, Surface2), on(Agent, Surface2), Time),
   
    [ holds_at(on(Agent, Surface1), Time),
      holds_at(canJump(Surface1, Surface2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6044
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Terminates(Jump(agent,surface1,surface2),On(agent,surface1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6047
axiom(terminates(jump(Agent, Surface1, Surface2), on(Agent, Surface1), Time),
   
    [ holds_at(on(Agent, Surface1), Time),
      holds_at(canJump(Surface1, Surface2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6049
% [surface1,surface2,surface3,time]
% Initiates(Move(surface1,surface2,surface3),CanJump(surface1,surface3),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6050
axiom(initiates(move(Surface1, Surface2, Surface3), canJump(Surface1, Surface3), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6052
% [surface1,surface2,surface3,time]
% Terminates(Move(surface1,surface2,surface3),CanJump(surface1,surface2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6053
axiom(terminates(move(Surface1, Surface2, Surface3), canJump(Surface1, Surface2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6055
% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Initiates(Eat(agent,food),Satiated(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6058
axiom(initiates(eat(Agent, Food), satiated(Agent), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6060
% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Terminates(Eat(agent,food),On(food,surface),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6063
axiom(terminates(eat(Agent, Food), on(Food, Surface), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6065
% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface2)) ->
% Initiates(Jump(agent,surface1,surface2),
%           Believe(agent,belief),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6071
axiom(initiates(jump(Agent, Surface1, Surface2), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      equals(Belief, bOn(Agent, Surface2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6073
% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface1)) ->
% Terminates(Jump(agent,surface1,surface2),
%            Believe(agent,belief),
%            time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6079
axiom(terminates(jump(Agent, Surface1, Surface2), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      equals(Belief, bOn(Agent, Surface1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6081
% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface3)) ->
% Initiates(Move(surface1,surface2,surface3),
%           Believe(agent,belief),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6085
axiom(initiates(move(Surface1, Surface2, Surface3), believe(Agent, Belief), Time),
    [equals(Belief, bCanJump(Surface1, Surface3))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6087
% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface2)) ->
% Terminates(Move(surface1,surface2,surface3),
%            Believe(agent,belief),
%            time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6091
axiom(terminates(move(Surface1, Surface2, Surface3), believe(Agent, Belief), Time),
    [equals(Belief, bCanJump(Surface1, Surface2))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6093
% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BSatiated(agent)) ->
% Initiates(Eat(agent,food),Believe(agent,belief),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6097
axiom(initiates(eat(Agent, Food), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface)), Time),
      holds_at(believe(Agent, bOn(Food, Surface)), Time),
      equals(Belief, bSatiated(Agent))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6099
% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BOn(food,surface)) ->
% Terminates(Eat(agent,food),Believe(agent,belief),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6103
axiom(terminates(eat(Agent, Food), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface)), Time),
      holds_at(believe(Agent, bOn(Food, Surface)), Time),
      equals(Belief, bOn(Food, Surface))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6105
%; Delta
%; A7
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6109
% HoldsAt(Goal(agent,belief),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SelectedPlan(agent,belief,plan,time) &
% (!{plan1} HoldsAt(Plan(agent,belief,plan1),time)) ->
% Happens(AddPlan(agent,belief,plan),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6113
axiom(happens(addPlan(Agent, Belief, Plan), Time),
   
    [ holds_at(goal(Agent, Belief), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      not(holds_at(plan(Agent, Belief, Plan1), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6115
%; A8
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(Jump(Cat,Floor,Chair),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6120
axiom(happens(jump(cat, floor, chair), Time),
   
    [ holds_at(plan(Agent, Belief, p1), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      soundPlan(Agent, Belief, p1, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6122
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(Wait(Cat),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6126
axiom(happens(wait(cat), Time),
   
    [ holds_at(plan(Agent, Belief, p1a), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      soundPlan(Agent, Belief, p1a, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6128
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(Jump(Cat,Chair,Shelf),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6132
axiom(happens(jump(cat, chair, shelf), Time),
   
    [ holds_at(plan(Agent, Belief, p2), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      soundPlan(Agent, Belief, p2, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6134
%; A9
% [agent,belief,plan,time]
% HoldsAt(Plan(agent,belief,plan),time) ->
% Happens(DropPlan(agent,belief,plan),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6137
axiom(happens(dropPlan(Agent, Belief, Plan), Time),
    [holds_at(plan(Agent, Belief, Plan), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6139
%; A10
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(AddPlan(agent,belief,P1a),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6144
axiom(happens(addPlan(Agent, Belief, p1a), Time),
   
    [ holds_at(plan(Agent, Belief, p1), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      soundPlan(Agent, Belief, p1, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6146
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(AddPlan(agent,belief,P1b),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6150
axiom(happens(addPlan(Agent, Belief, p1b), Time),
   
    [ holds_at(plan(Agent, Belief, p1a), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      soundPlan(Agent, Belief, p1a, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6152
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(AddPlan(agent,belief,P2a),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6156
axiom(happens(addPlan(Agent, Belief, p2a), Time),
   
    [ holds_at(plan(Agent, Belief, p2), Time),
      not(holds_at(believe(Agent, Belief), Time)),
      soundPlan(Agent, Belief, p2, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6158
%; reactive behavior
% [agent,food,surface,time]
% !HoldsAt(Satiated(agent),time) &
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Happens(Eat(agent,food),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6163
axiom(happens(eat(Agent, Food), Time),
   
    [ not(holds_at(satiated(Agent), Time)),
      holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6165
%; narrative


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6167
% Happens(Move(Chair,Table,Shelf),2).
axiom(happens(move(chair, table, shelf), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6169
%; SelectedPlan - plan library
%;[agent,belief,plan,time]
%;SelectedPlan(agent,belief,plan,time) <->
%;(agent=Cat & belief=BSatiated(Cat) & plan=P1 & time=0) |
%;(agent=Cat & belief=BSatiated(Cat) & plan=P2 & time=4).
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6177
% SelectedPlan(agent,belief,plan,time) <->
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P1 &
%  time=0) |
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P2 &
%  time=4).

 /*  selectedPlan(Agent, Belief, Plan, Time) <->
       (   exists([Surface1, Surface2, Surface3, Food],
                   (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0))
       ;   exists([Surface18, Surface29, Surface310, Food11],
                   (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6193
axiom(selectedPlan(Agent, Belief, Plan, Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p1),
      equals(Time, 0)
    ]).
axiom(selectedPlan(Agent, Belief, Plan, Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p2),
      equals(Time, 4)
    ]).

 /*   if(selectedPlan(Agent, Belief, Plan, Time),
          (exists([Surface1, Surface2, Surface3, Food],  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0));exists([Surface18, Surface29, Surface310, Food11],  (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4)))).
 */
todo_later(if(selectedPlan(Agent, Belief, Plan, Time),  (exists([Surface1, Surface2, Surface3, Food],  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0));exists([Surface18, Surface29, Surface310, Food11],  (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4)))), [(not(selectedPlan(SelectedPlan_Param, Equals_Param, Equals_Param32, Time12)):-(not(holds_at(believe(SelectedPlan_Param, bOn(SelectedPlan_Param, BCanJump_Param)), Time12));not(holds_at(believe(SelectedPlan_Param, bCanJump(BCanJump_Param, BCanJump_Param29)), Time12));not(holds_at(believe(SelectedPlan_Param, bCanJump(BCanJump_Param29, BCanJump_Ret)), Time12));not(holds_at(believe(SelectedPlan_Param, bOn(BOn_Param, BCanJump_Ret)), Time12));not(equals(Equals_Param, bSatiated(SelectedPlan_Param)));not(equals(Equals_Param32, p1));not(equals(Time12, 0))), (not(holds_at(believe(SelectedPlan_Param, bOn(SelectedPlan_Param, BCanJump_Param33)), Time12));not(holds_at(believe(SelectedPlan_Param, bCanJump(BCanJump_Param33, BCanJump_Param34)), Time12));not(holds_at(believe(SelectedPlan_Param, bCanJump(BCanJump_Param34, BCanJump_Ret127)), Time12));not(holds_at(believe(SelectedPlan_Param, bOn(BOn_Param35, BCanJump_Ret127)), Time12));not(equals(Equals_Param, bSatiated(SelectedPlan_Param)));not(equals(Equals_Param32, p2));not(equals(Time12, 4)))),  (holds_at(believe(Believe_Param, bOn(Believe_Param, BOn_Ret)), Time13):-(not(holds_at(believe(Believe_Param, bOn(Believe_Param, BCanJump_Param37)), Time13));not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param37, BCanJump_Param38)), Time13));not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param38, BCanJump_Ret129)), Time13));not(holds_at(believe(Believe_Param, bOn(BOn_Param39, BCanJump_Ret129)), Time13));not(equals(Equals_Param40, bSatiated(Believe_Param)));not(equals(Equals_Param41, p2));not(equals(Time13, 4))), selectedPlan(Believe_Param, Equals_Param40, Equals_Param41, Time13)),  (holds_at(believe(Believe_Param42, bCanJump(BCanJump_Param43, BCanJump_Ret130)), Time14):-(not(holds_at(believe(Believe_Param42, bOn(Believe_Param42, BCanJump_Param44)), Time14));not(holds_at(believe(Believe_Param42, bCanJump(BCanJump_Param44, BCanJump_Param45)), Time14));not(holds_at(believe(Believe_Param42, bCanJump(BCanJump_Param45, BCanJump_Ret131)), Time14));not(holds_at(believe(Believe_Param42, bOn(BOn_Param46, BCanJump_Ret131)), Time14));not(equals(Equals_Param47, bSatiated(Believe_Param42)));not(equals(Equals_Param48, p2));not(equals(Time14, 4))), selectedPlan(Believe_Param42, Equals_Param47, Equals_Param48, Time14)),  (holds_at(believe(Believe_Param49, bCanJump(BCanJump_Param50, BCanJump_Ret132)), Time15):-(not(holds_at(believe(Believe_Param49, bOn(Believe_Param49, BCanJump_Param51)), Time15));not(holds_at(believe(Believe_Param49, bCanJump(BCanJump_Param51, BCanJump_Param52)), Time15));not(holds_at(believe(Believe_Param49, bCanJump(BCanJump_Param52, BCanJump_Ret133)), Time15));not(holds_at(believe(Believe_Param49, bOn(BOn_Param53, BCanJump_Ret133)), Time15));not(equals(Equals_Param54, bSatiated(Believe_Param49)));not(equals(Equals_Param55, p2));not(equals(Time15, 4))), selectedPlan(Believe_Param49, Equals_Param54, Equals_Param55, Time15)),  (holds_at(believe(Believe_Param56, bOn(BOn_Param57, BOn_Ret134)), Time16):-(not(holds_at(believe(Believe_Param56, bOn(Believe_Param56, BCanJump_Param58)), Time16));not(holds_at(believe(Believe_Param56, bCanJump(BCanJump_Param58, BCanJump_Param59)), Time16));not(holds_at(believe(Believe_Param56, bCanJump(BCanJump_Param59, BCanJump_Ret135)), Time16));not(holds_at(believe(Believe_Param56, bOn(BOn_Param60, BCanJump_Ret135)), Time16));not(equals(Equals_Param61, bSatiated(Believe_Param56)));not(equals(Equals_Param62, p2));not(equals(Time16, 4))), selectedPlan(Believe_Param56, Equals_Param61, Equals_Param62, Time16)),  (equals(Equals_Param63, bSatiated(Believe_Param64)):-(not(holds_at(believe(Believe_Param64, bOn(Believe_Param64, BCanJump_Param65)), Time17));not(holds_at(believe(Believe_Param64, bCanJump(BCanJump_Param65, BCanJump_Param66)), Time17));not(holds_at(believe(Believe_Param64, bCanJump(BCanJump_Param66, BCanJump_Ret136)), Time17));not(holds_at(believe(Believe_Param64, bOn(BOn_Param67, BCanJump_Ret136)), Time17));not(equals(Equals_Param63, bSatiated(Believe_Param64)));not(equals(Equals_Param68, p2));not(equals(Time17, 4))), selectedPlan(Believe_Param64, Equals_Param63, Equals_Param68, Time17)),  (equals(Equals_Param69, p1):-(not(holds_at(believe(Believe_Param70, bOn(Believe_Param70, BCanJump_Param71)), Time18));not(holds_at(believe(Believe_Param70, bCanJump(BCanJump_Param71, BCanJump_Param72)), Time18));not(holds_at(believe(Believe_Param70, bCanJump(BCanJump_Param72, BCanJump_Ret137)), Time18));not(holds_at(believe(Believe_Param70, bOn(BOn_Param73, BCanJump_Ret137)), Time18));not(equals(Equals_Param74, bSatiated(Believe_Param70)));not(equals(Equals_Param69, p2));not(equals(Time18, 4))), selectedPlan(Believe_Param70, Equals_Param74, Equals_Param69, Time18)),  (equals(Time19, 0):-(not(holds_at(believe(Believe_Param75, bOn(Believe_Param75, BCanJump_Param76)), Time19));not(holds_at(believe(Believe_Param75, bCanJump(BCanJump_Param76, BCanJump_Param77)), Time19));not(holds_at(believe(Believe_Param75, bCanJump(BCanJump_Param77, BCanJump_Ret138)), Time19));not(holds_at(believe(Believe_Param75, bOn(BOn_Param78, BCanJump_Ret138)), Time19));not(equals(Equals_Param79, bSatiated(Believe_Param75)));not(equals(Equals_Param80, p2));not(equals(Time19, 4))), selectedPlan(Believe_Param75, Equals_Param79, Equals_Param80, Time19)),  (holds_at(believe(Believe_Param81, bOn(Believe_Param81, BOn_Ret139)), Time20):-(not(holds_at(believe(Believe_Param81, bOn(Believe_Param81, BCanJump_Param82)), Time20));not(holds_at(believe(Believe_Param81, bCanJump(BCanJump_Param82, BCanJump_Param83)), Time20));not(holds_at(believe(Believe_Param81, bCanJump(BCanJump_Param83, BCanJump_Ret140)), Time20));not(holds_at(believe(Believe_Param81, bOn(BOn_Param84, BCanJump_Ret140)), Time20));not(equals(Equals_Param85, bSatiated(Believe_Param81)));not(equals(Equals_Param86, p1));not(equals(Time20, 0))), selectedPlan(Believe_Param81, Equals_Param85, Equals_Param86, Time20)),  (holds_at(believe(Believe_Param87, bCanJump(BCanJump_Param88, BCanJump_Ret141)), Time21):-(not(holds_at(believe(Believe_Param87, bOn(Believe_Param87, BCanJump_Param89)), Time21));not(holds_at(believe(Believe_Param87, bCanJump(BCanJump_Param89, BCanJump_Param90)), Time21));not(holds_at(believe(Believe_Param87, bCanJump(BCanJump_Param90, BCanJump_Ret142)), Time21));not(holds_at(believe(Believe_Param87, bOn(BOn_Param91, BCanJump_Ret142)), Time21));not(equals(Equals_Param92, bSatiated(Believe_Param87)));not(equals(Equals_Param93, p1));not(equals(Time21, 0))), selectedPlan(Believe_Param87, Equals_Param92, Equals_Param93, Time21)),  (holds_at(believe(Believe_Param94, bCanJump(BCanJump_Param95, BCanJump_Ret143)), Time22):-(not(holds_at(believe(Believe_Param94, bOn(Believe_Param94, BCanJump_Param96)), Time22));not(holds_at(believe(Believe_Param94, bCanJump(BCanJump_Param96, BCanJump_Param97)), Time22));not(holds_at(believe(Believe_Param94, bCanJump(BCanJump_Param97, BCanJump_Ret144)), Time22));not(holds_at(believe(Believe_Param94, bOn(BOn_Param98, BCanJump_Ret144)), Time22));not(equals(Equals_Param99, bSatiated(Believe_Param94)));not(equals(Equals_Param100, p1));not(equals(Time22, 0))), selectedPlan(Believe_Param94, Equals_Param99, Equals_Param100, Time22)),  (holds_at(believe(Believe_Param101, bOn(BOn_Param102, BOn_Ret145)), Time23):-(not(holds_at(believe(Believe_Param101, bOn(Believe_Param101, BCanJump_Param103)), Time23));not(holds_at(believe(Believe_Param101, bCanJump(BCanJump_Param103, BCanJump_Param104)), Time23));not(holds_at(believe(Believe_Param101, bCanJump(BCanJump_Param104, BCanJump_Ret146)), Time23));not(holds_at(believe(Believe_Param101, bOn(BOn_Param105, BCanJump_Ret146)), Time23));not(equals(Equals_Param106, bSatiated(Believe_Param101)));not(equals(Equals_Param107, p1));not(equals(Time23, 0))), selectedPlan(Believe_Param101, Equals_Param106, Equals_Param107, Time23)),  (equals(Equals_Param108, bSatiated(Believe_Param109)):-(not(holds_at(believe(Believe_Param109, bOn(Believe_Param109, BCanJump_Param110)), Time24));not(holds_at(believe(Believe_Param109, bCanJump(BCanJump_Param110, BCanJump_Param111)), Time24));not(holds_at(believe(Believe_Param109, bCanJump(BCanJump_Param111, BCanJump_Ret147)), Time24));not(holds_at(believe(Believe_Param109, bOn(BOn_Param112, BCanJump_Ret147)), Time24));not(equals(Equals_Param108, bSatiated(Believe_Param109)));not(equals(Equals_Param113, p1));not(equals(Time24, 0))), selectedPlan(Believe_Param109, Equals_Param108, Equals_Param113, Time24)),  (equals(Equals_Param114, p2):-(not(holds_at(believe(Believe_Param115, bOn(Believe_Param115, BCanJump_Param116)), Time25));not(holds_at(believe(Believe_Param115, bCanJump(BCanJump_Param116, BCanJump_Param117)), Time25));not(holds_at(believe(Believe_Param115, bCanJump(BCanJump_Param117, BCanJump_Ret148)), Time25));not(holds_at(believe(Believe_Param115, bOn(BOn_Param118, BCanJump_Ret148)), Time25));not(equals(Equals_Param119, bSatiated(Believe_Param115)));not(equals(Equals_Param114, p1));not(equals(Time25, 0))), selectedPlan(Believe_Param115, Equals_Param119, Equals_Param114, Time25)),  (equals(Time26, 4):-(not(holds_at(believe(Believe_Param120, bOn(Believe_Param120, BCanJump_Param121)), Time26));not(holds_at(believe(Believe_Param120, bCanJump(BCanJump_Param121, BCanJump_Param122)), Time26));not(holds_at(believe(Believe_Param120, bCanJump(BCanJump_Param122, BCanJump_Ret149)), Time26));not(holds_at(believe(Believe_Param120, bOn(BOn_Param123, BCanJump_Ret149)), Time26));not(equals(Equals_Param124, bSatiated(Believe_Param120)));not(equals(Equals_Param125, p1));not(equals(Time26, 0))), selectedPlan(Believe_Param120, Equals_Param124, Equals_Param125, Time26))], 15==15).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6196
%; SoundPlan
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6199
% SoundPlan(agent,belief,plan,time) <->
% (plan=P1 ->
%  HoldsAt(Believe(agent,BCanJump(Floor,Chair)),time) &
%  HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)) &
% ((plan=P1a | plan=P1b) ->
%   HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)).

 /*  soundPlan(Agent, Belief, Plan, Time) <->
       if(Plan=p1,
           (holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time))),
       if((Plan=p1a;Plan=p1b),
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6204
axiom(soundPlan(Agent, Belief, Plan, Time),
   
    [ holds_at(believe(Agent, bCanJump(floor, chair)), Time),
      holds_at(believe(Agent, bCanJump(chair, table)), Time),
      holds_at(believe(Agent, bCanJump(chair, table)), Time)
    ]).
axiom(soundPlan(Agent, Belief, Plan, Time),
   
    [ holds_at(believe(Agent, bCanJump(floor, chair)), Time),
      holds_at(believe(Agent, bCanJump(chair, table)), Time),
      not(equals(Plan, p1a)),
      not(equals(Plan, p1b))
    ]).
axiom(soundPlan(Agent, Belief, Plan, Time),
   
    [ holds_at(believe(Agent, bCanJump(chair, table)), Time),
      not(equals(Plan, p1))
    ]).
axiom(soundPlan(Agent, Belief, Plan, Time),
   
    [ not(equals(Plan, p1a)),
      not(equals(Plan, p1b)),
      not(equals(Plan, p1))
    ]).

 /*   if(soundPlan(Agent, Belief, Plan, Time),
          (if(Plan=p1,  (holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time))), if((Plan=p1a;Plan=p1b), holds_at(believe(Agent, bCanJump(chair, table)), Time)))).
 */

 /*  not(soundPlan(SoundPlan_Param, _, Equals_Param, Time4)) :-
       (   equals(Equals_Param, p1),
           (   not(holds_at(believe(SoundPlan_Param, bCanJump(floor, chair)),
                            Time4))
           ;   not(holds_at(believe(SoundPlan_Param, bCanJump(chair, table)),
                            Time4))
           )
       ;   not(holds_at(believe(SoundPlan_Param, bCanJump(chair, table)),
                        Time4)),
           (   equals(Equals_Param, p1a)
           ;   equals(Equals_Param, p1b)
           )
       ).
 */
axiom(not(soundPlan(SoundPlan_Param, _, Equals_Param, Time4)),
   
    [ not(holds_at(believe(SoundPlan_Param, bCanJump(floor, chair)),
                   Time4)),
      equals(Equals_Param, p1)
    ]).
axiom(not(soundPlan(SoundPlan_Param, _, Equals_Param, Time4)),
   
    [ not(holds_at(believe(SoundPlan_Param, bCanJump(chair, table)),
                   Time4)),
      equals(Equals_Param, p1)
    ]).
axiom(not(soundPlan(SoundPlan_Param, _, Equals_Param, Time4)),
   
    [ equals(Equals_Param, p1a),
      not(holds_at(believe(SoundPlan_Param, bCanJump(chair, table)),
                   Time4))
    ]).
axiom(not(soundPlan(SoundPlan_Param, _, Equals_Param, Time4)),
   
    [ equals(Equals_Param, p1b),
      not(holds_at(believe(SoundPlan_Param, bCanJump(chair, table)),
                   Time4))
    ]).

 /*  not(equals(Equals_Param8, p1)) :-
       (   not(holds_at(believe(Believe_Param, bCanJump(floor, chair)),
                        Time7))
       ;   not(holds_at(believe(Believe_Param, bCanJump(chair, table)),
                        Time7))
       ),
       soundPlan(Believe_Param, _, Equals_Param8, Time7).
 */
axiom(not(equals(Equals_Param8, p1)),
   
    [ not(holds_at(believe(Believe_Param, bCanJump(floor, chair)),
                   Time7)),
      soundPlan(Believe_Param, _, Equals_Param8, Time7)
    ]).
axiom(not(equals(Equals_Param8, p1)),
   
    [ not(holds_at(believe(Believe_Param, bCanJump(chair, table)),
                   Time7)),
      soundPlan(Believe_Param, _, Equals_Param8, Time7)
    ]).

 /*  holds_at(believe(Believe_Param11, bCanJump(floor, chair)), Time10) :-
       equals(Equals_Param12, p1),
       soundPlan(Believe_Param11, _, Equals_Param12, Time10).
 */
axiom(holds_at(believe(Believe_Param11, bCanJump(floor, chair)), Time10),
   
    [ equals(Equals_Param12, p1),
      soundPlan(Believe_Param11,
                _,
                Equals_Param12,
                Time10)
    ]).

 /*  holds_at(believe(Believe_Param14, bCanJump(chair, table)), Time13) :-
       equals(Equals_Param15, p1),
       soundPlan(Believe_Param14, _, Equals_Param15, Time13).
 */
axiom(holds_at(believe(Believe_Param14, bCanJump(chair, table)), Time13),
   
    [ equals(Equals_Param15, p1),
      soundPlan(Believe_Param14,
                _,
                Equals_Param15,
                Time13)
    ]).

 /*  holds_at(believe(Believe_Param17, bCanJump(chair, table)), Time16) :-
       (   equals(Equals_Param18, p1a)
       ;   equals(Equals_Param18, p1b)
       ),
       soundPlan(Believe_Param17, _, Equals_Param18, Time16).
 */
axiom(holds_at(believe(Believe_Param17, bCanJump(chair, table)), Time16),
   
    [ equals(Equals_Param18, p1a),
      soundPlan(Believe_Param17,
                _,
                Equals_Param18,
                Time16)
    ]).
axiom(holds_at(believe(Believe_Param17, bCanJump(chair, table)), Time16),
   
    [ equals(Equals_Param18, p1b),
      soundPlan(Believe_Param17,
                _,
                Equals_Param18,
                Time16)
    ]).

 /*  not(equals(Equals_Param20, p1a)) :-
       not(holds_at(believe(Believe_Param21, bCanJump(chair, table)),
                    Time19)),
       soundPlan(Believe_Param21, _, Equals_Param20, Time19).
 */
axiom(not(equals(Equals_Param20, p1a)),
   
    [ not(holds_at(believe(Believe_Param21, bCanJump(chair, table)),
                   Time19)),
      soundPlan(Believe_Param21,
                _,
                Equals_Param20,
                Time19)
    ]).

 /*  not(equals(Equals_Param23, p1b)) :-
       not(holds_at(believe(Believe_Param24, bCanJump(chair, table)),
                    Time22)),
       soundPlan(Believe_Param24, _, Equals_Param23, Time22).
 */
axiom(not(equals(Equals_Param23, p1b)),
   
    [ not(holds_at(believe(Believe_Param24, bCanJump(chair, table)),
                   Time22)),
      soundPlan(Believe_Param24,
                _,
                Equals_Param23,
                Time22)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6206
%; Gamma
% [agent,belief]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6209
% HoldsAt(Goal(agent,belief),0) <->
% (agent=Cat & belief=BSatiated(Cat)).

 /*  holds_at(goal(Agent, Belief), 0) <->
       Agent=cat,
       Belief=bSatiated(cat).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6210
axiom(holds_at(goal(Agent, Belief), t),
    [equals(Agent, cat), equals(Belief, bSatiated(cat))]).

 /*   if(holds_at(goal(Agent, Belief), 0),
          (Agent=cat, Belief=bSatiated(cat))).
 */

 /*  not(holds_at(goal(Goal_Param, Equals_Param), 0)) :-
       (   not(equals(Goal_Param, cat))
       ;   not(equals(Equals_Param, bSatiated(cat)))
       ).
 */
axiom(not(holds_at(goal(Goal_Param, Equals_Param), t)),
    [not(equals(Goal_Param, cat))]).
axiom(not(holds_at(goal(Goal_Param, Equals_Param), t)),
    [not(equals(Equals_Param, bSatiated(cat)))]).

 /*  equals(Equals_Param4, cat) :-
       holds_at(goal(Equals_Param4, Goal_Ret), 0).
 */
axiom(equals(Equals_Param4, cat),
    [holds_at(goal(Equals_Param4, Goal_Ret), t)]).

 /*  equals(Equals_Param6, bSatiated(cat)) :-
       holds_at(goal(Goal_Param7, Equals_Param6), 0).
 */
axiom(equals(Equals_Param6, bSatiated(cat)),
    [holds_at(goal(Goal_Param7, Equals_Param6), t)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6212
% [agent,belief,plan]
 % !HoldsAt(Plan(agent,belief,plan),0).
 %  not(initially(plan(Agent,Belief,Plan))).
axiom(not(initially(plan(Plan_Param, _, Plan_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6214
% [object,surface]
 % HoldsAt(On(object,surface),0) <->
% (object=Cat & surface=Floor) |
% (object=Food1 & surface=Table) |
% (object=Food2 & surface=Shelf).

 /*  holds_at(on(Object, Surface), 0) <->
       (   Object=cat,
           Surface=floor
       ;   Object=food1,
           Surface=(table)
       ;   Object=food2,
           Surface=shelf
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6217
axiom(holds_at(on(Object, Surface), t),
    [equals(Object, cat), equals(Surface, floor)]).
axiom(holds_at(on(Object, Surface), t),
    [equals(Object, food1), equals(Surface, table)]).
axiom(holds_at(on(Object, Surface), t),
    [equals(Object, food2), equals(Surface, shelf)]).

 /*   if(holds_at(on(Object, Surface), 0),
          (Object=cat, Surface=floor;Object=food1, Surface=(table);Object=food2, Surface=shelf)).
 */

 /*  not(holds_at(on(On_Param, Equals_Param), 0)) :-
       (   not(equals(On_Param, cat))
       ;   not(equals(Equals_Param, floor))
       ),
       (   not(equals(On_Param, food1))
       ;   not(equals(Equals_Param, table))
       ),
       (   not(equals(On_Param, food2))
       ;   not(equals(Equals_Param, shelf))
       ).
 */
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(On_Param, food2)),
      not(equals(On_Param, food1)),
      not(equals(On_Param, cat))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, shelf)),
      not(equals(On_Param, food1)),
      not(equals(On_Param, cat))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(On_Param, food2)),
      not(equals(Equals_Param, table)),
      not(equals(On_Param, cat))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(On_Param, cat))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(On_Param, food2)),
      not(equals(On_Param, food1)),
      not(equals(Equals_Param, floor))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, shelf)),
      not(equals(On_Param, food1)),
      not(equals(Equals_Param, floor))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(On_Param, food2)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, floor))
    ]).
axiom(not(holds_at(on(On_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, floor))
    ]).

 /*  equals(Equals_Param4, cat) :-
       ( (   not(equals(Equals_Param4, food1))
         ;   not(equals(Equals_Param5, table))
         ),
         (   not(equals(Equals_Param4, food2))
         ;   not(equals(Equals_Param5, shelf))
         )
       ),
       holds_at(on(Equals_Param4, Equals_Param5), 0).
 */
axiom(equals(Equals_Param4, cat),
   
    [ not(equals(Equals_Param4, food2)),
      not(equals(Equals_Param4, food1)),
      holds_at(on(Equals_Param4, Equals_Param5), t)
    ]).
axiom(equals(Equals_Param4, cat),
   
    [ not(equals(Equals_Param5, shelf)),
      not(equals(Equals_Param4, food1)),
      holds_at(on(Equals_Param4, Equals_Param5), t)
    ]).
axiom(equals(Equals_Param4, cat),
   
    [ not(equals(Equals_Param4, food2)),
      not(equals(Equals_Param5, table)),
      holds_at(on(Equals_Param4, Equals_Param5), t)
    ]).
axiom(equals(Equals_Param4, cat),
   
    [ not(equals(Equals_Param5, shelf)),
      not(equals(Equals_Param5, table)),
      holds_at(on(Equals_Param4, Equals_Param5), t)
    ]).

 /*  equals(Equals_Param6, floor) :-
       ( (   not(equals(Equals_Param7, food1))
         ;   not(equals(Equals_Param6, table))
         ),
         (   not(equals(Equals_Param7, food2))
         ;   not(equals(Equals_Param6, shelf))
         )
       ),
       holds_at(on(Equals_Param7, Equals_Param6), 0).
 */
axiom(equals(Equals_Param6, floor),
   
    [ not(equals(Equals_Param7, food2)),
      not(equals(Equals_Param7, food1)),
      holds_at(on(Equals_Param7, Equals_Param6), t)
    ]).
axiom(equals(Equals_Param6, floor),
   
    [ not(equals(Equals_Param6, shelf)),
      not(equals(Equals_Param7, food1)),
      holds_at(on(Equals_Param7, Equals_Param6), t)
    ]).
axiom(equals(Equals_Param6, floor),
   
    [ not(equals(Equals_Param7, food2)),
      not(equals(Equals_Param6, table)),
      holds_at(on(Equals_Param7, Equals_Param6), t)
    ]).
axiom(equals(Equals_Param6, floor),
   
    [ not(equals(Equals_Param6, shelf)),
      not(equals(Equals_Param6, table)),
      holds_at(on(Equals_Param7, Equals_Param6), t)
    ]).

 /*  equals(Equals_Param8, food1) :-
       (   not(equals(Equals_Param8, food2))
       ;   not(equals(Equals_Param9, shelf))
       ),
       (   not(equals(Equals_Param8, cat))
       ;   not(equals(Equals_Param9, floor))
       ),
       holds_at(on(Equals_Param8, Equals_Param9), 0).
 */
axiom(equals(Equals_Param8, food1),
   
    [ not(equals(Equals_Param8, cat)),
      not(equals(Equals_Param8, food2)),
      holds_at(on(Equals_Param8, Equals_Param9), t)
    ]).
axiom(equals(Equals_Param8, food1),
   
    [ not(equals(Equals_Param9, floor)),
      not(equals(Equals_Param8, food2)),
      holds_at(on(Equals_Param8, Equals_Param9), t)
    ]).
axiom(equals(Equals_Param8, food1),
   
    [ not(equals(Equals_Param8, cat)),
      not(equals(Equals_Param9, shelf)),
      holds_at(on(Equals_Param8, Equals_Param9), t)
    ]).
axiom(equals(Equals_Param8, food1),
   
    [ not(equals(Equals_Param9, floor)),
      not(equals(Equals_Param9, shelf)),
      holds_at(on(Equals_Param8, Equals_Param9), t)
    ]).

 /*  equals(Equals_Param10, table) :-
       (   not(equals(Equals_Param11, food2))
       ;   not(equals(Equals_Param10, shelf))
       ),
       (   not(equals(Equals_Param11, cat))
       ;   not(equals(Equals_Param10, floor))
       ),
       holds_at(on(Equals_Param11, Equals_Param10), 0).
 */
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param11, cat)),
      not(equals(Equals_Param11, food2)),
      holds_at(on(Equals_Param11, Equals_Param10), t)
    ]).
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param10, floor)),
      not(equals(Equals_Param11, food2)),
      holds_at(on(Equals_Param11, Equals_Param10), t)
    ]).
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param11, cat)),
      not(equals(Equals_Param10, shelf)),
      holds_at(on(Equals_Param11, Equals_Param10), t)
    ]).
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param10, floor)),
      not(equals(Equals_Param10, shelf)),
      holds_at(on(Equals_Param11, Equals_Param10), t)
    ]).

 /*  equals(Equals_Param12, food2) :-
       (   not(equals(Equals_Param12, food1))
       ;   not(equals(Equals_Param13, table))
       ),
       (   not(equals(Equals_Param12, cat))
       ;   not(equals(Equals_Param13, floor))
       ),
       holds_at(on(Equals_Param12, Equals_Param13), 0).
 */
axiom(equals(Equals_Param12, food2),
   
    [ not(equals(Equals_Param12, cat)),
      not(equals(Equals_Param12, food1)),
      holds_at(on(Equals_Param12, Equals_Param13), t)
    ]).
axiom(equals(Equals_Param12, food2),
   
    [ not(equals(Equals_Param13, floor)),
      not(equals(Equals_Param12, food1)),
      holds_at(on(Equals_Param12, Equals_Param13), t)
    ]).
axiom(equals(Equals_Param12, food2),
   
    [ not(equals(Equals_Param12, cat)),
      not(equals(Equals_Param13, table)),
      holds_at(on(Equals_Param12, Equals_Param13), t)
    ]).
axiom(equals(Equals_Param12, food2),
   
    [ not(equals(Equals_Param13, floor)),
      not(equals(Equals_Param13, table)),
      holds_at(on(Equals_Param12, Equals_Param13), t)
    ]).

 /*  equals(Equals_Param14, shelf) :-
       (   not(equals(Equals_Param15, food1))
       ;   not(equals(Equals_Param14, table))
       ),
       (   not(equals(Equals_Param15, cat))
       ;   not(equals(Equals_Param14, floor))
       ),
       holds_at(on(Equals_Param15, Equals_Param14), 0).
 */
axiom(equals(Equals_Param14, shelf),
   
    [ not(equals(Equals_Param15, cat)),
      not(equals(Equals_Param15, food1)),
      holds_at(on(Equals_Param15, Equals_Param14), t)
    ]).
axiom(equals(Equals_Param14, shelf),
   
    [ not(equals(Equals_Param14, floor)),
      not(equals(Equals_Param15, food1)),
      holds_at(on(Equals_Param15, Equals_Param14), t)
    ]).
axiom(equals(Equals_Param14, shelf),
   
    [ not(equals(Equals_Param15, cat)),
      not(equals(Equals_Param14, table)),
      holds_at(on(Equals_Param15, Equals_Param14), t)
    ]).
axiom(equals(Equals_Param14, shelf),
   
    [ not(equals(Equals_Param14, floor)),
      not(equals(Equals_Param14, table)),
      holds_at(on(Equals_Param15, Equals_Param14), t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6219
% [surface1,surface2]
 % HoldsAt(CanJump(surface1,surface2),0) <->
% (surface1=Floor & surface2=Chair) |
% (surface1=Chair & surface2=Table) |
% (surface1=Shelf & surface2=Table).

 /*  holds_at(canJump(Surface1, Surface2), 0) <->
       (   Surface1=floor,
           Surface2=chair
       ;   Surface1=chair,
           Surface2=(table)
       ;   Surface1=shelf,
           Surface2=(table)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6222
axiom(holds_at(canJump(Surface1, Surface2), t),
    [equals(Surface1, floor), equals(Surface2, chair)]).
axiom(holds_at(canJump(Surface1, Surface2), t),
    [equals(Surface1, chair), equals(Surface2, table)]).
axiom(holds_at(canJump(Surface1, Surface2), t),
    [equals(Surface1, shelf), equals(Surface2, table)]).

 /*   if(holds_at(canJump(Surface1, Surface2), 0),
          (Surface1=floor, Surface2=chair;Surface1=chair, Surface2=(table);Surface1=shelf, Surface2=(table))).
 */

 /*  not(holds_at(canJump(CanJump_Param, Equals_Param), 0)) :-
       (   not(equals(CanJump_Param, floor))
       ;   not(equals(Equals_Param, chair))
       ),
       (   not(equals(CanJump_Param, chair))
       ;   not(equals(Equals_Param, table))
       ),
       (   not(equals(CanJump_Param, shelf))
       ;   not(equals(Equals_Param, table))
       ).
 */
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(CanJump_Param, shelf)),
      not(equals(CanJump_Param, chair)),
      not(equals(CanJump_Param, floor))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(CanJump_Param, chair)),
      not(equals(CanJump_Param, floor))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(CanJump_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(CanJump_Param, floor))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Equals_Param, table)),
      not(equals(CanJump_Param, floor))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(CanJump_Param, shelf)),
      not(equals(CanJump_Param, chair)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(CanJump_Param, chair)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(CanJump_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(canJump(CanJump_Param, Equals_Param), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, chair))
    ]).

 /*  equals(Equals_Param4, floor) :-
       ( (   not(equals(Equals_Param4, chair))
         ;   not(equals(Equals_Param5, table))
         ),
         (   not(equals(Equals_Param4, shelf))
         ;   not(equals(Equals_Param5, table))
         )
       ),
       holds_at(canJump(Equals_Param4, Equals_Param5), 0).
 */
axiom(equals(Equals_Param4, floor),
   
    [ not(equals(Equals_Param4, shelf)),
      not(equals(Equals_Param4, chair)),
      holds_at(canJump(Equals_Param4, Equals_Param5), t)
    ]).
axiom(equals(Equals_Param4, floor),
   
    [ not(equals(Equals_Param5, table)),
      not(equals(Equals_Param4, chair)),
      holds_at(canJump(Equals_Param4, Equals_Param5), t)
    ]).
axiom(equals(Equals_Param4, floor),
   
    [ not(equals(Equals_Param4, shelf)),
      not(equals(Equals_Param5, table)),
      holds_at(canJump(Equals_Param4, Equals_Param5), t)
    ]).
axiom(equals(Equals_Param4, floor),
   
    [ not(equals(Equals_Param5, table)),
      not(equals(Equals_Param5, table)),
      holds_at(canJump(Equals_Param4, Equals_Param5), t)
    ]).

 /*  equals(Equals_Param6, chair) :-
       ( (   not(equals(Equals_Param7, chair))
         ;   not(equals(Equals_Param6, table))
         ),
         (   not(equals(Equals_Param7, shelf))
         ;   not(equals(Equals_Param6, table))
         )
       ),
       holds_at(canJump(Equals_Param7, Equals_Param6), 0).
 */
axiom(equals(Equals_Param6, chair),
   
    [ not(equals(Equals_Param7, shelf)),
      not(equals(Equals_Param7, chair)),
      holds_at(canJump(Equals_Param7, Equals_Param6), t)
    ]).
axiom(equals(Equals_Param6, chair),
   
    [ not(equals(Equals_Param6, table)),
      not(equals(Equals_Param7, chair)),
      holds_at(canJump(Equals_Param7, Equals_Param6), t)
    ]).
axiom(equals(Equals_Param6, chair),
   
    [ not(equals(Equals_Param7, shelf)),
      not(equals(Equals_Param6, table)),
      holds_at(canJump(Equals_Param7, Equals_Param6), t)
    ]).
axiom(equals(Equals_Param6, chair),
   
    [ not(equals(Equals_Param6, table)),
      not(equals(Equals_Param6, table)),
      holds_at(canJump(Equals_Param7, Equals_Param6), t)
    ]).

 /*  equals(Equals_Param8, chair) :-
       (   not(equals(Equals_Param8, shelf))
       ;   not(equals(Equals_Param9, table))
       ),
       (   not(equals(Equals_Param8, floor))
       ;   not(equals(Equals_Param9, chair))
       ),
       holds_at(canJump(Equals_Param8, Equals_Param9), 0).
 */
axiom(equals(Equals_Param8, chair),
   
    [ not(equals(Equals_Param8, floor)),
      not(equals(Equals_Param8, shelf)),
      holds_at(canJump(Equals_Param8, Equals_Param9), t)
    ]).
axiom(equals(Equals_Param8, chair),
   
    [ not(equals(Equals_Param9, chair)),
      not(equals(Equals_Param8, shelf)),
      holds_at(canJump(Equals_Param8, Equals_Param9), t)
    ]).
axiom(equals(Equals_Param8, chair),
   
    [ not(equals(Equals_Param8, floor)),
      not(equals(Equals_Param9, table)),
      holds_at(canJump(Equals_Param8, Equals_Param9), t)
    ]).
axiom(equals(Equals_Param8, chair),
   
    [ not(equals(Equals_Param9, chair)),
      not(equals(Equals_Param9, table)),
      holds_at(canJump(Equals_Param8, Equals_Param9), t)
    ]).

 /*  equals(Equals_Param10, table) :-
       (   not(equals(Equals_Param11, shelf))
       ;   not(equals(Equals_Param10, table))
       ),
       (   not(equals(Equals_Param11, floor))
       ;   not(equals(Equals_Param10, chair))
       ),
       holds_at(canJump(Equals_Param11, Equals_Param10), 0).
 */
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param11, floor)),
      not(equals(Equals_Param11, shelf)),
      holds_at(canJump(Equals_Param11, Equals_Param10), t)
    ]).
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param10, chair)),
      not(equals(Equals_Param11, shelf)),
      holds_at(canJump(Equals_Param11, Equals_Param10), t)
    ]).
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param11, floor)),
      not(equals(Equals_Param10, table)),
      holds_at(canJump(Equals_Param11, Equals_Param10), t)
    ]).
axiom(equals(Equals_Param10, table),
   
    [ not(equals(Equals_Param10, chair)),
      not(equals(Equals_Param10, table)),
      holds_at(canJump(Equals_Param11, Equals_Param10), t)
    ]).

 /*  equals(Equals_Param12, shelf) :-
       (   not(equals(Equals_Param12, chair))
       ;   not(equals(Equals_Param13, table))
       ),
       (   not(equals(Equals_Param12, floor))
       ;   not(equals(Equals_Param13, chair))
       ),
       holds_at(canJump(Equals_Param12, Equals_Param13), 0).
 */
axiom(equals(Equals_Param12, shelf),
   
    [ not(equals(Equals_Param12, floor)),
      not(equals(Equals_Param12, chair)),
      holds_at(canJump(Equals_Param12, Equals_Param13), t)
    ]).
axiom(equals(Equals_Param12, shelf),
   
    [ not(equals(Equals_Param13, chair)),
      not(equals(Equals_Param12, chair)),
      holds_at(canJump(Equals_Param12, Equals_Param13), t)
    ]).
axiom(equals(Equals_Param12, shelf),
   
    [ not(equals(Equals_Param12, floor)),
      not(equals(Equals_Param13, table)),
      holds_at(canJump(Equals_Param12, Equals_Param13), t)
    ]).
axiom(equals(Equals_Param12, shelf),
   
    [ not(equals(Equals_Param13, chair)),
      not(equals(Equals_Param13, table)),
      holds_at(canJump(Equals_Param12, Equals_Param13), t)
    ]).

 /*  equals(Equals_Param14, table) :-
       (   not(equals(Equals_Param15, chair))
       ;   not(equals(Equals_Param14, table))
       ),
       (   not(equals(Equals_Param15, floor))
       ;   not(equals(Equals_Param14, chair))
       ),
       holds_at(canJump(Equals_Param15, Equals_Param14), 0).
 */
axiom(equals(Equals_Param14, table),
   
    [ not(equals(Equals_Param15, floor)),
      not(equals(Equals_Param15, chair)),
      holds_at(canJump(Equals_Param15, Equals_Param14), t)
    ]).
axiom(equals(Equals_Param14, table),
   
    [ not(equals(Equals_Param14, chair)),
      not(equals(Equals_Param15, chair)),
      holds_at(canJump(Equals_Param15, Equals_Param14), t)
    ]).
axiom(equals(Equals_Param14, table),
   
    [ not(equals(Equals_Param15, floor)),
      not(equals(Equals_Param14, table)),
      holds_at(canJump(Equals_Param15, Equals_Param14), t)
    ]).
axiom(equals(Equals_Param14, table),
   
    [ not(equals(Equals_Param14, chair)),
      not(equals(Equals_Param14, table)),
      holds_at(canJump(Equals_Param15, Equals_Param14), t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6224
% [agent,object,surface]
% HoldsAt(Believe(agent,BOn(object,surface)),0) <->
% (agent=Cat & object=Cat & surface=Floor) |
% (agent=Cat & object=Food1 & surface=Table).

 /*  holds_at(believe(Agent, bOn(Object, Surface)), 0) <->
       (   Agent=cat,
           Object=cat,
           Surface=floor
       ;   Agent=cat,
           Object=food1,
           Surface=(table)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6227
axiom(holds_at(believe(Agent, bOn(Object, Surface)), t),
   
    [ equals(Agent, cat),
      equals(Object, cat),
      equals(Surface, floor)
    ]).
axiom(holds_at(believe(Agent, bOn(Object, Surface)), t),
   
    [ equals(Agent, cat),
      equals(Object, food1),
      equals(Surface, table)
    ]).

 /*   if(holds_at(believe(Agent, bOn(Object, Surface)), 0),
          (Agent=cat, Object=cat, Surface=floor;Agent=cat, Object=food1, Surface=(table))).
 */

 /*  not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), 0)) :-
       (   not(equals(Believe_Param, cat))
       ;   not(equals(BOn_Param, cat))
       ;   not(equals(Equals_Param, floor))
       ),
       (   not(equals(Believe_Param, cat))
       ;   not(equals(BOn_Param, food1))
       ;   not(equals(Equals_Param, table))
       ).
 */
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
    [not(equals(BOn_Param, food1)), not(equals(Believe_Param, cat))]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
    [not(equals(Believe_Param, cat)), not(equals(BOn_Param, cat))]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
    [not(equals(BOn_Param, food1)), not(equals(BOn_Param, cat))]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
    [not(equals(Equals_Param, table)), not(equals(BOn_Param, cat))]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
    [not(equals(BOn_Param, food1)), not(equals(Equals_Param, floor))]).
axiom(not(holds_at(believe(Believe_Param, bOn(BOn_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Equals_Param, floor))
    ]).

 /*  equals(Equals_Param6, cat) :-
       (   not(equals(Equals_Param6, cat))
       ;   not(equals(Equals_Param7, food1))
       ;   not(equals(Equals_Param8, table))
       ),
       holds_at(believe(Equals_Param6,
                        bOn(Equals_Param7, Equals_Param8)),
                0).
 */
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param6, cat)),
      holds_at(believe(Equals_Param6,
                       bOn(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param7, food1)),
      holds_at(believe(Equals_Param6,
                       bOn(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param8, table)),
      holds_at(believe(Equals_Param6,
                       bOn(Equals_Param7, Equals_Param8)),
               t)
    ]).

 /*  equals(Equals_Param9, cat) :-
       (   not(equals(Equals_Param10, cat))
       ;   not(equals(Equals_Param9, food1))
       ;   not(equals(Equals_Param11, table))
       ),
       holds_at(believe(Equals_Param10,
                        bOn(Equals_Param9, Equals_Param11)),
                0).
 */
axiom(equals(Equals_Param9, cat),
   
    [ not(equals(Equals_Param10, cat)),
      holds_at(believe(Equals_Param10,
                       bOn(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, cat),
   
    [ not(equals(Equals_Param9, food1)),
      holds_at(believe(Equals_Param10,
                       bOn(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, cat),
   
    [ not(equals(Equals_Param11, table)),
      holds_at(believe(Equals_Param10,
                       bOn(Equals_Param9, Equals_Param11)),
               t)
    ]).

 /*  equals(Equals_Param12, floor) :-
       (   not(equals(Equals_Param13, cat))
       ;   not(equals(Equals_Param14, food1))
       ;   not(equals(Equals_Param12, table))
       ),
       holds_at(believe(Equals_Param13,
                        bOn(Equals_Param14, Equals_Param12)),
                0).
 */
axiom(equals(Equals_Param12, floor),
   
    [ not(equals(Equals_Param13, cat)),
      holds_at(believe(Equals_Param13,
                       bOn(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, floor),
   
    [ not(equals(Equals_Param14, food1)),
      holds_at(believe(Equals_Param13,
                       bOn(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, floor),
   
    [ not(equals(Equals_Param12, table)),
      holds_at(believe(Equals_Param13,
                       bOn(Equals_Param14, Equals_Param12)),
               t)
    ]).

 /*  equals(Equals_Param15, cat) :-
       (   not(equals(Equals_Param15, cat))
       ;   not(equals(Equals_Param16, cat))
       ;   not(equals(Equals_Param17, floor))
       ),
       holds_at(believe(Equals_Param15,
                        bOn(Equals_Param16, Equals_Param17)),
                0).
 */
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param15, cat)),
      holds_at(believe(Equals_Param15,
                       bOn(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param16, cat)),
      holds_at(believe(Equals_Param15,
                       bOn(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param17, floor)),
      holds_at(believe(Equals_Param15,
                       bOn(Equals_Param16, Equals_Param17)),
               t)
    ]).

 /*  equals(Equals_Param18, food1) :-
       (   not(equals(Equals_Param19, cat))
       ;   not(equals(Equals_Param18, cat))
       ;   not(equals(Equals_Param20, floor))
       ),
       holds_at(believe(Equals_Param19,
                        bOn(Equals_Param18, Equals_Param20)),
                0).
 */
axiom(equals(Equals_Param18, food1),
   
    [ not(equals(Equals_Param19, cat)),
      holds_at(believe(Equals_Param19,
                       bOn(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, food1),
   
    [ not(equals(Equals_Param18, cat)),
      holds_at(believe(Equals_Param19,
                       bOn(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, food1),
   
    [ not(equals(Equals_Param20, floor)),
      holds_at(believe(Equals_Param19,
                       bOn(Equals_Param18, Equals_Param20)),
               t)
    ]).

 /*  equals(Equals_Param21, table) :-
       (   not(equals(Equals_Param22, cat))
       ;   not(equals(Equals_Param23, cat))
       ;   not(equals(Equals_Param21, floor))
       ),
       holds_at(believe(Equals_Param22,
                        bOn(Equals_Param23, Equals_Param21)),
                0).
 */
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param22, cat)),
      holds_at(believe(Equals_Param22,
                       bOn(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param23, cat)),
      holds_at(believe(Equals_Param22,
                       bOn(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param21, floor)),
      holds_at(believe(Equals_Param22,
                       bOn(Equals_Param23, Equals_Param21)),
               t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6229
% [agent,surface1,surface2]
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),0) <->
% (agent=Cat & surface1=Floor & surface2=Chair) |
% (agent=Cat & surface1=Chair & surface2=Table) |
% (agent=Cat & surface1=Shelf & surface2=Table).

 /*  holds_at(believe(Agent, bCanJump(Surface1, Surface2)), 0) <->
       (   Agent=cat,
           Surface1=floor,
           Surface2=chair
       ;   Agent=cat,
           Surface1=chair,
           Surface2=(table)
       ;   Agent=cat,
           Surface1=shelf,
           Surface2=(table)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6233
axiom(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), t),
   
    [ equals(Agent, cat),
      equals(Surface1, floor),
      equals(Surface2, chair)
    ]).
axiom(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), t),
   
    [ equals(Agent, cat),
      equals(Surface1, chair),
      equals(Surface2, table)
    ]).
axiom(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), t),
   
    [ equals(Agent, cat),
      equals(Surface1, shelf),
      equals(Surface2, table)
    ]).

 /*   if(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), 0),
          (Agent=cat, Surface1=floor, Surface2=chair;Agent=cat, Surface1=chair, Surface2=(table);Agent=cat, Surface1=shelf, Surface2=(table))).
 */

 /*  not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), 0)) :-
       (   not(equals(Believe_Param, cat))
       ;   not(equals(BCanJump_Param, floor))
       ;   not(equals(Equals_Param, chair))
       ),
       (   not(equals(Believe_Param, cat))
       ;   not(equals(BCanJump_Param, chair))
       ;   not(equals(Equals_Param, table))
       ),
       (   not(equals(Believe_Param, cat))
       ;   not(equals(BCanJump_Param, shelf))
       ;   not(equals(Equals_Param, table))
       ).
 */
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(BCanJump_Param, chair)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(BCanJump_Param, chair)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(BCanJump_Param, chair)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(Believe_Param, cat)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(BCanJump_Param, chair)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(BCanJump_Param, chair)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(BCanJump_Param, chair)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, table)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Equals_Param, table)),
      not(equals(BCanJump_Param, floor))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(BCanJump_Param, chair)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(BCanJump_Param, chair)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(BCanJump_Param, chair)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Believe_Param, cat)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(BCanJump_Param, shelf)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, chair))
    ]).
axiom(not(holds_at(believe(Believe_Param, bCanJump(BCanJump_Param, Equals_Param)), t)),
   
    [ not(equals(Equals_Param, table)),
      not(equals(Equals_Param, table)),
      not(equals(Equals_Param, chair))
    ]).

 /*  equals(Equals_Param6, cat) :-
       ( (   not(equals(Equals_Param6, cat))
         ;   not(equals(Equals_Param7, chair))
         ;   not(equals(Equals_Param8, table))
         ),
         (   not(equals(Equals_Param6, cat))
         ;   not(equals(Equals_Param7, shelf))
         ;   not(equals(Equals_Param8, table))
         )
       ),
       holds_at(believe(Equals_Param6,
                        bCanJump(Equals_Param7, Equals_Param8)),
                0).
 */
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param6, cat)),
      not(equals(Equals_Param6, cat)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param7, shelf)),
      not(equals(Equals_Param6, cat)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param8, table)),
      not(equals(Equals_Param6, cat)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param6, cat)),
      not(equals(Equals_Param7, chair)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param7, shelf)),
      not(equals(Equals_Param7, chair)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param8, table)),
      not(equals(Equals_Param7, chair)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param6, cat)),
      not(equals(Equals_Param8, table)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param7, shelf)),
      not(equals(Equals_Param8, table)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).
axiom(equals(Equals_Param6, cat),
   
    [ not(equals(Equals_Param8, table)),
      not(equals(Equals_Param8, table)),
      holds_at(believe(Equals_Param6,
                       bCanJump(Equals_Param7, Equals_Param8)),
               t)
    ]).

 /*  equals(Equals_Param9, floor) :-
       ( (   not(equals(Equals_Param10, cat))
         ;   not(equals(Equals_Param9, chair))
         ;   not(equals(Equals_Param11, table))
         ),
         (   not(equals(Equals_Param10, cat))
         ;   not(equals(Equals_Param9, shelf))
         ;   not(equals(Equals_Param11, table))
         )
       ),
       holds_at(believe(Equals_Param10,
                        bCanJump(Equals_Param9, Equals_Param11)),
                0).
 */
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param10, cat)),
      not(equals(Equals_Param10, cat)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param9, shelf)),
      not(equals(Equals_Param10, cat)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param11, table)),
      not(equals(Equals_Param10, cat)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param10, cat)),
      not(equals(Equals_Param9, chair)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param9, shelf)),
      not(equals(Equals_Param9, chair)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param11, table)),
      not(equals(Equals_Param9, chair)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param10, cat)),
      not(equals(Equals_Param11, table)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param9, shelf)),
      not(equals(Equals_Param11, table)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).
axiom(equals(Equals_Param9, floor),
   
    [ not(equals(Equals_Param11, table)),
      not(equals(Equals_Param11, table)),
      holds_at(believe(Equals_Param10,
                       bCanJump(Equals_Param9, Equals_Param11)),
               t)
    ]).

 /*  equals(Equals_Param12, chair) :-
       ( (   not(equals(Equals_Param13, cat))
         ;   not(equals(Equals_Param14, chair))
         ;   not(equals(Equals_Param12, table))
         ),
         (   not(equals(Equals_Param13, cat))
         ;   not(equals(Equals_Param14, shelf))
         ;   not(equals(Equals_Param12, table))
         )
       ),
       holds_at(believe(Equals_Param13,
                        bCanJump(Equals_Param14, Equals_Param12)),
                0).
 */
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param13, cat)),
      not(equals(Equals_Param13, cat)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param14, shelf)),
      not(equals(Equals_Param13, cat)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param12, table)),
      not(equals(Equals_Param13, cat)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param13, cat)),
      not(equals(Equals_Param14, chair)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param14, shelf)),
      not(equals(Equals_Param14, chair)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param12, table)),
      not(equals(Equals_Param14, chair)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param13, cat)),
      not(equals(Equals_Param12, table)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param14, shelf)),
      not(equals(Equals_Param12, table)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).
axiom(equals(Equals_Param12, chair),
   
    [ not(equals(Equals_Param12, table)),
      not(equals(Equals_Param12, table)),
      holds_at(believe(Equals_Param13,
                       bCanJump(Equals_Param14, Equals_Param12)),
               t)
    ]).

 /*  equals(Equals_Param15, cat) :-
       (   not(equals(Equals_Param15, cat))
       ;   not(equals(Equals_Param16, shelf))
       ;   not(equals(Equals_Param17, table))
       ),
       (   not(equals(Equals_Param15, cat))
       ;   not(equals(Equals_Param16, floor))
       ;   not(equals(Equals_Param17, chair))
       ),
       holds_at(believe(Equals_Param15,
                        bCanJump(Equals_Param16, Equals_Param17)),
                0).
 */
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param15, cat)),
      not(equals(Equals_Param15, cat)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param16, floor)),
      not(equals(Equals_Param15, cat)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param17, chair)),
      not(equals(Equals_Param15, cat)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param15, cat)),
      not(equals(Equals_Param16, shelf)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param16, floor)),
      not(equals(Equals_Param16, shelf)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param17, chair)),
      not(equals(Equals_Param16, shelf)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param15, cat)),
      not(equals(Equals_Param17, table)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param16, floor)),
      not(equals(Equals_Param17, table)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).
axiom(equals(Equals_Param15, cat),
   
    [ not(equals(Equals_Param17, chair)),
      not(equals(Equals_Param17, table)),
      holds_at(believe(Equals_Param15,
                       bCanJump(Equals_Param16, Equals_Param17)),
               t)
    ]).

 /*  equals(Equals_Param18, chair) :-
       (   not(equals(Equals_Param19, cat))
       ;   not(equals(Equals_Param18, shelf))
       ;   not(equals(Equals_Param20, table))
       ),
       (   not(equals(Equals_Param19, cat))
       ;   not(equals(Equals_Param18, floor))
       ;   not(equals(Equals_Param20, chair))
       ),
       holds_at(believe(Equals_Param19,
                        bCanJump(Equals_Param18, Equals_Param20)),
                0).
 */
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param19, cat)),
      not(equals(Equals_Param19, cat)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param18, floor)),
      not(equals(Equals_Param19, cat)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param20, chair)),
      not(equals(Equals_Param19, cat)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param19, cat)),
      not(equals(Equals_Param18, shelf)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param18, floor)),
      not(equals(Equals_Param18, shelf)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param20, chair)),
      not(equals(Equals_Param18, shelf)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param19, cat)),
      not(equals(Equals_Param20, table)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param18, floor)),
      not(equals(Equals_Param20, table)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).
axiom(equals(Equals_Param18, chair),
   
    [ not(equals(Equals_Param20, chair)),
      not(equals(Equals_Param20, table)),
      holds_at(believe(Equals_Param19,
                       bCanJump(Equals_Param18, Equals_Param20)),
               t)
    ]).

 /*  equals(Equals_Param21, table) :-
       (   not(equals(Equals_Param22, cat))
       ;   not(equals(Equals_Param23, shelf))
       ;   not(equals(Equals_Param21, table))
       ),
       (   not(equals(Equals_Param22, cat))
       ;   not(equals(Equals_Param23, floor))
       ;   not(equals(Equals_Param21, chair))
       ),
       holds_at(believe(Equals_Param22,
                        bCanJump(Equals_Param23, Equals_Param21)),
                0).
 */
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param22, cat)),
      not(equals(Equals_Param22, cat)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param23, floor)),
      not(equals(Equals_Param22, cat)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param21, chair)),
      not(equals(Equals_Param22, cat)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param22, cat)),
      not(equals(Equals_Param23, shelf)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param23, floor)),
      not(equals(Equals_Param23, shelf)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param21, chair)),
      not(equals(Equals_Param23, shelf)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param22, cat)),
      not(equals(Equals_Param21, table)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param23, floor)),
      not(equals(Equals_Param21, table)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).
axiom(equals(Equals_Param21, table),
   
    [ not(equals(Equals_Param21, chair)),
      not(equals(Equals_Param21, table)),
      holds_at(believe(Equals_Param22,
                       bCanJump(Equals_Param23, Equals_Param21)),
               t)
    ]).

 /*  equals(Equals_Param24, cat) :-
       (   not(equals(Equals_Param24, cat))
       ;   not(equals(Equals_Param25, chair))
       ;   not(equals(Equals_Param26, table))
       ),
       (   not(equals(Equals_Param24, cat))
       ;   not(equals(Equals_Param25, floor))
       ;   not(equals(Equals_Param26, chair))
       ),
       holds_at(believe(Equals_Param24,
                        bCanJump(Equals_Param25, Equals_Param26)),
                0).
 */
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param24, cat)),
      not(equals(Equals_Param24, cat)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param25, floor)),
      not(equals(Equals_Param24, cat)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param26, chair)),
      not(equals(Equals_Param24, cat)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param24, cat)),
      not(equals(Equals_Param25, chair)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param25, floor)),
      not(equals(Equals_Param25, chair)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param26, chair)),
      not(equals(Equals_Param25, chair)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param24, cat)),
      not(equals(Equals_Param26, table)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param25, floor)),
      not(equals(Equals_Param26, table)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).
axiom(equals(Equals_Param24, cat),
   
    [ not(equals(Equals_Param26, chair)),
      not(equals(Equals_Param26, table)),
      holds_at(believe(Equals_Param24,
                       bCanJump(Equals_Param25, Equals_Param26)),
               t)
    ]).

 /*  equals(Equals_Param27, shelf) :-
       (   not(equals(Equals_Param28, cat))
       ;   not(equals(Equals_Param27, chair))
       ;   not(equals(Equals_Param29, table))
       ),
       (   not(equals(Equals_Param28, cat))
       ;   not(equals(Equals_Param27, floor))
       ;   not(equals(Equals_Param29, chair))
       ),
       holds_at(believe(Equals_Param28,
                        bCanJump(Equals_Param27, Equals_Param29)),
                0).
 */
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param28, cat)),
      not(equals(Equals_Param28, cat)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param27, floor)),
      not(equals(Equals_Param28, cat)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param29, chair)),
      not(equals(Equals_Param28, cat)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param28, cat)),
      not(equals(Equals_Param27, chair)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param27, floor)),
      not(equals(Equals_Param27, chair)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param29, chair)),
      not(equals(Equals_Param27, chair)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param28, cat)),
      not(equals(Equals_Param29, table)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param27, floor)),
      not(equals(Equals_Param29, table)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).
axiom(equals(Equals_Param27, shelf),
   
    [ not(equals(Equals_Param29, chair)),
      not(equals(Equals_Param29, table)),
      holds_at(believe(Equals_Param28,
                       bCanJump(Equals_Param27, Equals_Param29)),
               t)
    ]).

 /*  equals(Equals_Param30, table) :-
       (   not(equals(Equals_Param31, cat))
       ;   not(equals(Equals_Param32, chair))
       ;   not(equals(Equals_Param30, table))
       ),
       (   not(equals(Equals_Param31, cat))
       ;   not(equals(Equals_Param32, floor))
       ;   not(equals(Equals_Param30, chair))
       ),
       holds_at(believe(Equals_Param31,
                        bCanJump(Equals_Param32, Equals_Param30)),
                0).
 */
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param31, cat)),
      not(equals(Equals_Param31, cat)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param32, floor)),
      not(equals(Equals_Param31, cat)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param30, chair)),
      not(equals(Equals_Param31, cat)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param31, cat)),
      not(equals(Equals_Param32, chair)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param32, floor)),
      not(equals(Equals_Param32, chair)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param30, chair)),
      not(equals(Equals_Param32, chair)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param31, cat)),
      not(equals(Equals_Param30, table)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param32, floor)),
      not(equals(Equals_Param30, table)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).
axiom(equals(Equals_Param30, table),
   
    [ not(equals(Equals_Param30, chair)),
      not(equals(Equals_Param30, table)),
      holds_at(believe(Equals_Param31,
                       bCanJump(Equals_Param32, Equals_Param30)),
               t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6235
% !HoldsAt(Believe(Cat,BSatiated(Cat)),0).
 %  not(initially(believe(cat,bSatiated(cat)))).
axiom(not(initially(believe(cat, bSatiated(cat)))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6237
%; ADDED:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6238
% !HoldsAt(Satiated(Cat),0).
 %  not(initially(satiated(cat))).
axiom(not(initially(satiated(cat))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6240
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6241
==> completion(happens).

% range time 0 7
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6243
==> range(time,0,7).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6244
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/Lottery.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{OrtonyCloreCollins:1988,
%;   author = "Andrew Ortony and Gerald L. Clore and Allan M. Collins",
%;   year = "1988",
%;   title = "The Cognitive Structure of Emotions",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6279
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6280
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6282
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6284
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6285
==> sort(agent).

% sort aboutevent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6286
==> sort(aboutevent).

% sort desirability: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6287
==> subsort(desirability,integer).

% agent Kate, Lisa
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6289
==> t(agent,kate).
==> t(agent,lisa).

% aboutevent WinLotteryKate, WinLotteryLisa
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6290
==> t(aboutevent,winLotteryKate).
==> t(aboutevent,winLotteryLisa).

% fluent Joy(agent,aboutevent)
 %  fluent(joy(agent,aboutevent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6292
==> mpred_prop(joy(agent,aboutevent),fluent).
==> meta_argtypes(joy(agent,aboutevent)).

% fluent Desirability(agent,agent,aboutevent,desirability)
 %  fluent(desirability(agent,agent,aboutevent,desirability)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6293
==> mpred_prop(desirability(agent,agent,aboutevent,desirability),
	       fluent).
==> meta_argtypes(desirability(agent,agent,aboutevent,desirability)).

% fluent Believe(agent,aboutevent)
 %  fluent(believe(agent,aboutevent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6294
==> mpred_prop(believe(agent,aboutevent),fluent).
==> meta_argtypes(believe(agent,aboutevent)).

% fluent Like(agent,agent)
 %  fluent(like(agent,agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6295
==> mpred_prop(like(agent,agent),fluent).
==> meta_argtypes(like(agent,agent)).

% fluent HappyFor(agent,agent,aboutevent)
 %  fluent(happyFor(agent,agent,aboutevent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6296
==> mpred_prop(happyFor(agent,agent,aboutevent),fluent).
==> meta_argtypes(happyFor(agent,agent,aboutevent)).

% event WinLottery(agent)
 %  event(winLottery(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6298
==> mpred_prop(winLottery(agent),event).
==> meta_argtypes(winLottery(agent)).

% event AddJoy(agent,aboutevent)
 %  event(addJoy(agent,aboutevent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6299
==> mpred_prop(addJoy(agent,aboutevent),event).
==> meta_argtypes(addJoy(agent,aboutevent)).

% event AddHappyFor(agent,agent,aboutevent)
 %  event(addHappyFor(agent,agent,aboutevent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6300
==> mpred_prop(addHappyFor(agent,agent,aboutevent),event).
==> meta_argtypes(addHappyFor(agent,agent,aboutevent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6301
%; Sigma
% [agent,aboutevent,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6304
% Initiates(AddJoy(agent,aboutevent),Joy(agent,aboutevent),time).
axiom(initiates(addJoy(Agent, Aboutevent), joy(Agent, Aboutevent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6306
% [agent1,agent2,aboutevent,time]
% Initiates(AddHappyFor(agent1,agent2,aboutevent),
%           HappyFor(agent1,agent2,aboutevent),
%           time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6309
axiom(initiates(addHappyFor(Agent1, Agent2, Aboutevent), happyFor(Agent1, Agent2, Aboutevent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6311
% [agent1,agent2,aboutevent,time]
% (agent1=Kate & aboutevent=WinLotteryKate) |
% (agent1=Lisa & aboutevent=WinLotteryLisa) ->
% Initiates(WinLottery(agent1),Believe(agent2,aboutevent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6314
axiom(initiates(winLottery(Agent1), believe(Agent2, Aboutevent), Time),
    [equals(Agent1, kate), equals(Aboutevent, winLotteryKate)]).
axiom(initiates(winLottery(Agent1), believe(Agent2, Aboutevent), Time),
    [equals(Agent1, lisa), equals(Aboutevent, winLotteryLisa)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6316
%; Delta
% [agent,aboutevent,desirability,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6319
% !HoldsAt(Joy(agent,aboutevent),time) &
% HoldsAt(Desirability(agent,agent,aboutevent,desirability),time) &
% desirability=1 &
% HoldsAt(Believe(agent,aboutevent),time) ->
% Happens(AddJoy(agent,aboutevent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6323
axiom(happens(addJoy(Agent, Aboutevent), Time),
   
    [ not(holds_at(joy(Agent, Aboutevent), Time)),
      holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      equals(Desirability, 1),
      holds_at(believe(Agent, Aboutevent), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6325
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% !HoldsAt(HappyFor(agent1,agent2,aboutevent),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% desirability1=1 &
% HoldsAt(Desirability(agent1,agent1,aboutevent,desirability2),time) &
% desirability2=1 &
% HoldsAt(Like(agent1,agent2),time) &
% HoldsAt(Believe(agent1,aboutevent),time) &
% agent1 != agent2 ->
% Happens(AddHappyFor(agent1,agent2,aboutevent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6334
axiom(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time),
   
    [ not(holds_at(happyFor(Agent1, Agent2, Aboutevent),
                   Time)),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      equals(Desirability2, 1),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      dif(Agent1, Agent2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6336
% Happens(WinLottery(Kate),0).
axiom(happens(winLottery(kate), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6338
%; Psi
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6341
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability2),time) ->
% desirability1 = desirability2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6343
axiom(Desirability1=Desirability2,
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability2),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6345
%; Gamma
% [agent,aboutevent]
 % !HoldsAt(Joy(agent,aboutevent),0).
 %  not(initially(joy(Agent,Aboutevent))).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6347
axiom(not(initially(joy(Joy_Param, Joy_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6348
% [agent1,agent2,aboutevent]
 % !HoldsAt(HappyFor(agent1,agent2,aboutevent),0).
 %  not(initially(happyFor(Agent1,Agent2,Aboutevent))).
axiom(not(initially(happyFor(HappyFor_Param, _, HappyFor_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6349
% [aboutevent]
 % !HoldsAt(Believe(Kate,aboutevent),0).
 %  not(initially(believe(kate,Aboutevent))).
axiom(not(initially(believe(kate, Believe_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6350
% [aboutevent]
 % !HoldsAt(Believe(Lisa,aboutevent),0).
 %  not(initially(believe(lisa,Aboutevent))).
axiom(not(initially(believe(lisa, Believe_Ret))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6351
% [agent1,agent2,time]
 % HoldsAt(Like(agent1,agent2),time).
holds_at(like(Agent1,Agent2),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6353
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryKate,1),time).
holds_at(desirability(lisa,kate,winLotteryKate,1),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6354
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryKate,1),time).
holds_at(desirability(kate,kate,winLotteryKate,1),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6355
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryKate,1),time).
holds_at(desirability(lisa,lisa,winLotteryKate,1),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6356
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
holds_at(desirability(kate,kate,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6357
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryLisa,0),time).
holds_at(desirability(kate,lisa,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6358
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
holds_at(desirability(kate,kate,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6359
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryKate,0),time).
holds_at(desirability(kate,lisa,winLotteryKate,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6360
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryLisa,0),time).
holds_at(desirability(lisa,lisa,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6361
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryLisa,1),time).
holds_at(desirability(lisa,kate,winLotteryLisa,1),Time).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6363
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6364
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6366
==> range(time,0,3).

% range desirability -1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6367
==> range(desirability,-1,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6368
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1a.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6388
% option timediff off
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6389
:- set_ec_option(timediff, off).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6391
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6393
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6394
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6396
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6397
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6398
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6400
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6401
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6401
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6402
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6402
% Happens(WakeUp(James),0).
axiom(happens(wakeUp(james), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6404
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6405
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6407
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6408
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6426
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6429
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6430
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6432
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6433
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6434
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6436
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6437
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6437
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6438
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6438
% Happens(WakeUp(James),0).
axiom(happens(wakeUp(james), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6440
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6441
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6443
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6444
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6460
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6463
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6464
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6466
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6467
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6468
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6469
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
axiom(requires(wakeUp(Agent), Time),
    [not(holds_at(awake(Agent), Time))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6471
% agent James, Jessie
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6472
==> t(agent,james).
==> t(agent,jessie).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6472
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6473
% !HoldsAt(Awake(Jessie),0).
 %  not(initially(awake(jessie))).
axiom(not(initially(awake(jessie))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6474
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6476
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6477
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6478
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6494
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6497
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6498
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6500
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6501
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6502
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6504
% agent James, Jessie
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6505
==> t(agent,james).
==> t(agent,jessie).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6505
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6506
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6508
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6509
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6510
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6526
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6529
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6530
==> sort(agent).

% fluent Awake(agent)
 %  fluent(awake(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6532
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
 %  event(wakeUp(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6533
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6534
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6536
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6537
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6537
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6538
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6540
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6541
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6542
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6570
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6573
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6574
==> sort(agent).

% fluent Tired(agent)
 %  fluent(tired(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6576
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% event Move(agent)
 %  event(move(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6578
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% event Run(agent)
 %  event(run(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6579
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% event Drive(agent)
 %  event(drive(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6580
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6581
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).

 /*   if(happens(move(Agent), Time),
          (happens(run(Agent), Time);happens(drive(Agent), Time))).
 */

 /*  happens(run(Run_Ret), Maptime) :-
       not(happens(drive(Run_Ret), Maptime)),
       happens(move(Run_Ret), Maptime).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6583
axiom(happens(run(Run_Ret), Maptime),
   
    [ not(happens(drive(Run_Ret), Maptime)),
      happens(move(Run_Ret), Maptime)
    ]).

 /*  happens(drive(Drive_Ret), Maptime4) :-
       not(happens(run(Drive_Ret), Maptime4)),
       happens(move(Drive_Ret), Maptime4).
 */
axiom(happens(drive(Drive_Ret), Maptime4),
   
    [ not(happens(run(Drive_Ret), Maptime4)),
      happens(move(Drive_Ret), Maptime4)
    ]).

 /*  not(happens(move(Move_Ret), Maptime6)) :-
       not(happens(run(Move_Ret), Maptime6)),
       not(happens(drive(Move_Ret), Maptime6)).
 */
axiom(not(happens(move(Move_Ret), Maptime6)),
   
    [ not(happens(run(Move_Ret), Maptime6)),
      not(happens(drive(Move_Ret), Maptime6))
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6585
% xor Run, Drive
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6586
xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6587
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6589
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6590
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6591
% !HoldsAt(Tired(James),0).
 %  not(initially(tired(james))).
axiom(not(initially(tired(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6592
% Happens(Move(James),0).
axiom(happens(move(james), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6594
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6595
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6596
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/OffOn.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6626
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6629
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6630
==> sort(agent).

% sort switch
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6631
==> sort(switch).

% fluent On(switch)
 %  fluent(on(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6633
==> mpred_prop(on(switch),fluent).
==> meta_argtypes(on(switch)).

% fluent Off(switch)
 %  fluent(off(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6634
==> mpred_prop(off(switch),fluent).
==> meta_argtypes(off(switch)).

% event TurnOn(agent,switch)
 %  event(turnOn(agent,switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6635
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% event TurnOff(agent,switch)
 %  event(turnOff(agent,switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6636
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).

% noninertial Off
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6638
==> noninertial(off).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6639
% [switch,time]
 % HoldsAt(Off(switch),time) <-> !HoldsAt(On(switch),time).

 /*  holds_at(off(Switch), Time) <->
       not(holds_at(on(Switch), Time)).
 */
axiom(holds_at(off(Switch), Time),
    [not(holds_at(on(Switch), Time))]).
axiom(not(holds_at(on(Switch), Time)),
    [holds_at(off(Switch), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6641
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),On(switch),time).
axiom(initiates(turnOn(Agent, Switch), on(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6642
% [agent,switch,time]
 % Terminates(TurnOff(agent,switch),On(switch),time).
axiom(terminates(turnOff(Agent, Switch), on(Switch), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6644
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6645
==> t(agent,james).

% switch Switch1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6646
==> t(switch,switch1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6647
% !HoldsAt(On(Switch1),0).
 %  not(initially(on(switch1))).
axiom(not(initially(on(switch1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6648
% Happens(TurnOn(James,Switch1),0).
axiom(happens(turnOn(james, switch1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6650
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6651
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6652
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6682
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6685
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6686
==> sort(agent).

% sort switch
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6687
==> sort(switch).

% sort tv
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6688
==> sort(tv).

% function TVOf(switch): tv
 %  functional_predicate(tVOf(switch,tv)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6690
==> mpred_prop(tVOf(switch,tv),functional_predicate).
==> meta_argtypes(tVOf(switch,tv)).
resultIsa(tVOf,tv).

% fluent SwitchOn(switch)
 %  fluent(switchOn(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6691
==> mpred_prop(switchOn(switch),fluent).
==> meta_argtypes(switchOn(switch)).

% fluent TVOn(tv)
 %  fluent(tVOn(tv)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6692
==> mpred_prop(tVOn(tv),fluent).
==> meta_argtypes(tVOn(tv)).

% fluent PluggedIn(tv)
 %  fluent(pluggedIn(tv)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6693
==> mpred_prop(pluggedIn(tv),fluent).
==> meta_argtypes(pluggedIn(tv)).

% event TurnOn(agent,switch)
 %  event(turnOn(agent,switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6694
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% event TurnOff(agent,switch)
 %  event(turnOff(agent,switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6695
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6696
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).
axiom(initiates(turnOn(Agent, Switch), switchOn(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6698
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6700
axiom(initiates(turnOn(Agent, Switch), tVOn(Tv), Time),
   
    [ equals(tVOf(Switch), Tv),
      holds_at(pluggedIn(Tv), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6702
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6703
==> t(agent,james).

% switch Switch1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6704
==> t(switch,switch1).

% tv TV1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6705
==> t(tv,tv1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6706
% TVOf(Switch1)=TV1.
tVOf(switch1,tv1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6707
% !HoldsAt(PluggedIn(TV1),0).
 %  not(initially(pluggedIn(tv1))).
axiom(not(initially(pluggedIn(tv1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6708
% !HoldsAt(SwitchOn(Switch1),0).
 %  not(initially(switchOn(switch1))).
axiom(not(initially(switchOn(switch1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6709
% !HoldsAt(TVOn(TV1),0).
 %  not(initially(tVOn(tv1))).
axiom(not(initially(tVOn(tv1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6710
% Happens(TurnOn(James,Switch1),0).
axiom(happens(turnOn(james, switch1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6712
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6713
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6714
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Approve.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; example of concurrent events with cumulative or canceling effects
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6746
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6749
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6750
==> sort(agent).

% event ApproveOf(agent,agent)
 %  event(approveOf(agent,agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6752
==> mpred_prop(approveOf(agent,agent),event).
==> meta_argtypes(approveOf(agent,agent)).

% event DisapproveOf(agent,agent)
 %  event(disapproveOf(agent,agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6753
==> mpred_prop(disapproveOf(agent,agent),event).
==> meta_argtypes(disapproveOf(agent,agent)).

% fluent Happy(agent)
 %  fluent(happy(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6754
==> mpred_prop(happy(agent),fluent).
==> meta_argtypes(happy(agent)).

% fluent Confused(agent)
 %  fluent(confused(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6755
==> mpred_prop(confused(agent),fluent).
==> meta_argtypes(confused(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6756
% [agent1,agent2,time]
% !Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Happy(agent2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6758
axiom(initiates(approveOf(Agent1, Agent2), happy(Agent2), Time),
    [not(happens(disapproveOf(Agent1, Agent2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6760
% [agent1,agent2,time]
% !Happens(ApproveOf(agent1,agent2),time) ->
% Terminates(DisapproveOf(agent1,agent2),Happy(agent2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6762
axiom(terminates(disapproveOf(Agent1, Agent2), happy(Agent2), Time),
    [not(happens(approveOf(Agent1, Agent2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6764
% [agent1,agent2,time]
% Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Confused(agent2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6766
axiom(requires(disapproveOf(Agent1, Agent2), Time),
   
    [ initiates(approveOf(Agent1, Agent2),
                confused(Agent2),
                Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6768
% agent James, Peter
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6769
==> t(agent,james).
==> t(agent,peter).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6770
% [agent]
 % !HoldsAt(Happy(agent),0) & !HoldsAt(Confused(agent),0).

 /*   not(holds_at(happy(Agent), 0)),
      not(holds_at(confused(Agent), 0)).
 */
axiom(not(holds_at(happy(Happy_Ret), t)),
    []).
axiom(not(holds_at(confused(Confused_Ret), t)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6772
% Happens(ApproveOf(Peter,James),0).
axiom(happens(approveOf(peter, james), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6773
% Happens(DisapproveOf(Peter,James),0).
axiom(happens(disapproveOf(peter, james), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6775
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6776
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6778
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6779
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6809
% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6810
:- set_ec_option(trajectory, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6812
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6814
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6815
==> sort(object).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6816
==> subsort(height,integer).

% fluent Height(object,height)
 %  fluent(height(object,height)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6818
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% fluent Falling(object)
 %  fluent(falling(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6819
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% event StartFalling(object)
 %  event(startFalling(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6820
==> mpred_prop(startFalling(object),event).
==> meta_argtypes(startFalling(object)).

% event HitsGround(object)
 %  event(hitsGround(object)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6821
==> mpred_prop(hitsGround(object),event).
==> meta_argtypes(hitsGround(object)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6822
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6825
axiom(Height1=Height2,
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(height(Object, Height2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6827
% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6828
axiom(initiates(startFalling(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6830
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6831
axiom(releases(startFalling(Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6833
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6836
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6838
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6841
axiom(happens(hitsGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6843
%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6849
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6850
axiom(initiates(hitsGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6852
% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6853
axiom(terminates(hitsGround(Object), falling(Object), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6855
% object Leaf
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6856
==> t(object,leaf).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6857
% !HoldsAt(Falling(Leaf),0).
 %  not(initially(falling(leaf))).
axiom(not(initially(falling(leaf))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6858
% HoldsAt(Height(Leaf,4),0).
axiom(initially(height(leaf, 4)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6859
% Happens(StartFalling(Leaf),2).
axiom(happens(startFalling(leaf), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6861
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6862
==> completion(happens).

% range time 0 7
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6864
==> range(time,0,7).

% range offset 1 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6865
==> range(offset,1,4).

% range height 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6866
==> range(height,0,4).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6896
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6899
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6900
==> sort(agent).

% fluent Tired(agent)
 %  fluent(tired(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6902
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% event Move(agent)
 %  event(move(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6904
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% event Run(agent)
 %  event(run(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6905
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% event Drive(agent)
 %  event(drive(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6906
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6907
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).

 /*   if(happens(move(Agent), Time),
          (happens(run(Agent), Time);happens(drive(Agent), Time))).
 */

 /*  happens(run(Run_Ret), Maptime) :-
       not(happens(drive(Run_Ret), Maptime)),
       happens(move(Run_Ret), Maptime).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6909
axiom(happens(run(Run_Ret), Maptime),
   
    [ not(happens(drive(Run_Ret), Maptime)),
      happens(move(Run_Ret), Maptime)
    ]).

 /*  happens(drive(Drive_Ret), Maptime4) :-
       not(happens(run(Drive_Ret), Maptime4)),
       happens(move(Drive_Ret), Maptime4).
 */
axiom(happens(drive(Drive_Ret), Maptime4),
   
    [ not(happens(run(Drive_Ret), Maptime4)),
      happens(move(Drive_Ret), Maptime4)
    ]).

 /*  not(happens(move(Move_Ret), Maptime6)) :-
       not(happens(run(Move_Ret), Maptime6)),
       not(happens(drive(Move_Ret), Maptime6)).
 */
axiom(not(happens(move(Move_Ret), Maptime6)),
   
    [ not(happens(run(Move_Ret), Maptime6)),
      not(happens(drive(Move_Ret), Maptime6))
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6911
% xor Run, Drive
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6912
xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6913
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6915
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6916
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6917
% !HoldsAt(Tired(James),0).
 %  not(initially(tired(james))).
axiom(not(initially(tired(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6918
% Happens(Move(James),0).
axiom(happens(move(james), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6919
% HoldsAt(Tired(James),1).
holds_at(tired(james),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6921
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6922
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6923
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6953
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6956
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6957
==> sort(agent).

% sort switch
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6958
==> sort(switch).

% sort tv
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6959
==> sort(tv).

% function TVOf(switch): tv
 %  functional_predicate(tVOf(switch,tv)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6961
==> mpred_prop(tVOf(switch,tv),functional_predicate).
==> meta_argtypes(tVOf(switch,tv)).
resultIsa(tVOf,tv).

% fluent SwitchOn(switch)
 %  fluent(switchOn(switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6962
==> mpred_prop(switchOn(switch),fluent).
==> meta_argtypes(switchOn(switch)).

% fluent TVOn(tv)
 %  fluent(tVOn(tv)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6963
==> mpred_prop(tVOn(tv),fluent).
==> meta_argtypes(tVOn(tv)).

% fluent PluggedIn(tv)
 %  fluent(pluggedIn(tv)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6964
==> mpred_prop(pluggedIn(tv),fluent).
==> meta_argtypes(pluggedIn(tv)).

% event TurnOn(agent,switch)
 %  event(turnOn(agent,switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6965
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% event TurnOff(agent,switch)
 %  event(turnOff(agent,switch)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6966
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6967
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).
axiom(initiates(turnOn(Agent, Switch), switchOn(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6969
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6971
axiom(initiates(turnOn(Agent, Switch), tVOn(Tv), Time),
   
    [ equals(tVOf(Switch), Tv),
      holds_at(pluggedIn(Tv), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6973
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6974
==> t(agent,james).

% switch Switch1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6975
==> t(switch,switch1).

% tv TV1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6976
==> t(tv,tv1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6977
% TVOf(Switch1)=TV1.
tVOf(switch1,tv1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6978
% HoldsAt(PluggedIn(TV1),0).
axiom(initially(pluggedIn(tv1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6979
% !HoldsAt(SwitchOn(Switch1),0).
 %  not(initially(switchOn(switch1))).
axiom(not(initially(switchOn(switch1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6980
% !HoldsAt(TVOn(TV1),0).
 %  not(initially(tVOn(tv1))).
axiom(not(initially(tVOn(tv1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6981
% Happens(TurnOn(James,Switch1),0).
axiom(happens(turnOn(james, switch1), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6983
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6984
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:6985
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7015
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7018
% sort wheel
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7019
==> sort(wheel).

% sort value: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7020
==> subsort(value,integer).

% fluent WheelValueDeterminingFluent(wheel,value)
 %  fluent(wheelValueDeterminingFluent(wheel,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7022
==> mpred_prop(wheelValueDeterminingFluent(wheel,value),fluent).
==> meta_argtypes(wheelValueDeterminingFluent(wheel,value)).

% fluent WheelValue(wheel,value)
 %  fluent(wheelValue(wheel,value)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7023
==> mpred_prop(wheelValue(wheel,value),fluent).
==> meta_argtypes(wheelValue(wheel,value)).

% noninertial WheelValueDeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7024
==> noninertial(wheelValueDeterminingFluent).

% event Spin(wheel)
 %  event(spin(wheel)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7025
==> mpred_prop(spin(wheel),event).
==> meta_argtypes(spin(wheel)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7026
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValue(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7029
axiom(Value1=Value2,
   
    [ holds_at(wheelValue(Wheel, Value1), Time),
      holds_at(wheelValue(Wheel, Value2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7031
% [wheel,value1,value2,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7034
axiom(Value1=Value2,
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value1),
               Time),
      holds_at(wheelValueDeterminingFluent(Wheel, Value2),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7036
% [wheel,value,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value),time) ->
% Initiates(Spin(wheel),WheelValue(wheel,value),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7038
axiom(initiates(spin(Wheel), wheelValue(Wheel, Value), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7040
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(wheel),WheelValue(wheel,value1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7044
axiom(terminates(spin(Wheel), wheelValue(Wheel, Value1), Time),
   
    [ holds_at(wheelValue(Wheel, Value1), Time),
      holds_at(wheelValueDeterminingFluent(Wheel, Value2),
               Time),
      { dif(Value1, Value2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7046
% [wheel,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7047
% {value} % HoldsAt(WheelValueDeterminingFluent(wheel,value),time).

 /*  exists([Value],
          holds_at(wheelValueDeterminingFluent(Wheel,Value),
   		Time)).
 */

 /*  holds_at(wheelValueDeterminingFluent(WheelValueDeterminingFluent_Param, Some_Param), Time4) :-
       some(Some_Param,
            '$kolem_Fn_363'(WheelValueDeterminingFluent_Param, Time4)).
 */
axiom(holds_at(wheelValueDeterminingFluent(WheelValueDeterminingFluent_Param, Some_Param), Time4),
   
    [ some(Some_Param,
           '$kolem_Fn_363'(WheelValueDeterminingFluent_Param, Time4))
    ]).

 /*  not(some(Some_Param8, '$kolem_Fn_363'(Fn_363_Param, Time7))) :-
       not(holds_at(wheelValueDeterminingFluent(Fn_363_Param,
                                                Some_Param8),
                    Time7)).
 */
axiom(not(some(Some_Param8, '$kolem_Fn_363'(Fn_363_Param, Time7))),
   
    [ not(holds_at(wheelValueDeterminingFluent(Fn_363_Param,
                                               Some_Param8),
                   Time7))
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7049
% wheel Wheel
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7050
==> t(wheel,wheel).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7051
% HoldsAt(WheelValue(Wheel,7),0).
axiom(initially(wheelValue(wheel, 7)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7052
% Happens(Spin(Wheel),0).
axiom(happens(spin(wheel), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7053
% HoldsAt(WheelValueDeterminingFluent(Wheel,7),1).
holds_at(wheelValueDeterminingFluent(wheel,7),1).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7055
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7056
==> completion(happens).

% range value 7 10
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7058
==> range(value,7,10).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7059
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7060
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/PickUp.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7090
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7093
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7094
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7095
==> subsort(agent,object).

% sort physobj: object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7096
==> subsort(physobj,object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7097
==> sort(location).

% fluent At(object,location)
 %  fluent(at(object,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7099
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% fluent Holding(agent,physobj)
 %  fluent(holding(agent,physobj)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7100
==> mpred_prop(holding(agent,physobj),fluent).
==> meta_argtypes(holding(agent,physobj)).

% event PickUp(agent,physobj)
 %  event(pickUp(agent,physobj)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7101
==> mpred_prop(pickUp(agent,physobj),event).
==> meta_argtypes(pickUp(agent,physobj)).

% event SetDown(agent,physobj)
 %  event(setDown(agent,physobj)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7102
==> mpred_prop(setDown(agent,physobj),event).
==> meta_argtypes(setDown(agent,physobj)).

% event Move(agent,location,location)
 %  event(move(agent,location,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7103
==> mpred_prop(move(agent,location,location),event).
==> meta_argtypes(move(agent,location,location)).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7104
%; state constraints
% [agent,location,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7107
% HoldsAt(At(agent,location),time) &
% HoldsAt(Holding(agent,physobj),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7109
axiom(holds_at(at(Physobj, Location), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(holding(Agent, Physobj), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7111
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7114
axiom(Location1=Location2,
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(at(Object, Location2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7116
%; effect axioms
% [agent,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7119
% Initiates(Move(agent,location1,location2),At(agent,location2),time).
axiom(initiates(move(Agent, Location1, Location2), at(Agent, Location2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7121
% [agent,location1,location2,time]
% Terminates(Move(agent,location1,location2),At(agent,location1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7122
axiom(terminates(move(Agent, Location1, Location2), at(Agent, Location1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7124
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7125
axiom(initiates(pickUp(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7127
% [agent,physobj,time]
% Terminates(SetDown(agent,physobj),Holding(agent,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7128
axiom(terminates(setDown(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7130
%; preconditions
% [agent,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7133
% Happens(Move(agent,location1,location2),time) ->
% HoldsAt(At(agent,location1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7134
axiom(requires(move(Agent, Location1, Location2), Time),
    [holds_at(at(Agent, Location1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7136
% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7138
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).

 /*   exists([Location],
             if(happens(pickUp(Agent, Physobj), Time),
                 (holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time)))).
 */

 /*  not(some(Location6, '$kolem_Fn_364'(Fn_364_Param, At_Param, Maptime))) :-
       happens(pickUp(Fn_364_Param, At_Param), Maptime),
       (   not(holds_at(at(Fn_364_Param, Location6), Maptime))
       ;   not(holds_at(at(At_Param, Location6), Maptime))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7139
axiom(not(some(Location6, '$kolem_Fn_364'(Fn_364_Param, At_Param, Maptime))),
   
    [ not(holds_at(at(Fn_364_Param, Location6), Maptime)),
      happens(pickUp(Fn_364_Param, At_Param), Maptime)
    ]).
axiom(not(some(Location6, '$kolem_Fn_364'(Fn_364_Param, At_Param, Maptime))),
   
    [ not(holds_at(at(At_Param, Location6), Maptime)),
      happens(pickUp(Fn_364_Param, At_Param), Maptime)
    ]).

 /*  not(happens(pickUp(PickUp_Param, At_Param12), Maptime9)) :-
       (   not(holds_at(at(PickUp_Param, Location10), Maptime9))
       ;   not(holds_at(at(At_Param12, Location10), Maptime9))
       ),
       some(Location10,
            '$kolem_Fn_364'(PickUp_Param, At_Param12, Maptime9)).
 */
axiom(not(happens(pickUp(PickUp_Param, At_Param12), Maptime9)),
   
    [ not(holds_at(at(PickUp_Param, Location10), Maptime9)),
      some(Location10,
           '$kolem_Fn_364'(PickUp_Param, At_Param12, Maptime9))
    ]).
axiom(not(happens(pickUp(PickUp_Param, At_Param12), Maptime9)),
   
    [ not(holds_at(at(At_Param12, Location10), Maptime9)),
      some(Location10,
           '$kolem_Fn_364'(PickUp_Param, At_Param12, Maptime9))
    ]).

 /*  holds_at(at(At_Param15, Location13), Time14) :-
       happens(pickUp(At_Param15, PickUp_Ret), Time14),
       some(Location13,
            '$kolem_Fn_364'(At_Param15, PickUp_Ret, Time14)).
 */
axiom(holds_at(at(At_Param15, Location13), Time14),
   
    [ happens(pickUp(At_Param15, PickUp_Ret), Time14),
      some(Location13,
           '$kolem_Fn_364'(At_Param15, PickUp_Ret, Time14))
    ]).

 /*  holds_at(at(At_Param19, Location17), Time18) :-
       happens(pickUp(PickUp_Param20, At_Param19), Time18),
       some(Location17,
            '$kolem_Fn_364'(PickUp_Param20, At_Param19, Time18)).
 */
axiom(holds_at(at(At_Param19, Location17), Time18),
   
    [ happens(pickUp(PickUp_Param20, At_Param19), Time18),
      some(Location17,
           '$kolem_Fn_364'(PickUp_Param20, At_Param19, Time18))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7141
%; releases
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7144
% Releases(PickUp(agent,physobj),At(physobj,location),time).
axiom(releases(pickUp(Agent, Physobj), at(Physobj, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7146
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(SetDown(agent,physobj),At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7148
axiom(initiates(setDown(Agent, Physobj), at(Physobj, Location), Time),
    [holds_at(at(Agent, Location), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7150
%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(SetDown(agent,physobj),At(physobj,location2),time).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7155
% agent James
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7156
==> t(agent,james).

% physobj Coin
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7157
==> t(physobj,coin).

% location L1, L2, L3, L4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7158
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).
==> t(location,l4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7159
% !HoldsAt(Holding(James,Coin),0).
 %  not(initially(holding(james,coin))).
axiom(not(initially(holding(james, coin))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7160
% HoldsAt(At(Coin,L4),0).
axiom(initially(at(coin, l4)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7161
% HoldsAt(At(James,L1),0).
axiom(initially(at(james, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7162
% Happens(Move(James,L1,L2),0).
axiom(happens(move(james, l1, l2), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7163
% Happens(Move(James,L2,L3),1).
axiom(happens(move(james, l2, l3), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7164
% Happens(Move(James,L3,L4),2).
axiom(happens(move(james, l3, l4), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7165
% Happens(PickUp(James,Coin),3).
axiom(happens(pickUp(james, coin), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7166
% Happens(Move(James,L4,L3),4).
axiom(happens(move(james, l4, l3), t4),
    [is_time(4), b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7167
% Happens(Move(James,L3,L2),5).
axiom(happens(move(james, l3, l2), t5),
    [is_time(5), b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7168
% Happens(SetDown(James,Coin),6).
axiom(happens(setDown(james, coin), t6),
    [is_time(6), b(t, t6), ignore(t+6=t6)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7169
% Happens(Move(James,L2,L3),7).
axiom(happens(move(james, l2, l3), t7),
    [is_time(7), b(t, t7), ignore(t+7=t7)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7170
% Happens(Move(James,L3,L4),8).
axiom(happens(move(james, l3, l4), t8),
    [is_time(8), b(t, t8), ignore(t+8=t8)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7172
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7173
==> completion(happens).

% range time 0 9
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7175
==> range(time,0,9).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7176
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/Story1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7204
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7205
:- set_ec_option(modeldiff, on).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7207
% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7209
% sort agent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7210
==> sort(agent).

% load examples/FrankEtAl2003/FrankEtAl.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7213
% agent Bob, Jilly
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7214
==> t(agent,bob).
==> t(agent,jilly).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7215
% !HoldsAt(Raining(),0).
 %  not(initially(raining())).
axiom(not(initially(raining())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7216
% !HoldsAt(SunShining(),0).
 %  not(initially(sunShining())).
axiom(not(initially(sunShining())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7218
% (HoldsAt(PlaySoccer(Bob),1) & HoldsAt(PlaySoccer(Jilly),1)) |
% (HoldsAt(PlayHideAndSeek(Bob),1) & HoldsAt(PlayHideAndSeek(Jilly),1)) |
% (HoldsAt(PlayComputerGame(Bob),1) & HoldsAt(PlayComputerGame(Jilly),1)).

 /*   (   holds_at(playSoccer(bob), 1),
          holds_at(playSoccer(jilly), 1)
      ;   holds_at(playHideAndSeek(bob), 1),
          holds_at(playHideAndSeek(jilly), 1)
      ;   holds_at(playComputerGame(bob), 1),
          holds_at(playComputerGame(jilly), 1)
      ).
 */

 /*  holds_at(playSoccer(bob), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7220
axiom(holds_at(playSoccer(bob), start),
   
    [ not(holds_at(playComputerGame(bob), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playSoccer(bob), start),
   
    [ not(holds_at(playComputerGame(jilly), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playSoccer(bob), start),
   
    [ not(holds_at(playComputerGame(bob), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playSoccer(bob), start),
   
    [ not(holds_at(playComputerGame(jilly), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(playSoccer(jilly), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */
axiom(holds_at(playSoccer(jilly), start),
   
    [ not(holds_at(playComputerGame(bob), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playSoccer(jilly), start),
   
    [ not(holds_at(playComputerGame(jilly), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playSoccer(jilly), start),
   
    [ not(holds_at(playComputerGame(bob), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playSoccer(jilly), start),
   
    [ not(holds_at(playComputerGame(jilly), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(playHideAndSeek(bob), 1) :-
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */
axiom(holds_at(playHideAndSeek(bob), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playComputerGame(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playHideAndSeek(bob), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playComputerGame(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playHideAndSeek(bob), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playComputerGame(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playHideAndSeek(bob), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playComputerGame(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(playHideAndSeek(jilly), 1) :-
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */
axiom(holds_at(playHideAndSeek(jilly), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playComputerGame(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playHideAndSeek(jilly), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playComputerGame(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playHideAndSeek(jilly), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playComputerGame(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playHideAndSeek(jilly), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playComputerGame(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(playComputerGame(bob), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */
axiom(holds_at(playComputerGame(bob), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playComputerGame(bob), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playComputerGame(bob), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playComputerGame(bob), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(playComputerGame(jilly), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */
axiom(holds_at(playComputerGame(jilly), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playComputerGame(jilly), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playHideAndSeek(bob), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playComputerGame(jilly), start),
   
    [ not(holds_at(playSoccer(bob), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(playComputerGame(jilly), start),
   
    [ not(holds_at(playSoccer(jilly), start)),
      not(holds_at(playHideAndSeek(jilly), start)),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7222
% HoldsAt(Win(Bob),1) | HoldsAt(Win(Jilly),1).

 /*   (   holds_at(win(bob), 1)
      ;   holds_at(win(jilly), 1)
      ).
 */

 /*  holds_at(win(bob), 1) :-
       not(holds_at(win(jilly), 1)).
 */
axiom(holds_at(win(bob), start),
    [not(holds_at(win(jilly), start)), b(t, start), ignore(t+1=start)]).

 /*  holds_at(win(jilly), 1) :-
       not(holds_at(win(bob), 1)).
 */
axiom(holds_at(win(jilly), start),
    [not(holds_at(win(bob), start)), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7224
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7225
==> range(time,0,1).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7226
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/FrankEtAl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7254
% fluent SunShining()
 %  fluent(sunShining()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7255
==> mpred_prop(sunShining(),fluent).
==> meta_argtypes(sunShining()).

% fluent Raining()
 %  fluent(raining()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7256
==> mpred_prop(raining(),fluent).
==> meta_argtypes(raining()).

% fluent Outside(agent)
 %  fluent(outside(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7257
==> mpred_prop(outside(agent),fluent).
==> meta_argtypes(outside(agent)).

% fluent PlaySoccer(agent)
 %  fluent(playSoccer(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7258
==> mpred_prop(playSoccer(agent),fluent).
==> meta_argtypes(playSoccer(agent)).

% fluent PlayHideAndSeek(agent)
 %  fluent(playHideAndSeek(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7259
==> mpred_prop(playHideAndSeek(agent),fluent).
==> meta_argtypes(playHideAndSeek(agent)).

% fluent PlayComputerGame(agent)
 %  fluent(playComputerGame(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7260
==> mpred_prop(playComputerGame(agent),fluent).
==> meta_argtypes(playComputerGame(agent)).

% fluent PlayWithDog(agent)
 %  fluent(playWithDog(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7261
==> mpred_prop(playWithDog(agent),fluent).
==> meta_argtypes(playWithDog(agent)).

% fluent Win(agent)
 %  fluent(win(agent)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7262
==> mpred_prop(win(agent),fluent).
==> meta_argtypes(win(agent)).

% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7264
==> noninertial(outside).
==> noninertial(playSoccer).
==> noninertial(playHideAndSeek).
==> noninertial(playComputerGame).

% noninertial PlayWithDog, Win
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7265
==> noninertial(playWithDog).
==> noninertial(win).

% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7267
xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7268
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7270
axiom(holds_at(outside(Agent), Time),
    [holds_at(playSoccer(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7272
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).

 /*   if(holds_at(playSoccer(Agent), Time),
         exists([Agent1],
                 (Agent1\=Agent, holds_at(playSoccer(Agent1), Time)))).
 */

 /*  not(holds_at(playSoccer(PlaySoccer_Ret), Time3)) :-
       (   not({dif(Dif_Param, PlaySoccer_Ret)})
       ;   not(holds_at(playSoccer(Dif_Param), Time3))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7274
axiom(not(holds_at(playSoccer(PlaySoccer_Ret), Time3)),
    [not({dif(Dif_Param, PlaySoccer_Ret)})]).
axiom(not(holds_at(playSoccer(PlaySoccer_Ret), Time3)),
    [not(holds_at(playSoccer(Dif_Param), Time3))]).

 /*  { dif(Dif_Param7, Dif_Ret)
   } :-
       holds_at(playSoccer(Dif_Ret), Time6).
 */
axiom({ dif(Dif_Param7, Dif_Ret)
},
    [holds_at(playSoccer(Dif_Ret), Time6)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7276
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).

 /*   if(holds_at(playHideAndSeek(Agent), Time),
         exists([Agent1],
                 (Agent1\=Agent, holds_at(playHideAndSeek(Agent1), Time)))).
 */

 /*  not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)) :-
       (   not({dif(Dif_Param, PlayHideAndSeek_Ret)})
       ;   not(holds_at(playHideAndSeek(Dif_Param), Time3))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7278
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)),
    [not({dif(Dif_Param, PlayHideAndSeek_Ret)})]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)),
    [not(holds_at(playHideAndSeek(Dif_Param), Time3))]).

 /*  { dif(Dif_Param7, Dif_Ret)
   } :-
       holds_at(playHideAndSeek(Dif_Ret), Time6).
 */
axiom({ dif(Dif_Param7, Dif_Ret)
},
    [holds_at(playHideAndSeek(Dif_Ret), Time6)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7280
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7282
axiom(not(holds_at(outside(Agent), Time)),
    [holds_at(playComputerGame(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7284
% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).

 /*   if(holds_at(win(Agent), Time),
          (holds_at(playSoccer(Agent), Time);holds_at(playHideAndSeek(Agent), Time);holds_at(playComputerGame(Agent), Time), exists([Agent1],  (Agent1\=Agent, holds_at(playComputerGame(Agent1), Time))))).
 */

 /*  not(holds_at(win(Win_Ret), Time3)) :-
       not(holds_at(playSoccer(Win_Ret), Time3)),
       not(holds_at(playHideAndSeek(Win_Ret), Time3)),
       (   not(holds_at(playComputerGame(Win_Ret), Time3))
       ;   not({dif(Dif_Param, Win_Ret)})
       ;   not(holds_at(playComputerGame(Dif_Param), Time3))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7289
axiom(not(holds_at(win(Win_Ret), Time3)),
   
    [ not(holds_at(playComputerGame(Win_Ret), Time3)),
      not(holds_at(playSoccer(Win_Ret), Time3)),
      not(holds_at(playHideAndSeek(Win_Ret), Time3))
    ]).
axiom(not(holds_at(win(Win_Ret), Time3)),
   
    [ not({dif(Dif_Param, Win_Ret)}),
      not(holds_at(playSoccer(Win_Ret), Time3)),
      not(holds_at(playHideAndSeek(Win_Ret), Time3))
    ]).
axiom(not(holds_at(win(Win_Ret), Time3)),
   
    [ not(holds_at(playComputerGame(Dif_Param), Time3)),
      not(holds_at(playSoccer(Win_Ret), Time3)),
      not(holds_at(playHideAndSeek(Win_Ret), Time3))
    ]).

 /*  holds_at(playSoccer(PlaySoccer_Ret), Time6) :-
       ( not(holds_at(playHideAndSeek(PlaySoccer_Ret), Time6)),
         (   not(holds_at(playComputerGame(PlaySoccer_Ret), Time6))
         ;   not({dif(Dif_Param7, PlaySoccer_Ret)})
         ;   not(holds_at(playComputerGame(Dif_Param7), Time6))
         )
       ),
       holds_at(win(PlaySoccer_Ret), Time6).
 */
axiom(holds_at(playSoccer(PlaySoccer_Ret), Time6),
   
    [ not(holds_at(playComputerGame(PlaySoccer_Ret), Time6)),
      not(holds_at(playHideAndSeek(PlaySoccer_Ret), Time6)),
      holds_at(win(PlaySoccer_Ret), Time6)
    ]).
axiom(holds_at(playSoccer(PlaySoccer_Ret), Time6),
   
    [ not({dif(Dif_Param7, PlaySoccer_Ret)}),
      not(holds_at(playHideAndSeek(PlaySoccer_Ret), Time6)),
      holds_at(win(PlaySoccer_Ret), Time6)
    ]).
axiom(holds_at(playSoccer(PlaySoccer_Ret), Time6),
   
    [ not(holds_at(playComputerGame(Dif_Param7), Time6)),
      not(holds_at(playHideAndSeek(PlaySoccer_Ret), Time6)),
      holds_at(win(PlaySoccer_Ret), Time6)
    ]).

 /*  holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time9) :-
       (   not(holds_at(playComputerGame(PlayHideAndSeek_Ret), Time9))
       ;   not({dif(Dif_Param10, PlayHideAndSeek_Ret)})
       ;   not(holds_at(playComputerGame(Dif_Param10), Time9))
       ),
       not(holds_at(playSoccer(PlayHideAndSeek_Ret), Time9)),
       holds_at(win(PlayHideAndSeek_Ret), Time9).
 */
axiom(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time9),
   
    [ not(holds_at(playComputerGame(PlayHideAndSeek_Ret), Time9)),
      not(holds_at(playSoccer(PlayHideAndSeek_Ret), Time9)),
      holds_at(win(PlayHideAndSeek_Ret), Time9)
    ]).
axiom(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time9),
   
    [ not({dif(Dif_Param10, PlayHideAndSeek_Ret)}),
      not(holds_at(playSoccer(PlayHideAndSeek_Ret), Time9)),
      holds_at(win(PlayHideAndSeek_Ret), Time9)
    ]).
axiom(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time9),
   
    [ not(holds_at(playComputerGame(Dif_Param10), Time9)),
      not(holds_at(playSoccer(PlayHideAndSeek_Ret), Time9)),
      holds_at(win(PlayHideAndSeek_Ret), Time9)
    ]).

 /*  holds_at(playComputerGame(PlayComputerGame_Ret), Time12) :-
       not(holds_at(playHideAndSeek(PlayComputerGame_Ret), Time12)),
       not(holds_at(playSoccer(PlayComputerGame_Ret), Time12)),
       holds_at(win(PlayComputerGame_Ret), Time12).
 */
axiom(holds_at(playComputerGame(PlayComputerGame_Ret), Time12),
   
    [ not(holds_at(playHideAndSeek(PlayComputerGame_Ret), Time12)),
      not(holds_at(playSoccer(PlayComputerGame_Ret), Time12)),
      holds_at(win(PlayComputerGame_Ret), Time12)
    ]).

 /*  { dif(Dif_Param15, Dif_Ret)
   } :-
       not(holds_at(playHideAndSeek(Dif_Ret), Time14)),
       not(holds_at(playSoccer(Dif_Ret), Time14)),
       holds_at(win(Dif_Ret), Time14).
 */
axiom({ dif(Dif_Param15, Dif_Ret)
},
   
    [ not(holds_at(playHideAndSeek(Dif_Ret), Time14)),
      not(holds_at(playSoccer(Dif_Ret), Time14)),
      holds_at(win(Dif_Ret), Time14)
    ]).

 /*  holds_at(playComputerGame(PlayComputerGame_Ret18), Time17) :-
       not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret19), Time17)),
       not(holds_at(playSoccer(PlayHideAndSeek_Ret19), Time17)),
       holds_at(win(PlayHideAndSeek_Ret19), Time17).
 */
axiom(holds_at(playComputerGame(PlayComputerGame_Ret18), Time17),
   
    [ not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret19), Time17)),
      not(holds_at(playSoccer(PlayHideAndSeek_Ret19), Time17)),
      holds_at(win(PlayHideAndSeek_Ret19), Time17)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7291
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7294
axiom(not(holds_at(playSoccer(Agent), start)),
   
    [ holds_at(playSoccer(Agent), t),
      holds_at(win(Agent), t),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7296
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7299
axiom(not(holds_at(playHideAndSeek(Agent), start)),
   
    [ holds_at(playHideAndSeek(Agent), t),
      holds_at(win(Agent), t),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7301
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7304
axiom(not(holds_at(playComputerGame(Agent), start)),
   
    [ holds_at(playComputerGame(Agent), t),
      holds_at(win(Agent), t),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7306
% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).

 /*   if(holds_at(win(Agent), Time),
          (holds_at(playSoccer(Agent), Time-1);holds_at(playHideAndSeek(Agent), Time-1);holds_at(playComputerGame(Agent), Time-1))).
 */

 /*  holds_at(playSoccer(PlaySoccer_Ret), Time2-1) :-
       ( not(holds_at(playHideAndSeek(PlaySoccer_Ret), Time2-1)),
         not(holds_at(playComputerGame(PlaySoccer_Ret), Time2-1))
       ),
       holds_at(win(PlaySoccer_Ret), Time2).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7310
axiom(holds_at(playSoccer(PlaySoccer_Ret), t),
   
    [ not(holds_at(playHideAndSeek(PlaySoccer_Ret), t)),
      not(holds_at(playComputerGame(PlaySoccer_Ret), t)),
      holds_at(win(PlaySoccer_Ret), start),
      b(t, start),
      ignore(start-1=t)
    ]).

 /*  holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time4-1) :-
       not(holds_at(playComputerGame(PlayHideAndSeek_Ret), Time4-1)),
       not(holds_at(playSoccer(PlayHideAndSeek_Ret), Time4-1)),
       holds_at(win(PlayHideAndSeek_Ret), Time4).
 */
axiom(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), t),
   
    [ not(holds_at(playComputerGame(PlayHideAndSeek_Ret), t)),
      not(holds_at(playSoccer(PlayHideAndSeek_Ret), t)),
      holds_at(win(PlayHideAndSeek_Ret), start),
      b(t, start),
      ignore(start-1=t)
    ]).

 /*  holds_at(playComputerGame(PlayComputerGame_Ret), Time6-1) :-
       not(holds_at(playHideAndSeek(PlayComputerGame_Ret), Time6-1)),
       not(holds_at(playSoccer(PlayComputerGame_Ret), Time6-1)),
       holds_at(win(PlayComputerGame_Ret), Time6).
 */
axiom(holds_at(playComputerGame(PlayComputerGame_Ret), t),
   
    [ not(holds_at(playHideAndSeek(PlayComputerGame_Ret), t)),
      not(holds_at(playSoccer(PlayComputerGame_Ret), t)),
      holds_at(win(PlayComputerGame_Ret), start),
      b(t, start),
      ignore(start-1=t)
    ]).

 /*  not(holds_at(win(Win_Ret), Time8)) :-
       not(holds_at(playSoccer(Win_Ret), Time8-1)),
       not(holds_at(playHideAndSeek(Win_Ret), Time8-1)),
       not(holds_at(playComputerGame(Win_Ret), Time8-1)).
 */
axiom(not(holds_at(win(Win_Ret), start)),
   
    [ not(holds_at(playSoccer(Win_Ret), t)),
      not(holds_at(playHideAndSeek(Win_Ret), t)),
      not(holds_at(playComputerGame(Win_Ret), t)),
      b(t, start),
      ignore(start-1=t)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7312
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7314
axiom(not(holds_at(raining(), Time)),
    [holds_at(playSoccer(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7316
% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7318
axiom(not(exists([Agent1],  (Agent1\=Agent, holds_at(win(Agent1), Time)))),
    [holds_at(win(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7320
% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).

 /*   if((holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)),
          (holds_at(outside(Agent1), Time), holds_at(outside(Agent2), Time);not(holds_at(outside(Agent1), Time)), not(holds_at(outside(Agent2), Time)))).
 */

 /*  not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)) :-
       holds_at(playHideAndSeek(PlayHideAndSeek_Ret5), Time3),
       (   not(holds_at(outside(PlayHideAndSeek_Ret), Time3))
       ;   not(holds_at(outside(PlayHideAndSeek_Ret5), Time3))
       ),
       (   holds_at(outside(PlayHideAndSeek_Ret), Time3)
       ;   holds_at(outside(PlayHideAndSeek_Ret5), Time3)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7324
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret), Time3),
      not(holds_at(outside(PlayHideAndSeek_Ret), Time3)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret5), Time3)
    ]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret5), Time3),
      not(holds_at(outside(PlayHideAndSeek_Ret), Time3)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret5), Time3)
    ]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret), Time3),
      not(holds_at(outside(PlayHideAndSeek_Ret5), Time3)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret5), Time3)
    ]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret), Time3)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret5), Time3),
      not(holds_at(outside(PlayHideAndSeek_Ret5), Time3)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret5), Time3)
    ]).

 /*  not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret7), Time6)) :-
       holds_at(playHideAndSeek(PlayHideAndSeek_Ret8), Time6),
       (   not(holds_at(outside(PlayHideAndSeek_Ret8), Time6))
       ;   not(holds_at(outside(PlayHideAndSeek_Ret7), Time6))
       ),
       (   holds_at(outside(PlayHideAndSeek_Ret8), Time6)
       ;   holds_at(outside(PlayHideAndSeek_Ret7), Time6)
       ).
 */
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret7), Time6)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret8), Time6),
      not(holds_at(outside(PlayHideAndSeek_Ret8), Time6)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret8), Time6)
    ]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret7), Time6)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret7), Time6),
      not(holds_at(outside(PlayHideAndSeek_Ret8), Time6)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret8), Time6)
    ]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret7), Time6)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret8), Time6),
      not(holds_at(outside(PlayHideAndSeek_Ret7), Time6)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret8), Time6)
    ]).
axiom(not(holds_at(playHideAndSeek(PlayHideAndSeek_Ret7), Time6)),
   
    [ holds_at(outside(PlayHideAndSeek_Ret7), Time6),
      not(holds_at(outside(PlayHideAndSeek_Ret7), Time6)),
      holds_at(playHideAndSeek(PlayHideAndSeek_Ret8), Time6)
    ]).

 /*  holds_at(outside(Outside_Ret), Time9) :-
       (   holds_at(outside(Outside_Ret), Time9)
       ;   holds_at(outside(Outside_Ret11), Time9)
       ),
       holds_at(playHideAndSeek(Outside_Ret), Time9),
       holds_at(playHideAndSeek(Outside_Ret11), Time9).
 */
axiom(holds_at(outside(Outside_Ret), Time9),
   
    [ holds_at(outside(Outside_Ret), Time9),
      holds_at(playHideAndSeek(Outside_Ret), Time9),
      holds_at(playHideAndSeek(Outside_Ret11), Time9)
    ]).
axiom(holds_at(outside(Outside_Ret), Time9),
   
    [ holds_at(outside(Outside_Ret11), Time9),
      holds_at(playHideAndSeek(Outside_Ret), Time9),
      holds_at(playHideAndSeek(Outside_Ret11), Time9)
    ]).

 /*  holds_at(outside(Outside_Ret13), Time12) :-
       (   holds_at(outside(Outside_Ret14), Time12)
       ;   holds_at(outside(Outside_Ret13), Time12)
       ),
       holds_at(playHideAndSeek(Outside_Ret14), Time12),
       holds_at(playHideAndSeek(Outside_Ret13), Time12).
 */
axiom(holds_at(outside(Outside_Ret13), Time12),
   
    [ holds_at(outside(Outside_Ret14), Time12),
      holds_at(playHideAndSeek(Outside_Ret14), Time12),
      holds_at(playHideAndSeek(Outside_Ret13), Time12)
    ]).
axiom(holds_at(outside(Outside_Ret13), Time12),
   
    [ holds_at(outside(Outside_Ret13), Time12),
      holds_at(playHideAndSeek(Outside_Ret14), Time12),
      holds_at(playHideAndSeek(Outside_Ret13), Time12)
    ]).

 /*  not(holds_at(outside(Outside_Ret16), Time15)) :-
       (   not(holds_at(outside(Outside_Ret16), Time15))
       ;   not(holds_at(outside(Outside_Ret17), Time15))
       ),
       holds_at(playHideAndSeek(Outside_Ret16), Time15),
       holds_at(playHideAndSeek(Outside_Ret17), Time15).
 */
axiom(not(holds_at(outside(Outside_Ret16), Time15)),
   
    [ not(holds_at(outside(Outside_Ret16), Time15)),
      holds_at(playHideAndSeek(Outside_Ret16), Time15),
      holds_at(playHideAndSeek(Outside_Ret17), Time15)
    ]).
axiom(not(holds_at(outside(Outside_Ret16), Time15)),
   
    [ not(holds_at(outside(Outside_Ret17), Time15)),
      holds_at(playHideAndSeek(Outside_Ret16), Time15),
      holds_at(playHideAndSeek(Outside_Ret17), Time15)
    ]).

 /*  not(holds_at(outside(Outside_Ret19), Time18)) :-
       (   not(holds_at(outside(Outside_Ret20), Time18))
       ;   not(holds_at(outside(Outside_Ret19), Time18))
       ),
       holds_at(playHideAndSeek(Outside_Ret20), Time18),
       holds_at(playHideAndSeek(Outside_Ret19), Time18).
 */
axiom(not(holds_at(outside(Outside_Ret19), Time18)),
   
    [ not(holds_at(outside(Outside_Ret20), Time18)),
      holds_at(playHideAndSeek(Outside_Ret20), Time18),
      holds_at(playHideAndSeek(Outside_Ret19), Time18)
    ]).
axiom(not(holds_at(outside(Outside_Ret19), Time18)),
   
    [ not(holds_at(outside(Outside_Ret19), Time18)),
      holds_at(playHideAndSeek(Outside_Ret20), Time18),
      holds_at(playHideAndSeek(Outside_Ret19), Time18)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7326
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPrediction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7355
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7357
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7359
% HoldsAt(At(Monkey,L1),0).
axiom(initially(at(monkey, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7360
% HoldsAt(At(Bananas,L2),0).
axiom(initially(at(bananas, l2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7361
% HoldsAt(At(Box,L3),0).
axiom(initially(at(box, l3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7362
% Happens(Walk(L3),0).
axiom(happens(walk(l3), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7363
% Happens(PushBox(L2),1).
axiom(happens(pushBox(l2), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7365
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7366
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7368
==> range(time,0,2).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7369
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPlanning.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; planning

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7399
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7401
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7403
% HoldsAt(At(Monkey,L1),0).
axiom(initially(at(monkey, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7404
% HoldsAt(At(Bananas,L2),0).
axiom(initially(at(bananas, l2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7405
% HoldsAt(At(Box,L3),0).
axiom(initially(at(box, l3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7406
% HoldsAt(HasBananas(),4).
holds_at(hasBananas(),4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7408
%; PLAN Happens(Walk(L3),0).
%; PLAN Happens(PushBox(L2),1).
%; PLAN Happens(ClimbOn(),2).
%; PLAN Happens(GraspBananas(),3).
%; one event at a time
% [event1,event2,time]
 
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7414
% Happens(event1,time) & Happens(event2,time) ->
% event1=event2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7415
axiom(Event1=Event2,
    [happens(Event1, Time), happens(Event2, Time)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7417
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7418
==> range(time,0,4).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7419
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPostdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; postdiction

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7449
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7451
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7453
% HoldsAt(At(Monkey,L1),0).
axiom(initially(at(monkey, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7454
% HoldsAt(At(Bananas,L2),0).
axiom(initially(at(bananas, l2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7455
% Happens(Walk(L3),0).
axiom(happens(walk(l3), t),
    [is_time(0)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7456
% Happens(PushBox(L2),1).
axiom(happens(pushBox(l2), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7458
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7459
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7461
==> range(time,0,2).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7462
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyBananas.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7490
% sort object
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7491
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7492
==> sort(location).

% object Monkey, Bananas, Box
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7494
==> t(object,monkey).
==> t(object,bananas).
==> t(object,box).

% location L1, L2, L3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7495
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% fluent At(object,location)
 %  fluent(at(object,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7497
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% fluent OnBox()
 %  fluent(onBox()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7498
==> mpred_prop(onBox(),fluent).
==> meta_argtypes(onBox()).

% fluent HasBananas()
 %  fluent(hasBananas()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7499
==> mpred_prop(hasBananas(),fluent).
==> meta_argtypes(hasBananas()).

% event Walk(location)
 %  event(walk(location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7501
==> mpred_prop(walk(location),event).
==> meta_argtypes(walk(location)).

% event PushBox(location)
 %  event(pushBox(location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7502
==> mpred_prop(pushBox(location),event).
==> meta_argtypes(pushBox(location)).

% event ClimbOn()
 %  event(climbOn()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7503
==> mpred_prop(climbOn(),event).
==> meta_argtypes(climbOn()).

% event ClimbOff()
 %  event(climbOff()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7504
==> mpred_prop(climbOff(),event).
==> meta_argtypes(climbOff()).

% event GraspBananas()
 %  event(graspBananas()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7505
==> mpred_prop(graspBananas(),event).
==> meta_argtypes(graspBananas()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7506
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7509
axiom(Location1=Location2,
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(at(Object, Location2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7511
% [object,location,time]
% object=% Monkey ->
% Initiates(Walk(location),At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7513
axiom(initiates(walk(Location), at(Object, Location), Time),
    [equals(Object, monkey)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7515
% [object,location1,location2,time]
% object=% Monkey &
% HoldsAt(At(object,location1),time) ->
% Terminates(Walk(location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7518
axiom(terminates(walk(Location2), at(Object, Location1), Time),
   
    [ equals(Object, monkey),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7520
% [location,time]
% Happens(Walk(location),time) ->
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7523
axiom(requires(walk(Location), Time),
   
    [ not(holds_at(at(monkey, Location), Time)),
      not(holds_at(onBox(), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7525
% [location,time]
% HoldsAt(HasBananas(),time) &
% HoldsAt(At(Monkey,location),time) ->
% HoldsAt(At(Bananas,location),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7528
axiom(holds_at(at(bananas, Location), Time),
   
    [ holds_at(hasBananas(), Time),
      holds_at(at(monkey, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7530
% [object,location,time]
% object=% Box | object=Monkey ->
% Initiates(PushBox(location),At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7532
axiom(initiates(pushBox(Location), at(Object, Location), Time),
    [equals(Object, box)]).
axiom(initiates(pushBox(Location), at(Object, Location), Time),
    [equals(Object, monkey)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7534
% [object,location1,location2,time]
% (object=Box | object=Monkey) &
% HoldsAt(At(object,location1),time) ->
% Terminates(PushBox(location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7537
axiom(terminates(pushBox(Location2), at(Object, Location1), Time),
   
    [ equals(Object, box),
      holds_at(at(Object, Location1), Time)
    ]).
axiom(terminates(pushBox(Location2), at(Object, Location1), Time),
   
    [ equals(Object, monkey),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7539
% [location,time]
% Happens(PushBox(location),time) ->
% ({location1}
%   HoldsAt(At(Box,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7545
axiom(requires(pushBox(Location), Time),
   
    [ holds_at(at(box, Location1), Time),
      holds_at(at(monkey, Location1), Time),
      not(holds_at(at(monkey, Location), Time)),
      not(holds_at(onBox(), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7547
% [time]
 % Initiates(ClimbOn(),OnBox(),time).
axiom(initiates(climbOn(), onBox(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7549
% [time]
% Happens(ClimbOn(),time) ->
% !HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7551
axiom(requires(climbOn(), Time),
    [not(holds_at(onBox(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7553
% [time]
 % Terminates(ClimbOff(),OnBox(),time).
axiom(terminates(climbOff(), onBox(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7555
% [time]
% Happens(ClimbOff(),time) ->
% HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7557
axiom(requires(climbOff(), Time),
    [holds_at(onBox(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7559
% [time]
 % Initiates(GraspBananas(),HasBananas(),time).
axiom(initiates(graspBananas(), hasBananas(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7561
% [object,location,time]
% object=% Bananas ->
% Releases(GraspBananas(),At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7563
axiom(releases(graspBananas(), at(Object, Location), Time),
    [equals(Object, bananas)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7565
% [time]
% Happens(GraspBananas(),time) ->
% ({location1}
%   HoldsAt(At(Bananas,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7570
axiom(requires(graspBananas(), Time),
   
    [ holds_at(at(bananas, Location1), Time),
      holds_at(at(monkey, Location1), Time),
      holds_at(onBox(), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7572
% [time]
% HoldsAt(OnBox(),time) ->
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7574
% {location1}%  HoldsAt(At(Box,location1),time) &
%             HoldsAt(At(Monkey,location1),time).

 /*   exists([Location1],
             if(holds_at(onBox(), Time),
                 (holds_at(at(box, Location1), Time), holds_at(at(monkey, Location1), Time)))).
 */

 /*  not(some(Location, '$kolem_Fn_370'(Time3))) :-
       holds_at(onBox(), Time3),
       (   not(holds_at(at(box, Location), Time3))
       ;   not(holds_at(at(monkey, Location), Time3))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7575
axiom(not(some(Location, '$kolem_Fn_370'(Time3))),
   
    [ not(holds_at(at(box, Location), Time3)),
      holds_at(onBox(), Time3)
    ]).
axiom(not(some(Location, '$kolem_Fn_370'(Time3))),
   
    [ not(holds_at(at(monkey, Location), Time3)),
      holds_at(onBox(), Time3)
    ]).

 /*  not(holds_at(onBox(), Time5)) :-
       (   not(holds_at(at(box, Location6), Time5))
       ;   not(holds_at(at(monkey, Location6), Time5))
       ),
       some(Location6, '$kolem_Fn_370'(Time5)).
 */
axiom(not(holds_at(onBox(), Time5)),
   
    [ not(holds_at(at(box, Location6), Time5)),
      some(Location6, '$kolem_Fn_370'(Time5))
    ]).
axiom(not(holds_at(onBox(), Time5)),
   
    [ not(holds_at(at(monkey, Location6), Time5)),
      some(Location6, '$kolem_Fn_370'(Time5))
    ]).

 /*  holds_at(at(box, Location7), Time8) :-
       holds_at(onBox(), Time8),
       some(Location7, '$kolem_Fn_370'(Time8)).
 */
axiom(holds_at(at(box, Location7), Time8),
   
    [ holds_at(onBox(), Time8),
      some(Location7, '$kolem_Fn_370'(Time8))
    ]).

 /*  holds_at(at(monkey, Location9), Time10) :-
       holds_at(onBox(), Time10),
       some(Location9, '$kolem_Fn_370'(Time10)).
 */
axiom(holds_at(at(monkey, Location9), Time10),
   
    [ holds_at(onBox(), Time10),
      some(Location9, '$kolem_Fn_370'(Time10))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7577
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Student.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 157]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7606
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7609
% sort x
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7610
==> sort(x).

% predicate Adult(x)
 %  predicate(adult(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7612
==> mpred_prop(adult(x),predicate).
==> meta_argtypes(adult(x)).

% predicate Student(x)
 %  predicate(student(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7613
==> mpred_prop(student(x),predicate).
==> meta_argtypes(student(x)).

% predicate Employed(x)
 %  predicate(employed(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7614
==> mpred_prop(employed(x),predicate).
==> meta_argtypes(employed(x)).

% predicate Ab1(x)
 %  predicate(ab1(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7615
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
 %  predicate(ab2(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7616
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x Mary
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7618
==> t(x,mary).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7619
% Student(Mary).
student(mary).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7621
% [x]
 % Adult(x) & !Ab1(x) -> Employed(x).
axiom(employed(X),
    [adult(X), not(ab1(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7622
% [x]
 % Student(x) & !Ab2(x) -> !Employed(x).
axiom(not(employed(X)),
    [student(X), not(ab2(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7623
% [x]
 % Student(x) -> Adult(x).
axiom(adult(X),
    [student(X)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7624
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7624
% [x]
 % Student(x) -> Ab1(x).
axiom(ab1(X),
    [student(X)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7626
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7627
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7628
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7630
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7631
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Dropout.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; dealing with conflicting defaults by adding conditions
%; to one of the conflicting rules
%; \fullciteA[p. 56]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7662
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7665
% sort x
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7666
==> sort(x).

% predicate Dropout(x)
 %  predicate(dropout(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7668
==> mpred_prop(dropout(x),predicate).
==> meta_argtypes(dropout(x)).

% predicate Adult(x)
 %  predicate(adult(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7669
==> mpred_prop(adult(x),predicate).
==> meta_argtypes(adult(x)).

% predicate Employed(x)
 %  predicate(employed(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7670
==> mpred_prop(employed(x),predicate).
==> meta_argtypes(employed(x)).

% predicate Ab1(x)
 %  predicate(ab1(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7671
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
 %  predicate(ab2(x)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7672
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x Bill
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7674
==> t(x,bill).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7675
% Dropout(Bill).
dropout(bill).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7677
% [x]
 % Dropout(x) & !Ab1(x) -> Adult(x).
axiom(adult(X),
    [dropout(X), not(ab1(X))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7678
% [x]
 % Adult(x) & !Dropout(x) & !Ab2(x) -> Employed(x).
axiom(employed(X),
    [adult(X), not(dropout(X)), not(ab2(X))]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7680
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7681
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7682
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7684
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7685
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/Happy.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; InitiallyP -> HoldsAt
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7724
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7727
% sort person
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7728
==> sort(person).

% event Feed(person)
 %  event(feed(person)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7729
==> mpred_prop(feed(person),event).
==> meta_argtypes(feed(person)).

% event Clothe(person)
 %  event(clothe(person)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7730
==> mpred_prop(clothe(person),event).
==> meta_argtypes(clothe(person)).

% fluent Happy(person)
 %  fluent(happy(person)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7731
==> mpred_prop(happy(person),fluent).
==> meta_argtypes(happy(person)).

% fluent Hungry(person)
 %  fluent(hungry(person)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7732
==> mpred_prop(hungry(person),fluent).
==> meta_argtypes(hungry(person)).

% fluent Cold(person)
 %  fluent(cold(person)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7733
==> mpred_prop(cold(person),fluent).
==> meta_argtypes(cold(person)).

% noninertial Happy
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7734
==> noninertial(happy).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7735
% [person,time]
% HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time).

 /*  holds_at(happy(Person), Time) <->
       not(holds_at(hungry(Person), Time)),
       not(holds_at(cold(Person), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7738
axiom(holds_at(happy(Person), Time),
   
    [ not(holds_at(hungry(Person), Time)),
      not(holds_at(cold(Person), Time))
    ]).

 /*   if(holds_at(happy(Person), Time),
          (not(holds_at(hungry(Person), Time)), not(holds_at(cold(Person), Time)))).
 */

 /*  not(holds_at(happy(Happy_Ret), Time2)) :-
       (   holds_at(hungry(Happy_Ret), Time2)
       ;   holds_at(cold(Happy_Ret), Time2)
       ).
 */
axiom(not(holds_at(happy(Happy_Ret), Time2)),
    [holds_at(hungry(Happy_Ret), Time2)]).
axiom(not(holds_at(happy(Happy_Ret), Time2)),
    [holds_at(cold(Happy_Ret), Time2)]).

 /*  not(holds_at(hungry(Hungry_Ret), Time4)) :-
       holds_at(happy(Hungry_Ret), Time4).
 */
axiom(not(holds_at(hungry(Hungry_Ret), Time4)),
    [holds_at(happy(Hungry_Ret), Time4)]).

 /*  not(holds_at(cold(Cold_Ret), Time6)) :-
       holds_at(happy(Cold_Ret), Time6).
 */
axiom(not(holds_at(cold(Cold_Ret), Time6)),
    [holds_at(happy(Cold_Ret), Time6)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7740
% [person,time]
% Terminates(Feed(person),Hungry(person),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7741
axiom(terminates(feed(Person), hungry(Person), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7743
% [person,time]
% Terminates(Clothe(person),Cold(person),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7744
axiom(terminates(clothe(Person), cold(Person), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7746
% person Fred
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7747
==> t(person,fred).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7748
% HoldsAt(Hungry(Fred),0).
axiom(initially(hungry(fred)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7749
% !HoldsAt(Cold(Fred),0).
 %  not(initially(cold(fred))).
axiom(not(initially(cold(fred))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7750
% Happens(Feed(Fred),1).
axiom(happens(feed(fred), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7752
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7753
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7755
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7756
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ThielscherCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7802
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7804
% load foundations/ECCausal.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7806
% event LightOn()
 %  event(lightOn()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7807
==> mpred_prop(lightOn(),event).
==> meta_argtypes(lightOn()).

% event Close1()
 %  event(close1()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7808
==> mpred_prop(close1(),event).
==> meta_argtypes(close1()).

% event Open2()
 %  event(open2()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7809
==> mpred_prop(open2(),event).
==> meta_argtypes(open2()).

% event CloseRelay()
 %  event(closeRelay()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7810
==> mpred_prop(closeRelay(),event).
==> meta_argtypes(closeRelay()).

% fluent Light()
 %  fluent(light()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7812
==> mpred_prop(light(),fluent).
==> meta_argtypes(light()).

% fluent Switch1()
 %  fluent(switch1()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7813
==> mpred_prop(switch1(),fluent).
==> meta_argtypes(switch1()).

% fluent Switch2()
 %  fluent(switch2()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7814
==> mpred_prop(switch2(),fluent).
==> meta_argtypes(switch2()).

% fluent Switch3()
 %  fluent(switch3()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7815
==> mpred_prop(switch3(),fluent).
==> meta_argtypes(switch3()).

% fluent Relay()
 %  fluent(relay()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7816
==> mpred_prop(relay(),fluent).
==> meta_argtypes(relay()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7817
% [time]
% Stopped(Light(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch2(),time) ->
% Happens(LightOn(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7821
axiom(happens(lightOn(), Time),
   
    [ stopped(light(), Time),
      initiated(switch1(), Time),
      initiated(switch2(), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7823
% [time]
% Started(Switch2(),time) &
% Initiated(Relay(),time) ->
% Happens(Open2(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7826
axiom(happens(open2(), Time),
    [started(switch2(), Time), initiated(relay(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7828
% [time]
% Stopped(Relay(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch3(),time) ->
% Happens(CloseRelay(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7832
axiom(happens(closeRelay(), Time),
   
    [ stopped(relay(), Time),
      initiated(switch1(), Time),
      initiated(switch3(), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7834
% [time]
 % Initiates(LightOn(),Light(),time).
axiom(initiates(lightOn(), light(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7836
% [time]
 % Terminates(Open2(),Switch2(),time).
axiom(terminates(open2(), switch2(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7838
% [time]
 % Initiates(CloseRelay(),Relay(),time).
axiom(initiates(closeRelay(), relay(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7840
% [time]
 % Initiates(Close1(),Switch1(),time).
axiom(initiates(close1(), switch1(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7842
% !HoldsAt(Switch1(),0).
 %  not(initially(switch1())).
axiom(not(initially(switch1())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7843
% HoldsAt(Switch2(),0).
axiom(initially(switch2()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7844
% HoldsAt(Switch3(),0).
axiom(initially(switch3()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7845
% !HoldsAt(Relay(),0).
 %  not(initially(relay())).
axiom(not(initially(relay())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7846
% !HoldsAt(Light(),0).
 %  not(initially(light())).
axiom(not(initially(light())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7848
% Happens(Close1(),0).
axiom(happens(close1(), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7850
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7851
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7853
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7854
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/CoinToss.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7903
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7906
% event Toss()
 %  event(toss()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7907
==> mpred_prop(toss(),event).
==> meta_argtypes(toss()).

% fluent ItsHeads()
 %  fluent(itsHeads()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7908
==> mpred_prop(itsHeads(),fluent).
==> meta_argtypes(itsHeads()).

% fluent Heads()
 %  fluent(heads()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7909
==> mpred_prop(heads(),fluent).
==> meta_argtypes(heads()).

% noninertial ItsHeads
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7910
==> noninertial(itsHeads).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7911
% [time]
 % HoldsAt(ItsHeads(),time) -> Initiates(Toss(),Heads(),time).
axiom(initiates(toss(), heads(), Time),
    [holds_at(itsHeads(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7912
% [time]
 % !HoldsAt(ItsHeads(),time) -> Terminates(Toss(),Heads(),time).
axiom(terminates(toss(), heads(), Time),
    [not(holds_at(itsHeads(), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7914
% HoldsAt(Heads(),0).
axiom(initially(heads()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7915
% Happens(Toss(),1).
axiom(happens(toss(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7916
% Happens(Toss(),2).
axiom(happens(toss(), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7917
% Happens(Toss(),3).
axiom(happens(toss(), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7919
%; prune models irrelevant to example:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7920
% HoldsAt(ItsHeads(),0).
axiom(initially(itsHeads()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7921
% HoldsAt(ItsHeads(),4).
holds_at(itsHeads(),4).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7923
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7924
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7926
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7927
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ChessBoard.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; due to Raymond Reiter
%;
%; @inproceedings{KarthaLifschitz:1994,
%;   author = "G. Neelakantan Kartha and Vladimir Lifschitz",
%;   year = "1994",
%;   title = "Actions with indirect effects (preliminary report)",
%;   editor = "Jon Doyle and Erik Sandewall and Pietro Torasso",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ourth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "341--350",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7979
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7982
% event Throw()
 %  event(throw()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7983
==> mpred_prop(throw(),event).
==> meta_argtypes(throw()).

% fluent ItsBlack()
 %  fluent(itsBlack()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7984
==> mpred_prop(itsBlack(),fluent).
==> meta_argtypes(itsBlack()).

% fluent ItsWhite()
 %  fluent(itsWhite()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7985
==> mpred_prop(itsWhite(),fluent).
==> meta_argtypes(itsWhite()).

% fluent OnBlack()
 %  fluent(onBlack()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7986
==> mpred_prop(onBlack(),fluent).
==> meta_argtypes(onBlack()).

% fluent OnWhite()
 %  fluent(onWhite()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7987
==> mpred_prop(onWhite(),fluent).
==> meta_argtypes(onWhite()).

% noninertial ItsBlack, ItsWhite
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7988
==> noninertial(itsBlack).
==> noninertial(itsWhite).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7989
% [time]
% HoldsAt(ItsWhite(),time) ->
% Initiates(Throw(),OnWhite(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7991
axiom(initiates(throw(), onWhite(), Time),
    [holds_at(itsWhite(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7993
% [time]
% HoldsAt(ItsBlack(),time) ->
% Initiates(Throw(),OnBlack(),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7995
axiom(initiates(throw(), onBlack(), Time),
    [holds_at(itsBlack(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7997
% [time]
 % HoldsAt(ItsWhite(),time) | HoldsAt(ItsBlack(),time).

 /*   (   holds_at(itsWhite(), Time)
      ;   holds_at(itsBlack(), Time)
      ).
 */

 /*  holds_at(itsWhite(), Time1) :-
       not(holds_at(itsBlack(), Time1)).
 */
axiom(holds_at(itsWhite(), Time1),
    [not(holds_at(itsBlack(), Time1))]).

 /*  holds_at(itsBlack(), Time2) :-
       not(holds_at(itsWhite(), Time2)).
 */
axiom(holds_at(itsBlack(), Time2),
    [not(holds_at(itsWhite(), Time2))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:7999
% !HoldsAt(OnWhite(),0).
 %  not(initially(onWhite())).
axiom(not(initially(onWhite())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8000
% !HoldsAt(OnBlack(),0).
 %  not(initially(onBlack())).
axiom(not(initially(onBlack())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8001
% Happens(Throw(),1).
axiom(happens(throw(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8003
%; prune models irrelevant to example:


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8004
% HoldsAt(ItsWhite(),0).
axiom(initially(itsWhite()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8005
% HoldsAt(ItsBlack(),0).
axiom(initially(itsBlack()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8006
% HoldsAt(ItsWhite(),2).
holds_at(itsWhite(),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8007
% HoldsAt(ItsBlack(),2).
holds_at(itsBlack(),2).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8009
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8010
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8012
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8013
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/RussianTurkey.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Sandewall:1994,
%;   author = "Sandewall, Erik",
%;   year = "1994",
%;   title = "Features and Fluents: The Representation of Knowledge about Dynamical Systems",
%;   volume = "I",
%;   address = "Oxford",
%;   publisher = "Oxford University Press",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; added [time] Terminates(Shoot(),Loaded(),time).
%; added !HoldsAt(Loaded(),0) to prune models
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8062
% load foundations/Root.e

% load foundations/EC.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8065
% event Load()
 %  event(load()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8066
==> mpred_prop(load(),event).
==> meta_argtypes(load()).

% event Shoot()
 %  event(shoot()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8067
==> mpred_prop(shoot(),event).
==> meta_argtypes(shoot()).

% event Spin()
 %  event(spin()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8068
==> mpred_prop(spin(),event).
==> meta_argtypes(spin()).

% fluent Loaded()
 %  fluent(loaded()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8069
==> mpred_prop(loaded(),fluent).
==> meta_argtypes(loaded()).

% fluent Alive()
 %  fluent(alive()).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8070
==> mpred_prop(alive(),fluent).
==> meta_argtypes(alive()).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8071
% [time]
 % Initiates(Load(),Loaded(),time).
axiom(initiates(load(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8072
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
axiom(terminates(shoot(), alive(), Time),
    [holds_at(loaded(), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8073
% [time]
 % Releases(Spin(),Loaded(),time).
axiom(releases(spin(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8074
% [time]
 % Terminates(Shoot(),Loaded(),time).
axiom(terminates(shoot(), loaded(), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8076
% HoldsAt(Alive(),0).
axiom(initially(alive()),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8077
% !HoldsAt(Loaded(),0).
 %  not(initially(loaded())).
axiom(not(initially(loaded())),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8078
% Happens(Load(),1).
axiom(happens(load(), start),
    [is_time(1), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8079
% Happens(Spin(),2).
axiom(happens(spin(), t2),
    [is_time(2), b(t, t2), ignore(t+2=t2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8080
% Happens(Shoot(),3).
axiom(happens(shoot(), t3),
    [is_time(3), b(t, t3), ignore(t+3=t3)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8082
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8083
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8085
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8086
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8114
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8115
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8117
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8120
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8121
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8122
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8123
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8124
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8125
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8126
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8128
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8129
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8129
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 0), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_371')) :-
       (   not(holds_at(pos(homer, Some_Param), 0))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_371')),
    [not(holds_at(pos(homer, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_371')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_371').
 */
axiom(holds_at(pos(homer, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_371')]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_371').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_371')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8130
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8130
% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(jumbo, Position), 0), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_372')) :-
       (   not(holds_at(pos(jumbo, Some_Param), 0))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_372')),
    [not(holds_at(pos(jumbo, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_372')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(jumbo, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_372').
 */
axiom(holds_at(pos(jumbo, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_372')]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_372').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_372')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8132
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8132
% HoldsAt(Pos(Homer,position),5) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 5), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_373')) :-
       (   not(holds_at(pos(homer, Some_Param), 5))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_373')),
    [not(holds_at(pos(homer, Some_Param), t5)), b(t, t5), ignore(t+5=t5)]).
axiom(not(some(Some_Param, '$kolem_Fn_373')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 5) :-
       some(Some_Param3, '$kolem_Fn_373').
 */
axiom(holds_at(pos(homer, Some_Param3), t5),
    [some(Some_Param3, '$kolem_Fn_373'), b(t, t5), ignore(t+5=t5)]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_373').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_373')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8133
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8133
% HoldsAt(Pos(Jumbo,position),5) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(jumbo, Position), 5), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_374')) :-
       (   not(holds_at(pos(jumbo, Some_Param), 5))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_374')),
    [not(holds_at(pos(jumbo, Some_Param), t5)), b(t, t5), ignore(t+5=t5)]).
axiom(not(some(Some_Param, '$kolem_Fn_374')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(jumbo, Some_Param3), 5) :-
       some(Some_Param3, '$kolem_Fn_374').
 */
axiom(holds_at(pos(jumbo, Some_Param3), t5),
    [some(Some_Param3, '$kolem_Fn_374'), b(t, t5), ignore(t+5=t5)]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_374').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_374')]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8135
% [animal,time]
 % !HoldsAt(Mounted(Homer,animal),time).
 %  not(holds_at(mounted(homer,Animal),Time)).
axiom(not(holds_at(mounted(homer, Mounted_Ret), Time2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8137
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),5).
holds_at(posDeterminingFluent(Human,1),5).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8138
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),5).
 %  not(holds_at(doneBy(Event,Animal),5)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), t5)),
    [b(t, t5), ignore(t+5=t5)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8140
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,4),0).
%;Happens(Move(Jumbo,3),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Move(Homer,4),1).
%;Happens(Move(Jumbo,1),1).
%;Happens(Move(Jumbo,3),2).
%;Happens(Mount(Homer,Jumbo),2).
%;Happens(Move(Jumbo,4),3).
%;!Happens(Move(Homer,2),3).
%;Happens(Move(Jumbo,7),4).
%;!Happens(Mount(Homer,Jumbo),3).
%;!Happens(Mount(Homer,Jumbo),4).
%;[position] !Happens(Move(Homer,position),4).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8155
% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8156
==> range(time,0,5).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8157
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8158
==> range(offset,0,0).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8160
==> completion(happens).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8188
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8189
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8191
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8194
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8195
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8196
==> t(elephant,jumbo).

% horse Silver
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8197
==> t(horse,silver).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8198
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8199
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8200
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8201
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8202
% Species(Silver)=HorseSpecies.
species(silver,horseSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8203
% Adult(Silver).
adult(silver).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8205
% {position}


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8206
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).

 /*   exists([Position],
              (not(holds_at(pos(homer, Position), 0)), holds_at(pos(jumbo, Position), 0), holds_at(pos(homer, Position), 1), not(holds_at(pos(jumbo, Position), 1)))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_375')) :-
       (   holds_at(pos(homer, Some_Param), 0)
       ;   not(holds_at(pos(jumbo, Some_Param), 0))
       ;   not(holds_at(pos(homer, Some_Param), 1))
       ;   holds_at(pos(jumbo, Some_Param), 1)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8209
axiom(not(some(Some_Param, '$kolem_Fn_375')),
    [holds_at(pos(homer, Some_Param), t)]).
axiom(not(some(Some_Param, '$kolem_Fn_375')),
    [not(holds_at(pos(jumbo, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_375')),
   
    [ not(holds_at(pos(homer, Some_Param), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(not(some(Some_Param, '$kolem_Fn_375')),
    [holds_at(pos(jumbo, Some_Param), start), b(t, start), ignore(t+1=start)]).

 /*  not(holds_at(pos(homer, Some_Param3), 0)) :-
       some(Some_Param3, '$kolem_Fn_375').
 */
axiom(not(holds_at(pos(homer, Some_Param3), t)),
    [some(Some_Param3, '$kolem_Fn_375')]).

 /*  holds_at(pos(jumbo, Some_Param4), 0) :-
       some(Some_Param4, '$kolem_Fn_375').
 */
axiom(holds_at(pos(jumbo, Some_Param4), t),
    [some(Some_Param4, '$kolem_Fn_375')]).

 /*  holds_at(pos(homer, Some_Param5), 1) :-
       some(Some_Param5, '$kolem_Fn_375').
 */
axiom(holds_at(pos(homer, Some_Param5), start),
    [some(Some_Param5, '$kolem_Fn_375'), b(t, start), ignore(t+1=start)]).

 /*  not(holds_at(pos(jumbo, Some_Param6), 1)) :-
       some(Some_Param6, '$kolem_Fn_375').
 */
axiom(not(holds_at(pos(jumbo, Some_Param6), start)),
    [some(Some_Param6, '$kolem_Fn_375'), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8210
% HoldsAt(Mounted(Homer,Silver),0).
axiom(initially(mounted(homer, silver)),
    []).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8212
% option manualrelease on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8213
:- set_ec_option(manualrelease, on).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8213
% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
 %  not(releasedAt(mounted(Human,Animal),0)).
axiom(not(releasedAt(mounted(Mounted_Param, Mounted_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8214
% [gate]
 % !ReleasedAt(Opened(gate),0).
 %  not(releasedAt(opened(Gate),0)).
axiom(not(releasedAt(opened(Opened_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8215
% [position]
 % ReleasedAt(Pos(Homer,position),0).
releasedAt(pos(homer,Position),0).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8216
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
 %  not(releasedAt(pos(jumbo,Position),0)).
axiom(not(releasedAt(pos(jumbo, Pos_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8217
% [position]
 % !ReleasedAt(Pos(Silver,position),0).
 %  not(releasedAt(pos(silver,Position),0)).
axiom(not(releasedAt(pos(silver, Pos_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8219
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8220
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
 %  not(holds_at(doneBy(Event,Animal),1)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), start)),
    [b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8222
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,3),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(ThrowOff(Silver,Homer),0).
%;HoldsAt(PosDeterminingFluent(Homer,2),0).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8230
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8231
==> range(time,0,1).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8232
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8233
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8261
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8262
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8264
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8267
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8268
==> t(human,homer).

% dog Snoopy
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8269
==> t(dog,snoopy).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8270
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8271
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8272
% Species(Snoopy)=DogSpecies.
species(snoopy,dogSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8273
% Adult(Snoopy).
adult(snoopy).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8275
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8276
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8276
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 0), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_376')) :-
       (   not(holds_at(pos(homer, Some_Param), 0))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_376')),
    [not(holds_at(pos(homer, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_376')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_376').
 */
axiom(holds_at(pos(homer, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_376')]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_376').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_376')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8277
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8277
% HoldsAt(Pos(Snoopy,position),0) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(snoopy, Position), 0), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_377')) :-
       (   not(holds_at(pos(snoopy, Some_Param), 0))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_377')),
    [not(holds_at(pos(snoopy, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_377')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(snoopy, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_377').
 */
axiom(holds_at(pos(snoopy, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_377')]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_377').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_377')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8279
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8279
% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 2), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_378')) :-
       (   not(holds_at(pos(homer, Some_Param), 2))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_378')),
    [not(holds_at(pos(homer, Some_Param), t2)), b(t, t2), ignore(t+2=t2)]).
axiom(not(some(Some_Param, '$kolem_Fn_378')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 2) :-
       some(Some_Param3, '$kolem_Fn_378').
 */
axiom(holds_at(pos(homer, Some_Param3), t2),
    [some(Some_Param3, '$kolem_Fn_378'), b(t, t2), ignore(t+2=t2)]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_378').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_378')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8280
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8280
% HoldsAt(Pos(Snoopy,position),2) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(snoopy, Position), 2), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_379')) :-
       (   not(holds_at(pos(snoopy, Some_Param), 2))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_379')),
    [not(holds_at(pos(snoopy, Some_Param), t2)), b(t, t2), ignore(t+2=t2)]).
axiom(not(some(Some_Param, '$kolem_Fn_379')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(snoopy, Some_Param3), 2) :-
       some(Some_Param3, '$kolem_Fn_379').
 */
axiom(holds_at(pos(snoopy, Some_Param3), t2),
    [some(Some_Param3, '$kolem_Fn_379'), b(t, t2), ignore(t+2=t2)]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_379').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_379')]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8282
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
holds_at(posDeterminingFluent(Human,1),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8283
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
 %  not(holds_at(doneBy(Event,Animal),2)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), t2)),
    [b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8285
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8286
==> range(time,0,2).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8287
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8288
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooWorld.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8316
% sort position: integer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8317
==> subsort(position,integer).

% sort location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8318
==> sort(location).

% sort cage: location
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8319
==> subsort(cage,location).

% sort gate
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8320
==> sort(gate).

% sort animal
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8321
==> sort(animal).

% sort elephant: animal
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8322
==> subsort(elephant,animal).

% sort horse: animal
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8323
==> subsort(horse,animal).

% sort dog: animal
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8324
==> subsort(dog,animal).

% sort human: animal
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8325
==> subsort(human,animal).

% sort species
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8326
==> sort(species).

% function Loc(position): location
 %  functional_predicate(loc(position,location)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8328
==> mpred_prop(loc(position,location),functional_predicate).
==> meta_argtypes(loc(position,location)).
resultIsa(loc,location).

% function Side1(gate): position
 %  functional_predicate(side1(gate,position)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8329
==> mpred_prop(side1(gate,position),functional_predicate).
==> meta_argtypes(side1(gate,position)).
resultIsa(side1,position).

% function Side2(gate): position
 %  functional_predicate(side2(gate,position)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8330
==> mpred_prop(side2(gate,position),functional_predicate).
==> meta_argtypes(side2(gate,position)).
resultIsa(side2,position).

% function Species(animal): species
 %  functional_predicate(species(animal,species)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8331
==> mpred_prop(species(animal,species),functional_predicate).
==> meta_argtypes(species(animal,species)).
resultIsa(species,species).

% predicate Accessible(position,position,time)
 %  predicate(accessible(position,position,time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8333
==> mpred_prop(accessible(position,position,time),predicate).
==> meta_argtypes(accessible(position,position,time)).

% predicate Adult(animal)
 %  predicate(adult(animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8334
==> mpred_prop(adult(animal),predicate).
==> meta_argtypes(adult(animal)).

% predicate Large(animal)
 %  predicate(large(animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8335
==> mpred_prop(large(animal),predicate).
==> meta_argtypes(large(animal)).

% predicate LargeSpecies(species)
 %  predicate(largeSpecies(species)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8336
==> mpred_prop(largeSpecies(species),predicate).
==> meta_argtypes(largeSpecies(species)).

% predicate Neighbor(position,position)
 %  predicate(neighbor(position,position)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8337
==> mpred_prop(neighbor(position,position),predicate).
==> meta_argtypes(neighbor(position,position)).

% predicate Sides(position,position,gate)
 %  predicate(sides(position,position,gate)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8338
==> mpred_prop(sides(position,position,gate),predicate).
==> meta_argtypes(sides(position,position,gate)).

% event Close(human,gate)
 %  event(close(human,gate)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8340
==> mpred_prop(close(human,gate),event).
==> meta_argtypes(close(human,gate)).

% event GetOff(human,animal)
 %  event(getOff(human,animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8341
==> mpred_prop(getOff(human,animal),event).
==> meta_argtypes(getOff(human,animal)).

% event Mount(human,animal)
 %  event(mount(human,animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8342
==> mpred_prop(mount(human,animal),event).
==> meta_argtypes(mount(human,animal)).

% event Move(animal,position)
 %  event(move(animal,position)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8343
==> mpred_prop(move(animal,position),event).
==> meta_argtypes(move(animal,position)).

% event Open(human,gate)
 %  event(open(human,gate)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8344
==> mpred_prop(open(human,gate),event).
==> meta_argtypes(open(human,gate)).

% event ThrowOff(animal,human)
 %  event(throwOff(animal,human)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8345
==> mpred_prop(throwOff(animal,human),event).
==> meta_argtypes(throwOff(animal,human)).

% fluent AbnormalEncroachment(human)
 %  fluent(abnormalEncroachment(human)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8347
==> mpred_prop(abnormalEncroachment(human),fluent).
==> meta_argtypes(abnormalEncroachment(human)).

% noninertial AbnormalEncroachment
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8348
==> noninertial(abnormalEncroachment).

% fluent DoneBy(event,animal)
 %  fluent(doneBy(event,animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8349
==> mpred_prop(doneBy(event,animal),fluent).
==> meta_argtypes(doneBy(event,animal)).

% noninertial DoneBy
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8350
==> noninertial(doneBy).

% fluent Mounted(human,animal)
 %  fluent(mounted(human,animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8351
==> mpred_prop(mounted(human,animal),fluent).
==> meta_argtypes(mounted(human,animal)).

% fluent MountFails(human)
 %  fluent(mountFails(human)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8352
==> mpred_prop(mountFails(human),fluent).
==> meta_argtypes(mountFails(human)).

% noninertial MountFails
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8353
==> noninertial(mountFails).

% fluent Moves(animal)
 %  fluent(moves(animal)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8354
==> mpred_prop(moves(animal),fluent).
==> meta_argtypes(moves(animal)).

% noninertial Moves
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8355
==> noninertial(moves).

% fluent Opened(gate)
 %  fluent(opened(gate)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8356
==> mpred_prop(opened(gate),fluent).
==> meta_argtypes(opened(gate)).

% fluent Pos(animal,position)
 %  fluent(pos(animal,position)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8357
==> mpred_prop(pos(animal,position),fluent).
==> meta_argtypes(pos(animal,position)).

% fluent PosDeterminingFluent(human,position)
 %  fluent(posDeterminingFluent(human,position)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8358
==> mpred_prop(posDeterminingFluent(human,position),fluent).
==> meta_argtypes(posDeterminingFluent(human,position)).

% noninertial PosDeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8359
==> noninertial(posDeterminingFluent).

% fluent ThrowOffFails(animal,human)
 %  fluent(throwOffFails(animal,human)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8360
==> mpred_prop(throwOffFails(animal,human),fluent).
==> meta_argtypes(throwOffFails(animal,human)).

% noninertial ThrowOffFails
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8361
==> noninertial(throwOffFails).

% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8363
==> t(species,humanSpecies).
==> t(species,elephantSpecies).
==> t(species,horseSpecies).
==> t(species,dogSpecies).

% location Outside
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8364
==> t(location,outside).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8365
% LargeSpecies(HumanSpecies).
largeSpecies(humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8366
% LargeSpecies(ElephantSpecies).
largeSpecies(elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8367
% LargeSpecies(HorseSpecies).
largeSpecies(horseSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8368
% !LargeSpecies(DogSpecies).
 %  not(largeSpecies(dogSpecies)).
axiom(not(largeSpecies(dogSpecies)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8370
% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).

 /*  holds_at(doneBy(Event, Animal), Time) <->
       happens(Event, Time),
       (   exists([Gate], Event=close(Animal, Gate))
       ;   exists([Animal1], Event=getOff(Animal, Animal1))
       ;   exists([Animal15],
                  Event=mount(Animal, Animal15))
       ;   exists([Position], Event=move(Animal, Position))
       ;   exists([Gate7], Event=open(Animal, Gate7))
       ;   exists([Human1], Event=throwOff(Animal, Human1))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8378
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ equals(Event, close(Animal, Gate)),
      happens(Event, Time)
    ]).
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ equals(Event, getOff(Animal, Animal1)),
      happens(Event, Time)
    ]).
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ equals(Event, mount(Animal, Animal15)),
      happens(Event, Time)
    ]).
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ equals(Event, move(Animal, Position)),
      happens(Event, Time)
    ]).
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ equals(Event, open(Animal, Gate7)),
      happens(Event, Time)
    ]).
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ equals(Event, throwOff(Animal, Human1)),
      happens(Event, Time)
    ]).

 /*   if(holds_at(doneBy(Event, Animal), Time),
          (happens(Event, Time), (exists([Gate], Event=close(Animal, Gate));exists([Animal1], Event=getOff(Animal, Animal1));exists([Animal15], Event=mount(Animal, Animal15));exists([Position], Event=move(Animal, Position));exists([Gate7], Event=open(Animal, Gate7));exists([Human1], Event=throwOff(Animal, Human1))))).
 */

 /*  not(holds_at(doneBy(DoneBy_Param, Close_Param), Time9)) :-
       (   not(happens(DoneBy_Param, Time9))
       ;   not(equals(DoneBy_Param,
                      close(Close_Param, Close_Ret))),
           not(equals(DoneBy_Param,
                      getOff(Close_Param, GetOff_Ret))),
           not(equals(DoneBy_Param,
                      mount(Close_Param, Mount_Ret))),
           not(equals(DoneBy_Param, move(Close_Param, Move_Ret))),
           not(equals(DoneBy_Param, open(Close_Param, Open_Ret))),
           not(equals(DoneBy_Param,
                      throwOff(Close_Param, ThrowOff_Ret)))
       ).
 */
axiom(not(holds_at(doneBy(DoneBy_Param, Close_Param), Time9)),
    [not(happens(DoneBy_Param, Time9))]).
axiom(not(holds_at(doneBy(DoneBy_Param, Close_Param), Time9)),
   
    [ not(equals(DoneBy_Param, close(Close_Param, Close_Ret))),
      not(equals(DoneBy_Param,
                 getOff(Close_Param, GetOff_Ret))),
      not(equals(DoneBy_Param, mount(Close_Param, Mount_Ret))),
      not(equals(DoneBy_Param, move(Close_Param, Move_Ret))),
      not(equals(DoneBy_Param, open(Close_Param, Open_Ret))),
      not(equals(DoneBy_Param,
                 throwOff(Close_Param, ThrowOff_Ret)))
    ]).

 /*  happens(Happens_Param, Maptime) :-
       holds_at(doneBy(Happens_Param, DoneBy_Ret), Maptime).
 */
axiom(happens(Happens_Param, Maptime),
    [holds_at(doneBy(Happens_Param, DoneBy_Ret), Maptime)]).

 /*  equals(Equals_Param, close(Close_Param23, Close_Ret24)) :-
       ( not(equals(Equals_Param,
                    getOff(Close_Param23, GetOff_Ret25))),
         not(equals(Equals_Param,
                    mount(Close_Param23, Mount_Ret26))),
         not(equals(Equals_Param,
                    move(Close_Param23, Move_Ret27))),
         not(equals(Equals_Param,
                    open(Close_Param23, Open_Ret28))),
         not(equals(Equals_Param,
                    throwOff(Close_Param23, ThrowOff_Ret29)))
       ),
       holds_at(doneBy(Equals_Param, Close_Param23), Time21).
 */
axiom(equals(Equals_Param, close(Close_Param23, Close_Ret24)),
   
    [ not(equals(Equals_Param,
                 getOff(Close_Param23, GetOff_Ret25))),
      not(equals(Equals_Param,
                 mount(Close_Param23, Mount_Ret26))),
      not(equals(Equals_Param,
                 move(Close_Param23, Move_Ret27))),
      not(equals(Equals_Param,
                 open(Close_Param23, Open_Ret28))),
      not(equals(Equals_Param,
                 throwOff(Close_Param23, ThrowOff_Ret29))),
      holds_at(doneBy(Equals_Param, Close_Param23), Time21)
    ]).

 /*  equals(Equals_Param31, getOff(GetOff_Param, GetOff_Ret33)) :-
       ( not(equals(Equals_Param31,
                    mount(GetOff_Param, Mount_Ret34))),
         not(equals(Equals_Param31,
                    move(GetOff_Param, Move_Ret35))),
         not(equals(Equals_Param31,
                    open(GetOff_Param, Open_Ret36))),
         not(equals(Equals_Param31,
                    throwOff(GetOff_Param, ThrowOff_Ret37)))
       ),
       not(equals(Equals_Param31,
                  close(GetOff_Param, Close_Ret38))),
       holds_at(doneBy(Equals_Param31, GetOff_Param), Time30).
 */
axiom(equals(Equals_Param31, getOff(GetOff_Param, GetOff_Ret33)),
   
    [ not(equals(Equals_Param31,
                 mount(GetOff_Param, Mount_Ret34))),
      not(equals(Equals_Param31,
                 move(GetOff_Param, Move_Ret35))),
      not(equals(Equals_Param31,
                 open(GetOff_Param, Open_Ret36))),
      not(equals(Equals_Param31,
                 throwOff(GetOff_Param, ThrowOff_Ret37))),
      not(equals(Equals_Param31,
                 close(GetOff_Param, Close_Ret38))),
      holds_at(doneBy(Equals_Param31, GetOff_Param), Time30)
    ]).

 /*  equals(Equals_Param40, mount(Mount_Param, Mount_Ret42)) :-
       ( not(equals(Equals_Param40,
                    move(Mount_Param, Move_Ret43))),
         not(equals(Equals_Param40,
                    open(Mount_Param, Open_Ret44))),
         not(equals(Equals_Param40,
                    throwOff(Mount_Param, ThrowOff_Ret45)))
       ),
       not(equals(Equals_Param40,
                  getOff(Mount_Param, GetOff_Ret46))),
       not(equals(Equals_Param40,
                  close(Mount_Param, Close_Ret47))),
       holds_at(doneBy(Equals_Param40, Mount_Param), Time39).
 */
axiom(equals(Equals_Param40, mount(Mount_Param, Mount_Ret42)),
   
    [ not(equals(Equals_Param40,
                 move(Mount_Param, Move_Ret43))),
      not(equals(Equals_Param40,
                 open(Mount_Param, Open_Ret44))),
      not(equals(Equals_Param40,
                 throwOff(Mount_Param, ThrowOff_Ret45))),
      not(equals(Equals_Param40,
                 getOff(Mount_Param, GetOff_Ret46))),
      not(equals(Equals_Param40,
                 close(Mount_Param, Close_Ret47))),
      holds_at(doneBy(Equals_Param40, Mount_Param), Time39)
    ]).

 /*  equals(Equals_Param49, move(Move_Param, Move_Ret51)) :-
       ( not(equals(Equals_Param49, open(Move_Param, Open_Ret52))),
         not(equals(Equals_Param49,
                    throwOff(Move_Param, ThrowOff_Ret53)))
       ),
       not(equals(Equals_Param49, mount(Move_Param, Mount_Ret54))),
       not(equals(Equals_Param49,
                  getOff(Move_Param, GetOff_Ret55))),
       not(equals(Equals_Param49, close(Move_Param, Close_Ret56))),
       holds_at(doneBy(Equals_Param49, Move_Param), Time48).
 */
axiom(equals(Equals_Param49, move(Move_Param, Move_Ret51)),
   
    [ not(equals(Equals_Param49, open(Move_Param, Open_Ret52))),
      not(equals(Equals_Param49,
                 throwOff(Move_Param, ThrowOff_Ret53))),
      not(equals(Equals_Param49,
                 mount(Move_Param, Mount_Ret54))),
      not(equals(Equals_Param49,
                 getOff(Move_Param, GetOff_Ret55))),
      not(equals(Equals_Param49,
                 close(Move_Param, Close_Ret56))),
      holds_at(doneBy(Equals_Param49, Move_Param), Time48)
    ]).

 /*  equals(Equals_Param58, open(Open_Param, Open_Ret60)) :-
       not(equals(Equals_Param58,
                  throwOff(Open_Param, ThrowOff_Ret61))),
       not(equals(Equals_Param58, move(Open_Param, Move_Ret62))),
       not(equals(Equals_Param58, mount(Open_Param, Mount_Ret63))),
       not(equals(Equals_Param58,
                  getOff(Open_Param, GetOff_Ret64))),
       not(equals(Equals_Param58, close(Open_Param, Close_Ret65))),
       holds_at(doneBy(Equals_Param58, Open_Param), Time57).
 */
axiom(equals(Equals_Param58, open(Open_Param, Open_Ret60)),
   
    [ not(equals(Equals_Param58,
                 throwOff(Open_Param, ThrowOff_Ret61))),
      not(equals(Equals_Param58, move(Open_Param, Move_Ret62))),
      not(equals(Equals_Param58,
                 mount(Open_Param, Mount_Ret63))),
      not(equals(Equals_Param58,
                 getOff(Open_Param, GetOff_Ret64))),
      not(equals(Equals_Param58,
                 close(Open_Param, Close_Ret65))),
      holds_at(doneBy(Equals_Param58, Open_Param), Time57)
    ]).

 /*  equals(Equals_Param67, throwOff(ThrowOff_Param, ThrowOff_Ret69)) :-
       not(equals(Equals_Param67,
                  open(ThrowOff_Param, Open_Ret70))),
       not(equals(Equals_Param67,
                  move(ThrowOff_Param, Move_Ret71))),
       not(equals(Equals_Param67,
                  mount(ThrowOff_Param, Mount_Ret72))),
       not(equals(Equals_Param67,
                  getOff(ThrowOff_Param, GetOff_Ret73))),
       not(equals(Equals_Param67,
                  close(ThrowOff_Param, Close_Ret74))),
       holds_at(doneBy(Equals_Param67, ThrowOff_Param), Time66).
 */
axiom(equals(Equals_Param67, throwOff(ThrowOff_Param, ThrowOff_Ret69)),
   
    [ not(equals(Equals_Param67,
                 open(ThrowOff_Param, Open_Ret70))),
      not(equals(Equals_Param67,
                 move(ThrowOff_Param, Move_Ret71))),
      not(equals(Equals_Param67,
                 mount(ThrowOff_Param, Mount_Ret72))),
      not(equals(Equals_Param67,
                 getOff(ThrowOff_Param, GetOff_Ret73))),
      not(equals(Equals_Param67,
                 close(ThrowOff_Param, Close_Ret74))),
      holds_at(doneBy(Equals_Param67, ThrowOff_Param), Time66)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8380
% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8383
axiom(Event1=Event2,
   
    [ holds_at(doneBy(Event1, Animal), Time),
      holds_at(doneBy(Event2, Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8385
% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).

 /*  large(Animal) <->
       adult(Animal),
       largeSpecies(species(Animal)).
 */
axiom(large(Animal),
    [adult(Animal), largeSpecies(species(Animal))]).

 /*   if(large(Animal),
          (adult(Animal), largeSpecies(species(Animal)))).
 */

 /*  not(large(Large_Ret)) :-
       (   not(adult(Large_Ret))
       ;   not(largeSpecies(species(Large_Ret)))
       ).
 */
axiom(not(large(Large_Ret)),
    [not(adult(Large_Ret))]).
axiom(not(large(Large_Ret)),
    [not(largeSpecies(species(Large_Ret)))]).

 /*  adult(Adult_Ret) :-
       large(Adult_Ret).
 */
axiom(adult(Adult_Ret),
    [large(Adult_Ret)]).

 /*  largeSpecies(species(Species_Ret)) :-
       large(Species_Ret).
 */
axiom(largeSpecies(species(Species_Ret)),
    [large(Species_Ret)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8387
% [position]
 
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8387
% {position1} % position1!=% position & Neighbor(position,position1).

 /*   exists([Position1],
              (Position1\=Position, neighbor(Position, Position1))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_392'(Neighbor_Param))) :-
       (   not({dif(Some_Param, Neighbor_Param)})
       ;   not(neighbor(Neighbor_Param, Some_Param))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_392'(Neighbor_Param))),
    [not({dif(Some_Param, Neighbor_Param)})]).
axiom(not(some(Some_Param, '$kolem_Fn_392'(Neighbor_Param))),
    [not(neighbor(Neighbor_Param, Some_Param))]).

 /*  { dif(Dif_Param, Dif_Ret)
   } :-
       some(Dif_Param, '$kolem_Fn_392'(Dif_Ret)).
 */
axiom({ dif(Dif_Param, Dif_Ret)
},
    [some(Dif_Param, '$kolem_Fn_392'(Dif_Ret))]).

 /*  neighbor(Neighbor_Param7, Some_Param8) :-
       some(Some_Param8, '$kolem_Fn_392'(Neighbor_Param7)).
 */
axiom(neighbor(Neighbor_Param7, Some_Param8),
    [some(Some_Param8, '$kolem_Fn_392'(Neighbor_Param7))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8389
% [position]
 % !Neighbor(position,position).
 %  not(neighbor(Position,Position)).
axiom(not(neighbor(Neighbor_Param, Neighbor_Param)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8391
% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8393
axiom(neighbor(Position2, Position1),
    [neighbor(Position1, Position2)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8395
% [cage]
 % cage!=% Outside.
diff(Cage,outside).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8397
% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).

 /*  sides(Position1, Position2, Gate) <->
       (   side1(Gate)=Position1,
           side2(Gate)=Position2
       ;   side2(Gate)=Position1,
           side1(Gate)=Position2
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8402
axiom(sides(Position1, Position2, Gate),
   
    [ equals(side1(Gate), Position1),
      equals(side2(Gate), Position2)
    ]).
axiom(sides(Position1, Position2, Gate),
   
    [ equals(side2(Gate), Position1),
      equals(side1(Gate), Position2)
    ]).

 /*   if(sides(Position1, Position2, Gate),
          (side1(Gate)=Position1, side2(Gate)=Position2;side2(Gate)=Position1, side1(Gate)=Position2)).
 */

 /*  not(sides(Sides_Param, Equals_Ret, Sides_Ret)) :-
       (   not(equals(side1(Sides_Ret), Sides_Param))
       ;   not(equals(side2(Sides_Ret), Equals_Ret))
       ),
       (   not(equals(side2(Sides_Ret), Sides_Param))
       ;   not(equals(side1(Sides_Ret), Equals_Ret))
       ).
 */
axiom(not(sides(Sides_Param, Equals_Ret, Sides_Ret)),
   
    [ not(equals(side2(Sides_Ret), Sides_Param)),
      not(equals(side1(Sides_Ret), Sides_Param))
    ]).
axiom(not(sides(Sides_Param, Equals_Ret, Sides_Ret)),
   
    [ not(equals(side1(Sides_Ret), Equals_Ret)),
      not(equals(side1(Sides_Ret), Sides_Param))
    ]).
axiom(not(sides(Sides_Param, Equals_Ret, Sides_Ret)),
   
    [ not(equals(side2(Sides_Ret), Sides_Param)),
      not(equals(side2(Sides_Ret), Equals_Ret))
    ]).
axiom(not(sides(Sides_Param, Equals_Ret, Sides_Ret)),
   
    [ not(equals(side1(Sides_Ret), Equals_Ret)),
      not(equals(side2(Sides_Ret), Equals_Ret))
    ]).

 /*  equals(side1(Side1_Ret), Sides_Param6) :-
       (   not(equals(side2(Side1_Ret), Sides_Param6))
       ;   not(equals(side1(Side1_Ret), Equals_Ret8))
       ),
       sides(Sides_Param6, Equals_Ret8, Side1_Ret).
 */
axiom(equals(side1(Side1_Ret), Sides_Param6),
   
    [ not(equals(side2(Side1_Ret), Sides_Param6)),
      sides(Sides_Param6, Equals_Ret8, Side1_Ret)
    ]).
axiom(equals(side1(Side1_Ret), Sides_Param6),
   
    [ not(equals(side1(Side1_Ret), Equals_Ret8)),
      sides(Sides_Param6, Equals_Ret8, Side1_Ret)
    ]).

 /*  equals(side2(Side2_Ret), Equals_Ret10) :-
       (   not(equals(side2(Side2_Ret), Sides_Param9))
       ;   not(equals(side1(Side2_Ret), Equals_Ret10))
       ),
       sides(Sides_Param9, Equals_Ret10, Side2_Ret).
 */
axiom(equals(side2(Side2_Ret), Equals_Ret10),
   
    [ not(equals(side2(Side2_Ret), Sides_Param9)),
      sides(Sides_Param9, Equals_Ret10, Side2_Ret)
    ]).
axiom(equals(side2(Side2_Ret), Equals_Ret10),
   
    [ not(equals(side1(Side2_Ret), Equals_Ret10)),
      sides(Sides_Param9, Equals_Ret10, Side2_Ret)
    ]).

 /*  equals(side2(Side2_Ret13), Sides_Param12) :-
       (   not(equals(side1(Side2_Ret13), Sides_Param12))
       ;   not(equals(side2(Side2_Ret13), Equals_Ret14))
       ),
       sides(Sides_Param12, Equals_Ret14, Side2_Ret13).
 */
axiom(equals(side2(Side2_Ret13), Sides_Param12),
   
    [ not(equals(side1(Side2_Ret13), Sides_Param12)),
      sides(Sides_Param12, Equals_Ret14, Side2_Ret13)
    ]).
axiom(equals(side2(Side2_Ret13), Sides_Param12),
   
    [ not(equals(side2(Side2_Ret13), Equals_Ret14)),
      sides(Sides_Param12, Equals_Ret14, Side2_Ret13)
    ]).

 /*  equals(side1(Side1_Ret17), Equals_Ret16) :-
       (   not(equals(side1(Side1_Ret17), Sides_Param15))
       ;   not(equals(side2(Side1_Ret17), Equals_Ret16))
       ),
       sides(Sides_Param15, Equals_Ret16, Side1_Ret17).
 */
axiom(equals(side1(Side1_Ret17), Equals_Ret16),
   
    [ not(equals(side1(Side1_Ret17), Sides_Param15)),
      sides(Sides_Param15, Equals_Ret16, Side1_Ret17)
    ]).
axiom(equals(side1(Side1_Ret17), Equals_Ret16),
   
    [ not(equals(side2(Side1_Ret17), Equals_Ret16)),
      sides(Sides_Param15, Equals_Ret16, Side1_Ret17)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8404
% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
diff(loc(side1(Gate)),loc(side2(Gate))).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8406
% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8409
axiom(Gate1=Gate2,
   
    [ sides(Position1, Position2, Gate1),
      sides(Position1, Position2, Gate2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8411
% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8413
axiom(neighbor(Position1, Position2),
    [sides(Position1, Position2, Gate)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8415
% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8418
% {gate}%  Sides(position1,position2,gate).

 /*   exists([Gate],
             if((loc(Position1)\=loc(Position2), neighbor(Position1, Position2)),
                sides(Position1, Position2, Gate))).
 */

 /*  sides(Sides_Param, Loc_Ret, Some_Param) :-
       ( { dif(loc(Sides_Param), loc(Loc_Ret))
         },
         neighbor(Sides_Param, Loc_Ret)
       ),
       some(Some_Param, '$kolem_Fn_393'(Sides_Param, Loc_Ret)).
 */
axiom(sides(Sides_Param, Loc_Ret, Some_Param),
   
    [ { dif(loc(Sides_Param), loc(Loc_Ret))
      },
      neighbor(Sides_Param, Loc_Ret),
      some(Some_Param, '$kolem_Fn_393'(Sides_Param, Loc_Ret))
    ]).

 /*  not({dif(loc(Neighbor_Param), loc(Loc_Ret9))}) :-
       neighbor(Neighbor_Param, Loc_Ret9),
       not(sides(Neighbor_Param, Loc_Ret9, Some_Param8)),
       some(Some_Param8, '$kolem_Fn_393'(Neighbor_Param, Loc_Ret9)).
 */
axiom(not({dif(loc(Neighbor_Param), loc(Loc_Ret9))}),
   
    [ neighbor(Neighbor_Param, Loc_Ret9),
      not(sides(Neighbor_Param, Loc_Ret9, Some_Param8)),
      some(Some_Param8,
           '$kolem_Fn_393'(Neighbor_Param, Loc_Ret9))
    ]).

 /*  not(neighbor(Neighbor_Param10, Neighbor_Ret)) :-
       { dif(loc(Neighbor_Param10), loc(Neighbor_Ret))
       },
       not(sides(Neighbor_Param10, Neighbor_Ret, Some_Param11)),
       some(Some_Param11,
            '$kolem_Fn_393'(Neighbor_Param10, Neighbor_Ret)).
 */
axiom(not(neighbor(Neighbor_Param10, Neighbor_Ret)),
   
    [ { dif(loc(Neighbor_Param10), loc(Neighbor_Ret))
      },
      not(sides(Neighbor_Param10, Neighbor_Ret, Some_Param11)),
      some(Some_Param11,
           '$kolem_Fn_393'(Neighbor_Param10, Neighbor_Ret))
    ]).

 /*  not(some(Some_Param13, '$kolem_Fn_393'(Fn_393_Param, Fn_393_Ret))) :-
       not(sides(Fn_393_Param, Fn_393_Ret, Some_Param13)),
       { dif(loc(Fn_393_Param), loc(Fn_393_Ret))
       },
       neighbor(Fn_393_Param, Fn_393_Ret).
 */
axiom(not(some(Some_Param13, '$kolem_Fn_393'(Fn_393_Param, Fn_393_Ret))),
   
    [ not(sides(Fn_393_Param, Fn_393_Ret, Some_Param13)),
      { dif(loc(Fn_393_Param), loc(Fn_393_Ret))
      },
      neighbor(Fn_393_Param, Fn_393_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8420
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8423
axiom(Position1=Position2,
   
    [ holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8425
% [animal,time]
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8426
% {position} % HoldsAt(Pos(animal,position),time).

 /*  exists([Position],
          holds_at(pos(Animal,Position),Time)).
 */

 /*  holds_at(pos(Pos_Param, Some_Param), Time4) :-
       some(Some_Param, '$kolem_Fn_394'(Pos_Param, Time4)).
 */
axiom(holds_at(pos(Pos_Param, Some_Param), Time4),
    [some(Some_Param, '$kolem_Fn_394'(Pos_Param, Time4))]).

 /*  not(some(Some_Param8, '$kolem_Fn_394'(Fn_394_Param, Time7))) :-
       not(holds_at(pos(Fn_394_Param, Some_Param8), Time7)).
 */
axiom(not(some(Some_Param8, '$kolem_Fn_394'(Fn_394_Param, Time7))),
    [not(holds_at(pos(Fn_394_Param, Some_Param8), Time7))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8428
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).

 /*   if(({dif(Animal1, Animal2)}, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time)),
          (exists([Human],  (Human=Animal1, holds_at(mounted(Human, Animal2), Time)));exists([Human5],  (Human5=Animal2, holds_at(mounted(Human5, Animal1), Time))))).
 */

 /*  not({dif(Dif_Param, Pos_Param)}) :-
       ( large(Dif_Param),
         large(Pos_Param),
         holds_at(pos(Dif_Param, Pos_Ret), Time6),
         holds_at(pos(Pos_Param, Pos_Ret), Time6)
       ),
       (   not(equals(Equals_Param, Dif_Param))
       ;   not(holds_at(mounted(Equals_Param, Pos_Param), Time6))
       ),
       (   not(equals(Equals_Param10, Pos_Param))
       ;   not(holds_at(mounted(Equals_Param10, Dif_Param),
                        Time6))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8435
axiom(not({dif(Dif_Param, Pos_Param)}),
   
    [ not(equals(Equals_Param10, Pos_Param)),
      not(equals(Equals_Param, Dif_Param)),
      large(Dif_Param),
      large(Pos_Param),
      holds_at(pos(Dif_Param, Pos_Ret), Time6),
      holds_at(pos(Pos_Param, Pos_Ret), Time6)
    ]).
axiom(not({dif(Dif_Param, Pos_Param)}),
   
    [ not(holds_at(mounted(Equals_Param10, Dif_Param), Time6)),
      not(equals(Equals_Param, Dif_Param)),
      large(Dif_Param),
      large(Pos_Param),
      holds_at(pos(Dif_Param, Pos_Ret), Time6),
      holds_at(pos(Pos_Param, Pos_Ret), Time6)
    ]).
axiom(not({dif(Dif_Param, Pos_Param)}),
   
    [ not(equals(Equals_Param10, Pos_Param)),
      not(holds_at(mounted(Equals_Param, Pos_Param), Time6)),
      large(Dif_Param),
      large(Pos_Param),
      holds_at(pos(Dif_Param, Pos_Ret), Time6),
      holds_at(pos(Pos_Param, Pos_Ret), Time6)
    ]).
axiom(not({dif(Dif_Param, Pos_Param)}),
   
    [ not(holds_at(mounted(Equals_Param10, Dif_Param), Time6)),
      not(holds_at(mounted(Equals_Param, Pos_Param), Time6)),
      large(Dif_Param),
      large(Pos_Param),
      holds_at(pos(Dif_Param, Pos_Ret), Time6),
      holds_at(pos(Pos_Param, Pos_Ret), Time6)
    ]).

 /*  not(large(Pos_Param13)) :-
       ( large(Pos_Param14),
         holds_at(pos(Pos_Param13, Pos_Ret17), Time12),
         holds_at(pos(Pos_Param14, Pos_Ret17), Time12)
       ),
       { dif(Pos_Param13, Pos_Param14)
       },
       (   not(equals(Equals_Param15, Pos_Param13))
       ;   not(holds_at(mounted(Equals_Param15, Pos_Param14),
                        Time12))
       ),
       (   not(equals(Equals_Param16, Pos_Param14))
       ;   not(holds_at(mounted(Equals_Param16, Pos_Param13),
                        Time12))
       ).
 */
axiom(not(large(Pos_Param13)),
   
    [ not(equals(Equals_Param16, Pos_Param14)),
      not(equals(Equals_Param15, Pos_Param13)),
      large(Pos_Param14),
      holds_at(pos(Pos_Param13, Pos_Ret17), Time12),
      holds_at(pos(Pos_Param14, Pos_Ret17), Time12),
      { dif(Pos_Param13, Pos_Param14)
      }
    ]).
axiom(not(large(Pos_Param13)),
   
    [ not(holds_at(mounted(Equals_Param16, Pos_Param13),
                   Time12)),
      not(equals(Equals_Param15, Pos_Param13)),
      large(Pos_Param14),
      holds_at(pos(Pos_Param13, Pos_Ret17), Time12),
      holds_at(pos(Pos_Param14, Pos_Ret17), Time12),
      { dif(Pos_Param13, Pos_Param14)
      }
    ]).
axiom(not(large(Pos_Param13)),
   
    [ not(equals(Equals_Param16, Pos_Param14)),
      not(holds_at(mounted(Equals_Param15, Pos_Param14),
                   Time12)),
      large(Pos_Param14),
      holds_at(pos(Pos_Param13, Pos_Ret17), Time12),
      holds_at(pos(Pos_Param14, Pos_Ret17), Time12),
      { dif(Pos_Param13, Pos_Param14)
      }
    ]).
axiom(not(large(Pos_Param13)),
   
    [ not(holds_at(mounted(Equals_Param16, Pos_Param13),
                   Time12)),
      not(holds_at(mounted(Equals_Param15, Pos_Param14),
                   Time12)),
      large(Pos_Param14),
      holds_at(pos(Pos_Param13, Pos_Ret17), Time12),
      holds_at(pos(Pos_Param14, Pos_Ret17), Time12),
      { dif(Pos_Param13, Pos_Param14)
      }
    ]).

 /*  not(large(Pos_Param20)) :-
       ( holds_at(pos(Pos_Param19, Pos_Ret23), Time18),
         holds_at(pos(Pos_Param20, Pos_Ret23), Time18)
       ),
       large(Pos_Param19),
       { dif(Pos_Param19, Pos_Param20)
       },
       (   not(equals(Equals_Param21, Pos_Param19))
       ;   not(holds_at(mounted(Equals_Param21, Pos_Param20),
                        Time18))
       ),
       (   not(equals(Equals_Param22, Pos_Param20))
       ;   not(holds_at(mounted(Equals_Param22, Pos_Param19),
                        Time18))
       ).
 */
axiom(not(large(Pos_Param20)),
   
    [ not(equals(Equals_Param22, Pos_Param20)),
      not(equals(Equals_Param21, Pos_Param19)),
      holds_at(pos(Pos_Param19, Pos_Ret23), Time18),
      holds_at(pos(Pos_Param20, Pos_Ret23), Time18),
      large(Pos_Param19),
      { dif(Pos_Param19, Pos_Param20)
      }
    ]).
axiom(not(large(Pos_Param20)),
   
    [ not(holds_at(mounted(Equals_Param22, Pos_Param19),
                   Time18)),
      not(equals(Equals_Param21, Pos_Param19)),
      holds_at(pos(Pos_Param19, Pos_Ret23), Time18),
      holds_at(pos(Pos_Param20, Pos_Ret23), Time18),
      large(Pos_Param19),
      { dif(Pos_Param19, Pos_Param20)
      }
    ]).
axiom(not(large(Pos_Param20)),
   
    [ not(equals(Equals_Param22, Pos_Param20)),
      not(holds_at(mounted(Equals_Param21, Pos_Param20),
                   Time18)),
      holds_at(pos(Pos_Param19, Pos_Ret23), Time18),
      holds_at(pos(Pos_Param20, Pos_Ret23), Time18),
      large(Pos_Param19),
      { dif(Pos_Param19, Pos_Param20)
      }
    ]).
axiom(not(large(Pos_Param20)),
   
    [ not(holds_at(mounted(Equals_Param22, Pos_Param19),
                   Time18)),
      not(holds_at(mounted(Equals_Param21, Pos_Param20),
                   Time18)),
      holds_at(pos(Pos_Param19, Pos_Ret23), Time18),
      holds_at(pos(Pos_Param20, Pos_Ret23), Time18),
      large(Pos_Param19),
      { dif(Pos_Param19, Pos_Param20)
      }
    ]).

 /*  not(holds_at(pos(Pos_Param25, Pos_Ret29), Time24)) :-
       holds_at(pos(Pos_Param26, Pos_Ret29), Time24),
       large(Pos_Param26),
       large(Pos_Param25),
       { dif(Pos_Param25, Pos_Param26)
       },
       (   not(equals(Equals_Param27, Pos_Param25))
       ;   not(holds_at(mounted(Equals_Param27, Pos_Param26),
                        Time24))
       ),
       (   not(equals(Equals_Param28, Pos_Param26))
       ;   not(holds_at(mounted(Equals_Param28, Pos_Param25),
                        Time24))
       ).
 */
axiom(not(holds_at(pos(Pos_Param25, Pos_Ret29), Time24)),
   
    [ not(equals(Equals_Param28, Pos_Param26)),
      not(equals(Equals_Param27, Pos_Param25)),
      holds_at(pos(Pos_Param26, Pos_Ret29), Time24),
      large(Pos_Param26),
      large(Pos_Param25),
      dif(Pos_Param25, Pos_Param26)
    ]).
axiom(not(holds_at(pos(Pos_Param25, Pos_Ret29), Time24)),
   
    [ not(holds_at(mounted(Equals_Param28, Pos_Param25),
                   Time24)),
      not(equals(Equals_Param27, Pos_Param25)),
      holds_at(pos(Pos_Param26, Pos_Ret29), Time24),
      large(Pos_Param26),
      large(Pos_Param25),
      dif(Pos_Param25, Pos_Param26)
    ]).
axiom(not(holds_at(pos(Pos_Param25, Pos_Ret29), Time24)),
   
    [ not(equals(Equals_Param28, Pos_Param26)),
      not(holds_at(mounted(Equals_Param27, Pos_Param26),
                   Time24)),
      holds_at(pos(Pos_Param26, Pos_Ret29), Time24),
      large(Pos_Param26),
      large(Pos_Param25),
      dif(Pos_Param25, Pos_Param26)
    ]).
axiom(not(holds_at(pos(Pos_Param25, Pos_Ret29), Time24)),
   
    [ not(holds_at(mounted(Equals_Param28, Pos_Param25),
                   Time24)),
      not(holds_at(mounted(Equals_Param27, Pos_Param26),
                   Time24)),
      holds_at(pos(Pos_Param26, Pos_Ret29), Time24),
      large(Pos_Param26),
      large(Pos_Param25),
      dif(Pos_Param25, Pos_Param26)
    ]).

 /*  not(holds_at(pos(Pos_Param31, Pos_Ret35), Time30)) :-
       holds_at(pos(Pos_Param32, Pos_Ret35), Time30),
       large(Pos_Param31),
       large(Pos_Param32),
       { dif(Pos_Param32, Pos_Param31)
       },
       (   not(equals(Equals_Param33, Pos_Param32))
       ;   not(holds_at(mounted(Equals_Param33, Pos_Param31),
                        Time30))
       ),
       (   not(equals(Equals_Param34, Pos_Param31))
       ;   not(holds_at(mounted(Equals_Param34, Pos_Param32),
                        Time30))
       ).
 */
axiom(not(holds_at(pos(Pos_Param31, Pos_Ret35), Time30)),
   
    [ not(equals(Equals_Param34, Pos_Param31)),
      not(equals(Equals_Param33, Pos_Param32)),
      holds_at(pos(Pos_Param32, Pos_Ret35), Time30),
      large(Pos_Param31),
      large(Pos_Param32),
      dif(Pos_Param32, Pos_Param31)
    ]).
axiom(not(holds_at(pos(Pos_Param31, Pos_Ret35), Time30)),
   
    [ not(holds_at(mounted(Equals_Param34, Pos_Param32),
                   Time30)),
      not(equals(Equals_Param33, Pos_Param32)),
      holds_at(pos(Pos_Param32, Pos_Ret35), Time30),
      large(Pos_Param31),
      large(Pos_Param32),
      dif(Pos_Param32, Pos_Param31)
    ]).
axiom(not(holds_at(pos(Pos_Param31, Pos_Ret35), Time30)),
   
    [ not(equals(Equals_Param34, Pos_Param31)),
      not(holds_at(mounted(Equals_Param33, Pos_Param31),
                   Time30)),
      holds_at(pos(Pos_Param32, Pos_Ret35), Time30),
      large(Pos_Param31),
      large(Pos_Param32),
      dif(Pos_Param32, Pos_Param31)
    ]).
axiom(not(holds_at(pos(Pos_Param31, Pos_Ret35), Time30)),
   
    [ not(holds_at(mounted(Equals_Param34, Pos_Param32),
                   Time30)),
      not(holds_at(mounted(Equals_Param33, Pos_Param31),
                   Time30)),
      holds_at(pos(Pos_Param32, Pos_Ret35), Time30),
      large(Pos_Param31),
      large(Pos_Param32),
      dif(Pos_Param32, Pos_Param31)
    ]).

 /*  equals(Equals_Param37, Dif_Param39) :-
       (   not(equals(Equals_Param38, Pos_Param40))
       ;   not(holds_at(mounted(Equals_Param38, Dif_Param39),
                        Time36))
       ),
       { dif(Dif_Param39, Pos_Param40)
       },
       large(Dif_Param39),
       large(Pos_Param40),
       holds_at(pos(Dif_Param39, Pos_Ret41), Time36),
       holds_at(pos(Pos_Param40, Pos_Ret41), Time36).
 */
axiom(equals(Equals_Param37, Dif_Param39),
   
    [ not(equals(Equals_Param38, Pos_Param40)),
      { dif(Dif_Param39, Pos_Param40)
      },
      large(Dif_Param39),
      large(Pos_Param40),
      holds_at(pos(Dif_Param39, Pos_Ret41), Time36),
      holds_at(pos(Pos_Param40, Pos_Ret41), Time36)
    ]).
axiom(equals(Equals_Param37, Dif_Param39),
   
    [ not(holds_at(mounted(Equals_Param38, Dif_Param39),
                   Time36)),
      { dif(Dif_Param39, Pos_Param40)
      },
      large(Dif_Param39),
      large(Pos_Param40),
      holds_at(pos(Dif_Param39, Pos_Ret41), Time36),
      holds_at(pos(Pos_Param40, Pos_Ret41), Time36)
    ]).

 /*  holds_at(mounted(Mounted_Param, Pos_Param46), Time42) :-
       (   not(equals(Equals_Param44, Pos_Param46))
       ;   not(holds_at(mounted(Equals_Param44, Dif_Param45),
                        Time42))
       ),
       { dif(Dif_Param45, Pos_Param46)
       },
       large(Dif_Param45),
       large(Pos_Param46),
       holds_at(pos(Dif_Param45, Pos_Ret47), Time42),
       holds_at(pos(Pos_Param46, Pos_Ret47), Time42).
 */
axiom(holds_at(mounted(Mounted_Param, Pos_Param46), Time42),
   
    [ not(equals(Equals_Param44, Pos_Param46)),
      dif(Dif_Param45, Pos_Param46),
      large(Dif_Param45),
      large(Pos_Param46),
      holds_at(pos(Dif_Param45, Pos_Ret47), Time42),
      holds_at(pos(Pos_Param46, Pos_Ret47), Time42)
    ]).
axiom(holds_at(mounted(Mounted_Param, Pos_Param46), Time42),
   
    [ not(holds_at(mounted(Equals_Param44, Dif_Param45),
                   Time42)),
      dif(Dif_Param45, Pos_Param46),
      large(Dif_Param45),
      large(Pos_Param46),
      holds_at(pos(Dif_Param45, Pos_Ret47), Time42),
      holds_at(pos(Pos_Param46, Pos_Ret47), Time42)
    ]).

 /*  equals(Equals_Param49, Pos_Param52) :-
       (   not(equals(Equals_Param50, Dif_Param51))
       ;   not(holds_at(mounted(Equals_Param50, Pos_Param52),
                        Time48))
       ),
       { dif(Dif_Param51, Pos_Param52)
       },
       large(Dif_Param51),
       large(Pos_Param52),
       holds_at(pos(Dif_Param51, Pos_Ret53), Time48),
       holds_at(pos(Pos_Param52, Pos_Ret53), Time48).
 */
axiom(equals(Equals_Param49, Pos_Param52),
   
    [ not(equals(Equals_Param50, Dif_Param51)),
      { dif(Dif_Param51, Pos_Param52)
      },
      large(Dif_Param51),
      large(Pos_Param52),
      holds_at(pos(Dif_Param51, Pos_Ret53), Time48),
      holds_at(pos(Pos_Param52, Pos_Ret53), Time48)
    ]).
axiom(equals(Equals_Param49, Pos_Param52),
   
    [ not(holds_at(mounted(Equals_Param50, Pos_Param52),
                   Time48)),
      { dif(Dif_Param51, Pos_Param52)
      },
      large(Dif_Param51),
      large(Pos_Param52),
      holds_at(pos(Dif_Param51, Pos_Ret53), Time48),
      holds_at(pos(Pos_Param52, Pos_Ret53), Time48)
    ]).

 /*  holds_at(mounted(Mounted_Param55, Dif_Param57), Time54) :-
       (   not(equals(Equals_Param56, Dif_Param57))
       ;   not(holds_at(mounted(Equals_Param56, Pos_Param58),
                        Time54))
       ),
       { dif(Dif_Param57, Pos_Param58)
       },
       large(Dif_Param57),
       large(Pos_Param58),
       holds_at(pos(Dif_Param57, Pos_Ret59), Time54),
       holds_at(pos(Pos_Param58, Pos_Ret59), Time54).
 */
axiom(holds_at(mounted(Mounted_Param55, Dif_Param57), Time54),
   
    [ not(equals(Equals_Param56, Dif_Param57)),
      dif(Dif_Param57, Pos_Param58),
      large(Dif_Param57),
      large(Pos_Param58),
      holds_at(pos(Dif_Param57, Pos_Ret59), Time54),
      holds_at(pos(Pos_Param58, Pos_Ret59), Time54)
    ]).
axiom(holds_at(mounted(Mounted_Param55, Dif_Param57), Time54),
   
    [ not(holds_at(mounted(Equals_Param56, Pos_Param58),
                   Time54)),
      dif(Dif_Param57, Pos_Param58),
      large(Dif_Param57),
      large(Pos_Param58),
      holds_at(pos(Dif_Param57, Pos_Ret59), Time54),
      holds_at(pos(Pos_Param58, Pos_Ret59), Time54)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8437
% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8440
axiom(Position1=Position2,
   
    [ holds_at(posDeterminingFluent(Human, Position1), Time),
      holds_at(posDeterminingFluent(Human, Position2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8442
% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8443
axiom(initiates(move(Animal, Position), pos(Animal, Position), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8445
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8447
axiom(terminates(move(Animal, Position2), pos(Animal, Position1), Time),
    [holds_at(pos(Animal, Position1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8449
% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8451
axiom(requires(move(Animal, Position), Time),
    [not(holds_at(pos(Animal, Position), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8453
% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8455
axiom(requires(move(Human, Position), Time),
    [not(holds_at(mounted(Human, Animal), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8457
% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8458
axiom(initiates(open(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8460
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8466
axiom(requires(open(Human, Gate), Time),
   
    [ equals(side1(Gate), Position),
      not(holds_at(opened(Gate), Time)),
      not(holds_at(mounted(Human, Animal), Time)),
      holds_at(pos(Human, Position), Time)
    ]).
axiom(requires(open(Human, Gate), Time),
   
    [ equals(side2(Gate), Position),
      not(holds_at(opened(Gate), Time)),
      not(holds_at(mounted(Human, Animal), Time)),
      holds_at(pos(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8468
% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8469
axiom(terminates(close(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8471
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8475
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).

 /*   exists([Position],
             if(happens(close(Human, Gate), Time),
                 (holds_at(opened(Gate), Time), not(exists([Animal], holds_at(mounted(Human, Animal), Time))), (side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time)))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_400'(Fn_400_Param, Close_Ret, Maptime, Fn_400_Ret))) :-
       happens(close(Fn_400_Param, Close_Ret), Maptime),
       (   not(holds_at(opened(Close_Ret), Maptime))
       ;   holds_at(mounted(Fn_400_Param, Fn_400_Ret), Maptime)
       ;   not(equals(side1(Close_Ret), Some_Param)),
           not(equals(side2(Close_Ret), Some_Param))
       ;   not(holds_at(pos(Fn_400_Param, Some_Param), Maptime))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8477
axiom(not(some(Some_Param, '$kolem_Fn_400'(Fn_400_Param, Close_Ret, Maptime, Fn_400_Ret))),
   
    [ not(holds_at(opened(Close_Ret), Maptime)),
      happens(close(Fn_400_Param, Close_Ret), Maptime)
    ]).
axiom(not(some(Some_Param, '$kolem_Fn_400'(Fn_400_Param, Close_Ret, Maptime, Fn_400_Ret))),
   
    [ holds_at(mounted(Fn_400_Param, Fn_400_Ret), Maptime),
      happens(close(Fn_400_Param, Close_Ret), Maptime)
    ]).
axiom(not(some(Some_Param, '$kolem_Fn_400'(Fn_400_Param, Close_Ret, Maptime, Fn_400_Ret))),
   
    [ not(equals(side1(Close_Ret), Some_Param)),
      not(equals(side2(Close_Ret), Some_Param)),
      happens(close(Fn_400_Param, Close_Ret), Maptime)
    ]).
axiom(not(some(Some_Param, '$kolem_Fn_400'(Fn_400_Param, Close_Ret, Maptime, Fn_400_Ret))),
   
    [ not(holds_at(pos(Fn_400_Param, Some_Param), Maptime)),
      happens(close(Fn_400_Param, Close_Ret), Maptime)
    ]).

 /*  not(happens(close(Close_Param, Close_Ret14), Maptime11)) :-
       (   not(holds_at(opened(Close_Ret14), Maptime11))
       ;   holds_at(mounted(Close_Param, Mounted_Ret), Maptime11)
       ;   not(equals(side1(Close_Ret14), Some_Param13)),
           not(equals(side2(Close_Ret14), Some_Param13))
       ;   not(holds_at(pos(Close_Param, Some_Param13),
                        Maptime11))
       ),
       some(Some_Param13,
            '$kolem_Fn_400'(Close_Param,
                            Close_Ret14,
                            Maptime11,
                            Mounted_Ret)).
 */
axiom(not(happens(close(Close_Param, Close_Ret14), Maptime11)),
   
    [ not(holds_at(opened(Close_Ret14), Maptime11)),
      some(Some_Param13,
           '$kolem_Fn_400'(Close_Param,
                           Close_Ret14,
                           Maptime11,
                           Mounted_Ret))
    ]).
axiom(not(happens(close(Close_Param, Close_Ret14), Maptime11)),
   
    [ holds_at(mounted(Close_Param, Mounted_Ret), Maptime11),
      some(Some_Param13,
           '$kolem_Fn_400'(Close_Param,
                           Close_Ret14,
                           Maptime11,
                           Mounted_Ret))
    ]).
axiom(not(happens(close(Close_Param, Close_Ret14), Maptime11)),
   
    [ not(equals(side1(Close_Ret14), Some_Param13)),
      not(equals(side2(Close_Ret14), Some_Param13)),
      some(Some_Param13,
           '$kolem_Fn_400'(Close_Param,
                           Close_Ret14,
                           Maptime11,
                           Mounted_Ret))
    ]).
axiom(not(happens(close(Close_Param, Close_Ret14), Maptime11)),
   
    [ not(holds_at(pos(Close_Param, Some_Param13), Maptime11)),
      some(Some_Param13,
           '$kolem_Fn_400'(Close_Param,
                           Close_Ret14,
                           Maptime11,
                           Mounted_Ret))
    ]).

 /*  holds_at(opened(Opened_Ret), Time16) :-
       happens(close(Close_Param17, Opened_Ret), Time16),
       some(Some_Param18,
            '$kolem_Fn_400'(Close_Param17,
                            Opened_Ret,
                            Time16,
                            Fn_400_Ret20)).
 */
axiom(holds_at(opened(Opened_Ret), Time16),
   
    [ happens(close(Close_Param17, Opened_Ret), Time16),
      some(Some_Param18,
           '$kolem_Fn_400'(Close_Param17,
                           Opened_Ret,
                           Time16,
                           Fn_400_Ret20))
    ]).

 /*  not(holds_at(mounted(Mounted_Param, Mounted_Ret24), Time21)) :-
       happens(close(Mounted_Param, Close_Ret25), Time21),
       some(Some_Param23,
            '$kolem_Fn_400'(Mounted_Param,
                            Close_Ret25,
                            Time21,
                            Mounted_Ret24)).
 */
axiom(not(holds_at(mounted(Mounted_Param, Mounted_Ret24), Time21)),
   
    [ happens(close(Mounted_Param, Close_Ret25), Time21),
      some(Some_Param23,
           '$kolem_Fn_400'(Mounted_Param,
                           Close_Ret25,
                           Time21,
                           Mounted_Ret24))
    ]).

 /*  equals(side1(Side1_Ret), Some_Param28) :-
       not(equals(side2(Side1_Ret), Some_Param28)),
       happens(close(Close_Param27, Side1_Ret), Maptime26),
       some(Some_Param28,
            '$kolem_Fn_400'(Close_Param27,
                            Side1_Ret,
                            Maptime26,
                            Fn_400_Ret30)).
 */
axiom(equals(side1(Side1_Ret), Some_Param28),
   
    [ not(equals(side2(Side1_Ret), Some_Param28)),
      happens(close(Close_Param27, Side1_Ret), Maptime26),
      some(Some_Param28,
           '$kolem_Fn_400'(Close_Param27,
                           Side1_Ret,
                           Maptime26,
                           Fn_400_Ret30))
    ]).

 /*  equals(side2(Side2_Ret), Some_Param33) :-
       not(equals(side1(Side2_Ret), Some_Param33)),
       happens(close(Close_Param32, Side2_Ret), Maptime31),
       some(Some_Param33,
            '$kolem_Fn_400'(Close_Param32,
                            Side2_Ret,
                            Maptime31,
                            Fn_400_Ret35)).
 */
axiom(equals(side2(Side2_Ret), Some_Param33),
   
    [ not(equals(side1(Side2_Ret), Some_Param33)),
      happens(close(Close_Param32, Side2_Ret), Maptime31),
      some(Some_Param33,
           '$kolem_Fn_400'(Close_Param32,
                           Side2_Ret,
                           Maptime31,
                           Fn_400_Ret35))
    ]).

 /*  holds_at(pos(Pos_Param, Some_Param38), Time36) :-
       happens(close(Pos_Param, Close_Ret39), Time36),
       some(Some_Param38,
            '$kolem_Fn_400'(Pos_Param,
                            Close_Ret39,
                            Time36,
                            Fn_400_Ret40)).
 */
axiom(holds_at(pos(Pos_Param, Some_Param38), Time36),
   
    [ happens(close(Pos_Param, Close_Ret39), Time36),
      some(Some_Param38,
           '$kolem_Fn_400'(Pos_Param,
                           Close_Ret39,
                           Time36,
                           Fn_400_Ret40))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8479
% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8482
axiom(holds_at(pos(Human, Position), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(pos(Animal, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8484
% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).

 /*  holds_at(moves(Animal), Time) <->
       exists([Position],
               (holds_at(pos(Animal, Position), Time), not(holds_at(pos(Animal, Position), Time+1)))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8488
axiom(holds_at(moves(Animal), t),
   
    [ holds_at(pos(Animal, Position), t),
      not(holds_at(pos(Animal, Position), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*   if(holds_at(moves(Animal), t),
         exists([Position],
                 (holds_at(pos(Animal, Position), t), not(holds_at(pos(Animal, Position), t+1))))).
 */

 /*  not(holds_at(moves(Pos_Param), t)) :-
       (   not(holds_at(pos(Pos_Param, Pos_Ret), t))
       ;   holds_at(pos(Pos_Param, Pos_Ret), t+1)
       ).
 */
axiom(not(holds_at(moves(Pos_Param), t)),
    [not(holds_at(pos(Pos_Param, Pos_Ret), t))]).
axiom(not(holds_at(moves(Pos_Param), t)),
   
    [ holds_at(pos(Pos_Param, Pos_Ret), start),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(pos(Pos_Param5, Pos_Ret6), t) :-
       holds_at(moves(Pos_Param5), t).
 */
axiom(holds_at(pos(Pos_Param5, Pos_Ret6), t),
    [holds_at(moves(Pos_Param5), t)]).

 /*  not(holds_at(pos(Pos_Param7, Pos_Ret8), t+1)) :-
       holds_at(moves(Pos_Param7), t).
 */
axiom(not(holds_at(pos(Pos_Param7, Pos_Ret8), start)),
    [holds_at(moves(Pos_Param7), t), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8490
% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).

 /*  holds_at(mountFails(Human), Time) <->
       exists([Animal],
               (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8494
axiom(holds_at(mountFails(Human), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(moves(Animal), Time)
    ]).

 /*   if(holds_at(mountFails(Human), Time),
         exists([Animal],
                 (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time)))).
 */

 /*  not(holds_at(mountFails(Mount_Param), Time3)) :-
       (   not(happens(mount(Mount_Param, Mount_Ret), Time3))
       ;   not(holds_at(moves(Mount_Ret), Time3))
       ).
 */
axiom(not(holds_at(mountFails(Mount_Param), Time3)),
    [not(happens(mount(Mount_Param, Mount_Ret), Time3))]).
axiom(not(holds_at(mountFails(Mount_Param), Time3)),
    [not(holds_at(moves(Mount_Ret), Time3))]).

 /*  happens(mount(Mount_Param7, Mount_Ret8), Maptime) :-
       holds_at(mountFails(Mount_Param7), Maptime).
 */
axiom(happens(mount(Mount_Param7, Mount_Ret8), Maptime),
    [holds_at(mountFails(Mount_Param7), Maptime)]).

 /*  holds_at(moves(Moves_Ret), Time9) :-
       holds_at(mountFails(MountFails_Ret), Time9).
 */
axiom(holds_at(moves(Moves_Ret), Time9),
    [holds_at(mountFails(MountFails_Ret), Time9)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8496
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8498
axiom(releases(mount(Human, Animal), pos(Human, Position), Time),
    [not(holds_at(moves(Animal), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8500
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8502
axiom(initiates(mount(Human, Animal), mounted(Human, Animal), Time),
    [not(holds_at(moves(Animal), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8504
% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8507
axiom(initiates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8509
% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8512
axiom(terminates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8514
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8516
axiom(requires(mount(Human, Animal), Time),
    [large(Animal)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8518
% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8520
axiom(large(Animal),
    [holds_at(mounted(Human, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8522
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8524
axiom(requires(mount(Human1, Human2), Time),
    [not(large(Human1))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8526
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8528
axiom(not(large(Human1)),
    [holds_at(mounted(Human1, Human2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8530
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8532
axiom(requires(mount(Human, Animal), Time),
    [not({dif(Human1, Human)})]).
axiom(requires(mount(Human, Animal), Time),
    [not(holds_at(mounted(Human1, Animal), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8534
% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8537
axiom(Human1=Human2,
   
    [ holds_at(mounted(Human1, Animal), Time),
      holds_at(mounted(Human2, Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8539
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8541
axiom(requires(mount(Human, Animal), Time),
    [not({dif(Human1, Human)})]).
axiom(requires(mount(Human, Animal), Time),
    [not(holds_at(mounted(Human1, Human), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8543
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8545
% {animal}%  HoldsAt(Mounted(human2,animal),time).

 /*  exists([Animal],
          if(happens(mount(Human1,Human2),Time),
   	  holds_at(mounted(Human2,Animal),Time))).
 */

 /*  holds_at(mounted(Mounted_Param, Some_Param), Time5) :-
       happens(mount(Mount_Param, Mounted_Param), Time5),
       some(Some_Param,
            '$kolem_Fn_408'(Mount_Param, Mounted_Param, Time5)).
 */
axiom(holds_at(mounted(Mounted_Param, Some_Param), Time5),
   
    [ happens(mount(Mount_Param, Mounted_Param), Time5),
      some(Some_Param,
           '$kolem_Fn_408'(Mount_Param, Mounted_Param, Time5))
    ]).

 /*  not(happens(mount(Mount_Param10, Mounted_Param11), Maptime)) :-
       not(holds_at(mounted(Mounted_Param11, Some_Param12),
                    Maptime)),
       some(Some_Param12,
            '$kolem_Fn_408'(Mount_Param10,
                            Mounted_Param11,
                            Maptime)).
 */
axiom(not(happens(mount(Mount_Param10, Mounted_Param11), Maptime)),
   
    [ not(holds_at(mounted(Mounted_Param11, Some_Param12),
                   Maptime)),
      some(Some_Param12,
           '$kolem_Fn_408'(Mount_Param10,
                           Mounted_Param11,
                           Maptime))
    ]).

 /*  not(some(Some_Param14, '$kolem_Fn_408'(Fn_408_Param, Mounted_Param16, Time13))) :-
       not(holds_at(mounted(Mounted_Param16, Some_Param14),
                    Time13)),
       happens(mount(Fn_408_Param, Mounted_Param16), Time13).
 */
axiom(not(some(Some_Param14, '$kolem_Fn_408'(Fn_408_Param, Mounted_Param16, Time13))),
   
    [ not(holds_at(mounted(Mounted_Param16, Some_Param14),
                   Time13)),
      happens(mount(Fn_408_Param, Mounted_Param16), Time13)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8547
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8549
axiom(not(exists([Animal], holds_at(mounted(Human2, Animal), Time))),
    [holds_at(mounted(Human1, Human2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8551
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8553
axiom(requires(mount(Human, Animal), Time),
    [not(holds_at(mounted(Human, Animal1), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8555
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8557
axiom(terminates(getOff(Human, Animal), mounted(Human, Animal), Time),
    [not(holds_at(moves(Animal), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8559
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8562
axiom(initiates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ not(holds_at(moves(Animal), Time)),
      holds_at(posDeterminingFluent(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8564
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8567
axiom(terminates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ not(holds_at(moves(Animal), Time)),
      holds_at(pos(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8569
% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8573
axiom(terminates(getOff(Human, Animal), pos(Human, Position2), Time),
   
    [ not(holds_at(moves(Animal), Time)),
      holds_at(pos(Human, Position1), Time),
      { dif(Position1, Position2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8575
% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8577
axiom(requires(getOff(Human, Animal), Time),
    [holds_at(mounted(Human, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8579
% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).

 /*  holds_at(throwOffFails(Animal1, Human), Time) <->
       exists([Position, Animal2],
               (Animal2\=Human, holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8585
axiom(holds_at(throwOffFails(Animal1, Human), t),
   
    [ dif(Animal2, Human),
      holds_at(posDeterminingFluent(Human, Position), t),
      large(Animal2),
      holds_at(pos(Animal2, Position), start),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*   if(holds_at(throwOffFails(Animal1, Human), t),
         exists([Position, Animal2],
                 (Animal2\=Human, holds_at(posDeterminingFluent(Human, Position), t), large(Animal2), holds_at(pos(Animal2, Position), t+1)))).
 */

 /*  not(holds_at(throwOffFails(ThrowOffFails_Param, PosDeterminingFluent_Param), t)) :-
       (   not({dif(Dif_Param, PosDeterminingFluent_Param)})
       ;   not(holds_at(posDeterminingFluent(PosDeterminingFluent_Param,
                                             PosDeterminingFluent_Ret),
                        t))
       ;   not(large(Dif_Param))
       ;   not(holds_at(pos(Dif_Param, PosDeterminingFluent_Ret), t+1))
       ).
 */
axiom(not(holds_at(throwOffFails(ThrowOffFails_Param, PosDeterminingFluent_Param), t)),
    [not({dif(Dif_Param, PosDeterminingFluent_Param)})]).
axiom(not(holds_at(throwOffFails(ThrowOffFails_Param, PosDeterminingFluent_Param), t)),
   
    [ not(holds_at(posDeterminingFluent(PosDeterminingFluent_Param,
                                        PosDeterminingFluent_Ret),
                   t))
    ]).
axiom(not(holds_at(throwOffFails(ThrowOffFails_Param, PosDeterminingFluent_Param), t)),
    [not(large(Dif_Param))]).
axiom(not(holds_at(throwOffFails(ThrowOffFails_Param, PosDeterminingFluent_Param), t)),
   
    [ not(holds_at(pos(Dif_Param, PosDeterminingFluent_Ret), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  { dif(Dif_Param9, Dif_Ret)
   } :-
       holds_at(throwOffFails(ThrowOffFails_Param10, Dif_Ret), t).
 */
axiom({ dif(Dif_Param9, Dif_Ret)
},
    [holds_at(throwOffFails(ThrowOffFails_Param10, Dif_Ret), t)]).

 /*  holds_at(posDeterminingFluent(PosDeterminingFluent_Param12, PosDeterminingFluent_Ret14), t) :-
       holds_at(throwOffFails(ThrowOffFails_Param13,
                              PosDeterminingFluent_Param12),
                t).
 */
axiom(holds_at(posDeterminingFluent(PosDeterminingFluent_Param12, PosDeterminingFluent_Ret14), t),
   
    [ holds_at(throwOffFails(ThrowOffFails_Param13,
                             PosDeterminingFluent_Param12),
               t)
    ]).

 /*  large(Large_Ret) :-
       holds_at(throwOffFails(ThrowOffFails_Param15,
                              ThrowOffFails_Ret),
                t).
 */
axiom(large(Large_Ret),
   
    [ holds_at(throwOffFails(ThrowOffFails_Param15,
                             ThrowOffFails_Ret),
               t)
    ]).

 /*  holds_at(pos(Pos_Param, Pos_Ret), t+1) :-
       holds_at(throwOffFails(ThrowOffFails_Param19,
                              ThrowOffFails_Ret21),
                t).
 */
axiom(holds_at(pos(Pos_Param, Pos_Ret), start),
   
    [ holds_at(throwOffFails(ThrowOffFails_Param19,
                             ThrowOffFails_Ret21),
               t),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8587
% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8590
axiom(initiates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      not(holds_at(throwOffFails(Animal, Human), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8592
% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8595
axiom(terminates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      not(holds_at(throwOffFails(Animal, Human), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8597
% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8602
axiom(terminates(throwOff(Animal, Human), pos(Human, Position2), Time),
   
    [ not(holds_at(throwOffFails(Animal, Human), Time)),
      holds_at(pos(Human, Position1), Time),
      not(holds_at(posDeterminingFluent(Human, Position2),
                   Time)),
      { dif(Position1, Position2)
      }
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8604
% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8607
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      not(happens(getOff(Human, Animal), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8609
% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8613
axiom(initiates(throwOff(Animal1, Human), mounted(Human, Animal2), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(throwOffFails(Animal1, Human), Time),
      holds_at(pos(Animal2, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8615
% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8617
axiom(terminates(throwOff(Animal, Human), mounted(Human, Animal), Time),
    [not(holds_at(throwOffFails(Animal, Human), Time))]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8619
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8621
axiom(requires(throwOff(Animal, Human), Time),
    [holds_at(mounted(Human, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8623
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8625
axiom(not(happens(getOff(Human, Animal), Time)),
    [happens(throwOff(Animal, Human), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8627
% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8629
axiom(not(happens(throwOff(Animal, Human), Time)),
    [happens(getOff(Human, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8631
% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).

 /*  accessible(Position1, Position2, Time) <->
       thereExists((neighbor(Position1, Position2), not([gate])),
                    (sides(Position1, Position2, gate), not(holds_at(opened(gate), Time)))).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8635
axiom(accessible(Position1, Position2, Time),
   
    [ thereExists((neighbor(Position1, Position2), not([gate])),
                   (sides(Position1, Position2, gate), not(holds_at(opened(gate), Time))))
    ]).
axiom(thereExists((neighbor(Position1, Position2), not([gate])),  (sides(Position1, Position2, gate), not(holds_at(opened(gate), Time)))),
    [accessible(Position1, Position2, Time)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8637
% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8641
axiom(accessible(Position1, Position2, t),
   
    [ { dif(Position1, Position2)
      },
      holds_at(pos(Animal, Position1), t),
      holds_at(pos(Animal, Position2), start),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8643
% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).

 /*  holds_at(abnormalEncroachment(Human), Time) <->
       (   holds_at(mountFails(Human), Time)
       ;   exists([Position, Animal1, Animal2],
                   (holds_at(posDeterminingFluent(Human, Position), Time), not(holds_at(throwOffFails(Animal2, Human), Time)), happens(throwOff(Animal2, Human), Time), Animal1\=Human, large(Animal1), holds_at(pos(Animal1, Position), Time), not(holds_at(pos(Animal1, Position), Time+1))))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8653
axiom(holds_at(abnormalEncroachment(Human), Time),
    [holds_at(mountFails(Human), Time)]).
axiom(holds_at(abnormalEncroachment(Human), t),
   
    [ holds_at(posDeterminingFluent(Human, Position), t),
      not(holds_at(throwOffFails(Animal2, Human), t)),
      happens(throwOff(Animal2, Human), t),
      dif(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), t),
      not(holds_at(pos(Animal1, Position), start)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*   if(holds_at(abnormalEncroachment(Human), t),
          (holds_at(mountFails(Human), t);exists([Position, Animal1, Animal2],  (holds_at(posDeterminingFluent(Human, Position), t), not(holds_at(throwOffFails(Animal2, Human), t)), happens(throwOff(Animal2, Human), t), Animal1\=Human, large(Animal1), holds_at(pos(Animal1, Position), t), not(holds_at(pos(Animal1, Position), t+1)))))).
 */

 /*  not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)) :-
       not(holds_at(mountFails(PosDeterminingFluent_Param), t)),
       (   not(holds_at(posDeterminingFluent(PosDeterminingFluent_Param,
                                             PosDeterminingFluent_Ret),
                        t))
       ;   holds_at(throwOffFails(ThrowOffFails_Param,
                                  PosDeterminingFluent_Param),
                    t)
       ;   not(happens(throwOff(ThrowOffFails_Param,
                                PosDeterminingFluent_Param),
                       t))
       ;   not({dif(Dif_Param, PosDeterminingFluent_Param)})
       ;   not(large(Dif_Param))
       ;   not(holds_at(pos(Dif_Param, PosDeterminingFluent_Ret), t))
       ;   holds_at(pos(Dif_Param, PosDeterminingFluent_Ret), t+1)
       ).
 */
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ not(holds_at(posDeterminingFluent(PosDeterminingFluent_Param,
                                        PosDeterminingFluent_Ret),
                   t)),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t))
    ]).
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ holds_at(throwOffFails(ThrowOffFails_Param,
                             PosDeterminingFluent_Param),
               t),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t))
    ]).
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ not(happens(throwOff(ThrowOffFails_Param,
                           PosDeterminingFluent_Param),
                  t)),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t))
    ]).
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ not({dif(Dif_Param, PosDeterminingFluent_Param)}),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t))
    ]).
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ not(large(Dif_Param)),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t))
    ]).
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ not(holds_at(pos(Dif_Param, PosDeterminingFluent_Ret), t)),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t))
    ]).
axiom(not(holds_at(abnormalEncroachment(PosDeterminingFluent_Param), t)),
   
    [ holds_at(pos(Dif_Param, PosDeterminingFluent_Ret), start),
      not(holds_at(mountFails(PosDeterminingFluent_Param), t)),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(mountFails(PosDeterminingFluent_Param9), t) :-
       (   not(holds_at(posDeterminingFluent(PosDeterminingFluent_Param9,
                                             PosDeterminingFluent_Ret12),
                        t))
       ;   holds_at(throwOffFails(ThrowOffFails_Param10,
                                  PosDeterminingFluent_Param9),
                    t)
       ;   not(happens(throwOff(ThrowOffFails_Param10,
                                PosDeterminingFluent_Param9),
                       t))
       ;   not({dif(Dif_Param11, PosDeterminingFluent_Param9)})
       ;   not(large(Dif_Param11))
       ;   not(holds_at(pos(Dif_Param11, PosDeterminingFluent_Ret12),
                        t))
       ;   holds_at(pos(Dif_Param11, PosDeterminingFluent_Ret12), t+1)
       ),
       holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t).
 */
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ not(holds_at(posDeterminingFluent(PosDeterminingFluent_Param9,
                                        PosDeterminingFluent_Ret12),
                   t)),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t)
    ]).
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ holds_at(throwOffFails(ThrowOffFails_Param10,
                             PosDeterminingFluent_Param9),
               t),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t)
    ]).
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ not(happens(throwOff(ThrowOffFails_Param10,
                           PosDeterminingFluent_Param9),
                  t)),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t)
    ]).
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ not({dif(Dif_Param11, PosDeterminingFluent_Param9)}),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t)
    ]).
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ not(large(Dif_Param11)),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t)
    ]).
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ not(holds_at(pos(Dif_Param11, PosDeterminingFluent_Ret12), t)),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t)
    ]).
axiom(holds_at(mountFails(PosDeterminingFluent_Param9), t),
   
    [ holds_at(pos(Dif_Param11, PosDeterminingFluent_Ret12), start),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param9), t),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(posDeterminingFluent(PosDeterminingFluent_Param13, PosDeterminingFluent_Ret14), t) :-
       not(holds_at(mountFails(PosDeterminingFluent_Param13), t)),
       holds_at(abnormalEncroachment(PosDeterminingFluent_Param13), t).
 */
axiom(holds_at(posDeterminingFluent(PosDeterminingFluent_Param13, PosDeterminingFluent_Ret14), t),
   
    [ not(holds_at(mountFails(PosDeterminingFluent_Param13), t)),
      holds_at(abnormalEncroachment(PosDeterminingFluent_Param13), t)
    ]).

 /*  not(holds_at(throwOffFails(ThrowOffFails_Param15, ThrowOffFails_Ret), t)) :-
       not(holds_at(mountFails(ThrowOffFails_Ret), t)),
       holds_at(abnormalEncroachment(ThrowOffFails_Ret), t).
 */
axiom(not(holds_at(throwOffFails(ThrowOffFails_Param15, ThrowOffFails_Ret), t)),
   
    [ not(holds_at(mountFails(ThrowOffFails_Ret), t)),
      holds_at(abnormalEncroachment(ThrowOffFails_Ret), t)
    ]).

 /*  happens(throwOff(ThrowOff_Param, ThrowOff_Ret), t) :-
       not(holds_at(mountFails(ThrowOff_Ret), t)),
       holds_at(abnormalEncroachment(ThrowOff_Ret), t).
 */
axiom(happens(throwOff(ThrowOff_Param, ThrowOff_Ret), t),
   
    [ not(holds_at(mountFails(ThrowOff_Ret), t)),
      holds_at(abnormalEncroachment(ThrowOff_Ret), t)
    ]).

 /*  { dif(Dif_Param19, Dif_Ret)
   } :-
       not(holds_at(mountFails(Dif_Ret), t)),
       holds_at(abnormalEncroachment(Dif_Ret), t).
 */
axiom({ dif(Dif_Param19, Dif_Ret)
},
   
    [ not(holds_at(mountFails(Dif_Ret), t)),
      holds_at(abnormalEncroachment(Dif_Ret), t)
    ]).

 /*  large(Large_Ret) :-
       not(holds_at(mountFails(MountFails_Ret), t)),
       holds_at(abnormalEncroachment(MountFails_Ret), t).
 */
axiom(large(Large_Ret),
   
    [ not(holds_at(mountFails(MountFails_Ret), t)),
      holds_at(abnormalEncroachment(MountFails_Ret), t)
    ]).

 /*  holds_at(pos(Pos_Param, Pos_Ret), t) :-
       not(holds_at(mountFails(MountFails_Ret25), t)),
       holds_at(abnormalEncroachment(MountFails_Ret25), t).
 */
axiom(holds_at(pos(Pos_Param, Pos_Ret), t),
   
    [ not(holds_at(mountFails(MountFails_Ret25), t)),
      holds_at(abnormalEncroachment(MountFails_Ret25), t)
    ]).

 /*  not(holds_at(pos(Pos_Param26, Pos_Ret27), t+1)) :-
       not(holds_at(mountFails(MountFails_Ret28), t)),
       holds_at(abnormalEncroachment(MountFails_Ret28), t).
 */
axiom(not(holds_at(pos(Pos_Param26, Pos_Ret27), start)),
   
    [ not(holds_at(mountFails(MountFails_Ret28), t)),
      holds_at(abnormalEncroachment(MountFails_Ret28), t),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8655
% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).

 /*   if((holds_at(pos(Animal1, Position), Time), not(holds_at(pos(Animal1, Position), Time+1)), not(holds_at(pos(Animal2, Position), Time)), holds_at(pos(Animal2, Position), Time+1)),
          (not(large(Animal1));not(large(Animal2));exists([Human],  (Human=Animal2, holds_at(abnormalEncroachment(Human), Time))))).
 */

 /*  not(holds_at(pos(Pos_Param, Pos_Ret), Time5)) :-
       ( not(holds_at(pos(Pos_Param, Pos_Ret), Time5+1)),
         not(holds_at(pos(Pos_Param7, Pos_Ret), Time5)),
         holds_at(pos(Pos_Param7, Pos_Ret), Time5+1)
       ),
       large(Pos_Param),
       large(Pos_Param7),
       (   not(equals(Equals_Param, Pos_Param7))
       ;   not(holds_at(abnormalEncroachment(Equals_Param), Time5))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8662
axiom(not(holds_at(pos(Pos_Param, Pos_Ret), t)),
   
    [ not(equals(Equals_Param, Pos_Param7)),
      not(holds_at(pos(Pos_Param, Pos_Ret), start)),
      not(holds_at(pos(Pos_Param7, Pos_Ret), t)),
      holds_at(pos(Pos_Param7, Pos_Ret), start),
      large(Pos_Param),
      large(Pos_Param7),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(not(holds_at(pos(Pos_Param, Pos_Ret), t)),
   
    [ not(holds_at(abnormalEncroachment(Equals_Param), t)),
      not(holds_at(pos(Pos_Param, Pos_Ret), start)),
      not(holds_at(pos(Pos_Param7, Pos_Ret), t)),
      holds_at(pos(Pos_Param7, Pos_Ret), start),
      large(Pos_Param),
      large(Pos_Param7),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(pos(Pos_Param11, Pos_Ret14), Time10+1) :-
       ( not(holds_at(pos(Pos_Param12, Pos_Ret14), Time10)),
         holds_at(pos(Pos_Param12, Pos_Ret14), Time10+1)
       ),
       holds_at(pos(Pos_Param11, Pos_Ret14), Time10),
       large(Pos_Param11),
       large(Pos_Param12),
       (   not(equals(Equals_Param13, Pos_Param12))
       ;   not(holds_at(abnormalEncroachment(Equals_Param13), Time10))
       ).
 */
axiom(holds_at(pos(Pos_Param11, Pos_Ret14), start),
   
    [ not(equals(Equals_Param13, Pos_Param12)),
      not(holds_at(pos(Pos_Param12, Pos_Ret14), t)),
      holds_at(pos(Pos_Param12, Pos_Ret14), start),
      holds_at(pos(Pos_Param11, Pos_Ret14), t),
      large(Pos_Param11),
      large(Pos_Param12),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(pos(Pos_Param11, Pos_Ret14), start),
   
    [ not(holds_at(abnormalEncroachment(Equals_Param13), t)),
      not(holds_at(pos(Pos_Param12, Pos_Ret14), t)),
      holds_at(pos(Pos_Param12, Pos_Ret14), start),
      holds_at(pos(Pos_Param11, Pos_Ret14), t),
      large(Pos_Param11),
      large(Pos_Param12),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(pos(Pos_Param16, Pos_Ret19), Time15) :-
       holds_at(pos(Pos_Param16, Pos_Ret19), Time15+1),
       not(holds_at(pos(Pos_Param17, Pos_Ret19), Time15+1)),
       holds_at(pos(Pos_Param17, Pos_Ret19), Time15),
       large(Pos_Param17),
       large(Pos_Param16),
       (   not(equals(Equals_Param18, Pos_Param16))
       ;   not(holds_at(abnormalEncroachment(Equals_Param18), Time15))
       ).
 */
axiom(holds_at(pos(Pos_Param16, Pos_Ret19), t),
   
    [ not(equals(Equals_Param18, Pos_Param16)),
      holds_at(pos(Pos_Param16, Pos_Ret19), start),
      not(holds_at(pos(Pos_Param17, Pos_Ret19), start)),
      holds_at(pos(Pos_Param17, Pos_Ret19), t),
      large(Pos_Param17),
      large(Pos_Param16),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(holds_at(pos(Pos_Param16, Pos_Ret19), t),
   
    [ not(holds_at(abnormalEncroachment(Equals_Param18), t)),
      holds_at(pos(Pos_Param16, Pos_Ret19), start),
      not(holds_at(pos(Pos_Param17, Pos_Ret19), start)),
      holds_at(pos(Pos_Param17, Pos_Ret19), t),
      large(Pos_Param17),
      large(Pos_Param16),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  not(holds_at(pos(Pos_Param21, Pos_Ret24), Time20+1)) :-
       not(holds_at(pos(Pos_Param21, Pos_Ret24), Time20)),
       not(holds_at(pos(Pos_Param22, Pos_Ret24), Time20+1)),
       holds_at(pos(Pos_Param22, Pos_Ret24), Time20),
       large(Pos_Param22),
       large(Pos_Param21),
       (   not(equals(Equals_Param23, Pos_Param21))
       ;   not(holds_at(abnormalEncroachment(Equals_Param23), Time20))
       ).
 */
axiom(not(holds_at(pos(Pos_Param21, Pos_Ret24), start)),
   
    [ not(equals(Equals_Param23, Pos_Param21)),
      not(holds_at(pos(Pos_Param21, Pos_Ret24), t)),
      not(holds_at(pos(Pos_Param22, Pos_Ret24), start)),
      holds_at(pos(Pos_Param22, Pos_Ret24), t),
      large(Pos_Param22),
      large(Pos_Param21),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(not(holds_at(pos(Pos_Param21, Pos_Ret24), start)),
   
    [ not(holds_at(abnormalEncroachment(Equals_Param23), t)),
      not(holds_at(pos(Pos_Param21, Pos_Ret24), t)),
      not(holds_at(pos(Pos_Param22, Pos_Ret24), start)),
      holds_at(pos(Pos_Param22, Pos_Ret24), t),
      large(Pos_Param22),
      large(Pos_Param21),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  not(large(Pos_Param27)) :-
       ( large(Pos_Param28),
         (   not(equals(Equals_Param26, Pos_Param28))
         ;   not(holds_at(abnormalEncroachment(Equals_Param26),
                          Time25))
         )
       ),
       holds_at(pos(Pos_Param27, Pos_Ret29), Time25),
       not(holds_at(pos(Pos_Param27, Pos_Ret29), Time25+1)),
       not(holds_at(pos(Pos_Param28, Pos_Ret29), Time25)),
       holds_at(pos(Pos_Param28, Pos_Ret29), Time25+1).
 */
axiom(not(large(Pos_Param27)),
   
    [ not(equals(Equals_Param26, Pos_Param28)),
      large(Pos_Param28),
      holds_at(pos(Pos_Param27, Pos_Ret29), t),
      not(holds_at(pos(Pos_Param27, Pos_Ret29), start)),
      not(holds_at(pos(Pos_Param28, Pos_Ret29), t)),
      holds_at(pos(Pos_Param28, Pos_Ret29), start),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(not(large(Pos_Param27)),
   
    [ not(holds_at(abnormalEncroachment(Equals_Param26), t)),
      large(Pos_Param28),
      holds_at(pos(Pos_Param27, Pos_Ret29), t),
      not(holds_at(pos(Pos_Param27, Pos_Ret29), start)),
      not(holds_at(pos(Pos_Param28, Pos_Ret29), t)),
      holds_at(pos(Pos_Param28, Pos_Ret29), start),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  not(large(Pos_Param33)) :-
       (   not(equals(Equals_Param31, Pos_Param33))
       ;   not(holds_at(abnormalEncroachment(Equals_Param31), Time30))
       ),
       large(Pos_Param32),
       holds_at(pos(Pos_Param32, Pos_Ret34), Time30),
       not(holds_at(pos(Pos_Param32, Pos_Ret34), Time30+1)),
       not(holds_at(pos(Pos_Param33, Pos_Ret34), Time30)),
       holds_at(pos(Pos_Param33, Pos_Ret34), Time30+1).
 */
axiom(not(large(Pos_Param33)),
   
    [ not(equals(Equals_Param31, Pos_Param33)),
      large(Pos_Param32),
      holds_at(pos(Pos_Param32, Pos_Ret34), t),
      not(holds_at(pos(Pos_Param32, Pos_Ret34), start)),
      not(holds_at(pos(Pos_Param33, Pos_Ret34), t)),
      holds_at(pos(Pos_Param33, Pos_Ret34), start),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(not(large(Pos_Param33)),
   
    [ not(holds_at(abnormalEncroachment(Equals_Param31), t)),
      large(Pos_Param32),
      holds_at(pos(Pos_Param32, Pos_Ret34), t),
      not(holds_at(pos(Pos_Param32, Pos_Ret34), start)),
      not(holds_at(pos(Pos_Param33, Pos_Ret34), t)),
      holds_at(pos(Pos_Param33, Pos_Ret34), start),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  equals(Equals_Param36, Pos_Param38) :-
       large(Pos_Param38),
       large(Pos_Param37),
       holds_at(pos(Pos_Param37, Pos_Ret39), Time35),
       not(holds_at(pos(Pos_Param37, Pos_Ret39), Time35+1)),
       not(holds_at(pos(Pos_Param38, Pos_Ret39), Time35)),
       holds_at(pos(Pos_Param38, Pos_Ret39), Time35+1).
 */
axiom(equals(Equals_Param36, Pos_Param38),
   
    [ large(Pos_Param38),
      large(Pos_Param37),
      holds_at(pos(Pos_Param37, Pos_Ret39), t),
      not(holds_at(pos(Pos_Param37, Pos_Ret39), start)),
      not(holds_at(pos(Pos_Param38, Pos_Ret39), t)),
      holds_at(pos(Pos_Param38, Pos_Ret39), start),
      b(t, start),
      ignore(t+1=start)
    ]).

 /*  holds_at(abnormalEncroachment(AbnormalEncroachment_Ret), Time40) :-
       large(Pos_Param42),
       large(Pos_Param41),
       holds_at(pos(Pos_Param41, Pos_Ret44), Time40),
       not(holds_at(pos(Pos_Param41, Pos_Ret44), Time40+1)),
       not(holds_at(pos(Pos_Param42, Pos_Ret44), Time40)),
       holds_at(pos(Pos_Param42, Pos_Ret44), Time40+1).
 */
axiom(holds_at(abnormalEncroachment(AbnormalEncroachment_Ret), t),
   
    [ large(Pos_Param42),
      large(Pos_Param41),
      holds_at(pos(Pos_Param41, Pos_Ret44), t),
      not(holds_at(pos(Pos_Param41, Pos_Ret44), start)),
      not(holds_at(pos(Pos_Param42, Pos_Ret44), t)),
      holds_at(pos(Pos_Param42, Pos_Ret44), start),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8664
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8671
axiom(not(exists([Gate], sides(Position1, Position2, Gate))),
   
    [ { dif(Animal1, Animal2)
      },
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), t),
      holds_at(pos(Animal1, Position2), start),
      holds_at(pos(Animal2, Position1), t),
      holds_at(pos(Animal2, Position2), start),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8673
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8680
axiom(not(exists([Gate], sides(Position1, Position2, Gate))),
   
    [ { dif(Animal1, Animal2)
      },
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), t),
      holds_at(pos(Animal1, Position2), start),
      holds_at(pos(Animal2, Position2), t),
      holds_at(pos(Animal2, Position1), start),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8682
% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8688
axiom(not(exists([Animal],  (holds_at(pos(Animal, Position1), t), holds_at(pos(Animal, Position2), t+1)))),
   
    [ holds_at(opened(Gate), t),
      not(holds_at(opened(Gate), start)),
      sides(Position1, Position2, Gate),
      b(t, start),
      ignore(t+1=start)
    ]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8690
% gate GateAO
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8691
==> t(gate,gateAO).

% cage CageA
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8692
==> t(cage,cageA).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8693
% Loc(1)=CageA.
loc(1,cageA).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8694
% Loc(2)=CageA.
loc(2,cageA).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8695
% Loc(3)=CageA.
loc(3,cageA).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8696
% Loc(4)=CageA.
loc(4,cageA).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8697
% Loc(5)=Outside.
loc(5,outside).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8698
% Loc(6)=Outside.
loc(6,outside).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8699
% Loc(7)=Outside.
loc(7,outside).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8700
% Loc(8)=Outside.
loc(8,outside).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8702
% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).

 /*  neighbor(Position1, Position2) <->
       (   Position1=1,
           Position2=2
       ;   Position1=1,
           Position2=3
       ;   Position1=1,
           Position2=4
       ;   Position1=2,
           Position2=3
       ;   Position1=2,
           Position2=4
       ;   Position1=3,
           Position2=4
       ;   Position1=5,
           Position2=6
       ;   Position1=5,
           Position2=7
       ;   Position1=5,
           Position2=8
       ;   Position1=6,
           Position2=7
       ;   Position1=6,
           Position2=8
       ;   Position1=7,
           Position2=8
       ;   Position2=1,
           Position1=2
       ;   Position2=1,
           Position1=3
       ;   Position2=1,
           Position1=4
       ;   Position2=2,
           Position1=3
       ;   Position2=2,
           Position1=4
       ;   Position2=3,
           Position1=4
       ;   Position2=5,
           Position1=6
       ;   Position2=5,
           Position1=7
       ;   Position2=5,
           Position1=8
       ;   Position2=6,
           Position1=7
       ;   Position2=6,
           Position1=8
       ;   Position2=7,
           Position1=8
       ;   Position1=4,
           Position2=7
       ;   Position2=4,
           Position1=7
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8729
axiom(neighbor(Position1, Position2),
    [equals(Position1, 1), equals(Position2, 2)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 1), equals(Position2, 3)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 1), equals(Position2, 4)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 2), equals(Position2, 3)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 2), equals(Position2, 4)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 3), equals(Position2, 4)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 5), equals(Position2, 6)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 5), equals(Position2, 7)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 5), equals(Position2, 8)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 6), equals(Position2, 7)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 6), equals(Position2, 8)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 7), equals(Position2, 8)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 1), equals(Position1, 2)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 1), equals(Position1, 3)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 1), equals(Position1, 4)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 2), equals(Position1, 3)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 2), equals(Position1, 4)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 3), equals(Position1, 4)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 5), equals(Position1, 6)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 5), equals(Position1, 7)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 5), equals(Position1, 8)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 6), equals(Position1, 7)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 6), equals(Position1, 8)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 7), equals(Position1, 8)]).
axiom(neighbor(Position1, Position2),
    [equals(Position1, 4), equals(Position2, 7)]).
axiom(neighbor(Position1, Position2),
    [equals(Position2, 4), equals(Position1, 7)]).

 /*   if(neighbor(Position1, Position2),
          (Position1=1, Position2=2;Position1=1, Position2=3;Position1=1, Position2=4;Position1=2, Position2=3;Position1=2, Position2=4;Position1=3, Position2=4;Position1=5, Position2=6;Position1=5, Position2=7;Position1=5, Position2=8;Position1=6, Position2=7;Position1=6, Position2=8;Position1=7, Position2=8;Position2=1, Position1=2;Position2=1, Position1=3;Position2=1, Position1=4;Position2=2, Position1=3;Position2=2, Position1=4;Position2=3, Position1=4;Position2=5, Position1=6;Position2=5, Position1=7;Position2=5, Position1=8;Position2=6, Position1=7;Position2=6, Position1=8;Position2=7, Position1=8;Position1=4, Position2=7;Position2=4, Position1=7)).
 */
todo_later(if(neighbor(Position1, Position2),  (Position1=1, Position2=2;Position1=1, Position2=3;Position1=1, Position2=4;Position1=2, Position2=3;Position1=2, Position2=4;Position1=3, Position2=4;Position1=5, Position2=6;Position1=5, Position2=7;Position1=5, Position2=8;Position1=6, Position2=7;Position1=6, Position2=8;Position1=7, Position2=8;Position2=1, Position1=2;Position2=1, Position1=3;Position2=1, Position1=4;Position2=2, Position1=3;Position2=2, Position1=4;Position2=3, Position1=4;Position2=5, Position1=6;Position2=5, Position1=7;Position2=5, Position1=8;Position2=6, Position1=7;Position2=6, Position1=8;Position2=7, Position1=8;Position1=4, Position2=7;Position2=4, Position1=7)), [(not(neighbor(Neighbor_Param, Equals_Param)):-(not(equals(Neighbor_Param, 1));not(equals(Equals_Param, 2))), (not(equals(Neighbor_Param, 1));not(equals(Equals_Param, 3))), (not(equals(Neighbor_Param, 1));not(equals(Equals_Param, 4))), (not(equals(Neighbor_Param, 2));not(equals(Equals_Param, 3))), (not(equals(Neighbor_Param, 2));not(equals(Equals_Param, 4))), (not(equals(Neighbor_Param, 3));not(equals(Equals_Param, 4))), (not(equals(Neighbor_Param, 5));not(equals(Equals_Param, 6))), (not(equals(Neighbor_Param, 5));not(equals(Equals_Param, 7))), (not(equals(Neighbor_Param, 5));not(equals(Equals_Param, 8))), (not(equals(Neighbor_Param, 6));not(equals(Equals_Param, 7))), (not(equals(Neighbor_Param, 6));not(equals(Equals_Param, 8))), (not(equals(Neighbor_Param, 7));not(equals(Equals_Param, 8))), (not(equals(Equals_Param, 1));not(equals(Neighbor_Param, 2))), (not(equals(Equals_Param, 1));not(equals(Neighbor_Param, 3))), (not(equals(Equals_Param, 1));not(equals(Neighbor_Param, 4))), (not(equals(Equals_Param, 2));not(equals(Neighbor_Param, 3))), (not(equals(Equals_Param, 2));not(equals(Neighbor_Param, 4))), (not(equals(Equals_Param, 3));not(equals(Neighbor_Param, 4))), (not(equals(Equals_Param, 5));not(equals(Neighbor_Param, 6))), (not(equals(Equals_Param, 5));not(equals(Neighbor_Param, 7))), (not(equals(Equals_Param, 5));not(equals(Neighbor_Param, 8))), (not(equals(Equals_Param, 6));not(equals(Neighbor_Param, 7))), (not(equals(Equals_Param, 6));not(equals(Neighbor_Param, 8))), (not(equals(Equals_Param, 7));not(equals(Neighbor_Param, 8))), (not(equals(Neighbor_Param, 4));not(equals(Equals_Param, 7))), (not(equals(Equals_Param, 4));not(equals(Neighbor_Param, 7)))),  (equals(Equals_Param4, 1):-((not(equals(Equals_Param4, 1));not(equals(Equals_Param5, 3))), (not(equals(Equals_Param4, 1));not(equals(Equals_Param5, 4))), (not(equals(Equals_Param4, 2));not(equals(Equals_Param5, 3))), (not(equals(Equals_Param4, 2));not(equals(Equals_Param5, 4))), (not(equals(Equals_Param4, 3));not(equals(Equals_Param5, 4))), (not(equals(Equals_Param4, 5));not(equals(Equals_Param5, 6))), (not(equals(Equals_Param4, 5));not(equals(Equals_Param5, 7))), (not(equals(Equals_Param4, 5));not(equals(Equals_Param5, 8))), (not(equals(Equals_Param4, 6));not(equals(Equals_Param5, 7))), (not(equals(Equals_Param4, 6));not(equals(Equals_Param5, 8))), (not(equals(Equals_Param4, 7));not(equals(Equals_Param5, 8))), (not(equals(Equals_Param5, 1));not(equals(Equals_Param4, 2))), (not(equals(Equals_Param5, 1));not(equals(Equals_Param4, 3))), (not(equals(Equals_Param5, 1));not(equals(Equals_Param4, 4))), (not(equals(Equals_Param5, 2));not(equals(Equals_Param4, 3))), (not(equals(Equals_Param5, 2));not(equals(Equals_Param4, 4))), (not(equals(Equals_Param5, 3));not(equals(Equals_Param4, 4))), (not(equals(Equals_Param5, 5));not(equals(Equals_Param4, 6))), (not(equals(Equals_Param5, 5));not(equals(Equals_Param4, 7))), (not(equals(Equals_Param5, 5));not(equals(Equals_Param4, 8))), (not(equals(Equals_Param5, 6));not(equals(Equals_Param4, 7))), (not(equals(Equals_Param5, 6));not(equals(Equals_Param4, 8))), (not(equals(Equals_Param5, 7));not(equals(Equals_Param4, 8))), (not(equals(Equals_Param4, 4));not(equals(Equals_Param5, 7))), (not(equals(Equals_Param5, 4));not(equals(Equals_Param4, 7)))), neighbor(Equals_Param4, Equals_Param5)),  (equals(Equals_Param6, 2):-((not(equals(Equals_Param7, 1));not(equals(Equals_Param6, 3))), (not(equals(Equals_Param7, 1));not(equals(Equals_Param6, 4))), (not(equals(Equals_Param7, 2));not(equals(Equals_Param6, 3))), (not(equals(Equals_Param7, 2));not(equals(Equals_Param6, 4))), (not(equals(Equals_Param7, 3));not(equals(Equals_Param6, 4))), (not(equals(Equals_Param7, 5));not(equals(Equals_Param6, 6))), (not(equals(Equals_Param7, 5));not(equals(Equals_Param6, 7))), (not(equals(Equals_Param7, 5));not(equals(Equals_Param6, 8))), (not(equals(Equals_Param7, 6));not(equals(Equals_Param6, 7))), (not(equals(Equals_Param7, 6));not(equals(Equals_Param6, 8))), (not(equals(Equals_Param7, 7));not(equals(Equals_Param6, 8))), (not(equals(Equals_Param6, 1));not(equals(Equals_Param7, 2))), (not(equals(Equals_Param6, 1));not(equals(Equals_Param7, 3))), (not(equals(Equals_Param6, 1));not(equals(Equals_Param7, 4))), (not(equals(Equals_Param6, 2));not(equals(Equals_Param7, 3))), (not(equals(Equals_Param6, 2));not(equals(Equals_Param7, 4))), (not(equals(Equals_Param6, 3));not(equals(Equals_Param7, 4))), (not(equals(Equals_Param6, 5));not(equals(Equals_Param7, 6))), (not(equals(Equals_Param6, 5));not(equals(Equals_Param7, 7))), (not(equals(Equals_Param6, 5));not(equals(Equals_Param7, 8))), (not(equals(Equals_Param6, 6));not(equals(Equals_Param7, 7))), (not(equals(Equals_Param6, 6));not(equals(Equals_Param7, 8))), (not(equals(Equals_Param6, 7));not(equals(Equals_Param7, 8))), (not(equals(Equals_Param7, 4));not(equals(Equals_Param6, 7))), (not(equals(Equals_Param6, 4));not(equals(Equals_Param7, 7)))), neighbor(Equals_Param7, Equals_Param6)),  (equals(Equals_Param8, 1):-((not(equals(Equals_Param8, 1));not(equals(Equals_Param9, 4))), (not(equals(Equals_Param8, 2));not(equals(Equals_Param9, 3))), (not(equals(Equals_Param8, 2));not(equals(Equals_Param9, 4))), (not(equals(Equals_Param8, 3));not(equals(Equals_Param9, 4))), (not(equals(Equals_Param8, 5));not(equals(Equals_Param9, 6))), (not(equals(Equals_Param8, 5));not(equals(Equals_Param9, 7))), (not(equals(Equals_Param8, 5));not(equals(Equals_Param9, 8))), (not(equals(Equals_Param8, 6));not(equals(Equals_Param9, 7))), (not(equals(Equals_Param8, 6));not(equals(Equals_Param9, 8))), (not(equals(Equals_Param8, 7));not(equals(Equals_Param9, 8))), (not(equals(Equals_Param9, 1));not(equals(Equals_Param8, 2))), (not(equals(Equals_Param9, 1));not(equals(Equals_Param8, 3))), (not(equals(Equals_Param9, 1));not(equals(Equals_Param8, 4))), (not(equals(Equals_Param9, 2));not(equals(Equals_Param8, 3))), (not(equals(Equals_Param9, 2));not(equals(Equals_Param8, 4))), (not(equals(Equals_Param9, 3));not(equals(Equals_Param8, 4))), (not(equals(Equals_Param9, 5));not(equals(Equals_Param8, 6))), (not(equals(Equals_Param9, 5));not(equals(Equals_Param8, 7))), (not(equals(Equals_Param9, 5));not(equals(Equals_Param8, 8))), (not(equals(Equals_Param9, 6));not(equals(Equals_Param8, 7))), (not(equals(Equals_Param9, 6));not(equals(Equals_Param8, 8))), (not(equals(Equals_Param9, 7));not(equals(Equals_Param8, 8))), (not(equals(Equals_Param8, 4));not(equals(Equals_Param9, 7))), (not(equals(Equals_Param9, 4));not(equals(Equals_Param8, 7)))), (not(equals(Equals_Param8, 1));not(equals(Equals_Param9, 2))), neighbor(Equals_Param8, Equals_Param9)),  (equals(Equals_Param10, 3):-((not(equals(Equals_Param11, 1));not(equals(Equals_Param10, 4))), (not(equals(Equals_Param11, 2));not(equals(Equals_Param10, 3))), (not(equals(Equals_Param11, 2));not(equals(Equals_Param10, 4))), (not(equals(Equals_Param11, 3));not(equals(Equals_Param10, 4))), (not(equals(Equals_Param11, 5));not(equals(Equals_Param10, 6))), (not(equals(Equals_Param11, 5));not(equals(Equals_Param10, 7))), (not(equals(Equals_Param11, 5));not(equals(Equals_Param10, 8))), (not(equals(Equals_Param11, 6));not(equals(Equals_Param10, 7))), (not(equals(Equals_Param11, 6));not(equals(Equals_Param10, 8))), (not(equals(Equals_Param11, 7));not(equals(Equals_Param10, 8))), (not(equals(Equals_Param10, 1));not(equals(Equals_Param11, 2))), (not(equals(Equals_Param10, 1));not(equals(Equals_Param11, 3))), (not(equals(Equals_Param10, 1));not(equals(Equals_Param11, 4))), (not(equals(Equals_Param10, 2));not(equals(Equals_Param11, 3))), (not(equals(Equals_Param10, 2));not(equals(Equals_Param11, 4))), (not(equals(Equals_Param10, 3));not(equals(Equals_Param11, 4))), (not(equals(Equals_Param10, 5));not(equals(Equals_Param11, 6))), (not(equals(Equals_Param10, 5));not(equals(Equals_Param11, 7))), (not(equals(Equals_Param10, 5));not(equals(Equals_Param11, 8))), (not(equals(Equals_Param10, 6));not(equals(Equals_Param11, 7))), (not(equals(Equals_Param10, 6));not(equals(Equals_Param11, 8))), (not(equals(Equals_Param10, 7));not(equals(Equals_Param11, 8))), (not(equals(Equals_Param11, 4));not(equals(Equals_Param10, 7))), (not(equals(Equals_Param10, 4));not(equals(Equals_Param11, 7)))), (not(equals(Equals_Param11, 1));not(equals(Equals_Param10, 2))), neighbor(Equals_Param11, Equals_Param10)),  (equals(Equals_Param12, 1):-((not(equals(Equals_Param12, 2));not(equals(Equals_Param13, 3))), (not(equals(Equals_Param12, 2));not(equals(Equals_Param13, 4))), (not(equals(Equals_Param12, 3));not(equals(Equals_Param13, 4))), (not(equals(Equals_Param12, 5));not(equals(Equals_Param13, 6))), (not(equals(Equals_Param12, 5));not(equals(Equals_Param13, 7))), (not(equals(Equals_Param12, 5));not(equals(Equals_Param13, 8))), (not(equals(Equals_Param12, 6));not(equals(Equals_Param13, 7))), (not(equals(Equals_Param12, 6));not(equals(Equals_Param13, 8))), (not(equals(Equals_Param12, 7));not(equals(Equals_Param13, 8))), (not(equals(Equals_Param13, 1));not(equals(Equals_Param12, 2))), (not(equals(Equals_Param13, 1));not(equals(Equals_Param12, 3))), (not(equals(Equals_Param13, 1));not(equals(Equals_Param12, 4))), (not(equals(Equals_Param13, 2));not(equals(Equals_Param12, 3))), (not(equals(Equals_Param13, 2));not(equals(Equals_Param12, 4))), (not(equals(Equals_Param13, 3));not(equals(Equals_Param12, 4))), (not(equals(Equals_Param13, 5));not(equals(Equals_Param12, 6))), (not(equals(Equals_Param13, 5));not(equals(Equals_Param12, 7))), (not(equals(Equals_Param13, 5));not(equals(Equals_Param12, 8))), (not(equals(Equals_Param13, 6));not(equals(Equals_Param12, 7))), (not(equals(Equals_Param13, 6));not(equals(Equals_Param12, 8))), (not(equals(Equals_Param13, 7));not(equals(Equals_Param12, 8))), (not(equals(Equals_Param12, 4));not(equals(Equals_Param13, 7))), (not(equals(Equals_Param13, 4));not(equals(Equals_Param12, 7)))), (not(equals(Equals_Param12, 1));not(equals(Equals_Param13, 3))), (not(equals(Equals_Param12, 1));not(equals(Equals_Param13, 2))), neighbor(Equals_Param12, Equals_Param13)),  (equals(Equals_Param14, 4):-((not(equals(Equals_Param15, 2));not(equals(Equals_Param14, 3))), (not(equals(Equals_Param15, 2));not(equals(Equals_Param14, 4))), (not(equals(Equals_Param15, 3));not(equals(Equals_Param14, 4))), (not(equals(Equals_Param15, 5));not(equals(Equals_Param14, 6))), (not(equals(Equals_Param15, 5));not(equals(Equals_Param14, 7))), (not(equals(Equals_Param15, 5));not(equals(Equals_Param14, 8))), (not(equals(Equals_Param15, 6));not(equals(Equals_Param14, 7))), (not(equals(Equals_Param15, 6));not(equals(Equals_Param14, 8))), (not(equals(Equals_Param15, 7));not(equals(Equals_Param14, 8))), (not(equals(Equals_Param14, 1));not(equals(Equals_Param15, 2))), (not(equals(Equals_Param14, 1));not(equals(Equals_Param15, 3))), (not(equals(Equals_Param14, 1));not(equals(Equals_Param15, 4))), (not(equals(Equals_Param14, 2));not(equals(Equals_Param15, 3))), (not(equals(Equals_Param14, 2));not(equals(Equals_Param15, 4))), (not(equals(Equals_Param14, 3));not(equals(Equals_Param15, 4))), (not(equals(Equals_Param14, 5));not(equals(Equals_Param15, 6))), (not(equals(Equals_Param14, 5));not(equals(Equals_Param15, 7))), (not(equals(Equals_Param14, 5));not(equals(Equals_Param15, 8))), (not(equals(Equals_Param14, 6));not(equals(Equals_Param15, 7))), (not(equals(Equals_Param14, 6));not(equals(Equals_Param15, 8))), (not(equals(Equals_Param14, 7));not(equals(Equals_Param15, 8))), (not(equals(Equals_Param15, 4));not(equals(Equals_Param14, 7))), (not(equals(Equals_Param14, 4));not(equals(Equals_Param15, 7)))), (not(equals(Equals_Param15, 1));not(equals(Equals_Param14, 3))), (not(equals(Equals_Param15, 1));not(equals(Equals_Param14, 2))), neighbor(Equals_Param15, Equals_Param14)),  (equals(Equals_Param16, 2):-((not(equals(Equals_Param16, 2));not(equals(Equals_Param17, 4))), (not(equals(Equals_Param16, 3));not(equals(Equals_Param17, 4))), (not(equals(Equals_Param16, 5));not(equals(Equals_Param17, 6))), (not(equals(Equals_Param16, 5));not(equals(Equals_Param17, 7))), (not(equals(Equals_Param16, 5));not(equals(Equals_Param17, 8))), (not(equals(Equals_Param16, 6));not(equals(Equals_Param17, 7))), (not(equals(Equals_Param16, 6));not(equals(Equals_Param17, 8))), (not(equals(Equals_Param16, 7));not(equals(Equals_Param17, 8))), (not(equals(Equals_Param17, 1));not(equals(Equals_Param16, 2))), (not(equals(Equals_Param17, 1));not(equals(Equals_Param16, 3))), (not(equals(Equals_Param17, 1));not(equals(Equals_Param16, 4))), (not(equals(Equals_Param17, 2));not(equals(Equals_Param16, 3))), (not(equals(Equals_Param17, 2));not(equals(Equals_Param16, 4))), (not(equals(Equals_Param17, 3));not(equals(Equals_Param16, 4))), (not(equals(Equals_Param17, 5));not(equals(Equals_Param16, 6))), (not(equals(Equals_Param17, 5));not(equals(Equals_Param16, 7))), (not(equals(Equals_Param17, 5));not(equals(Equals_Param16, 8))), (not(equals(Equals_Param17, 6));not(equals(Equals_Param16, 7))), (not(equals(Equals_Param17, 6));not(equals(Equals_Param16, 8))), (not(equals(Equals_Param17, 7));not(equals(Equals_Param16, 8))), (not(equals(Equals_Param16, 4));not(equals(Equals_Param17, 7))), (not(equals(Equals_Param17, 4));not(equals(Equals_Param16, 7)))), (not(equals(Equals_Param16, 1));not(equals(Equals_Param17, 4))), (not(equals(Equals_Param16, 1));not(equals(Equals_Param17, 3))), (not(equals(Equals_Param16, 1));not(equals(Equals_Param17, 2))), neighbor(Equals_Param16, Equals_Param17)),  (equals(Equals_Param18, 3):-((not(equals(Equals_Param19, 2));not(equals(Equals_Param18, 4))), (not(equals(Equals_Param19, 3));not(equals(Equals_Param18, 4))), (not(equals(Equals_Param19, 5));not(equals(Equals_Param18, 6))), (not(equals(Equals_Param19, 5));not(equals(Equals_Param18, 7))), (not(equals(Equals_Param19, 5));not(equals(Equals_Param18, 8))), (not(equals(Equals_Param19, 6));not(equals(Equals_Param18, 7))), (not(equals(Equals_Param19, 6));not(equals(Equals_Param18, 8))), (not(equals(Equals_Param19, 7));not(equals(Equals_Param18, 8))), (not(equals(Equals_Param18, 1));not(equals(Equals_Param19, 2))), (not(equals(Equals_Param18, 1));not(equals(Equals_Param19, 3))), (not(equals(Equals_Param18, 1));not(equals(Equals_Param19, 4))), (not(equals(Equals_Param18, 2));not(equals(Equals_Param19, 3))), (not(equals(Equals_Param18, 2));not(equals(Equals_Param19, 4))), (not(equals(Equals_Param18, 3));not(equals(Equals_Param19, 4))), (not(equals(Equals_Param18, 5));not(equals(Equals_Param19, 6))), (not(equals(Equals_Param18, 5));not(equals(Equals_Param19, 7))), (not(equals(Equals_Param18, 5));not(equals(Equals_Param19, 8))), (not(equals(Equals_Param18, 6));not(equals(Equals_Param19, 7))), (not(equals(Equals_Param18, 6));not(equals(Equals_Param19, 8))), (not(equals(Equals_Param18, 7));not(equals(Equals_Param19, 8))), (not(equals(Equals_Param19, 4));not(equals(Equals_Param18, 7))), (not(equals(Equals_Param18, 4));not(equals(Equals_Param19, 7)))), (not(equals(Equals_Param19, 1));not(equals(Equals_Param18, 4))), (not(equals(Equals_Param19, 1));not(equals(Equals_Param18, 3))), (not(equals(Equals_Param19, 1));not(equals(Equals_Param18, 2))), neighbor(Equals_Param19, Equals_Param18)),  (equals(Equals_Param20, 2):-((not(equals(Equals_Param20, 3));not(equals(Equals_Param21, 4))), (not(equals(Equals_Param20, 5));not(equals(Equals_Param21, 6))), (not(equals(Equals_Param20, 5));not(equals(Equals_Param21, 7))), (not(equals(Equals_Param20, 5));not(equals(Equals_Param21, 8))), (not(equals(Equals_Param20, 6));not(equals(Equals_Param21, 7))), (not(equals(Equals_Param20, 6));not(equals(Equals_Param21, 8))), (not(equals(Equals_Param20, 7));not(equals(Equals_Param21, 8))), (not(equals(Equals_Param21, 1));not(equals(Equals_Param20, 2))), (not(equals(Equals_Param21, 1));not(equals(Equals_Param20, 3))), (not(equals(Equals_Param21, 1));not(equals(Equals_Param20, 4))), (not(equals(Equals_Param21, 2));not(equals(Equals_Param20, 3))), (not(equals(Equals_Param21, 2));not(equals(Equals_Param20, 4))), (not(equals(Equals_Param21, 3));not(equals(Equals_Param20, 4))), (not(equals(Equals_Param21, 5));not(equals(Equals_Param20, 6))), (not(equals(Equals_Param21, 5));not(equals(Equals_Param20, 7))), (not(equals(Equals_Param21, 5));not(equals(Equals_Param20, 8))), (not(equals(Equals_Param21, 6));not(equals(Equals_Param20, 7))), (not(equals(Equals_Param21, 6));not(equals(Equals_Param20, 8))), (not(equals(Equals_Param21, 7));not(equals(Equals_Param20, 8))), (not(equals(Equals_Param20, 4));not(equals(Equals_Param21, 7))), (not(equals(Equals_Param21, 4));not(equals(Equals_Param20, 7)))), (not(equals(Equals_Param20, 2));not(equals(Equals_Param21, 3))), (not(equals(Equals_Param20, 1));not(equals(Equals_Param21, 4))), (not(equals(Equals_Param20, 1));not(equals(Equals_Param21, 3))), (not(equals(Equals_Param20, 1));not(equals(Equals_Param21, 2))), neighbor(Equals_Param20, Equals_Param21)),  (equals(Equals_Param22, 4):-((not(equals(Equals_Param23, 3));not(equals(Equals_Param22, 4))), (not(equals(Equals_Param23, 5));not(equals(Equals_Param22, 6))), (not(equals(Equals_Param23, 5));not(equals(Equals_Param22, 7))), (not(equals(Equals_Param23, 5));not(equals(Equals_Param22, 8))), (not(equals(Equals_Param23, 6));not(equals(Equals_Param22, 7))), (not(equals(Equals_Param23, 6));not(equals(Equals_Param22, 8))), (not(equals(Equals_Param23, 7));not(equals(Equals_Param22, 8))), (not(equals(Equals_Param22, 1));not(equals(Equals_Param23, 2))), (not(equals(Equals_Param22, 1));not(equals(Equals_Param23, 3))), (not(equals(Equals_Param22, 1));not(equals(Equals_Param23, 4))), (not(equals(Equals_Param22, 2));not(equals(Equals_Param23, 3))), (not(equals(Equals_Param22, 2));not(equals(Equals_Param23, 4))), (not(equals(Equals_Param22, 3));not(equals(Equals_Param23, 4))), (not(equals(Equals_Param22, 5));not(equals(Equals_Param23, 6))), (not(equals(Equals_Param22, 5));not(equals(Equals_Param23, 7))), (not(equals(Equals_Param22, 5));not(equals(Equals_Param23, 8))), (not(equals(Equals_Param22, 6));not(equals(Equals_Param23, 7))), (not(equals(Equals_Param22, 6));not(equals(Equals_Param23, 8))), (not(equals(Equals_Param22, 7));not(equals(Equals_Param23, 8))), (not(equals(Equals_Param23, 4));not(equals(Equals_Param22, 7))), (not(equals(Equals_Param22, 4));not(equals(Equals_Param23, 7)))), (not(equals(Equals_Param23, 2));not(equals(Equals_Param22, 3))), (not(equals(Equals_Param23, 1));not(equals(Equals_Param22, 4))), (not(equals(Equals_Param23, 1));not(equals(Equals_Param22, 3))), (not(equals(Equals_Param23, 1));not(equals(Equals_Param22, 2))), neighbor(Equals_Param23, Equals_Param22)),  (equals(Equals_Param24, 3):-((not(equals(Equals_Param24, 5));not(equals(Equals_Param25, 6))), (not(equals(Equals_Param24, 5));not(equals(Equals_Param25, 7))), (not(equals(Equals_Param24, 5));not(equals(Equals_Param25, 8))), (not(equals(Equals_Param24, 6));not(equals(Equals_Param25, 7))), (not(equals(Equals_Param24, 6));not(equals(Equals_Param25, 8))), (not(equals(Equals_Param24, 7));not(equals(Equals_Param25, 8))), (not(equals(Equals_Param25, 1));not(equals(Equals_Param24, 2))), (not(equals(Equals_Param25, 1));not(equals(Equals_Param24, 3))), (not(equals(Equals_Param25, 1));not(equals(Equals_Param24, 4))), (not(equals(Equals_Param25, 2));not(equals(Equals_Param24, 3))), (not(equals(Equals_Param25, 2));not(equals(Equals_Param24, 4))), (not(equals(Equals_Param25, 3));not(equals(Equals_Param24, 4))), (not(equals(Equals_Param25, 5));not(equals(Equals_Param24, 6))), (not(equals(Equals_Param25, 5));not(equals(Equals_Param24, 7))), (not(equals(Equals_Param25, 5));not(equals(Equals_Param24, 8))), (not(equals(Equals_Param25, 6));not(equals(Equals_Param24, 7))), (not(equals(Equals_Param25, 6));not(equals(Equals_Param24, 8))), (not(equals(Equals_Param25, 7));not(equals(Equals_Param24, 8))), (not(equals(Equals_Param24, 4));not(equals(Equals_Param25, 7))), (not(equals(Equals_Param25, 4));not(equals(Equals_Param24, 7)))), (not(equals(Equals_Param24, 2));not(equals(Equals_Param25, 4))), (not(equals(Equals_Param24, 2));not(equals(Equals_Param25, 3))), (not(equals(Equals_Param24, 1));not(equals(Equals_Param25, 4))), (not(equals(Equals_Param24, 1));not(equals(Equals_Param25, 3))), (not(equals(Equals_Param24, 1));not(equals(Equals_Param25, 2))), neighbor(Equals_Param24, Equals_Param25)),  (equals(Equals_Param26, 4):-((not(equals(Equals_Param27, 5));not(equals(Equals_Param26, 6))), (not(equals(Equals_Param27, 5));not(equals(Equals_Param26, 7))), (not(equals(Equals_Param27, 5));not(equals(Equals_Param26, 8))), (not(equals(Equals_Param27, 6));not(equals(Equals_Param26, 7))), (not(equals(Equals_Param27, 6));not(equals(Equals_Param26, 8))), (not(equals(Equals_Param27, 7));not(equals(Equals_Param26, 8))), (not(equals(Equals_Param26, 1));not(equals(Equals_Param27, 2))), (not(equals(Equals_Param26, 1));not(equals(Equals_Param27, 3))), (not(equals(Equals_Param26, 1));not(equals(Equals_Param27, 4))), (not(equals(Equals_Param26, 2));not(equals(Equals_Param27, 3))), (not(equals(Equals_Param26, 2));not(equals(Equals_Param27, 4))), (not(equals(Equals_Param26, 3));not(equals(Equals_Param27, 4))), (not(equals(Equals_Param26, 5));not(equals(Equals_Param27, 6))), (not(equals(Equals_Param26, 5));not(equals(Equals_Param27, 7))), (not(equals(Equals_Param26, 5));not(equals(Equals_Param27, 8))), (not(equals(Equals_Param26, 6));not(equals(Equals_Param27, 7))), (not(equals(Equals_Param26, 6));not(equals(Equals_Param27, 8))), (not(equals(Equals_Param26, 7));not(equals(Equals_Param27, 8))), (not(equals(Equals_Param27, 4));not(equals(Equals_Param26, 7))), (not(equals(Equals_Param26, 4));not(equals(Equals_Param27, 7)))), (not(equals(Equals_Param27, 2));not(equals(Equals_Param26, 4))), (not(equals(Equals_Param27, 2));not(equals(Equals_Param26, 3))), (not(equals(Equals_Param27, 1));not(equals(Equals_Param26, 4))), (not(equals(Equals_Param27, 1));not(equals(Equals_Param26, 3))), (not(equals(Equals_Param27, 1));not(equals(Equals_Param26, 2))), neighbor(Equals_Param27, Equals_Param26)),  (equals(Equals_Param28, 5):-((not(equals(Equals_Param28, 5));not(equals(Equals_Param29, 7))), (not(equals(Equals_Param28, 5));not(equals(Equals_Param29, 8))), (not(equals(Equals_Param28, 6));not(equals(Equals_Param29, 7))), (not(equals(Equals_Param28, 6));not(equals(Equals_Param29, 8))), (not(equals(Equals_Param28, 7));not(equals(Equals_Param29, 8))), (not(equals(Equals_Param29, 1));not(equals(Equals_Param28, 2))), (not(equals(Equals_Param29, 1));not(equals(Equals_Param28, 3))), (not(equals(Equals_Param29, 1));not(equals(Equals_Param28, 4))), (not(equals(Equals_Param29, 2));not(equals(Equals_Param28, 3))), (not(equals(Equals_Param29, 2));not(equals(Equals_Param28, 4))), (not(equals(Equals_Param29, 3));not(equals(Equals_Param28, 4))), (not(equals(Equals_Param29, 5));not(equals(Equals_Param28, 6))), (not(equals(Equals_Param29, 5));not(equals(Equals_Param28, 7))), (not(equals(Equals_Param29, 5));not(equals(Equals_Param28, 8))), (not(equals(Equals_Param29, 6));not(equals(Equals_Param28, 7))), (not(equals(Equals_Param29, 6));not(equals(Equals_Param28, 8))), (not(equals(Equals_Param29, 7));not(equals(Equals_Param28, 8))), (not(equals(Equals_Param28, 4));not(equals(Equals_Param29, 7))), (not(equals(Equals_Param29, 4));not(equals(Equals_Param28, 7)))), (not(equals(Equals_Param28, 3));not(equals(Equals_Param29, 4))), (not(equals(Equals_Param28, 2));not(equals(Equals_Param29, 4))), (not(equals(Equals_Param28, 2));not(equals(Equals_Param29, 3))), (not(equals(Equals_Param28, 1));not(equals(Equals_Param29, 4))), (not(equals(Equals_Param28, 1));not(equals(Equals_Param29, 3))), (not(equals(Equals_Param28, 1));not(equals(Equals_Param29, 2))), neighbor(Equals_Param28, Equals_Param29)),  (equals(Equals_Param30, 6):-((not(equals(Equals_Param31, 5));not(equals(Equals_Param30, 7))), (not(equals(Equals_Param31, 5));not(equals(Equals_Param30, 8))), (not(equals(Equals_Param31, 6));not(equals(Equals_Param30, 7))), (not(equals(Equals_Param31, 6));not(equals(Equals_Param30, 8))), (not(equals(Equals_Param31, 7));not(equals(Equals_Param30, 8))), (not(equals(Equals_Param30, 1));not(equals(Equals_Param31, 2))), (not(equals(Equals_Param30, 1));not(equals(Equals_Param31, 3))), (not(equals(Equals_Param30, 1));not(equals(Equals_Param31, 4))), (not(equals(Equals_Param30, 2));not(equals(Equals_Param31, 3))), (not(equals(Equals_Param30, 2));not(equals(Equals_Param31, 4))), (not(equals(Equals_Param30, 3));not(equals(Equals_Param31, 4))), (not(equals(Equals_Param30, 5));not(equals(Equals_Param31, 6))), (not(equals(Equals_Param30, 5));not(equals(Equals_Param31, 7))), (not(equals(Equals_Param30, 5));not(equals(Equals_Param31, 8))), (not(equals(Equals_Param30, 6));not(equals(Equals_Param31, 7))), (not(equals(Equals_Param30, 6));not(equals(Equals_Param31, 8))), (not(equals(Equals_Param30, 7));not(equals(Equals_Param31, 8))), (not(equals(Equals_Param31, 4));not(equals(Equals_Param30, 7))), (not(equals(Equals_Param30, 4));not(equals(Equals_Param31, 7)))), (not(equals(Equals_Param31, 3));not(equals(Equals_Param30, 4))), (not(equals(Equals_Param31, 2));not(equals(Equals_Param30, 4))), (not(equals(Equals_Param31, 2));not(equals(Equals_Param30, 3))), (not(equals(Equals_Param31, 1));not(equals(Equals_Param30, 4))), (not(equals(Equals_Param31, 1));not(equals(Equals_Param30, 3))), (not(equals(Equals_Param31, 1));not(equals(Equals_Param30, 2))), neighbor(Equals_Param31, Equals_Param30)),  (equals(Equals_Param32, 5):-((not(equals(Equals_Param32, 5));not(equals(Equals_Param33, 8))), (not(equals(Equals_Param32, 6));not(equals(Equals_Param33, 7))), (not(equals(Equals_Param32, 6));not(equals(Equals_Param33, 8))), (not(equals(Equals_Param32, 7));not(equals(Equals_Param33, 8))), (not(equals(Equals_Param33, 1));not(equals(Equals_Param32, 2))), (not(equals(Equals_Param33, 1));not(equals(Equals_Param32, 3))), (not(equals(Equals_Param33, 1));not(equals(Equals_Param32, 4))), (not(equals(Equals_Param33, 2));not(equals(Equals_Param32, 3))), (not(equals(Equals_Param33, 2));not(equals(Equals_Param32, 4))), (not(equals(Equals_Param33, 3));not(equals(Equals_Param32, 4))), (not(equals(Equals_Param33, 5));not(equals(Equals_Param32, 6))), (not(equals(Equals_Param33, 5));not(equals(Equals_Param32, 7))), (not(equals(Equals_Param33, 5));not(equals(Equals_Param32, 8))), (not(equals(Equals_Param33, 6));not(equals(Equals_Param32, 7))), (not(equals(Equals_Param33, 6));not(equals(Equals_Param32, 8))), (not(equals(Equals_Param33, 7));not(equals(Equals_Param32, 8))), (not(equals(Equals_Param32, 4));not(equals(Equals_Param33, 7))), (not(equals(Equals_Param33, 4));not(equals(Equals_Param32, 7)))), (not(equals(Equals_Param32, 5));not(equals(Equals_Param33, 6))), (not(equals(Equals_Param32, 3));not(equals(Equals_Param33, 4))), (not(equals(Equals_Param32, 2));not(equals(Equals_Param33, 4))), (not(equals(Equals_Param32, 2));not(equals(Equals_Param33, 3))), (not(equals(Equals_Param32, 1));not(equals(Equals_Param33, 4))), (not(equals(Equals_Param32, 1));not(equals(Equals_Param33, 3))), (not(equals(Equals_Param32, 1));not(equals(Equals_Param33, 2))), neighbor(Equals_Param32, Equals_Param33)),  (equals(Equals_Param34, 7):-((not(equals(Equals_Param35, 5));not(equals(Equals_Param34, 8))), (not(equals(Equals_Param35, 6));not(equals(Equals_Param34, 7))), (not(equals(Equals_Param35, 6));not(equals(Equals_Param34, 8))), (not(equals(Equals_Param35, 7));not(equals(Equals_Param34, 8))), (not(equals(Equals_Param34, 1));not(equals(Equals_Param35, 2))), (not(equals(Equals_Param34, 1));not(equals(Equals_Param35, 3))), (not(equals(Equals_Param34, 1));not(equals(Equals_Param35, 4))), (not(equals(Equals_Param34, 2));not(equals(Equals_Param35, 3))), (not(equals(Equals_Param34, 2));not(equals(Equals_Param35, 4))), (not(equals(Equals_Param34, 3));not(equals(Equals_Param35, 4))), (not(equals(Equals_Param34, 5));not(equals(Equals_Param35, 6))), (not(equals(Equals_Param34, 5));not(equals(Equals_Param35, 7))), (not(equals(Equals_Param34, 5));not(equals(Equals_Param35, 8))), (not(equals(Equals_Param34, 6));not(equals(Equals_Param35, 7))), (not(equals(Equals_Param34, 6));not(equals(Equals_Param35, 8))), (not(equals(Equals_Param34, 7));not(equals(Equals_Param35, 8))), (not(equals(Equals_Param35, 4));not(equals(Equals_Param34, 7))), (not(equals(Equals_Param34, 4));not(equals(Equals_Param35, 7)))), (not(equals(Equals_Param35, 5));not(equals(Equals_Param34, 6))), (not(equals(Equals_Param35, 3));not(equals(Equals_Param34, 4))), (not(equals(Equals_Param35, 2));not(equals(Equals_Param34, 4))), (not(equals(Equals_Param35, 2));not(equals(Equals_Param34, 3))), (not(equals(Equals_Param35, 1));not(equals(Equals_Param34, 4))), (not(equals(Equals_Param35, 1));not(equals(Equals_Param34, 3))), (not(equals(Equals_Param35, 1));not(equals(Equals_Param34, 2))), neighbor(Equals_Param35, Equals_Param34)),  (equals(Equals_Param36, 5):-((not(equals(Equals_Param36, 6));not(equals(Equals_Param37, 7))), (not(equals(Equals_Param36, 6));not(equals(Equals_Param37, 8))), (not(equals(Equals_Param36, 7));not(equals(Equals_Param37, 8))), (not(equals(Equals_Param37, 1));not(equals(Equals_Param36, 2))), (not(equals(Equals_Param37, 1));not(equals(Equals_Param36, 3))), (not(equals(Equals_Param37, 1));not(equals(Equals_Param36, 4))), (not(equals(Equals_Param37, 2));not(equals(Equals_Param36, 3))), (not(equals(Equals_Param37, 2));not(equals(Equals_Param36, 4))), (not(equals(Equals_Param37, 3));not(equals(Equals_Param36, 4))), (not(equals(Equals_Param37, 5));not(equals(Equals_Param36, 6))), (not(equals(Equals_Param37, 5));not(equals(Equals_Param36, 7))), (not(equals(Equals_Param37, 5));not(equals(Equals_Param36, 8))), (not(equals(Equals_Param37, 6));not(equals(Equals_Param36, 7))), (not(equals(Equals_Param37, 6));not(equals(Equals_Param36, 8))), (not(equals(Equals_Param37, 7));not(equals(Equals_Param36, 8))), (not(equals(Equals_Param36, 4));not(equals(Equals_Param37, 7))), (not(equals(Equals_Param37, 4));not(equals(Equals_Param36, 7)))), (not(equals(Equals_Param36, 5));not(equals(Equals_Param37, 7))), (not(equals(Equals_Param36, 5));not(equals(Equals_Param37, 6))), (not(equals(Equals_Param36, 3));not(equals(Equals_Param37, 4))), (not(equals(Equals_Param36, 2));not(equals(Equals_Param37, 4))), (not(equals(Equals_Param36, 2));not(equals(Equals_Param37, 3))), (not(equals(Equals_Param36, 1));not(equals(Equals_Param37, 4))), (not(equals(Equals_Param36, 1));not(equals(Equals_Param37, 3))), (not(equals(Equals_Param36, 1));not(equals(Equals_Param37, 2))), neighbor(Equals_Param36, Equals_Param37)),  (equals(Equals_Param38, 8):-((not(equals(Equals_Param39, 6));not(equals(Equals_Param38, 7))), (not(equals(Equals_Param39, 6));not(equals(Equals_Param38, 8))), (not(equals(Equals_Param39, 7));not(equals(Equals_Param38, 8))), (not(equals(Equals_Param38, 1));not(equals(Equals_Param39, 2))), (not(equals(Equals_Param38, 1));not(equals(Equals_Param39, 3))), (not(equals(Equals_Param38, 1));not(equals(Equals_Param39, 4))), (not(equals(Equals_Param38, 2));not(equals(Equals_Param39, 3))), (not(equals(Equals_Param38, 2));not(equals(Equals_Param39, 4))), (not(equals(Equals_Param38, 3));not(equals(Equals_Param39, 4))), (not(equals(Equals_Param38, 5));not(equals(Equals_Param39, 6))), (not(equals(Equals_Param38, 5));not(equals(Equals_Param39, 7))), (not(equals(Equals_Param38, 5));not(equals(Equals_Param39, 8))), (not(equals(Equals_Param38, 6));not(equals(Equals_Param39, 7))), (not(equals(Equals_Param38, 6));not(equals(Equals_Param39, 8))), (not(equals(Equals_Param38, 7));not(equals(Equals_Param39, 8))), (not(equals(Equals_Param39, 4));not(equals(Equals_Param38, 7))), (not(equals(Equals_Param38, 4));not(equals(Equals_Param39, 7)))), (not(equals(Equals_Param39, 5));not(equals(Equals_Param38, 7))), (not(equals(Equals_Param39, 5));not(equals(Equals_Param38, 6))), (not(equals(Equals_Param39, 3));not(equals(Equals_Param38, 4))), (not(equals(Equals_Param39, 2));not(equals(Equals_Param38, 4))), (not(equals(Equals_Param39, 2));not(equals(Equals_Param38, 3))), (not(equals(Equals_Param39, 1));not(equals(Equals_Param38, 4))), (not(equals(Equals_Param39, 1));not(equals(Equals_Param38, 3))), (not(equals(Equals_Param39, 1));not(equals(Equals_Param38, 2))), neighbor(Equals_Param39, Equals_Param38)),  (equals(Equals_Param40, 6):-((not(equals(Equals_Param40, 6));not(equals(Equals_Param41, 8))), (not(equals(Equals_Param40, 7));not(equals(Equals_Param41, 8))), (not(equals(Equals_Param41, 1));not(equals(Equals_Param40, 2))), (not(equals(Equals_Param41, 1));not(equals(Equals_Param40, 3))), (not(equals(Equals_Param41, 1));not(equals(Equals_Param40, 4))), (not(equals(Equals_Param41, 2));not(equals(Equals_Param40, 3))), (not(equals(Equals_Param41, 2));not(equals(Equals_Param40, 4))), (not(equals(Equals_Param41, 3));not(equals(Equals_Param40, 4))), (not(equals(Equals_Param41, 5));not(equals(Equals_Param40, 6))), (not(equals(Equals_Param41, 5));not(equals(Equals_Param40, 7))), (not(equals(Equals_Param41, 5));not(equals(Equals_Param40, 8))), (not(equals(Equals_Param41, 6));not(equals(Equals_Param40, 7))), (not(equals(Equals_Param41, 6));not(equals(Equals_Param40, 8))), (not(equals(Equals_Param41, 7));not(equals(Equals_Param40, 8))), (not(equals(Equals_Param40, 4));not(equals(Equals_Param41, 7))), (not(equals(Equals_Param41, 4));not(equals(Equals_Param40, 7)))), (not(equals(Equals_Param40, 5));not(equals(Equals_Param41, 8))), (not(equals(Equals_Param40, 5));not(equals(Equals_Param41, 7))), (not(equals(Equals_Param40, 5));not(equals(Equals_Param41, 6))), (not(equals(Equals_Param40, 3));not(equals(Equals_Param41, 4))), (not(equals(Equals_Param40, 2));not(equals(Equals_Param41, 4))), (not(equals(Equals_Param40, 2));not(equals(Equals_Param41, 3))), (not(equals(Equals_Param40, 1));not(equals(Equals_Param41, 4))), (not(equals(Equals_Param40, 1));not(equals(Equals_Param41, 3))), (not(equals(Equals_Param40, 1));not(equals(Equals_Param41, 2))), neighbor(Equals_Param40, Equals_Param41)),  (equals(Equals_Param42, 7):-((not(equals(Equals_Param43, 6));not(equals(Equals_Param42, 8))), (not(equals(Equals_Param43, 7));not(equals(Equals_Param42, 8))), (not(equals(Equals_Param42, 1));not(equals(Equals_Param43, 2))), (not(equals(Equals_Param42, 1));not(equals(Equals_Param43, 3))), (not(equals(Equals_Param42, 1));not(equals(Equals_Param43, 4))), (not(equals(Equals_Param42, 2));not(equals(Equals_Param43, 3))), (not(equals(Equals_Param42, 2));not(equals(Equals_Param43, 4))), (not(equals(Equals_Param42, 3));not(equals(Equals_Param43, 4))), (not(equals(Equals_Param42, 5));not(equals(Equals_Param43, 6))), (not(equals(Equals_Param42, 5));not(equals(Equals_Param43, 7))), (not(equals(Equals_Param42, 5));not(equals(Equals_Param43, 8))), (not(equals(Equals_Param42, 6));not(equals(Equals_Param43, 7))), (not(equals(Equals_Param42, 6));not(equals(Equals_Param43, 8))), (not(equals(Equals_Param42, 7));not(equals(Equals_Param43, 8))), (not(equals(Equals_Param43, 4));not(equals(Equals_Param42, 7))), (not(equals(Equals_Param42, 4));not(equals(Equals_Param43, 7)))), (not(equals(Equals_Param43, 5));not(equals(Equals_Param42, 8))), (not(equals(Equals_Param43, 5));not(equals(Equals_Param42, 7))), (not(equals(Equals_Param43, 5));not(equals(Equals_Param42, 6))), (not(equals(Equals_Param43, 3));not(equals(Equals_Param42, 4))), (not(equals(Equals_Param43, 2));not(equals(Equals_Param42, 4))), (not(equals(Equals_Param43, 2));not(equals(Equals_Param42, 3))), (not(equals(Equals_Param43, 1));not(equals(Equals_Param42, 4))), (not(equals(Equals_Param43, 1));not(equals(Equals_Param42, 3))), (not(equals(Equals_Param43, 1));not(equals(Equals_Param42, 2))), neighbor(Equals_Param43, Equals_Param42)),  (equals(Equals_Param44, 6):-((not(equals(Equals_Param44, 7));not(equals(Equals_Param45, 8))), (not(equals(Equals_Param45, 1));not(equals(Equals_Param44, 2))), (not(equals(Equals_Param45, 1));not(equals(Equals_Param44, 3))), (not(equals(Equals_Param45, 1));not(equals(Equals_Param44, 4))), (not(equals(Equals_Param45, 2));not(equals(Equals_Param44, 3))), (not(equals(Equals_Param45, 2));not(equals(Equals_Param44, 4))), (not(equals(Equals_Param45, 3));not(equals(Equals_Param44, 4))), (not(equals(Equals_Param45, 5));not(equals(Equals_Param44, 6))), (not(equals(Equals_Param45, 5));not(equals(Equals_Param44, 7))), (not(equals(Equals_Param45, 5));not(equals(Equals_Param44, 8))), (not(equals(Equals_Param45, 6));not(equals(Equals_Param44, 7))), (not(equals(Equals_Param45, 6));not(equals(Equals_Param44, 8))), (not(equals(Equals_Param45, 7));not(equals(Equals_Param44, 8))), (not(equals(Equals_Param44, 4));not(equals(Equals_Param45, 7))), (not(equals(Equals_Param45, 4));not(equals(Equals_Param44, 7)))), (not(equals(Equals_Param44, 6));not(equals(Equals_Param45, 7))), (not(equals(Equals_Param44, 5));not(equals(Equals_Param45, 8))), (not(equals(Equals_Param44, 5));not(equals(Equals_Param45, 7))), (not(equals(Equals_Param44, 5));not(equals(Equals_Param45, 6))), (not(equals(Equals_Param44, 3));not(equals(Equals_Param45, 4))), (not(equals(Equals_Param44, 2));not(equals(Equals_Param45, 4))), (not(equals(Equals_Param44, 2));not(equals(Equals_Param45, 3))), (not(equals(Equals_Param44, 1));not(equals(Equals_Param45, 4))), (not(equals(Equals_Param44, 1));not(equals(Equals_Param45, 3))), (not(equals(Equals_Param44, 1));not(equals(Equals_Param45, 2))), neighbor(Equals_Param44, Equals_Param45)),  (equals(Equals_Param46, 8):-((not(equals(Equals_Param47, 7));not(equals(Equals_Param46, 8))), (not(equals(Equals_Param46, 1));not(equals(Equals_Param47, 2))), (not(equals(Equals_Param46, 1));not(equals(Equals_Param47, 3))), (not(equals(Equals_Param46, 1));not(equals(Equals_Param47, 4))), (not(equals(Equals_Param46, 2));not(equals(Equals_Param47, 3))), (not(equals(Equals_Param46, 2));not(equals(Equals_Param47, 4))), (not(equals(Equals_Param46, 3));not(equals(Equals_Param47, 4))), (not(equals(Equals_Param46, 5));not(equals(Equals_Param47, 6))), (not(equals(Equals_Param46, 5));not(equals(Equals_Param47, 7))), (not(equals(Equals_Param46, 5));not(equals(Equals_Param47, 8))), (not(equals(Equals_Param46, 6));not(equals(Equals_Param47, 7))), (not(equals(Equals_Param46, 6));not(equals(Equals_Param47, 8))), (not(equals(Equals_Param46, 7));not(equals(Equals_Param47, 8))), (not(equals(Equals_Param47, 4));not(equals(Equals_Param46, 7))), (not(equals(Equals_Param46, 4));not(equals(Equals_Param47, 7)))), (not(equals(Equals_Param47, 6));not(equals(Equals_Param46, 7))), (not(equals(Equals_Param47, 5));not(equals(Equals_Param46, 8))), (not(equals(Equals_Param47, 5));not(equals(Equals_Param46, 7))), (not(equals(Equals_Param47, 5));not(equals(Equals_Param46, 6))), (not(equals(Equals_Param47, 3));not(equals(Equals_Param46, 4))), (not(equals(Equals_Param47, 2));not(equals(Equals_Param46, 4))), (not(equals(Equals_Param47, 2));not(equals(Equals_Param46, 3))), (not(equals(Equals_Param47, 1));not(equals(Equals_Param46, 4))), (not(equals(Equals_Param47, 1));not(equals(Equals_Param46, 3))), (not(equals(Equals_Param47, 1));not(equals(Equals_Param46, 2))), neighbor(Equals_Param47, Equals_Param46)),  (equals(Equals_Param48, 7):-((not(equals(Equals_Param49, 1));not(equals(Equals_Param48, 2))), (not(equals(Equals_Param49, 1));not(equals(Equals_Param48, 3))), (not(equals(Equals_Param49, 1));not(equals(Equals_Param48, 4))), (not(equals(Equals_Param49, 2));not(equals(Equals_Param48, 3))), (not(equals(Equals_Param49, 2));not(equals(Equals_Param48, 4))), (not(equals(Equals_Param49, 3));not(equals(Equals_Param48, 4))), (not(equals(Equals_Param49, 5));not(equals(Equals_Param48, 6))), (not(equals(Equals_Param49, 5));not(equals(Equals_Param48, 7))), (not(equals(Equals_Param49, 5));not(equals(Equals_Param48, 8))), (not(equals(Equals_Param49, 6));not(equals(Equals_Param48, 7))), (not(equals(Equals_Param49, 6));not(equals(Equals_Param48, 8))), (not(equals(Equals_Param49, 7));not(equals(Equals_Param48, 8))), (not(equals(Equals_Param48, 4));not(equals(Equals_Param49, 7))), (not(equals(Equals_Param49, 4));not(equals(Equals_Param48, 7)))), (not(equals(Equals_Param48, 6));not(equals(Equals_Param49, 8))), (not(equals(Equals_Param48, 6));not(equals(Equals_Param49, 7))), (not(equals(Equals_Param48, 5));not(equals(Equals_Param49, 8))), (not(equals(Equals_Param48, 5));not(equals(Equals_Param49, 7))), (not(equals(Equals_Param48, 5));not(equals(Equals_Param49, 6))), (not(equals(Equals_Param48, 3));not(equals(Equals_Param49, 4))), (not(equals(Equals_Param48, 2));not(equals(Equals_Param49, 4))), (not(equals(Equals_Param48, 2));not(equals(Equals_Param49, 3))), (not(equals(Equals_Param48, 1));not(equals(Equals_Param49, 4))), (not(equals(Equals_Param48, 1));not(equals(Equals_Param49, 3))), (not(equals(Equals_Param48, 1));not(equals(Equals_Param49, 2))), neighbor(Equals_Param48, Equals_Param49)),  (equals(Equals_Param50, 8):-((not(equals(Equals_Param50, 1));not(equals(Equals_Param51, 2))), (not(equals(Equals_Param50, 1));not(equals(Equals_Param51, 3))), (not(equals(Equals_Param50, 1));not(equals(Equals_Param51, 4))), (not(equals(Equals_Param50, 2));not(equals(Equals_Param51, 3))), (not(equals(Equals_Param50, 2));not(equals(Equals_Param51, 4))), (not(equals(Equals_Param50, 3));not(equals(Equals_Param51, 4))), (not(equals(Equals_Param50, 5));not(equals(Equals_Param51, 6))), (not(equals(Equals_Param50, 5));not(equals(Equals_Param51, 7))), (not(equals(Equals_Param50, 5));not(equals(Equals_Param51, 8))), (not(equals(Equals_Param50, 6));not(equals(Equals_Param51, 7))), (not(equals(Equals_Param50, 6));not(equals(Equals_Param51, 8))), (not(equals(Equals_Param50, 7));not(equals(Equals_Param51, 8))), (not(equals(Equals_Param51, 4));not(equals(Equals_Param50, 7))), (not(equals(Equals_Param50, 4));not(equals(Equals_Param51, 7)))), (not(equals(Equals_Param51, 6));not(equals(Equals_Param50, 8))), (not(equals(Equals_Param51, 6));not(equals(Equals_Param50, 7))), (not(equals(Equals_Param51, 5));not(equals(Equals_Param50, 8))), (not(equals(Equals_Param51, 5));not(equals(Equals_Param50, 7))), (not(equals(Equals_Param51, 5));not(equals(Equals_Param50, 6))), (not(equals(Equals_Param51, 3));not(equals(Equals_Param50, 4))), (not(equals(Equals_Param51, 2));not(equals(Equals_Param50, 4))), (not(equals(Equals_Param51, 2));not(equals(Equals_Param50, 3))), (not(equals(Equals_Param51, 1));not(equals(Equals_Param50, 4))), (not(equals(Equals_Param51, 1));not(equals(Equals_Param50, 3))), (not(equals(Equals_Param51, 1));not(equals(Equals_Param50, 2))), neighbor(Equals_Param51, Equals_Param50)),  (equals(Equals_Param52, 1):-((not(equals(Equals_Param52, 1));not(equals(Equals_Param53, 3))), (not(equals(Equals_Param52, 1));not(equals(Equals_Param53, 4))), (not(equals(Equals_Param52, 2));not(equals(Equals_Param53, 3))), (not(equals(Equals_Param52, 2));not(equals(Equals_Param53, 4))), (not(equals(Equals_Param52, 3));not(equals(Equals_Param53, 4))), (not(equals(Equals_Param52, 5));not(equals(Equals_Param53, 6))), (not(equals(Equals_Param52, 5));not(equals(Equals_Param53, 7))), (not(equals(Equals_Param52, 5));not(equals(Equals_Param53, 8))), (not(equals(Equals_Param52, 6));not(equals(Equals_Param53, 7))), (not(equals(Equals_Param52, 6));not(equals(Equals_Param53, 8))), (not(equals(Equals_Param52, 7));not(equals(Equals_Param53, 8))), (not(equals(Equals_Param53, 4));not(equals(Equals_Param52, 7))), (not(equals(Equals_Param52, 4));not(equals(Equals_Param53, 7)))), (not(equals(Equals_Param53, 7));not(equals(Equals_Param52, 8))), (not(equals(Equals_Param53, 6));not(equals(Equals_Param52, 8))), (not(equals(Equals_Param53, 6));not(equals(Equals_Param52, 7))), (not(equals(Equals_Param53, 5));not(equals(Equals_Param52, 8))), (not(equals(Equals_Param53, 5));not(equals(Equals_Param52, 7))), (not(equals(Equals_Param53, 5));not(equals(Equals_Param52, 6))), (not(equals(Equals_Param53, 3));not(equals(Equals_Param52, 4))), (not(equals(Equals_Param53, 2));not(equals(Equals_Param52, 4))), (not(equals(Equals_Param53, 2));not(equals(Equals_Param52, 3))), (not(equals(Equals_Param53, 1));not(equals(Equals_Param52, 4))), (not(equals(Equals_Param53, 1));not(equals(Equals_Param52, 3))), (not(equals(Equals_Param53, 1));not(equals(Equals_Param52, 2))), neighbor(Equals_Param53, Equals_Param52)),  (equals(Equals_Param54, 2):-((not(equals(Equals_Param55, 1));not(equals(Equals_Param54, 3))), (not(equals(Equals_Param55, 1));not(equals(Equals_Param54, 4))), (not(equals(Equals_Param55, 2));not(equals(Equals_Param54, 3))), (not(equals(Equals_Param55, 2));not(equals(Equals_Param54, 4))), (not(equals(Equals_Param55, 3));not(equals(Equals_Param54, 4))), (not(equals(Equals_Param55, 5));not(equals(Equals_Param54, 6))), (not(equals(Equals_Param55, 5));not(equals(Equals_Param54, 7))), (not(equals(Equals_Param55, 5));not(equals(Equals_Param54, 8))), (not(equals(Equals_Param55, 6));not(equals(Equals_Param54, 7))), (not(equals(Equals_Param55, 6));not(equals(Equals_Param54, 8))), (not(equals(Equals_Param55, 7));not(equals(Equals_Param54, 8))), (not(equals(Equals_Param54, 4));not(equals(Equals_Param55, 7))), (not(equals(Equals_Param55, 4));not(equals(Equals_Param54, 7)))), (not(equals(Equals_Param54, 7));not(equals(Equals_Param55, 8))), (not(equals(Equals_Param54, 6));not(equals(Equals_Param55, 8))), (not(equals(Equals_Param54, 6));not(equals(Equals_Param55, 7))), (not(equals(Equals_Param54, 5));not(equals(Equals_Param55, 8))), (not(equals(Equals_Param54, 5));not(equals(Equals_Param55, 7))), (not(equals(Equals_Param54, 5));not(equals(Equals_Param55, 6))), (not(equals(Equals_Param54, 3));not(equals(Equals_Param55, 4))), (not(equals(Equals_Param54, 2));not(equals(Equals_Param55, 4))), (not(equals(Equals_Param54, 2));not(equals(Equals_Param55, 3))), (not(equals(Equals_Param54, 1));not(equals(Equals_Param55, 4))), (not(equals(Equals_Param54, 1));not(equals(Equals_Param55, 3))), (not(equals(Equals_Param54, 1));not(equals(Equals_Param55, 2))), neighbor(Equals_Param54, Equals_Param55)),  (equals(Equals_Param56, 1):-((not(equals(Equals_Param56, 1));not(equals(Equals_Param57, 4))), (not(equals(Equals_Param56, 2));not(equals(Equals_Param57, 3))), (not(equals(Equals_Param56, 2));not(equals(Equals_Param57, 4))), (not(equals(Equals_Param56, 3));not(equals(Equals_Param57, 4))), (not(equals(Equals_Param56, 5));not(equals(Equals_Param57, 6))), (not(equals(Equals_Param56, 5));not(equals(Equals_Param57, 7))), (not(equals(Equals_Param56, 5));not(equals(Equals_Param57, 8))), (not(equals(Equals_Param56, 6));not(equals(Equals_Param57, 7))), (not(equals(Equals_Param56, 6));not(equals(Equals_Param57, 8))), (not(equals(Equals_Param56, 7));not(equals(Equals_Param57, 8))), (not(equals(Equals_Param57, 4));not(equals(Equals_Param56, 7))), (not(equals(Equals_Param56, 4));not(equals(Equals_Param57, 7)))), (not(equals(Equals_Param56, 1));not(equals(Equals_Param57, 2))), (not(equals(Equals_Param57, 7));not(equals(Equals_Param56, 8))), (not(equals(Equals_Param57, 6));not(equals(Equals_Param56, 8))), (not(equals(Equals_Param57, 6));not(equals(Equals_Param56, 7))), (not(equals(Equals_Param57, 5));not(equals(Equals_Param56, 8))), (not(equals(Equals_Param57, 5));not(equals(Equals_Param56, 7))), (not(equals(Equals_Param57, 5));not(equals(Equals_Param56, 6))), (not(equals(Equals_Param57, 3));not(equals(Equals_Param56, 4))), (not(equals(Equals_Param57, 2));not(equals(Equals_Param56, 4))), (not(equals(Equals_Param57, 2));not(equals(Equals_Param56, 3))), (not(equals(Equals_Param57, 1));not(equals(Equals_Param56, 4))), (not(equals(Equals_Param57, 1));not(equals(Equals_Param56, 3))), (not(equals(Equals_Param57, 1));not(equals(Equals_Param56, 2))), neighbor(Equals_Param57, Equals_Param56)),  (equals(Equals_Param58, 3):-((not(equals(Equals_Param59, 1));not(equals(Equals_Param58, 4))), (not(equals(Equals_Param59, 2));not(equals(Equals_Param58, 3))), (not(equals(Equals_Param59, 2));not(equals(Equals_Param58, 4))), (not(equals(Equals_Param59, 3));not(equals(Equals_Param58, 4))), (not(equals(Equals_Param59, 5));not(equals(Equals_Param58, 6))), (not(equals(Equals_Param59, 5));not(equals(Equals_Param58, 7))), (not(equals(Equals_Param59, 5));not(equals(Equals_Param58, 8))), (not(equals(Equals_Param59, 6));not(equals(Equals_Param58, 7))), (not(equals(Equals_Param59, 6));not(equals(Equals_Param58, 8))), (not(equals(Equals_Param59, 7));not(equals(Equals_Param58, 8))), (not(equals(Equals_Param58, 4));not(equals(Equals_Param59, 7))), (not(equals(Equals_Param59, 4));not(equals(Equals_Param58, 7)))), (not(equals(Equals_Param59, 1));not(equals(Equals_Param58, 2))), (not(equals(Equals_Param58, 7));not(equals(Equals_Param59, 8))), (not(equals(Equals_Param58, 6));not(equals(Equals_Param59, 8))), (not(equals(Equals_Param58, 6));not(equals(Equals_Param59, 7))), (not(equals(Equals_Param58, 5));not(equals(Equals_Param59, 8))), (not(equals(Equals_Param58, 5));not(equals(Equals_Param59, 7))), (not(equals(Equals_Param58, 5));not(equals(Equals_Param59, 6))), (not(equals(Equals_Param58, 3));not(equals(Equals_Param59, 4))), (not(equals(Equals_Param58, 2));not(equals(Equals_Param59, 4))), (not(equals(Equals_Param58, 2));not(equals(Equals_Param59, 3))), (not(equals(Equals_Param58, 1));not(equals(Equals_Param59, 4))), (not(equals(Equals_Param58, 1));not(equals(Equals_Param59, 3))), (not(equals(Equals_Param58, 1));not(equals(Equals_Param59, 2))), neighbor(Equals_Param58, Equals_Param59)),  (equals(Equals_Param60, 1):-((not(equals(Equals_Param60, 2));not(equals(Equals_Param61, 3))), (not(equals(Equals_Param60, 2));not(equals(Equals_Param61, 4))), (not(equals(Equals_Param60, 3));not(equals(Equals_Param61, 4))), (not(equals(Equals_Param60, 5));not(equals(Equals_Param61, 6))), (not(equals(Equals_Param60, 5));not(equals(Equals_Param61, 7))), (not(equals(Equals_Param60, 5));not(equals(Equals_Param61, 8))), (not(equals(Equals_Param60, 6));not(equals(Equals_Param61, 7))), (not(equals(Equals_Param60, 6));not(equals(Equals_Param61, 8))), (not(equals(Equals_Param60, 7));not(equals(Equals_Param61, 8))), (not(equals(Equals_Param61, 4));not(equals(Equals_Param60, 7))), (not(equals(Equals_Param60, 4));not(equals(Equals_Param61, 7)))), (not(equals(Equals_Param60, 1));not(equals(Equals_Param61, 3))), (not(equals(Equals_Param60, 1));not(equals(Equals_Param61, 2))), (not(equals(Equals_Param61, 7));not(equals(Equals_Param60, 8))), (not(equals(Equals_Param61, 6));not(equals(Equals_Param60, 8))), (not(equals(Equals_Param61, 6));not(equals(Equals_Param60, 7))), (not(equals(Equals_Param61, 5));not(equals(Equals_Param60, 8))), (not(equals(Equals_Param61, 5));not(equals(Equals_Param60, 7))), (not(equals(Equals_Param61, 5));not(equals(Equals_Param60, 6))), (not(equals(Equals_Param61, 3));not(equals(Equals_Param60, 4))), (not(equals(Equals_Param61, 2));not(equals(Equals_Param60, 4))), (not(equals(Equals_Param61, 2));not(equals(Equals_Param60, 3))), (not(equals(Equals_Param61, 1));not(equals(Equals_Param60, 4))), (not(equals(Equals_Param61, 1));not(equals(Equals_Param60, 3))), (not(equals(Equals_Param61, 1));not(equals(Equals_Param60, 2))), neighbor(Equals_Param61, Equals_Param60)),  (equals(Equals_Param62, 4):-((not(equals(Equals_Param63, 2));not(equals(Equals_Param62, 3))), (not(equals(Equals_Param63, 2));not(equals(Equals_Param62, 4))), (not(equals(Equals_Param63, 3));not(equals(Equals_Param62, 4))), (not(equals(Equals_Param63, 5));not(equals(Equals_Param62, 6))), (not(equals(Equals_Param63, 5));not(equals(Equals_Param62, 7))), (not(equals(Equals_Param63, 5));not(equals(Equals_Param62, 8))), (not(equals(Equals_Param63, 6));not(equals(Equals_Param62, 7))), (not(equals(Equals_Param63, 6));not(equals(Equals_Param62, 8))), (not(equals(Equals_Param63, 7));not(equals(Equals_Param62, 8))), (not(equals(Equals_Param62, 4));not(equals(Equals_Param63, 7))), (not(equals(Equals_Param63, 4));not(equals(Equals_Param62, 7)))), (not(equals(Equals_Param63, 1));not(equals(Equals_Param62, 3))), (not(equals(Equals_Param63, 1));not(equals(Equals_Param62, 2))), (not(equals(Equals_Param62, 7));not(equals(Equals_Param63, 8))), (not(equals(Equals_Param62, 6));not(equals(Equals_Param63, 8))), (not(equals(Equals_Param62, 6));not(equals(Equals_Param63, 7))), (not(equals(Equals_Param62, 5));not(equals(Equals_Param63, 8))), (not(equals(Equals_Param62, 5));not(equals(Equals_Param63, 7))), (not(equals(Equals_Param62, 5));not(equals(Equals_Param63, 6))), (not(equals(Equals_Param62, 3));not(equals(Equals_Param63, 4))), (not(equals(Equals_Param62, 2));not(equals(Equals_Param63, 4))), (not(equals(Equals_Param62, 2));not(equals(Equals_Param63, 3))), (not(equals(Equals_Param62, 1));not(equals(Equals_Param63, 4))), (not(equals(Equals_Param62, 1));not(equals(Equals_Param63, 3))), (not(equals(Equals_Param62, 1));not(equals(Equals_Param63, 2))), neighbor(Equals_Param62, Equals_Param63)),  (equals(Equals_Param64, 2):-((not(equals(Equals_Param64, 2));not(equals(Equals_Param65, 4))), (not(equals(Equals_Param64, 3));not(equals(Equals_Param65, 4))), (not(equals(Equals_Param64, 5));not(equals(Equals_Param65, 6))), (not(equals(Equals_Param64, 5));not(equals(Equals_Param65, 7))), (not(equals(Equals_Param64, 5));not(equals(Equals_Param65, 8))), (not(equals(Equals_Param64, 6));not(equals(Equals_Param65, 7))), (not(equals(Equals_Param64, 6));not(equals(Equals_Param65, 8))), (not(equals(Equals_Param64, 7));not(equals(Equals_Param65, 8))), (not(equals(Equals_Param65, 4));not(equals(Equals_Param64, 7))), (not(equals(Equals_Param64, 4));not(equals(Equals_Param65, 7)))), (not(equals(Equals_Param64, 1));not(equals(Equals_Param65, 4))), (not(equals(Equals_Param64, 1));not(equals(Equals_Param65, 3))), (not(equals(Equals_Param64, 1));not(equals(Equals_Param65, 2))), (not(equals(Equals_Param65, 7));not(equals(Equals_Param64, 8))), (not(equals(Equals_Param65, 6));not(equals(Equals_Param64, 8))), (not(equals(Equals_Param65, 6));not(equals(Equals_Param64, 7))), (not(equals(Equals_Param65, 5));not(equals(Equals_Param64, 8))), (not(equals(Equals_Param65, 5));not(equals(Equals_Param64, 7))), (not(equals(Equals_Param65, 5));not(equals(Equals_Param64, 6))), (not(equals(Equals_Param65, 3));not(equals(Equals_Param64, 4))), (not(equals(Equals_Param65, 2));not(equals(Equals_Param64, 4))), (not(equals(Equals_Param65, 2));not(equals(Equals_Param64, 3))), (not(equals(Equals_Param65, 1));not(equals(Equals_Param64, 4))), (not(equals(Equals_Param65, 1));not(equals(Equals_Param64, 3))), (not(equals(Equals_Param65, 1));not(equals(Equals_Param64, 2))), neighbor(Equals_Param65, Equals_Param64)),  (equals(Equals_Param66, 3):-((not(equals(Equals_Param67, 2));not(equals(Equals_Param66, 4))), (not(equals(Equals_Param67, 3));not(equals(Equals_Param66, 4))), (not(equals(Equals_Param67, 5));not(equals(Equals_Param66, 6))), (not(equals(Equals_Param67, 5));not(equals(Equals_Param66, 7))), (not(equals(Equals_Param67, 5));not(equals(Equals_Param66, 8))), (not(equals(Equals_Param67, 6));not(equals(Equals_Param66, 7))), (not(equals(Equals_Param67, 6));not(equals(Equals_Param66, 8))), (not(equals(Equals_Param67, 7));not(equals(Equals_Param66, 8))), (not(equals(Equals_Param66, 4));not(equals(Equals_Param67, 7))), (not(equals(Equals_Param67, 4));not(equals(Equals_Param66, 7)))), (not(equals(Equals_Param67, 1));not(equals(Equals_Param66, 4))), (not(equals(Equals_Param67, 1));not(equals(Equals_Param66, 3))), (not(equals(Equals_Param67, 1));not(equals(Equals_Param66, 2))), (not(equals(Equals_Param66, 7));not(equals(Equals_Param67, 8))), (not(equals(Equals_Param66, 6));not(equals(Equals_Param67, 8))), (not(equals(Equals_Param66, 6));not(equals(Equals_Param67, 7))), (not(equals(Equals_Param66, 5));not(equals(Equals_Param67, 8))), (not(equals(Equals_Param66, 5));not(equals(Equals_Param67, 7))), (not(equals(Equals_Param66, 5));not(equals(Equals_Param67, 6))), (not(equals(Equals_Param66, 3));not(equals(Equals_Param67, 4))), (not(equals(Equals_Param66, 2));not(equals(Equals_Param67, 4))), (not(equals(Equals_Param66, 2));not(equals(Equals_Param67, 3))), (not(equals(Equals_Param66, 1));not(equals(Equals_Param67, 4))), (not(equals(Equals_Param66, 1));not(equals(Equals_Param67, 3))), (not(equals(Equals_Param66, 1));not(equals(Equals_Param67, 2))), neighbor(Equals_Param66, Equals_Param67)),  (equals(Equals_Param68, 2):-((not(equals(Equals_Param68, 3));not(equals(Equals_Param69, 4))), (not(equals(Equals_Param68, 5));not(equals(Equals_Param69, 6))), (not(equals(Equals_Param68, 5));not(equals(Equals_Param69, 7))), (not(equals(Equals_Param68, 5));not(equals(Equals_Param69, 8))), (not(equals(Equals_Param68, 6));not(equals(Equals_Param69, 7))), (not(equals(Equals_Param68, 6));not(equals(Equals_Param69, 8))), (not(equals(Equals_Param68, 7));not(equals(Equals_Param69, 8))), (not(equals(Equals_Param69, 4));not(equals(Equals_Param68, 7))), (not(equals(Equals_Param68, 4));not(equals(Equals_Param69, 7)))), (not(equals(Equals_Param68, 2));not(equals(Equals_Param69, 3))), (not(equals(Equals_Param68, 1));not(equals(Equals_Param69, 4))), (not(equals(Equals_Param68, 1));not(equals(Equals_Param69, 3))), (not(equals(Equals_Param68, 1));not(equals(Equals_Param69, 2))), (not(equals(Equals_Param69, 7));not(equals(Equals_Param68, 8))), (not(equals(Equals_Param69, 6));not(equals(Equals_Param68, 8))), (not(equals(Equals_Param69, 6));not(equals(Equals_Param68, 7))), (not(equals(Equals_Param69, 5));not(equals(Equals_Param68, 8))), (not(equals(Equals_Param69, 5));not(equals(Equals_Param68, 7))), (not(equals(Equals_Param69, 5));not(equals(Equals_Param68, 6))), (not(equals(Equals_Param69, 3));not(equals(Equals_Param68, 4))), (not(equals(Equals_Param69, 2));not(equals(Equals_Param68, 4))), (not(equals(Equals_Param69, 2));not(equals(Equals_Param68, 3))), (not(equals(Equals_Param69, 1));not(equals(Equals_Param68, 4))), (not(equals(Equals_Param69, 1));not(equals(Equals_Param68, 3))), (not(equals(Equals_Param69, 1));not(equals(Equals_Param68, 2))), neighbor(Equals_Param69, Equals_Param68)),  (equals(Equals_Param70, 4):-((not(equals(Equals_Param71, 3));not(equals(Equals_Param70, 4))), (not(equals(Equals_Param71, 5));not(equals(Equals_Param70, 6))), (not(equals(Equals_Param71, 5));not(equals(Equals_Param70, 7))), (not(equals(Equals_Param71, 5));not(equals(Equals_Param70, 8))), (not(equals(Equals_Param71, 6));not(equals(Equals_Param70, 7))), (not(equals(Equals_Param71, 6));not(equals(Equals_Param70, 8))), (not(equals(Equals_Param71, 7));not(equals(Equals_Param70, 8))), (not(equals(Equals_Param70, 4));not(equals(Equals_Param71, 7))), (not(equals(Equals_Param71, 4));not(equals(Equals_Param70, 7)))), (not(equals(Equals_Param71, 2));not(equals(Equals_Param70, 3))), (not(equals(Equals_Param71, 1));not(equals(Equals_Param70, 4))), (not(equals(Equals_Param71, 1));not(equals(Equals_Param70, 3))), (not(equals(Equals_Param71, 1));not(equals(Equals_Param70, 2))), (not(equals(Equals_Param70, 7));not(equals(Equals_Param71, 8))), (not(equals(Equals_Param70, 6));not(equals(Equals_Param71, 8))), (not(equals(Equals_Param70, 6));not(equals(Equals_Param71, 7))), (not(equals(Equals_Param70, 5));not(equals(Equals_Param71, 8))), (not(equals(Equals_Param70, 5));not(equals(Equals_Param71, 7))), (not(equals(Equals_Param70, 5));not(equals(Equals_Param71, 6))), (not(equals(Equals_Param70, 3));not(equals(Equals_Param71, 4))), (not(equals(Equals_Param70, 2));not(equals(Equals_Param71, 4))), (not(equals(Equals_Param70, 2));not(equals(Equals_Param71, 3))), (not(equals(Equals_Param70, 1));not(equals(Equals_Param71, 4))), (not(equals(Equals_Param70, 1));not(equals(Equals_Param71, 3))), (not(equals(Equals_Param70, 1));not(equals(Equals_Param71, 2))), neighbor(Equals_Param70, Equals_Param71)),  (equals(Equals_Param72, 3):-((not(equals(Equals_Param72, 5));not(equals(Equals_Param73, 6))), (not(equals(Equals_Param72, 5));not(equals(Equals_Param73, 7))), (not(equals(Equals_Param72, 5));not(equals(Equals_Param73, 8))), (not(equals(Equals_Param72, 6));not(equals(Equals_Param73, 7))), (not(equals(Equals_Param72, 6));not(equals(Equals_Param73, 8))), (not(equals(Equals_Param72, 7));not(equals(Equals_Param73, 8))), (not(equals(Equals_Param73, 4));not(equals(Equals_Param72, 7))), (not(equals(Equals_Param72, 4));not(equals(Equals_Param73, 7)))), (not(equals(Equals_Param72, 2));not(equals(Equals_Param73, 4))), (not(equals(Equals_Param72, 2));not(equals(Equals_Param73, 3))), (not(equals(Equals_Param72, 1));not(equals(Equals_Param73, 4))), (not(equals(Equals_Param72, 1));not(equals(Equals_Param73, 3))), (not(equals(Equals_Param72, 1));not(equals(Equals_Param73, 2))), (not(equals(Equals_Param73, 7));not(equals(Equals_Param72, 8))), (not(equals(Equals_Param73, 6));not(equals(Equals_Param72, 8))), (not(equals(Equals_Param73, 6));not(equals(Equals_Param72, 7))), (not(equals(Equals_Param73, 5));not(equals(Equals_Param72, 8))), (not(equals(Equals_Param73, 5));not(equals(Equals_Param72, 7))), (not(equals(Equals_Param73, 5));not(equals(Equals_Param72, 6))), (not(equals(Equals_Param73, 3));not(equals(Equals_Param72, 4))), (not(equals(Equals_Param73, 2));not(equals(Equals_Param72, 4))), (not(equals(Equals_Param73, 2));not(equals(Equals_Param72, 3))), (not(equals(Equals_Param73, 1));not(equals(Equals_Param72, 4))), (not(equals(Equals_Param73, 1));not(equals(Equals_Param72, 3))), (not(equals(Equals_Param73, 1));not(equals(Equals_Param72, 2))), neighbor(Equals_Param73, Equals_Param72)),  (equals(Equals_Param74, 4):-((not(equals(Equals_Param75, 5));not(equals(Equals_Param74, 6))), (not(equals(Equals_Param75, 5));not(equals(Equals_Param74, 7))), (not(equals(Equals_Param75, 5));not(equals(Equals_Param74, 8))), (not(equals(Equals_Param75, 6));not(equals(Equals_Param74, 7))), (not(equals(Equals_Param75, 6));not(equals(Equals_Param74, 8))), (not(equals(Equals_Param75, 7));not(equals(Equals_Param74, 8))), (not(equals(Equals_Param74, 4));not(equals(Equals_Param75, 7))), (not(equals(Equals_Param75, 4));not(equals(Equals_Param74, 7)))), (not(equals(Equals_Param75, 2));not(equals(Equals_Param74, 4))), (not(equals(Equals_Param75, 2));not(equals(Equals_Param74, 3))), (not(equals(Equals_Param75, 1));not(equals(Equals_Param74, 4))), (not(equals(Equals_Param75, 1));not(equals(Equals_Param74, 3))), (not(equals(Equals_Param75, 1));not(equals(Equals_Param74, 2))), (not(equals(Equals_Param74, 7));not(equals(Equals_Param75, 8))), (not(equals(Equals_Param74, 6));not(equals(Equals_Param75, 8))), (not(equals(Equals_Param74, 6));not(equals(Equals_Param75, 7))), (not(equals(Equals_Param74, 5));not(equals(Equals_Param75, 8))), (not(equals(Equals_Param74, 5));not(equals(Equals_Param75, 7))), (not(equals(Equals_Param74, 5));not(equals(Equals_Param75, 6))), (not(equals(Equals_Param74, 3));not(equals(Equals_Param75, 4))), (not(equals(Equals_Param74, 2));not(equals(Equals_Param75, 4))), (not(equals(Equals_Param74, 2));not(equals(Equals_Param75, 3))), (not(equals(Equals_Param74, 1));not(equals(Equals_Param75, 4))), (not(equals(Equals_Param74, 1));not(equals(Equals_Param75, 3))), (not(equals(Equals_Param74, 1));not(equals(Equals_Param75, 2))), neighbor(Equals_Param74, Equals_Param75)),  (equals(Equals_Param76, 5):-((not(equals(Equals_Param76, 5));not(equals(Equals_Param77, 7))), (not(equals(Equals_Param76, 5));not(equals(Equals_Param77, 8))), (not(equals(Equals_Param76, 6));not(equals(Equals_Param77, 7))), (not(equals(Equals_Param76, 6));not(equals(Equals_Param77, 8))), (not(equals(Equals_Param76, 7));not(equals(Equals_Param77, 8))), (not(equals(Equals_Param77, 4));not(equals(Equals_Param76, 7))), (not(equals(Equals_Param76, 4));not(equals(Equals_Param77, 7)))), (not(equals(Equals_Param76, 3));not(equals(Equals_Param77, 4))), (not(equals(Equals_Param76, 2));not(equals(Equals_Param77, 4))), (not(equals(Equals_Param76, 2));not(equals(Equals_Param77, 3))), (not(equals(Equals_Param76, 1));not(equals(Equals_Param77, 4))), (not(equals(Equals_Param76, 1));not(equals(Equals_Param77, 3))), (not(equals(Equals_Param76, 1));not(equals(Equals_Param77, 2))), (not(equals(Equals_Param77, 7));not(equals(Equals_Param76, 8))), (not(equals(Equals_Param77, 6));not(equals(Equals_Param76, 8))), (not(equals(Equals_Param77, 6));not(equals(Equals_Param76, 7))), (not(equals(Equals_Param77, 5));not(equals(Equals_Param76, 8))), (not(equals(Equals_Param77, 5));not(equals(Equals_Param76, 7))), (not(equals(Equals_Param77, 5));not(equals(Equals_Param76, 6))), (not(equals(Equals_Param77, 3));not(equals(Equals_Param76, 4))), (not(equals(Equals_Param77, 2));not(equals(Equals_Param76, 4))), (not(equals(Equals_Param77, 2));not(equals(Equals_Param76, 3))), (not(equals(Equals_Param77, 1));not(equals(Equals_Param76, 4))), (not(equals(Equals_Param77, 1));not(equals(Equals_Param76, 3))), (not(equals(Equals_Param77, 1));not(equals(Equals_Param76, 2))), neighbor(Equals_Param77, Equals_Param76)),  (equals(Equals_Param78, 6):-((not(equals(Equals_Param79, 5));not(equals(Equals_Param78, 7))), (not(equals(Equals_Param79, 5));not(equals(Equals_Param78, 8))), (not(equals(Equals_Param79, 6));not(equals(Equals_Param78, 7))), (not(equals(Equals_Param79, 6));not(equals(Equals_Param78, 8))), (not(equals(Equals_Param79, 7));not(equals(Equals_Param78, 8))), (not(equals(Equals_Param78, 4));not(equals(Equals_Param79, 7))), (not(equals(Equals_Param79, 4));not(equals(Equals_Param78, 7)))), (not(equals(Equals_Param79, 3));not(equals(Equals_Param78, 4))), (not(equals(Equals_Param79, 2));not(equals(Equals_Param78, 4))), (not(equals(Equals_Param79, 2));not(equals(Equals_Param78, 3))), (not(equals(Equals_Param79, 1));not(equals(Equals_Param78, 4))), (not(equals(Equals_Param79, 1));not(equals(Equals_Param78, 3))), (not(equals(Equals_Param79, 1));not(equals(Equals_Param78, 2))), (not(equals(Equals_Param78, 7));not(equals(Equals_Param79, 8))), (not(equals(Equals_Param78, 6));not(equals(Equals_Param79, 8))), (not(equals(Equals_Param78, 6));not(equals(Equals_Param79, 7))), (not(equals(Equals_Param78, 5));not(equals(Equals_Param79, 8))), (not(equals(Equals_Param78, 5));not(equals(Equals_Param79, 7))), (not(equals(Equals_Param78, 5));not(equals(Equals_Param79, 6))), (not(equals(Equals_Param78, 3));not(equals(Equals_Param79, 4))), (not(equals(Equals_Param78, 2));not(equals(Equals_Param79, 4))), (not(equals(Equals_Param78, 2));not(equals(Equals_Param79, 3))), (not(equals(Equals_Param78, 1));not(equals(Equals_Param79, 4))), (not(equals(Equals_Param78, 1));not(equals(Equals_Param79, 3))), (not(equals(Equals_Param78, 1));not(equals(Equals_Param79, 2))), neighbor(Equals_Param78, Equals_Param79)),  (equals(Equals_Param80, 5):-((not(equals(Equals_Param80, 5));not(equals(Equals_Param81, 8))), (not(equals(Equals_Param80, 6));not(equals(Equals_Param81, 7))), (not(equals(Equals_Param80, 6));not(equals(Equals_Param81, 8))), (not(equals(Equals_Param80, 7));not(equals(Equals_Param81, 8))), (not(equals(Equals_Param81, 4));not(equals(Equals_Param80, 7))), (not(equals(Equals_Param80, 4));not(equals(Equals_Param81, 7)))), (not(equals(Equals_Param80, 5));not(equals(Equals_Param81, 6))), (not(equals(Equals_Param80, 3));not(equals(Equals_Param81, 4))), (not(equals(Equals_Param80, 2));not(equals(Equals_Param81, 4))), (not(equals(Equals_Param80, 2));not(equals(Equals_Param81, 3))), (not(equals(Equals_Param80, 1));not(equals(Equals_Param81, 4))), (not(equals(Equals_Param80, 1));not(equals(Equals_Param81, 3))), (not(equals(Equals_Param80, 1));not(equals(Equals_Param81, 2))), (not(equals(Equals_Param81, 7));not(equals(Equals_Param80, 8))), (not(equals(Equals_Param81, 6));not(equals(Equals_Param80, 8))), (not(equals(Equals_Param81, 6));not(equals(Equals_Param80, 7))), (not(equals(Equals_Param81, 5));not(equals(Equals_Param80, 8))), (not(equals(Equals_Param81, 5));not(equals(Equals_Param80, 7))), (not(equals(Equals_Param81, 5));not(equals(Equals_Param80, 6))), (not(equals(Equals_Param81, 3));not(equals(Equals_Param80, 4))), (not(equals(Equals_Param81, 2));not(equals(Equals_Param80, 4))), (not(equals(Equals_Param81, 2));not(equals(Equals_Param80, 3))), (not(equals(Equals_Param81, 1));not(equals(Equals_Param80, 4))), (not(equals(Equals_Param81, 1));not(equals(Equals_Param80, 3))), (not(equals(Equals_Param81, 1));not(equals(Equals_Param80, 2))), neighbor(Equals_Param81, Equals_Param80)),  (equals(Equals_Param82, 7):-((not(equals(Equals_Param83, 5));not(equals(Equals_Param82, 8))), (not(equals(Equals_Param83, 6));not(equals(Equals_Param82, 7))), (not(equals(Equals_Param83, 6));not(equals(Equals_Param82, 8))), (not(equals(Equals_Param83, 7));not(equals(Equals_Param82, 8))), (not(equals(Equals_Param82, 4));not(equals(Equals_Param83, 7))), (not(equals(Equals_Param83, 4));not(equals(Equals_Param82, 7)))), (not(equals(Equals_Param83, 5));not(equals(Equals_Param82, 6))), (not(equals(Equals_Param83, 3));not(equals(Equals_Param82, 4))), (not(equals(Equals_Param83, 2));not(equals(Equals_Param82, 4))), (not(equals(Equals_Param83, 2));not(equals(Equals_Param82, 3))), (not(equals(Equals_Param83, 1));not(equals(Equals_Param82, 4))), (not(equals(Equals_Param83, 1));not(equals(Equals_Param82, 3))), (not(equals(Equals_Param83, 1));not(equals(Equals_Param82, 2))), (not(equals(Equals_Param82, 7));not(equals(Equals_Param83, 8))), (not(equals(Equals_Param82, 6));not(equals(Equals_Param83, 8))), (not(equals(Equals_Param82, 6));not(equals(Equals_Param83, 7))), (not(equals(Equals_Param82, 5));not(equals(Equals_Param83, 8))), (not(equals(Equals_Param82, 5));not(equals(Equals_Param83, 7))), (not(equals(Equals_Param82, 5));not(equals(Equals_Param83, 6))), (not(equals(Equals_Param82, 3));not(equals(Equals_Param83, 4))), (not(equals(Equals_Param82, 2));not(equals(Equals_Param83, 4))), (not(equals(Equals_Param82, 2));not(equals(Equals_Param83, 3))), (not(equals(Equals_Param82, 1));not(equals(Equals_Param83, 4))), (not(equals(Equals_Param82, 1));not(equals(Equals_Param83, 3))), (not(equals(Equals_Param82, 1));not(equals(Equals_Param83, 2))), neighbor(Equals_Param82, Equals_Param83)),  (equals(Equals_Param84, 5):-((not(equals(Equals_Param84, 6));not(equals(Equals_Param85, 7))), (not(equals(Equals_Param84, 6));not(equals(Equals_Param85, 8))), (not(equals(Equals_Param84, 7));not(equals(Equals_Param85, 8))), (not(equals(Equals_Param85, 4));not(equals(Equals_Param84, 7))), (not(equals(Equals_Param84, 4));not(equals(Equals_Param85, 7)))), (not(equals(Equals_Param84, 5));not(equals(Equals_Param85, 7))), (not(equals(Equals_Param84, 5));not(equals(Equals_Param85, 6))), (not(equals(Equals_Param84, 3));not(equals(Equals_Param85, 4))), (not(equals(Equals_Param84, 2));not(equals(Equals_Param85, 4))), (not(equals(Equals_Param84, 2));not(equals(Equals_Param85, 3))), (not(equals(Equals_Param84, 1));not(equals(Equals_Param85, 4))), (not(equals(Equals_Param84, 1));not(equals(Equals_Param85, 3))), (not(equals(Equals_Param84, 1));not(equals(Equals_Param85, 2))), (not(equals(Equals_Param85, 7));not(equals(Equals_Param84, 8))), (not(equals(Equals_Param85, 6));not(equals(Equals_Param84, 8))), (not(equals(Equals_Param85, 6));not(equals(Equals_Param84, 7))), (not(equals(Equals_Param85, 5));not(equals(Equals_Param84, 8))), (not(equals(Equals_Param85, 5));not(equals(Equals_Param84, 7))), (not(equals(Equals_Param85, 5));not(equals(Equals_Param84, 6))), (not(equals(Equals_Param85, 3));not(equals(Equals_Param84, 4))), (not(equals(Equals_Param85, 2));not(equals(Equals_Param84, 4))), (not(equals(Equals_Param85, 2));not(equals(Equals_Param84, 3))), (not(equals(Equals_Param85, 1));not(equals(Equals_Param84, 4))), (not(equals(Equals_Param85, 1));not(equals(Equals_Param84, 3))), (not(equals(Equals_Param85, 1));not(equals(Equals_Param84, 2))), neighbor(Equals_Param85, Equals_Param84)),  (equals(Equals_Param86, 8):-((not(equals(Equals_Param87, 6));not(equals(Equals_Param86, 7))), (not(equals(Equals_Param87, 6));not(equals(Equals_Param86, 8))), (not(equals(Equals_Param87, 7));not(equals(Equals_Param86, 8))), (not(equals(Equals_Param86, 4));not(equals(Equals_Param87, 7))), (not(equals(Equals_Param87, 4));not(equals(Equals_Param86, 7)))), (not(equals(Equals_Param87, 5));not(equals(Equals_Param86, 7))), (not(equals(Equals_Param87, 5));not(equals(Equals_Param86, 6))), (not(equals(Equals_Param87, 3));not(equals(Equals_Param86, 4))), (not(equals(Equals_Param87, 2));not(equals(Equals_Param86, 4))), (not(equals(Equals_Param87, 2));not(equals(Equals_Param86, 3))), (not(equals(Equals_Param87, 1));not(equals(Equals_Param86, 4))), (not(equals(Equals_Param87, 1));not(equals(Equals_Param86, 3))), (not(equals(Equals_Param87, 1));not(equals(Equals_Param86, 2))), (not(equals(Equals_Param86, 7));not(equals(Equals_Param87, 8))), (not(equals(Equals_Param86, 6));not(equals(Equals_Param87, 8))), (not(equals(Equals_Param86, 6));not(equals(Equals_Param87, 7))), (not(equals(Equals_Param86, 5));not(equals(Equals_Param87, 8))), (not(equals(Equals_Param86, 5));not(equals(Equals_Param87, 7))), (not(equals(Equals_Param86, 5));not(equals(Equals_Param87, 6))), (not(equals(Equals_Param86, 3));not(equals(Equals_Param87, 4))), (not(equals(Equals_Param86, 2));not(equals(Equals_Param87, 4))), (not(equals(Equals_Param86, 2));not(equals(Equals_Param87, 3))), (not(equals(Equals_Param86, 1));not(equals(Equals_Param87, 4))), (not(equals(Equals_Param86, 1));not(equals(Equals_Param87, 3))), (not(equals(Equals_Param86, 1));not(equals(Equals_Param87, 2))), neighbor(Equals_Param86, Equals_Param87)),  (equals(Equals_Param88, 6):-((not(equals(Equals_Param88, 6));not(equals(Equals_Param89, 8))), (not(equals(Equals_Param88, 7));not(equals(Equals_Param89, 8))), (not(equals(Equals_Param89, 4));not(equals(Equals_Param88, 7))), (not(equals(Equals_Param88, 4));not(equals(Equals_Param89, 7)))), (not(equals(Equals_Param88, 5));not(equals(Equals_Param89, 8))), (not(equals(Equals_Param88, 5));not(equals(Equals_Param89, 7))), (not(equals(Equals_Param88, 5));not(equals(Equals_Param89, 6))), (not(equals(Equals_Param88, 3));not(equals(Equals_Param89, 4))), (not(equals(Equals_Param88, 2));not(equals(Equals_Param89, 4))), (not(equals(Equals_Param88, 2));not(equals(Equals_Param89, 3))), (not(equals(Equals_Param88, 1));not(equals(Equals_Param89, 4))), (not(equals(Equals_Param88, 1));not(equals(Equals_Param89, 3))), (not(equals(Equals_Param88, 1));not(equals(Equals_Param89, 2))), (not(equals(Equals_Param89, 7));not(equals(Equals_Param88, 8))), (not(equals(Equals_Param89, 6));not(equals(Equals_Param88, 8))), (not(equals(Equals_Param89, 6));not(equals(Equals_Param88, 7))), (not(equals(Equals_Param89, 5));not(equals(Equals_Param88, 8))), (not(equals(Equals_Param89, 5));not(equals(Equals_Param88, 7))), (not(equals(Equals_Param89, 5));not(equals(Equals_Param88, 6))), (not(equals(Equals_Param89, 3));not(equals(Equals_Param88, 4))), (not(equals(Equals_Param89, 2));not(equals(Equals_Param88, 4))), (not(equals(Equals_Param89, 2));not(equals(Equals_Param88, 3))), (not(equals(Equals_Param89, 1));not(equals(Equals_Param88, 4))), (not(equals(Equals_Param89, 1));not(equals(Equals_Param88, 3))), (not(equals(Equals_Param89, 1));not(equals(Equals_Param88, 2))), neighbor(Equals_Param89, Equals_Param88)),  (equals(Equals_Param90, 7):-((not(equals(Equals_Param91, 6));not(equals(Equals_Param90, 8))), (not(equals(Equals_Param91, 7));not(equals(Equals_Param90, 8))), (not(equals(Equals_Param90, 4));not(equals(Equals_Param91, 7))), (not(equals(Equals_Param91, 4));not(equals(Equals_Param90, 7)))), (not(equals(Equals_Param91, 5));not(equals(Equals_Param90, 8))), (not(equals(Equals_Param91, 5));not(equals(Equals_Param90, 7))), (not(equals(Equals_Param91, 5));not(equals(Equals_Param90, 6))), (not(equals(Equals_Param91, 3));not(equals(Equals_Param90, 4))), (not(equals(Equals_Param91, 2));not(equals(Equals_Param90, 4))), (not(equals(Equals_Param91, 2));not(equals(Equals_Param90, 3))), (not(equals(Equals_Param91, 1));not(equals(Equals_Param90, 4))), (not(equals(Equals_Param91, 1));not(equals(Equals_Param90, 3))), (not(equals(Equals_Param91, 1));not(equals(Equals_Param90, 2))), (not(equals(Equals_Param90, 7));not(equals(Equals_Param91, 8))), (not(equals(Equals_Param90, 6));not(equals(Equals_Param91, 8))), (not(equals(Equals_Param90, 6));not(equals(Equals_Param91, 7))), (not(equals(Equals_Param90, 5));not(equals(Equals_Param91, 8))), (not(equals(Equals_Param90, 5));not(equals(Equals_Param91, 7))), (not(equals(Equals_Param90, 5));not(equals(Equals_Param91, 6))), (not(equals(Equals_Param90, 3));not(equals(Equals_Param91, 4))), (not(equals(Equals_Param90, 2));not(equals(Equals_Param91, 4))), (not(equals(Equals_Param90, 2));not(equals(Equals_Param91, 3))), (not(equals(Equals_Param90, 1));not(equals(Equals_Param91, 4))), (not(equals(Equals_Param90, 1));not(equals(Equals_Param91, 3))), (not(equals(Equals_Param90, 1));not(equals(Equals_Param91, 2))), neighbor(Equals_Param90, Equals_Param91)),  (equals(Equals_Param92, 6):-((not(equals(Equals_Param92, 7));not(equals(Equals_Param93, 8))), (not(equals(Equals_Param93, 4));not(equals(Equals_Param92, 7))), (not(equals(Equals_Param92, 4));not(equals(Equals_Param93, 7)))), (not(equals(Equals_Param92, 6));not(equals(Equals_Param93, 7))), (not(equals(Equals_Param92, 5));not(equals(Equals_Param93, 8))), (not(equals(Equals_Param92, 5));not(equals(Equals_Param93, 7))), (not(equals(Equals_Param92, 5));not(equals(Equals_Param93, 6))), (not(equals(Equals_Param92, 3));not(equals(Equals_Param93, 4))), (not(equals(Equals_Param92, 2));not(equals(Equals_Param93, 4))), (not(equals(Equals_Param92, 2));not(equals(Equals_Param93, 3))), (not(equals(Equals_Param92, 1));not(equals(Equals_Param93, 4))), (not(equals(Equals_Param92, 1));not(equals(Equals_Param93, 3))), (not(equals(Equals_Param92, 1));not(equals(Equals_Param93, 2))), (not(equals(Equals_Param93, 7));not(equals(Equals_Param92, 8))), (not(equals(Equals_Param93, 6));not(equals(Equals_Param92, 8))), (not(equals(Equals_Param93, 6));not(equals(Equals_Param92, 7))), (not(equals(Equals_Param93, 5));not(equals(Equals_Param92, 8))), (not(equals(Equals_Param93, 5));not(equals(Equals_Param92, 7))), (not(equals(Equals_Param93, 5));not(equals(Equals_Param92, 6))), (not(equals(Equals_Param93, 3));not(equals(Equals_Param92, 4))), (not(equals(Equals_Param93, 2));not(equals(Equals_Param92, 4))), (not(equals(Equals_Param93, 2));not(equals(Equals_Param92, 3))), (not(equals(Equals_Param93, 1));not(equals(Equals_Param92, 4))), (not(equals(Equals_Param93, 1));not(equals(Equals_Param92, 3))), (not(equals(Equals_Param93, 1));not(equals(Equals_Param92, 2))), neighbor(Equals_Param93, Equals_Param92)),  (equals(Equals_Param94, 8):-((not(equals(Equals_Param95, 7));not(equals(Equals_Param94, 8))), (not(equals(Equals_Param94, 4));not(equals(Equals_Param95, 7))), (not(equals(Equals_Param95, 4));not(equals(Equals_Param94, 7)))), (not(equals(Equals_Param95, 6));not(equals(Equals_Param94, 7))), (not(equals(Equals_Param95, 5));not(equals(Equals_Param94, 8))), (not(equals(Equals_Param95, 5));not(equals(Equals_Param94, 7))), (not(equals(Equals_Param95, 5));not(equals(Equals_Param94, 6))), (not(equals(Equals_Param95, 3));not(equals(Equals_Param94, 4))), (not(equals(Equals_Param95, 2));not(equals(Equals_Param94, 4))), (not(equals(Equals_Param95, 2));not(equals(Equals_Param94, 3))), (not(equals(Equals_Param95, 1));not(equals(Equals_Param94, 4))), (not(equals(Equals_Param95, 1));not(equals(Equals_Param94, 3))), (not(equals(Equals_Param95, 1));not(equals(Equals_Param94, 2))), (not(equals(Equals_Param94, 7));not(equals(Equals_Param95, 8))), (not(equals(Equals_Param94, 6));not(equals(Equals_Param95, 8))), (not(equals(Equals_Param94, 6));not(equals(Equals_Param95, 7))), (not(equals(Equals_Param94, 5));not(equals(Equals_Param95, 8))), (not(equals(Equals_Param94, 5));not(equals(Equals_Param95, 7))), (not(equals(Equals_Param94, 5));not(equals(Equals_Param95, 6))), (not(equals(Equals_Param94, 3));not(equals(Equals_Param95, 4))), (not(equals(Equals_Param94, 2));not(equals(Equals_Param95, 4))), (not(equals(Equals_Param94, 2));not(equals(Equals_Param95, 3))), (not(equals(Equals_Param94, 1));not(equals(Equals_Param95, 4))), (not(equals(Equals_Param94, 1));not(equals(Equals_Param95, 3))), (not(equals(Equals_Param94, 1));not(equals(Equals_Param95, 2))), neighbor(Equals_Param94, Equals_Param95)),  (equals(Equals_Param96, 7):-((not(equals(Equals_Param97, 4));not(equals(Equals_Param96, 7))), (not(equals(Equals_Param96, 4));not(equals(Equals_Param97, 7)))), (not(equals(Equals_Param96, 6));not(equals(Equals_Param97, 8))), (not(equals(Equals_Param96, 6));not(equals(Equals_Param97, 7))), (not(equals(Equals_Param96, 5));not(equals(Equals_Param97, 8))), (not(equals(Equals_Param96, 5));not(equals(Equals_Param97, 7))), (not(equals(Equals_Param96, 5));not(equals(Equals_Param97, 6))), (not(equals(Equals_Param96, 3));not(equals(Equals_Param97, 4))), (not(equals(Equals_Param96, 2));not(equals(Equals_Param97, 4))), (not(equals(Equals_Param96, 2));not(equals(Equals_Param97, 3))), (not(equals(Equals_Param96, 1));not(equals(Equals_Param97, 4))), (not(equals(Equals_Param96, 1));not(equals(Equals_Param97, 3))), (not(equals(Equals_Param96, 1));not(equals(Equals_Param97, 2))), (not(equals(Equals_Param97, 7));not(equals(Equals_Param96, 8))), (not(equals(Equals_Param97, 6));not(equals(Equals_Param96, 8))), (not(equals(Equals_Param97, 6));not(equals(Equals_Param96, 7))), (not(equals(Equals_Param97, 5));not(equals(Equals_Param96, 8))), (not(equals(Equals_Param97, 5));not(equals(Equals_Param96, 7))), (not(equals(Equals_Param97, 5));not(equals(Equals_Param96, 6))), (not(equals(Equals_Param97, 3));not(equals(Equals_Param96, 4))), (not(equals(Equals_Param97, 2));not(equals(Equals_Param96, 4))), (not(equals(Equals_Param97, 2));not(equals(Equals_Param96, 3))), (not(equals(Equals_Param97, 1));not(equals(Equals_Param96, 4))), (not(equals(Equals_Param97, 1));not(equals(Equals_Param96, 3))), (not(equals(Equals_Param97, 1));not(equals(Equals_Param96, 2))), neighbor(Equals_Param97, Equals_Param96)),  (equals(Equals_Param98, 8):-((not(equals(Equals_Param98, 4));not(equals(Equals_Param99, 7))), (not(equals(Equals_Param99, 4));not(equals(Equals_Param98, 7)))), (not(equals(Equals_Param99, 6));not(equals(Equals_Param98, 8))), (not(equals(Equals_Param99, 6));not(equals(Equals_Param98, 7))), (not(equals(Equals_Param99, 5));not(equals(Equals_Param98, 8))), (not(equals(Equals_Param99, 5));not(equals(Equals_Param98, 7))), (not(equals(Equals_Param99, 5));not(equals(Equals_Param98, 6))), (not(equals(Equals_Param99, 3));not(equals(Equals_Param98, 4))), (not(equals(Equals_Param99, 2));not(equals(Equals_Param98, 4))), (not(equals(Equals_Param99, 2));not(equals(Equals_Param98, 3))), (not(equals(Equals_Param99, 1));not(equals(Equals_Param98, 4))), (not(equals(Equals_Param99, 1));not(equals(Equals_Param98, 3))), (not(equals(Equals_Param99, 1));not(equals(Equals_Param98, 2))), (not(equals(Equals_Param98, 7));not(equals(Equals_Param99, 8))), (not(equals(Equals_Param98, 6));not(equals(Equals_Param99, 8))), (not(equals(Equals_Param98, 6));not(equals(Equals_Param99, 7))), (not(equals(Equals_Param98, 5));not(equals(Equals_Param99, 8))), (not(equals(Equals_Param98, 5));not(equals(Equals_Param99, 7))), (not(equals(Equals_Param98, 5));not(equals(Equals_Param99, 6))), (not(equals(Equals_Param98, 3));not(equals(Equals_Param99, 4))), (not(equals(Equals_Param98, 2));not(equals(Equals_Param99, 4))), (not(equals(Equals_Param98, 2));not(equals(Equals_Param99, 3))), (not(equals(Equals_Param98, 1));not(equals(Equals_Param99, 4))), (not(equals(Equals_Param98, 1));not(equals(Equals_Param99, 3))), (not(equals(Equals_Param98, 1));not(equals(Equals_Param99, 2))), neighbor(Equals_Param98, Equals_Param99)),  (equals(Equals_Param100, 4):-(not(equals(Equals_Param101, 4));not(equals(Equals_Param100, 7))), (not(equals(Equals_Param101, 7));not(equals(Equals_Param100, 8))), (not(equals(Equals_Param101, 6));not(equals(Equals_Param100, 8))), (not(equals(Equals_Param101, 6));not(equals(Equals_Param100, 7))), (not(equals(Equals_Param101, 5));not(equals(Equals_Param100, 8))), (not(equals(Equals_Param101, 5));not(equals(Equals_Param100, 7))), (not(equals(Equals_Param101, 5));not(equals(Equals_Param100, 6))), (not(equals(Equals_Param101, 3));not(equals(Equals_Param100, 4))), (not(equals(Equals_Param101, 2));not(equals(Equals_Param100, 4))), (not(equals(Equals_Param101, 2));not(equals(Equals_Param100, 3))), (not(equals(Equals_Param101, 1));not(equals(Equals_Param100, 4))), (not(equals(Equals_Param101, 1));not(equals(Equals_Param100, 3))), (not(equals(Equals_Param101, 1));not(equals(Equals_Param100, 2))), (not(equals(Equals_Param100, 7));not(equals(Equals_Param101, 8))), (not(equals(Equals_Param100, 6));not(equals(Equals_Param101, 8))), (not(equals(Equals_Param100, 6));not(equals(Equals_Param101, 7))), (not(equals(Equals_Param100, 5));not(equals(Equals_Param101, 8))), (not(equals(Equals_Param100, 5));not(equals(Equals_Param101, 7))), (not(equals(Equals_Param100, 5));not(equals(Equals_Param101, 6))), (not(equals(Equals_Param100, 3));not(equals(Equals_Param101, 4))), (not(equals(Equals_Param100, 2));not(equals(Equals_Param101, 4))), (not(equals(Equals_Param100, 2));not(equals(Equals_Param101, 3))), (not(equals(Equals_Param100, 1));not(equals(Equals_Param101, 4))), (not(equals(Equals_Param100, 1));not(equals(Equals_Param101, 3))), (not(equals(Equals_Param100, 1));not(equals(Equals_Param101, 2))), neighbor(Equals_Param100, Equals_Param101)),  (equals(Equals_Param102, 7):-(not(equals(Equals_Param102, 4));not(equals(Equals_Param103, 7))), (not(equals(Equals_Param102, 7));not(equals(Equals_Param103, 8))), (not(equals(Equals_Param102, 6));not(equals(Equals_Param103, 8))), (not(equals(Equals_Param102, 6));not(equals(Equals_Param103, 7))), (not(equals(Equals_Param102, 5));not(equals(Equals_Param103, 8))), (not(equals(Equals_Param102, 5));not(equals(Equals_Param103, 7))), (not(equals(Equals_Param102, 5));not(equals(Equals_Param103, 6))), (not(equals(Equals_Param102, 3));not(equals(Equals_Param103, 4))), (not(equals(Equals_Param102, 2));not(equals(Equals_Param103, 4))), (not(equals(Equals_Param102, 2));not(equals(Equals_Param103, 3))), (not(equals(Equals_Param102, 1));not(equals(Equals_Param103, 4))), (not(equals(Equals_Param102, 1));not(equals(Equals_Param103, 3))), (not(equals(Equals_Param102, 1));not(equals(Equals_Param103, 2))), (not(equals(Equals_Param103, 7));not(equals(Equals_Param102, 8))), (not(equals(Equals_Param103, 6));not(equals(Equals_Param102, 8))), (not(equals(Equals_Param103, 6));not(equals(Equals_Param102, 7))), (not(equals(Equals_Param103, 5));not(equals(Equals_Param102, 8))), (not(equals(Equals_Param103, 5));not(equals(Equals_Param102, 7))), (not(equals(Equals_Param103, 5));not(equals(Equals_Param102, 6))), (not(equals(Equals_Param103, 3));not(equals(Equals_Param102, 4))), (not(equals(Equals_Param103, 2));not(equals(Equals_Param102, 4))), (not(equals(Equals_Param103, 2));not(equals(Equals_Param102, 3))), (not(equals(Equals_Param103, 1));not(equals(Equals_Param102, 4))), (not(equals(Equals_Param103, 1));not(equals(Equals_Param102, 3))), (not(equals(Equals_Param103, 1));not(equals(Equals_Param102, 2))), neighbor(Equals_Param103, Equals_Param102)),  (equals(Equals_Param104, 4):-(not(equals(Equals_Param105, 4));not(equals(Equals_Param104, 7))), (not(equals(Equals_Param104, 7));not(equals(Equals_Param105, 8))), (not(equals(Equals_Param104, 6));not(equals(Equals_Param105, 8))), (not(equals(Equals_Param104, 6));not(equals(Equals_Param105, 7))), (not(equals(Equals_Param104, 5));not(equals(Equals_Param105, 8))), (not(equals(Equals_Param104, 5));not(equals(Equals_Param105, 7))), (not(equals(Equals_Param104, 5));not(equals(Equals_Param105, 6))), (not(equals(Equals_Param104, 3));not(equals(Equals_Param105, 4))), (not(equals(Equals_Param104, 2));not(equals(Equals_Param105, 4))), (not(equals(Equals_Param104, 2));not(equals(Equals_Param105, 3))), (not(equals(Equals_Param104, 1));not(equals(Equals_Param105, 4))), (not(equals(Equals_Param104, 1));not(equals(Equals_Param105, 3))), (not(equals(Equals_Param104, 1));not(equals(Equals_Param105, 2))), (not(equals(Equals_Param105, 7));not(equals(Equals_Param104, 8))), (not(equals(Equals_Param105, 6));not(equals(Equals_Param104, 8))), (not(equals(Equals_Param105, 6));not(equals(Equals_Param104, 7))), (not(equals(Equals_Param105, 5));not(equals(Equals_Param104, 8))), (not(equals(Equals_Param105, 5));not(equals(Equals_Param104, 7))), (not(equals(Equals_Param105, 5));not(equals(Equals_Param104, 6))), (not(equals(Equals_Param105, 3));not(equals(Equals_Param104, 4))), (not(equals(Equals_Param105, 2));not(equals(Equals_Param104, 4))), (not(equals(Equals_Param105, 2));not(equals(Equals_Param104, 3))), (not(equals(Equals_Param105, 1));not(equals(Equals_Param104, 4))), (not(equals(Equals_Param105, 1));not(equals(Equals_Param104, 3))), (not(equals(Equals_Param105, 1));not(equals(Equals_Param104, 2))), neighbor(Equals_Param105, Equals_Param104)),  (equals(Equals_Param106, 7):-(not(equals(Equals_Param106, 4));not(equals(Equals_Param107, 7))), (not(equals(Equals_Param107, 7));not(equals(Equals_Param106, 8))), (not(equals(Equals_Param107, 6));not(equals(Equals_Param106, 8))), (not(equals(Equals_Param107, 6));not(equals(Equals_Param106, 7))), (not(equals(Equals_Param107, 5));not(equals(Equals_Param106, 8))), (not(equals(Equals_Param107, 5));not(equals(Equals_Param106, 7))), (not(equals(Equals_Param107, 5));not(equals(Equals_Param106, 6))), (not(equals(Equals_Param107, 3));not(equals(Equals_Param106, 4))), (not(equals(Equals_Param107, 2));not(equals(Equals_Param106, 4))), (not(equals(Equals_Param107, 2));not(equals(Equals_Param106, 3))), (not(equals(Equals_Param107, 1));not(equals(Equals_Param106, 4))), (not(equals(Equals_Param107, 1));not(equals(Equals_Param106, 3))), (not(equals(Equals_Param107, 1));not(equals(Equals_Param106, 2))), (not(equals(Equals_Param106, 7));not(equals(Equals_Param107, 8))), (not(equals(Equals_Param106, 6));not(equals(Equals_Param107, 8))), (not(equals(Equals_Param106, 6));not(equals(Equals_Param107, 7))), (not(equals(Equals_Param106, 5));not(equals(Equals_Param107, 8))), (not(equals(Equals_Param106, 5));not(equals(Equals_Param107, 7))), (not(equals(Equals_Param106, 5));not(equals(Equals_Param107, 6))), (not(equals(Equals_Param106, 3));not(equals(Equals_Param107, 4))), (not(equals(Equals_Param106, 2));not(equals(Equals_Param107, 4))), (not(equals(Equals_Param106, 2));not(equals(Equals_Param107, 3))), (not(equals(Equals_Param106, 1));not(equals(Equals_Param107, 4))), (not(equals(Equals_Param106, 1));not(equals(Equals_Param107, 3))), (not(equals(Equals_Param106, 1));not(equals(Equals_Param107, 2))), neighbor(Equals_Param106, Equals_Param107))], 53==53).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8731
% Side1(GateAO)=4.
side1(gateAO,4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8732
% Side2(GateAO)=7.
side2(gateAO,7).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8734
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8761
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8762
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8764
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8767
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8768
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8769
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8770
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8771
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8772
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8773
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8775
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8776
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8776
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 0), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_416')) :-
       (   not(holds_at(pos(homer, Some_Param), 0))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_416')),
    [not(holds_at(pos(homer, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_416')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_416').
 */
axiom(holds_at(pos(homer, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_416')]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_416').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_416')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8777
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8777
% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(jumbo, Position), 0), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_417')) :-
       (   not(holds_at(pos(jumbo, Some_Param), 0))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_417')),
    [not(holds_at(pos(jumbo, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_417')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(jumbo, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_417').
 */
axiom(holds_at(pos(jumbo, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_417')]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_417').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_417')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8779
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8779
% HoldsAt(Pos(Homer,position),4) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 4), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_418')) :-
       (   not(holds_at(pos(homer, Some_Param), 4))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_418')),
    [not(holds_at(pos(homer, Some_Param), t4)), b(t, t4), ignore(t+4=t4)]).
axiom(not(some(Some_Param, '$kolem_Fn_418')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 4) :-
       some(Some_Param3, '$kolem_Fn_418').
 */
axiom(holds_at(pos(homer, Some_Param3), t4),
    [some(Some_Param3, '$kolem_Fn_418'), b(t, t4), ignore(t+4=t4)]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_418').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_418')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8780
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8780
% HoldsAt(Pos(Jumbo,position),4) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(jumbo, Position), 4), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_419')) :-
       (   not(holds_at(pos(jumbo, Some_Param), 4))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_419')),
    [not(holds_at(pos(jumbo, Some_Param), t4)), b(t, t4), ignore(t+4=t4)]).
axiom(not(some(Some_Param, '$kolem_Fn_419')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(jumbo, Some_Param3), 4) :-
       some(Some_Param3, '$kolem_Fn_419').
 */
axiom(holds_at(pos(jumbo, Some_Param3), t4),
    [some(Some_Param3, '$kolem_Fn_419'), b(t, t4), ignore(t+4=t4)]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_419').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_419')]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8782
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),4).
holds_at(posDeterminingFluent(Human,1),4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8783
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
 %  not(holds_at(doneBy(Event,Animal),4)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), t4)),
    [b(t, t4), ignore(t+4=t4)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8785
%; ccalc.2.0b.8.3 single model
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Mount(Homer,Jumbo),1).
%;Happens(ThrowOff(Jumbo,Homer),2).
%;HoldsAt(PosDeterminingFluent(Homer,1),2).
%;Happens(Move(Jumbo,7),3).
%;Happens(Mount(Homer,Jumbo),3).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8796
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8797
==> range(time,0,4).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8798
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8799
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8827
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8828
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8830
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8833
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8834
==> t(human,homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8835
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8836
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8838
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8839
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8839
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 0), outside=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_420')) :-
       (   not(holds_at(pos(homer, Some_Param), 0))
       ;   not(equals(outside, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_420')),
    [not(holds_at(pos(homer, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_420')),
    [not(equals(outside, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 0) :-
       some(Some_Param3, '$kolem_Fn_420').
 */
axiom(holds_at(pos(homer, Some_Param3), t),
    [some(Some_Param3, '$kolem_Fn_420')]).

 /*  equals(outside, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_420').
 */
axiom(equals(outside, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_420')]).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8840
% {position} 


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8840
% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).

 /*   exists([Position],
              (holds_at(pos(homer, Position), 2), cageA=loc(Position))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_421')) :-
       (   not(holds_at(pos(homer, Some_Param), 2))
       ;   not(equals(cageA, loc(Some_Param)))
       ).
 */
axiom(not(some(Some_Param, '$kolem_Fn_421')),
    [not(holds_at(pos(homer, Some_Param), t2)), b(t, t2), ignore(t+2=t2)]).
axiom(not(some(Some_Param, '$kolem_Fn_421')),
    [not(equals(cageA, loc(Some_Param)))]).

 /*  holds_at(pos(homer, Some_Param3), 2) :-
       some(Some_Param3, '$kolem_Fn_421').
 */
axiom(holds_at(pos(homer, Some_Param3), t2),
    [some(Some_Param3, '$kolem_Fn_421'), b(t, t2), ignore(t+2=t2)]).

 /*  equals(cageA, loc(Some_Param4)) :-
       some(Some_Param4, '$kolem_Fn_421').
 */
axiom(equals(cageA, loc(Some_Param4)),
    [some(Some_Param4, '$kolem_Fn_421')]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8842
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
holds_at(posDeterminingFluent(Human,1),2).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8843
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
 %  not(holds_at(doneBy(Event,Animal),2)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), t2)),
    [b(t, t2), ignore(t+2=t2)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8845
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8846
==> range(time,0,2).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8847
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8848
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest6.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8876
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8877
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8879
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8882
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8883
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8884
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8885
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8886
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8887
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8888
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8890
% HoldsAt(Mounted(Homer,Jumbo),0).
axiom(initially(mounted(homer, jumbo)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8891
% HoldsAt(Pos(Jumbo,1),0).
axiom(initially(pos(jumbo, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8892
% Happens(ThrowOff(Jumbo,Homer),0).
axiom(happens(throwOff(jumbo, homer), t),
    [is_time(0)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8894
% option manualrelease on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8895
:- set_ec_option(manualrelease, on).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8895
% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
 %  not(releasedAt(mounted(Human,Animal),0)).
axiom(not(releasedAt(mounted(Mounted_Param, Mounted_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8896
% [gate]
 % !ReleasedAt(Opened(gate),0).
 %  not(releasedAt(opened(Gate),0)).
axiom(not(releasedAt(opened(Opened_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8897
% [position]
 % ReleasedAt(Pos(Homer,position),0).
releasedAt(pos(homer,Position),0).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8898
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
 %  not(releasedAt(pos(jumbo,Position),0)).
axiom(not(releasedAt(pos(jumbo, Pos_Ret), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8900
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8901
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
 %  not(holds_at(doneBy(Event,Animal),1)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), start)),
    [b(t, start), ignore(t+1=start)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8903
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8904
==> range(time,0,1).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8905
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8906
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors: 
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8934
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8935
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8937
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8940
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8941
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8942
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8943
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8944
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8945
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8946
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8948
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).
axiom(not(initially(opened(gateAO))),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8949
% HoldsAt(Pos(Homer,6),0).
axiom(initially(pos(homer, 6)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8950
% [time]
 % HoldsAt(Pos(Jumbo,1),time).
holds_at(pos(jumbo,1),Time).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8952
%; goal


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8953
% HoldsAt(Mounted(Homer,Jumbo),4).
holds_at(mounted(homer,jumbo),4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8955
%;ABDUCE
%;Happens(Move(Homer,7),0).
%;Happens(Open(Homer,GateAO),1).
%;Happens(Move(Homer,4),2).
%;Happens(Mount(Homer,Jumbo),3).
% [human]
 
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8961
% HoldsAt(PosDeterminingFluent(human,1),4).
holds_at(posDeterminingFluent(Human,1),4).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8962
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
 %  not(holds_at(doneBy(Event,Animal),4)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), t4)),
    [b(t, t4), ignore(t+4=t4)]).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8964
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8965
==> range(time,0,4).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8966
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8967
==> range(offset,0,0).

% option timediff off
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8969
:- set_ec_option(timediff, off).

% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8970
:- set_ec_option(modeldiff, on).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8998
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:8999
:- set_ec_option(encoding, 3).

% load foundations/Root.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9001
% load foundations/EC.e

% load examples/AkmanEtAl2004/ZooWorld.e

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9004
% human Homer
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9005
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9006
==> t(elephant,jumbo).

% horse Silver
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9007
==> t(horse,silver).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9008
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9009
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9010
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9011
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9012
% Species(Silver)=HorseSpecies.
species(silver,horseSpecies).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9013
% Adult(Silver).
adult(silver).
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9015
% {position}


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9016
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).

 /*   exists([Position],
              (not(holds_at(pos(homer, Position), 0)), holds_at(pos(jumbo, Position), 0), holds_at(pos(homer, Position), 1), not(holds_at(pos(jumbo, Position), 1)))).
 */

 /*  not(some(Some_Param, '$kolem_Fn_422')) :-
       (   holds_at(pos(homer, Some_Param), 0)
       ;   not(holds_at(pos(jumbo, Some_Param), 0))
       ;   not(holds_at(pos(homer, Some_Param), 1))
       ;   holds_at(pos(jumbo, Some_Param), 1)
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9019
axiom(not(some(Some_Param, '$kolem_Fn_422')),
    [holds_at(pos(homer, Some_Param), t)]).
axiom(not(some(Some_Param, '$kolem_Fn_422')),
    [not(holds_at(pos(jumbo, Some_Param), t))]).
axiom(not(some(Some_Param, '$kolem_Fn_422')),
   
    [ not(holds_at(pos(homer, Some_Param), start)),
      b(t, start),
      ignore(t+1=start)
    ]).
axiom(not(some(Some_Param, '$kolem_Fn_422')),
    [holds_at(pos(jumbo, Some_Param), start), b(t, start), ignore(t+1=start)]).

 /*  not(holds_at(pos(homer, Some_Param3), 0)) :-
       some(Some_Param3, '$kolem_Fn_422').
 */
axiom(not(holds_at(pos(homer, Some_Param3), t)),
    [some(Some_Param3, '$kolem_Fn_422')]).

 /*  holds_at(pos(jumbo, Some_Param4), 0) :-
       some(Some_Param4, '$kolem_Fn_422').
 */
axiom(holds_at(pos(jumbo, Some_Param4), t),
    [some(Some_Param4, '$kolem_Fn_422')]).

 /*  holds_at(pos(homer, Some_Param5), 1) :-
       some(Some_Param5, '$kolem_Fn_422').
 */
axiom(holds_at(pos(homer, Some_Param5), start),
    [some(Some_Param5, '$kolem_Fn_422'), b(t, start), ignore(t+1=start)]).

 /*  not(holds_at(pos(jumbo, Some_Param6), 1)) :-
       some(Some_Param6, '$kolem_Fn_422').
 */
axiom(not(holds_at(pos(jumbo, Some_Param6), start)),
    [some(Some_Param6, '$kolem_Fn_422'), b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9020
% [animal,time]
 % !Happens(ThrowOff(animal,Homer),time).
 %  not(happens(throwOff(Animal,homer),Time)).
axiom(not(happens(throwOff(ThrowOff_Param, homer), Maptime)),
    []).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9022
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9023
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
 %  not(holds_at(doneBy(Event,Animal),1)).
axiom(not(holds_at(doneBy(DoneBy_Param, DoneBy_Ret), start)),
    [b(t, start), ignore(t+1=start)]).


% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9025
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,7),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Move(Silver,8),0).
%;Happens(Mount(Homer,Jumbo),0).

% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9033
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9034
==> range(time,0,1).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9035
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/small_adventure_games/prolog/ec_planner/ectest/ec_reader_test_examples.e:9036
==> range(offset,0,0).
%; End of file.
