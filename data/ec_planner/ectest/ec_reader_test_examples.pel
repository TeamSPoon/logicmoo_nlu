:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
 %  loading(load_e_pl,'ec_reader_test_examples.e').
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Holding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% option encoding 3
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort person
==> sort(person).

% sort object
==> sort(object).

% event Hold(person,object)
event(hold(Hold_Param,Hold_Ret)).
==> mpred_prop(hold(person,object),event).
==> meta_argtypes(hold(person,object)).

% fluent Holding(person,object)
fluent(holding(Holding_Param,Holding_Ret)).
==> mpred_prop(holding(person,object),fluent).
==> meta_argtypes(holding(person,object)).

% person P1
==> t(person,p1).

% object O1
==> t(object,o1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:41
% Happens(Hold(P1,O1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(hold(p1, o1), t)).
 */
axiom(happens(hold(p1, o1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:43
% [person,object,time]
% Initiates(Hold(person,object),Holding(person,object),time).

 /*  [] ->
       ta(Time,
          initiates(hold(Person, Object),
                    holding(Person, Object),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:44
axiom(initiates(hold(Person, Object), holding(Person, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:46
% !HoldsAt(Holding(P1,O1),0).
 %  not(initially(holding(p1,o1))).

 /*  [] ->
       ta(Ta_Param, not(initially(holding(p1, o1)))).
 */
axiom(not(initially(holding(p1, o1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:47
%;;; AUTO !ReleasedAt(Holding(P1,O1),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:49
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:50
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:52
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:53
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:82
% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:83
:- set_ec_option(trajectory, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:85
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:86
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:88
==> sort(object).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:89
==> subsort(height,integer).

% fluent Height(object,height)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:91
fluent(height(Height_Param,Height_Ret)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% fluent Falling(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:92
fluent(falling(Falling_Ret)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% event StartFalling(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:93
event(startFalling(StartFalling_Ret)).
==> mpred_prop(startFalling(object),event).
==> meta_argtypes(startFalling(object)).

% event HitsGround(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:94
event(hitsGround(HitsGround_Ret)).
==> mpred_prop(hitsGround(object),event).
==> meta_argtypes(hitsGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:95
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.

 /*  allDifferent([Object, Height1, Time, Height2]) ->
       ( holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time)->Height1=Height2
       ).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height2), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(height(Object, Height2), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:98
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height1), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:100
% [object,time]
% Initiates(StartFalling(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          initiates(startFalling(Object), falling(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:101
axiom(initiates(startFalling(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:103
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).

 /*  [] ->
       ta(Time,
          releases(startFalling(Object),
                   height(Object, Height),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:104
axiom(releases(startFalling(Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:106
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset*offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).

 /*  allDifferent([Object, Height1, Time, Height2, Offset]) ->
       ( holds_at(height(Object, Height1), Time), Height2=Height1-Offset*Offset->trajectory(falling(Object), Time, height(Object, Height2), Offset)
       ).
 */

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       ( holds_at(height(Object, Height1), Time),
         equals(Height2, Height1-Offset*Offset)
       ),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset*Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset*Offset).
 */

 /*  [holds_at(height(Object, Height1), Time), call(Height2=Height1-Offset*Offset), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(call(Height2=Height1-Offset*Offset), Time), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:109
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(call(Height2=Height1-Offset*Offset),
               Time),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset*Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset*Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset*Offset).
 */

 /*  [call(Height2=Height1-Offset*Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(call(Height2=Height1-Offset*Offset), Time), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(call(Height2=Height1-Offset*Offset),
               Time),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:111
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)->happens(hitsGround(Object), Time)
       ).
 */

 /*  happens(hitsGround(Object), Time) :-
       ( holds_at(falling(Object), Time),
         holds_at(height(Object, 0), Time)
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time), allDifferent([Object, Time])] ->
       ta(Time, happens(hitsGround(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:114
axiom(happens(hitsGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitsGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(height(Object, 0), Time), not(happens(hitsGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(falling(Object)), Time)).
 */
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitsGround(Object), Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitsGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), not(happens(hitsGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(height(Object, 0)), Time)).
 */
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitsGround(Object), Time)),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:116
%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:122
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          initiates(hitsGround(Object),
                    height(Object, Height),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:123
axiom(initiates(hitsGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:125
% [object,time]
% Terminates(HitsGround(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          terminates(hitsGround(Object), falling(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:126
axiom(terminates(hitsGround(Object), falling(Object), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:128
% object Leaf
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:129
==> t(object,leaf).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:130
% !HoldsAt(Falling(Leaf),0).
 %  not(initially(falling(leaf))).

 /*  [] ->
       ta(Ta_Param, not(initially(falling(leaf)))).
 */
axiom(not(initially(falling(leaf))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:131
% HoldsAt(Height(Leaf,9),0).

 /*  [] ->
       ta(Ta_Param, initially(height(leaf, 9))).
 */
axiom(initially(height(leaf, 9)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:132
% Happens(StartFalling(Leaf),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(startFalling(leaf), t)).
 */
axiom(happens(startFalling(leaf), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:134
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:135
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:137
==> range(time,0,4).

% range offset 1 9
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:138
==> range(offset,1,9).

% range height 0 9
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:139
==> range(height,0,9).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:167
% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:168
==> sort(object).

% sort xcoord: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:169
==> subsort(xcoord,integer).

% sort ycoord: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:170
==> subsort(ycoord,integer).

% sort grid
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:171
==> sort(grid).

% sort shape
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:172
==> sort(shape).

% sort color
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:173
==> sort(color).
%; constants

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:175
% shape Round,Square
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:176
==> t(shape,round).
==> t(shape,square).

% color Red,Green
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:177
==> t(color,red).
==> t(color,green).
%; predicates, fluents, and events

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:179
% predicate Equal(object,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:180
predicate(equal(Equal_Param,Equal_Ret)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% predicate Shape(object,shape)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:181
predicate(shape(Shape_Param,Shape_Ret)).
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% predicate Color(object,color)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:182
predicate(color(Color_Param,Color_Ret)).
==> mpred_prop(color(object,color),predicate).
==> meta_argtypes(color(object,color)).

% fluent Location(grid,object,xcoord,ycoord)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:183
fluent(location(Location_Param,
		_,
		_,
		Location_Ret)).
==> mpred_prop(location(grid,object,xcoord,ycoord),fluent).
==> meta_argtypes(location(grid,object,xcoord,ycoord)).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:184
event(move(Move_Param,
	   _,
	   _,
	   _,
	   _,
	   Move_Ret)).
==> mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).
==> meta_argtypes(move(grid,object,xcoord,ycoord,xcoord,ycoord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:185
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).

 /*  allDifferent([Object1, Object2]) ->
       ( equal(Object1, Object2)->equal(Object2, Object1)
       ).
 */

 /*  equal(Object2, Object1) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2])] ->
       ta(Ta_Param, equal(Object2, Object1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:187
axiom(equal(Object2, Object1),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2])
    ]).

 /*  not(equal(Object1, Object2)) :-
       not(equal(Object2, Object1)),
       allDifferent([Object1, Object2]).
 */

 /*  [not(equal(Object2, Object1)), allDifferent([Object1, Object2])] ->
       ta(Ta_Param3, not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [ not(equal(Object2, Object1)),
      allDifferent([Object1, Object2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:189
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.

 /*  allDifferent([Object, Shape1, Shape2]) ->
       ( shape(Object, Shape1), shape(Object, Shape2)->Shape1=Shape2
       ).
 */

 /*  not(shape(Object, Shape1)) :-
       shape(Object, Shape2),
       not(equals(Shape1, Shape2)),
       allDifferent([Object, Shape1, Shape2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       not(equals(Shape1, Shape2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       not(call(Shape1=Shape2)).
 */

 /*  [shape(Object, Shape2), not(call(Shape1=Shape2)), allDifferent([Object, Shape1, Shape2])] ->
       ta(Axiom_head_Ret, not(shape(Object, Shape1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:192
axiom(not(shape(Object, Shape1)),
   
    [ shape(Object, Shape2),
      not(call(Shape1=Shape2)),
      allDifferent([Object, Shape1, Shape2])
    ]).

 /*  not(shape(Object, Shape2)) :-
       shape(Object, Shape1),
       not(equals(Shape1, Shape2)),
       allDifferent([Object, Shape1, Shape2]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       not(equals(Shape1, Shape2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       not(call(Shape1=Shape2)).
 */

 /*  [shape(Object, Shape1), not(call(Shape1=Shape2)), allDifferent([Object, Shape1, Shape2])] ->
       ta(Axiom_head_Ret4, not(shape(Object, Shape2))).
 */
axiom(not(shape(Object, Shape2)),
   
    [ shape(Object, Shape1),
      not(call(Shape1=Shape2)),
      allDifferent([Object, Shape1, Shape2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:194
%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.

 /*  allDifferent([Object, Color1, Color2]) ->
       ( color(Object, Color1), color(Object, Color2)->Color1=Color2
       ).
 */

 /*  not(color(Object, Color1)) :-
       color(Object, Color2),
       not(equals(Color1, Color2)),
       allDifferent([Object, Color1, Color2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       not(equals(Color1, Color2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       not(call(Color1=Color2)).
 */

 /*  [color(Object, Color2), not(call(Color1=Color2)), allDifferent([Object, Color1, Color2])] ->
       ta(Axiom_head_Ret, not(color(Object, Color1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:197
axiom(not(color(Object, Color1)),
   
    [ color(Object, Color2),
      not(call(Color1=Color2)),
      allDifferent([Object, Color1, Color2])
    ]).

 /*  not(color(Object, Color2)) :-
       color(Object, Color1),
       not(equals(Color1, Color2)),
       allDifferent([Object, Color1, Color2]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       not(equals(Color1, Color2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       not(call(Color1=Color2)).
 */

 /*  [color(Object, Color1), not(call(Color1=Color2)), allDifferent([Object, Color1, Color2])] ->
       ta(Axiom_head_Ret4, not(color(Object, Color2))).
 */
axiom(not(color(Object, Color2)),
   
    [ color(Object, Color1),
      not(call(Color1=Color2)),
      allDifferent([Object, Color1, Color2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:199
%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).

 /*  allDifferent([Object1, Object2, Shape]) ->
       ( equal(Object1, Object2)->exists([Shape],  (shape(Object1, Shape), shape(Object2, Shape)))
       ).
 */

 /*  not(equal(Object1, Object2)) :-
       (   not(shape(Object1, Shape))
       ;   not(shape(Object2, Shape))
       ),
       allDifferent([Object1, Object2, Shape]).
 */

 /*  [(not(shape(Object1, Shape));not(shape(Object2, Shape))), allDifferent([Object1, Object2, Shape])] ->
       ta(Ta_Param, not(equal(Object1, Object2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:202
axiom(not(equal(Object1, Object2)),
   
    [  (not(shape(Object1, Shape));not(shape(Object2, Shape))),
      allDifferent([Object1, Object2, Shape])
    ]).

 /*  shape(Object1, Shape) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2, Shape]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2, Shape])] ->
       ta(Ta_Param4, shape(Object1, Shape)).
 */
axiom(shape(Object1, Shape),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2, Shape])
    ]).

 /*  shape(Object2, Shape) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2, Shape]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2, Shape])] ->
       ta(Ta_Param5, shape(Object2, Shape)).
 */
axiom(shape(Object2, Shape),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2, Shape])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:204
%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).

 /*  allDifferent([Object1, Object2, Color]) ->
       ( equal(Object1, Object2)->exists([Color],  (color(Object1, Color), color(Object2, Color)))
       ).
 */

 /*  not(equal(Object1, Object2)) :-
       (   not(color(Object1, Color))
       ;   not(color(Object2, Color))
       ),
       allDifferent([Object1, Object2, Color]).
 */

 /*  [(not(color(Object1, Color));not(color(Object2, Color))), allDifferent([Object1, Object2, Color])] ->
       ta(Ta_Param, not(equal(Object1, Object2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:207
axiom(not(equal(Object1, Object2)),
   
    [  (not(color(Object1, Color));not(color(Object2, Color))),
      allDifferent([Object1, Object2, Color])
    ]).

 /*  color(Object1, Color) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2, Color]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2, Color])] ->
       ta(Ta_Param4, color(Object1, Color)).
 */
axiom(color(Object1, Color),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2, Color])
    ]).

 /*  color(Object2, Color) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2, Color]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2, Color])] ->
       ta(Ta_Param5, color(Object2, Color)).
 */
axiom(color(Object2, Color),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2, Color])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:209
%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).

 /*  allDifferent([Object1, Object2, Grid, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2]) ->
       ( equal(Object1, Object2)->(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)->Xcoord1=Xcoord2, Ycoord1=Ycoord2)
       ).
 */

 /*  not(equal(Object1, Object2)) :-
       ( ( holds_at(location(Grid,
                             Object1,
                             Xcoord1,
                             Ycoord1),
                    Time),
           holds_at(location(Grid,
                             Object2,
                             Xcoord2,
                             Ycoord2),
                    Time)
         ),
         (   not(equals(Xcoord1, Xcoord2))
         ;   not(equals(Ycoord1, Ycoord2))
         )
       ),
       allDifferent(
                    [ Object1,
                      Object2,
                      Grid,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Xcoord2,
                      Ycoord2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord1=Xcoord2))
       ;   not(call(Ycoord1=Ycoord2))
       ).
 */

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2))), allDifferent([Object1, Object2, Grid, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time, not(equal(Object1, Object2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:214
axiom(not(equal(Object1, Object2)),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2))),
      allDifferent(
                   [ Object1,
                     Object2,
                     Grid,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Xcoord2,
                     Ycoord2
                   ])
    ]).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2),
       allDifferent(
                    [ Object1,
                      Object2,
                      Grid,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Xcoord2,
                      Ycoord2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord1=Xcoord2))
       ;   not(call(Ycoord1=Ycoord2))
       ).
 */

 /*  [holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2))), equal(Object1, Object2), allDifferent([Object1, Object2, Grid, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */

 /*  [holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)), equal(Object1, Object2), allDifferent([Object1, Object2, Grid, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)),
      equal(Object1, Object2),
      allDifferent(
                   [ Object1,
                     Object2,
                     Grid,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Xcoord2,
                     Ycoord2
                   ])
    ]).

 /*  not(holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2),
       allDifferent(
                    [ Object1,
                      Object2,
                      Grid,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Xcoord2,
                      Ycoord2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord1=Xcoord2))
       ;   not(call(Ycoord1=Ycoord2))
       ).
 */

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time),  (not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2))), equal(Object1, Object2), allDifferent([Object1, Object2, Grid, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time),  (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)), equal(Object1, Object2), allDifferent([Object1, Object2, Grid, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
axiom(holds_at(neg(location(Grid, Object2, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
       (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)),
      equal(Object1, Object2),
      allDifferent(
                   [ Object1,
                     Object2,
                     Grid,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Xcoord2,
                     Ycoord2
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:216
%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.

 /*  allDifferent([Grid, Object, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2]) ->
       ( holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time)->Xcoord1=Xcoord2, Ycoord1=Ycoord2
       ).
 */

 /*  not(holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       allDifferent(
                    [ Grid,
                      Object,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Xcoord2,
                      Ycoord2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord1=Xcoord2))
       ;   not(call(Ycoord1=Ycoord2))
       ).
 */

 /*  [holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time),  (not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2))), allDifferent([Grid, Object, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */

 /*  [holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time),  (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)), allDifferent([Grid, Object, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:220
axiom(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord2, Ycoord2),
               Time),
       (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)),
      allDifferent(
                   [ Grid,
                     Object,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Xcoord2,
                     Ycoord2
                   ])
    ]).

 /*  not(holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       allDifferent(
                    [ Grid,
                      Object,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Xcoord2,
                      Ycoord2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord1=Xcoord2))
       ;   not(call(Ycoord1=Ycoord2))
       ).
 */

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time),  (not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2))), allDifferent([Grid, Object, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time),  (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)), allDifferent([Grid, Object, Xcoord1, Ycoord1, Time, Xcoord2, Ycoord2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
axiom(holds_at(neg(location(Grid, Object, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time),
       (holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2)), Time)),
      allDifferent(
                   [ Grid,
                     Object,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Xcoord2,
                     Ycoord2
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:222
%; objects have locations
% [grid,object,time]
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:224
% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).

 /*  exists([Xcoord,Ycoord],
    holds_at(location(Grid,Object,Xcoord,Ycoord),
   	 Time)).
 */

 /*  [] ->
       ta(Time,
          holds_at(location(Grid, Object, Xcoord, Ycoord),
                   Time)).
 */
axiom(holds_at(location(Grid, Object, Xcoord, Ycoord), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:226
%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).

 /*  allDifferent([Grid, Object1, Xcoord1, Ycoord1, Time, Object2]) ->
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)->equal(Object1, Object2)
       ).
 */

 /*  equal(Object1, Object2) :-
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                  Time),
         holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                  Time)
       ),
       allDifferent(
                    [ Grid,
                      Object1,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Object2
                    ]).
 */

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time), allDifferent([Grid, Object1, Xcoord1, Ycoord1, Time, Object2])] ->
       ta(Time, equal(Object1, Object2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:230
axiom(equal(Object1, Object2),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time),
      allDifferent(
                   [ Grid,
                     Object1,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Object2
                   ])
    ]).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)),
       allDifferent(
                    [ Grid,
                      Object1,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Object2
                    ]).
 */

 /*  [holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2)), allDifferent([Grid, Object1, Xcoord1, Ycoord1, Time, Object2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2)),
      allDifferent(
                   [ Grid,
                     Object1,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Object2
                   ])
    ]).

 /*  not(holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)),
       allDifferent(
                    [ Grid,
                      Object1,
                      Xcoord1,
                      Ycoord1,
                      Time,
                      Object2
                    ]).
 */

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2)), allDifferent([Grid, Object1, Xcoord1, Ycoord1, Time, Object2])] ->
       ta(Time,
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
axiom(holds_at(neg(location(Grid, Object2, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2)),
      allDifferent(
                   [ Grid,
                     Object1,
                     Xcoord1,
                     Ycoord1,
                     Time,
                     Object2
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:232
%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).

 /*  [] ->
       ta(Time,
          initiates(move(Grid,
                         Object,
                         Xcoord1,
                         Ycoord1,
                         Xcoord2,
                         Ycoord2),
                    location(Grid, Object, Xcoord2, Ycoord2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:236
axiom(initiates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord2, Ycoord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:238
%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:241
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).

 /*  [] ->
       ta(Time,
          terminates(move(Grid,
                          Object,
                          Xcoord1,
                          Ycoord1,
                          Xcoord2,
                          Ycoord2),
                     location(Grid,
                              Object,
                              Xcoord1,
                              Ycoord1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:243
axiom(terminates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord1, Ycoord1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:245
%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:258
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).

 /*  allDifferent([Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2, Time]) ->
       ( happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)->holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), (Xcoord1=Xcoord2, (Ycoord1=Ycoord2+1;Ycoord1=Ycoord2-1);Ycoord1=Ycoord2, (Xcoord1=Xcoord2+1;Xcoord1=Xcoord2-1))
       ).
 */

 /*  not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)) :-
       (   not(holds_at(location(Grid,
                                 Object,
                                 Xcoord1,
                                 Ycoord1),
                        Time))
       ;   (   not(equals(Xcoord1, Xcoord2))
           ;   not(equals(Ycoord1, Ycoord2+1)),
               not(equals(Ycoord1, Ycoord2-1))
           ),
           (   not(equals(Ycoord1, Ycoord2))
           ;   not(equals(Xcoord1, Xcoord2+1)),
               not(equals(Xcoord1, Xcoord2-1))
           )
       ),
       allDifferent(
                    [ Grid,
                      Object,
                      Xcoord1,
                      Ycoord1,
                      Xcoord2,
                      Ycoord2,
                      Time
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(location(Grid,
                                 Object,
                                 Xcoord1,
                                 Ycoord1),
                        Time))
       ;   (   not(equals(Xcoord1, Xcoord2))
           ;   not(equals(Ycoord1, Ycoord2+1)),
               not(equals(Ycoord1, Ycoord2-1))
           ),
           (   not(equals(Ycoord1, Ycoord2))
           ;   not(equals(Xcoord1, Xcoord2+1)),
               not(equals(Xcoord1, Xcoord2-1))
           )
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(location(Grid,
                                 Object,
                                 Xcoord1,
                                 Ycoord1)),
                    Time)
       ;   (   not(call(Xcoord1=Xcoord2))
           ;   not(call(Ycoord1=Ycoord2+1)),
               not(call(Ycoord1=Ycoord2-1))
           ),
           (   not(call(Ycoord1=Ycoord2))
           ;   not(call(Xcoord1=Xcoord2+1)),
               not(call(Xcoord1=Xcoord2-1))
           )
       ).
 */

 /*  [(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(call(Xcoord1=Xcoord2));not(call(Ycoord1=Ycoord2+1)), not(call(Ycoord1=Ycoord2-1))), (not(call(Ycoord1=Ycoord2));not(call(Xcoord1=Xcoord2+1)), not(call(Xcoord1=Xcoord2-1)))), allDifferent([Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2, Time])] ->
       ta(Time,
          not(happens(move(Grid,
                           Object,
                           Xcoord1,
                           Ycoord1,
                           Xcoord2,
                           Ycoord2),
                      Time))).
 */

 /*  [(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2+1)), Time), holds_at(neg(call(Ycoord1=Ycoord2-1)), Time)), (holds_at(neg(call(Ycoord1=Ycoord2)), Time);holds_at(neg(call(Xcoord1=Xcoord2+1)), Time), holds_at(neg(call(Xcoord1=Xcoord2-1)), Time))), allDifferent([Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2, Time])] ->
       ta(Time,
          not(happens(move(Grid,
                           Object,
                           Xcoord1,
                           Ycoord1,
                           Xcoord2,
                           Ycoord2),
                      Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:261
axiom(not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)),
   
    [  (holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(holds_at(neg(call(Xcoord1=Xcoord2)), Time);holds_at(neg(call(Ycoord1=Ycoord2+1)), Time), holds_at(neg(call(Ycoord1=Ycoord2-1)), Time)), (holds_at(neg(call(Ycoord1=Ycoord2)), Time);holds_at(neg(call(Xcoord1=Xcoord2+1)), Time), holds_at(neg(call(Xcoord1=Xcoord2-1)), Time))),
      allDifferent(
                   [ Grid,
                     Object,
                     Xcoord1,
                     Ycoord1,
                     Xcoord2,
                     Ycoord2,
                     Time
                   ])
    ]).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time) :-
       happens(move(Grid,
                    Object,
                    Xcoord1,
                    Ycoord1,
                    Xcoord2,
                    Ycoord2),
               Time),
       allDifferent(
                    [ Grid,
                      Object,
                      Xcoord1,
                      Ycoord1,
                      Xcoord2,
                      Ycoord2,
                      Time
                    ]).
 */

 /*  [happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time), allDifferent([Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2, Time])] ->
       ta(Time,
          holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                   Time)).
 */
axiom(holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time),
   
    [ happens(move(Grid,
                   Object,
                   Xcoord1,
                   Ycoord1,
                   Xcoord2,
                   Ycoord2),
              Time),
      allDifferent(
                   [ Grid,
                     Object,
                     Xcoord1,
                     Ycoord1,
                     Xcoord2,
                     Ycoord2,
                     Time
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:263
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:289
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:290
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:291
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/Cassimatis2002/PolySpace.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:292
:- load_e('examples/Cassimatis2002/PolySpace.e', changed).
:- if(false).
:- endif.

% grid G1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:294
==> t(grid,g1).

% object X,Y,Screen1,Screen2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:295
==> t(object,x).
==> t(object,y).
==> t(object,screen1).
==> t(object,screen2).
%; perceptions:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:297
% Shape(X,Round).
shape(x,round).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:298
% Color(X,Red).
color(x,red).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:299
% Shape(Y,Round).
shape(y,round).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:300
% Color(Y,Red).
color(y,red).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:301
% Shape(Screen1,Square).
shape(screen1,square).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:302
% Color(Screen1,Green).
color(screen1,green).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:303
% Shape(Screen2,Square).
shape(screen2,square).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:304
% Color(Screen2,Green).
color(screen2,green).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:305
% [time]
 % HoldsAt(Location(G1,Screen1,2,0),time).
holds_at(location(g1,screen1,2,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:306
% [time]
 % HoldsAt(Location(G1,Screen2,4,0),time).
holds_at(location(g1,screen2,4,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:307
% HoldsAt(Location(G1,X,1,1),0).

 /*  [] ->
       ta(Ta_Param, initially(location(g1, x, 1, 1))).
 */
axiom(initially(location(g1, x, 1, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:308
% HoldsAt(Location(G1,Y,5,1),4).
holds_at(location(g1,y,5,1),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:310
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=5 & ycoord=1 & time=4 & Equal(X,Y).

 /*  allDifferent([Xcoord, Ycoord, Time]) ->
       ( diff(Xcoord, 2), diff(Xcoord, 4), not((Xcoord=1, Ycoord=1, Time=0))->holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time);Xcoord=5, Ycoord=1, Time=4, equal(x, y)
       ).
 */

 /*  holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ;   not(equal(x, y))
       ),
       ( diff(Xcoord, 2),
         diff(Xcoord, 4),
         (   not(equals(Xcoord, 1))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 0))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ;   not(equal(x, y))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=5))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=4))
       ;   not(equal(x, y))
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=1))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=0))
       ).
 */

 /*  [(not(call(Xcoord=5));not(call(Ycoord=1));not(call(Time=4));not(equal(x, y))), diff(Xcoord, 2), diff(Xcoord, 4),  (not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)).
 */

 /*  [(holds_at(neg(call(Xcoord=5)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=4)), Time);not(equal(x, y))), diff(Xcoord, 2), diff(Xcoord, 4),  (holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time)), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:313
axiom(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time),
   
    [  (holds_at(neg(call(Xcoord=5)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=4)), Time);not(equal(x, y))),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time)),
      allDifferent([Xcoord, Ycoord, Time])
    ]).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)),
       ( diff(Xcoord, 2),
         diff(Xcoord, 4),
         (   not(equals(Xcoord, 1))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 0))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=1))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=0))
       ).
 */

 /*  [holds_at(neg(neg(location(g1, x, Xcoord, Ycoord))), Time), diff(Xcoord, 2), diff(Xcoord, 4),  (not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time, equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(neg(neg(location(g1, x, Xcoord, Ycoord))), Time),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0))),
      allDifferent([Xcoord, Ycoord, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:315
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=5 & ycoord=1 & time=4) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).

 /*  allDifferent([Xcoord, Ycoord, Time]) ->
       ( diff(Xcoord, 2), diff(Xcoord, 4), not((Xcoord=5, Ycoord=1, Time=4))->holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time);Xcoord=1, Ycoord=1, Time=0, equal(x, y)
       ).
 */

 /*  holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ;   not(equal(x, y))
       ),
       ( diff(Xcoord, 2),
         diff(Xcoord, 4),
         (   not(equals(Xcoord, 5))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 4))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ;   not(equal(x, y))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=1))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=0))
       ;   not(equal(x, y))
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=5))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=4))
       ).
 */

 /*  [(not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0));not(equal(x, y))), diff(Xcoord, 2), diff(Xcoord, 4),  (not(call(Xcoord=5));not(call(Ycoord=1));not(call(Time=4))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)).
 */

 /*  [(holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time);not(equal(x, y))), diff(Xcoord, 2), diff(Xcoord, 4),  (holds_at(neg(call(Xcoord=5)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=4)), Time)), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:318
axiom(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time),
   
    [  (holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time);not(equal(x, y))),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (holds_at(neg(call(Xcoord=5)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=4)), Time)),
      allDifferent([Xcoord, Ycoord, Time])
    ]).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)),
       ( diff(Xcoord, 2),
         diff(Xcoord, 4),
         (   not(equals(Xcoord, 5))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 4))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=5))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=4))
       ).
 */

 /*  [holds_at(neg(neg(location(g1, y, Xcoord, Ycoord))), Time), diff(Xcoord, 2), diff(Xcoord, 4),  (not(call(Xcoord=5));not(call(Ycoord=1));not(call(Time=4))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time, equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(neg(neg(location(g1, y, Xcoord, Ycoord))), Time),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (not(call(Xcoord=5));not(call(Ycoord=1));not(call(Time=4))),
      allDifferent([Xcoord, Ycoord, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:320
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:321
==> range(time,0,4).

% range xcoord 0 5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:322
==> range(xcoord,0,5).

% range ycoord 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:323
==> range(ycoord,0,1).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:324
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:351
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:352
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:353
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/Cassimatis2002/PolySpace.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:354
:- load_e('examples/Cassimatis2002/PolySpace.e', changed).
:- if(false).
:- endif.

% grid G1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:356
==> t(grid,g1).

% object X,Y,Screen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:357
==> t(object,x).
==> t(object,y).
==> t(object,screen).
%; perceptions:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:359
% Shape(X,Round).
shape(x,round).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:360
% Color(X,Red).
color(x,red).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:361
% Shape(Y,Round).
shape(y,round).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:362
% Color(Y,Red).
color(y,red).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:363
% Shape(Screen,Square).
shape(screen,square).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:364
% Color(Screen,Green).
color(screen,green).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:365
% [time]
 % HoldsAt(Location(G1,Screen,2,0),time).
holds_at(location(g1,screen,2,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:366
% HoldsAt(Location(G1,X,1,1),0).

 /*  [] ->
       ta(Ta_Param, initially(location(g1, x, 1, 1))).
 */
axiom(initially(location(g1, x, 1, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:367
% HoldsAt(Location(G1,Y,3,1),2).
holds_at(location(g1,y,3,1),2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:369
% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=3 & ycoord=1 & time=2 & Equal(X,Y).

 /*  allDifferent([Xcoord, Ycoord, Time]) ->
       ( diff(Xcoord, 2), not((Xcoord=1, Ycoord=1, Time=0))->holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time);Xcoord=3, Ycoord=1, Time=2, equal(x, y)
       ).
 */

 /*  holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ;   not(equal(x, y))
       ),
       ( diff(Xcoord, 2),
         (   not(equals(Xcoord, 1))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 0))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ;   not(equal(x, y))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=3))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=2))
       ;   not(equal(x, y))
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=1))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=0))
       ).
 */

 /*  [(not(call(Xcoord=3));not(call(Ycoord=1));not(call(Time=2));not(equal(x, y))), diff(Xcoord, 2),  (not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)).
 */

 /*  [(holds_at(neg(call(Xcoord=3)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=2)), Time);not(equal(x, y))), diff(Xcoord, 2),  (holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time)), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:372
axiom(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time),
   
    [  (holds_at(neg(call(Xcoord=3)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=2)), Time);not(equal(x, y))),
      diff(Xcoord, 2),
       (holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time)),
      allDifferent([Xcoord, Ycoord, Time])
    ]).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)),
       ( diff(Xcoord, 2),
         (   not(equals(Xcoord, 1))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 0))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=1))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=0))
       ).
 */

 /*  [holds_at(neg(neg(location(g1, x, Xcoord, Ycoord))), Time), diff(Xcoord, 2),  (not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time, equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(neg(neg(location(g1, x, Xcoord, Ycoord))), Time),
      diff(Xcoord, 2),
       (not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0))),
      allDifferent([Xcoord, Ycoord, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:374
% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=3 & ycoord=1 & time=2) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).

 /*  allDifferent([Xcoord, Ycoord, Time]) ->
       ( diff(Xcoord, 2), not((Xcoord=3, Ycoord=1, Time=2))->holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time);Xcoord=1, Ycoord=1, Time=0, equal(x, y)
       ).
 */

 /*  holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ;   not(equal(x, y))
       ),
       ( diff(Xcoord, 2),
         (   not(equals(Xcoord, 3))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 2))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ;   not(equal(x, y))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=1))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=0))
       ;   not(equal(x, y))
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=3))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=2))
       ).
 */

 /*  [(not(call(Xcoord=1));not(call(Ycoord=1));not(call(Time=0));not(equal(x, y))), diff(Xcoord, 2),  (not(call(Xcoord=3));not(call(Ycoord=1));not(call(Time=2))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)).
 */

 /*  [(holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time);not(equal(x, y))), diff(Xcoord, 2),  (holds_at(neg(call(Xcoord=3)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=2)), Time)), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time,
          holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:377
axiom(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time),
   
    [  (holds_at(neg(call(Xcoord=1)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=0)), Time);not(equal(x, y))),
      diff(Xcoord, 2),
       (holds_at(neg(call(Xcoord=3)), Time);holds_at(neg(call(Ycoord=1)), Time);holds_at(neg(call(Time=2)), Time)),
      allDifferent([Xcoord, Ycoord, Time])
    ]).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)),
       ( diff(Xcoord, 2),
         (   not(equals(Xcoord, 3))
         ;   not(equals(Ycoord, 1))
         ;   not(equals(Time, 2))
         )
       ),
       allDifferent([Xcoord, Ycoord, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Xcoord=3))
       ;   not(call(Ycoord=1))
       ;   not(call(Time=2))
       ).
 */

 /*  [holds_at(neg(neg(location(g1, y, Xcoord, Ycoord))), Time), diff(Xcoord, 2),  (not(call(Xcoord=3));not(call(Ycoord=1));not(call(Time=2))), allDifferent([Xcoord, Ycoord, Time])] ->
       ta(Time, equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(neg(neg(location(g1, y, Xcoord, Ycoord))), Time),
      diff(Xcoord, 2),
       (not(call(Xcoord=3));not(call(Ycoord=1));not(call(Time=2))),
      allDifferent([Xcoord, Ycoord, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:379
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:380
==> range(time,0,2).

% range xcoord 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:381
==> range(xcoord,0,4).

% range ycoord 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:382
==> range(ycoord,0,2).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:383
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/BrewkaDixKonolige1997/Wine.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:413
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:414
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:415
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort x
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:417
==> sort(x).

% x Person
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:418
==> t(x,person).

% predicate LikesWine(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:420
predicate(likesWine(LikesWine_Ret)).
==> mpred_prop(likesWine(x),predicate).
==> meta_argtypes(likesWine(x)).

% predicate Italian(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:421
predicate(italian(Italian_Ret)).
==> mpred_prop(italian(x),predicate).
==> meta_argtypes(italian(x)).

% predicate French(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:422
predicate(french(French_Ret)).
==> mpred_prop(french(x),predicate).
==> meta_argtypes(french(x)).

% predicate Ab1(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:423
predicate(ab1(Ab1_Ret)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:424
predicate(ab2(Ab2_Ret)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:425
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).

 /*  italian(X), not(ab1(X)) ->
       likesWine(X).
 */

 /*  likesWine(X) :-
       italian(X),
       not(ab1(X)).
 */

 /*  [italian(X), not(ab1(X))] ->
       ta(Ta_Param, likesWine(X)).
 */
axiom(likesWine(X),
    [italian(X), not(ab1(X))]).

 /*  not(italian(X)) :-
       not(ab1(X)),
       not(likesWine(X)).
 */

 /*  [not(ab1(X)), not(likesWine(X))] ->
       ta(Ta_Param2, not(italian(X))).
 */
axiom(not(italian(X)),
    [not(ab1(X)), not(likesWine(X))]).

 /*  ab1(X) :-
       italian(X),
       not(likesWine(X)).
 */

 /*  [italian(X), not(likesWine(X))] ->
       ta(Ta_Param3, ab1(X)).
 */
axiom(ab1(X),
    [italian(X), not(likesWine(X))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:426
% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).

 /*  french(X), not(ab2(X)) ->
       likesWine(X).
 */

 /*  likesWine(X) :-
       french(X),
       not(ab2(X)).
 */

 /*  [french(X), not(ab2(X))] ->
       ta(Ta_Param, likesWine(X)).
 */
axiom(likesWine(X),
    [french(X), not(ab2(X))]).

 /*  not(french(X)) :-
       not(ab2(X)),
       not(likesWine(X)).
 */

 /*  [not(ab2(X)), not(likesWine(X))] ->
       ta(Ta_Param2, not(french(X))).
 */
axiom(not(french(X)),
    [not(ab2(X)), not(likesWine(X))]).

 /*  ab2(X) :-
       french(X),
       not(likesWine(X)).
 */

 /*  [french(X), not(likesWine(X))] ->
       ta(Ta_Param3, ab2(X)).
 */
axiom(ab2(X),
    [french(X), not(likesWine(X))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:427
% [x]
 % Italian(x) -> !French(x).

 /*  italian(X) ->
       not(french(X)).
 */

 /*  not(french(X)) :-
       italian(X).
 */

 /*  [italian(X)] ->
       ta(Ta_Param, not(french(X))).
 */
axiom(not(french(X)),
    [italian(X)]).

 /*  not(italian(X)) :-
       french(X).
 */

 /*  [french(X)] ->
       ta(Ta_Param2, not(italian(X))).
 */
axiom(not(italian(X)),
    [french(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:429
% Italian(Person) | French(Person).

 /*   (   italian(person)
      ;   french(person)
      ).
 */

 /*  italian(person) :-
       not(french(person)).
 */

 /*  [not(french(person))] ->
       ta(Ta_Param, italian(person)).
 */
axiom(italian(person),
    [not(french(person))]).

 /*  french(person) :-
       not(italian(person)).
 */

 /*  [not(italian(person))] ->
       ta(Ta_Param1, french(person)).
 */
axiom(french(person),
    [not(italian(person))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:431
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:432
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:433
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:435
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:436
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Yale.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{HanksMcDermott:1987,
%;   author = "Steve Hanks and Drew V. McDermott",
%;   year = "1987",
%;   title = "Nonmonotonic logic and temporal projection",
%;   journal = "Artificial Intelligence",
%;   volume = "33",
%;   number = "3",
%;   pages = "379--412",
%; }
%;
%; \fullciteA[pp. 322--323]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:482
% option showpred off
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:483
:- set_ec_option(showpred, off).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:485
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:486
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Load()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:488
event(load).
==> mpred_prop(load,event).

% event Shoot()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:489
event(shoot).
==> mpred_prop(shoot,event).

% event Sneeze()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:490
event(sneeze).
==> mpred_prop(sneeze,event).

% fluent Loaded()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:491
fluent(loaded).
==> mpred_prop(loaded,fluent).

% fluent Alive()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:492
fluent(alive).
==> mpred_prop(alive,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:493
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time, initiates(load, loaded, Time)).
 */
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:494
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).

 /*  [holds_at(loaded, Time)] ->
       ta(Time, terminates(shoot, alive, Time)).
 */
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:495
% [time]
 % Terminates(Shoot(),Loaded(),time).

 /*  [] ->
       ta(Time, terminates(shoot, loaded, Time)).
 */
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:497
% HoldsAt(Alive(),0).

 /*  [] ->
       ta(Ta_Param, initially(alive)).
 */
axiom(initially(alive),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:498
% !HoldsAt(Loaded(),0).
 %  not(initially(loaded)).

 /*  [] ->
       ta(Ta_Param, not(initially(loaded))).
 */
axiom(not(initially(loaded)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:499
% Happens(Load(),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(load, t)).
 */
axiom(happens(load, t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:500
% Happens(Sneeze(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(sneeze, start)).
 */
axiom(happens(sneeze, start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:501
% Happens(Shoot(),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(shoot, t2)).
 */
axiom(happens(shoot, t2),
    [holds_at(is_time(2), t2), b(t, t2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:503
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:504
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:506
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:507
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StuffyRoom.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{GinsbergSmith:1988a,
%;   author = "Matthew L. Ginsberg and David E. Smith",
%;   year = "1988",
%;   title = "Reasoning about action \uppercase{I}: \uppercase{A} possible worlds approach",
%;   journal = "Artificial Intelligence",
%;   volume = "35",
%;   number = "2",
%;   pages = "165--195",
%; }
%;
%; \fullciteA[pp. 288--289]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added:
%; !HoldsAt(Blocked1(),0).
%; !HoldsAt(Blocked2(),0).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:554
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:555
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:556
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Close1()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:558
event(close1).
==> mpred_prop(close1,event).

% event Close2()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:559
event(close2).
==> mpred_prop(close2,event).

% event Start()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:560
event(start).
==> mpred_prop(start,event).

% fluent Blocked1()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:561
fluent(blocked1).
==> mpred_prop(blocked1,fluent).

% fluent Blocked2()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:562
fluent(blocked2).
==> mpred_prop(blocked2,fluent).

% fluent Stuffy()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:563
fluent(stuffy).
==> mpred_prop(stuffy,fluent).

% noninertial Stuffy
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:564
==> noninertial(stuffy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:565
% [time]
 % Initiates(Close1(),Blocked1(),time).

 /*  [] ->
       ta(Time, initiates(close1, blocked1, Time)).
 */
axiom(initiates(close1, blocked1, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:566
% [time]
 % Initiates(Close2(),Blocked2(),time).

 /*  [] ->
       ta(Time, initiates(close2, blocked2, Time)).
 */
axiom(initiates(close2, blocked2, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:568
% [time]
% HoldsAt(Stuffy(),time) <->
% HoldsAt(Blocked1(),time)&HoldsAt(Blocked2(),time).

 /*  holds_at(stuffy, Time) <->
       holds_at(blocked1, Time),
       holds_at(blocked2, Time).
 */

 /*  [holds_at, stuffy] <->
       [holds_at, blocked1, holds_at, blocked2].
 */

 /*  holds_at(stuffy, Time) ->
       holds_at(blocked1, Time),
       holds_at(blocked2, Time).
 */

 /*  not(holds_at(stuffy, Time)) :-
       (   not(holds_at(blocked1, Time))
       ;   not(holds_at(blocked2, Time))
       ).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(blocked1, Time))
       ;   not(holds_at(blocked2, Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(blocked1), Time)
       ;   holds_at(neg(blocked2), Time)
       ).
 */

 /*  [(holds_at(neg(blocked1), Time);holds_at(neg(blocked2), Time))] ->
       ta(Time, holds_at(neg(stuffy), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:570
axiom(holds_at(neg(stuffy), Time),
    [(holds_at(neg(blocked1), Time);holds_at(neg(blocked2), Time))]).

 /*  holds_at(blocked1, Time) :-
       holds_at(stuffy, Time).
 */

 /*  [holds_at(stuffy, Time)] ->
       ta(Time, holds_at(blocked1, Time)).
 */
axiom(holds_at(blocked1, Time),
    [holds_at(stuffy, Time)]).

 /*  holds_at(blocked2, Time) :-
       holds_at(stuffy, Time).
 */

 /*  [holds_at(stuffy, Time)] ->
       ta(Time, holds_at(blocked2, Time)).
 */
axiom(holds_at(blocked2, Time),
    [holds_at(stuffy, Time)]).

 /*  holds_at(blocked1, Time), holds_at(blocked2, Time) ->
       holds_at(stuffy, Time).
 */

 /*  holds_at(stuffy, Time) :-
       holds_at(blocked1, Time),
       holds_at(blocked2, Time).
 */

 /*  [holds_at(blocked1, Time), holds_at(blocked2, Time)] ->
       ta(Time, holds_at(stuffy, Time)).
 */
axiom(holds_at(stuffy, Time),
    [holds_at(blocked1, Time), holds_at(blocked2, Time)]).

 /*  not(holds_at(blocked1, Time)) :-
       holds_at(blocked2, Time),
       not(holds_at(stuffy, Time)).
 */

 /*  [holds_at(blocked2, Time), holds_at(neg(stuffy), Time)] ->
       ta(Time, holds_at(neg(blocked1), Time)).
 */
axiom(holds_at(neg(blocked1), Time),
    [holds_at(blocked2, Time), holds_at(neg(stuffy), Time)]).

 /*  not(holds_at(blocked2, Time)) :-
       holds_at(blocked1, Time),
       not(holds_at(stuffy, Time)).
 */

 /*  [holds_at(blocked1, Time), holds_at(neg(stuffy), Time)] ->
       ta(Time, holds_at(neg(blocked2), Time)).
 */
axiom(holds_at(neg(blocked2), Time),
    [holds_at(blocked1, Time), holds_at(neg(stuffy), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:572
% [time]
 % Initiates(Start(),Blocked1(),time).

 /*  [] ->
       ta(Time, initiates(start, blocked1, Time)).
 */
axiom(initiates(start, blocked1, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:573
% [time]
 % Terminates(Start(),Blocked2(),time).

 /*  [] ->
       ta(Time, terminates(start, blocked2, Time)).
 */
axiom(terminates(start, blocked2, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:575
% !HoldsAt(Blocked1(),0).
 %  not(initially(blocked1)).

 /*  [] ->
       ta(Ta_Param, not(initially(blocked1))).
 */
axiom(not(initially(blocked1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:576
% !HoldsAt(Blocked2(),0).
 %  not(initially(blocked2)).

 /*  [] ->
       ta(Ta_Param, not(initially(blocked2))).
 */
axiom(not(initially(blocked2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:577
% Happens(Start(),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(start, t)).
 */
axiom(happens(start, t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:578
% Happens(Close2(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(close2, start)).
 */
axiom(happens(close2, start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:580
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:581
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:583
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:584
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/BusRide.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:627
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:628
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:629
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% fluent HasTicket()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:631
fluent(hasTicket).
==> mpred_prop(hasTicket,fluent).

% fluent OnRed()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:632
fluent(onRed).
==> mpred_prop(onRed,fluent).

% fluent OnYellow()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:633
fluent(onYellow).
==> mpred_prop(onYellow,fluent).

% event Buy()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:634
event(buy).
==> mpred_prop(buy,event).

% event Board()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:635
event(board).
==> mpred_prop(board,event).

% event BoardRed()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:636
event(boardRed).
==> mpred_prop(boardRed,event).

% event BoardYellow()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:637
event(boardYellow).
==> mpred_prop(boardYellow,event).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:638
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).

 /*  happens(board, Time) ->
       (   happens(boardRed, Time)
       ;   happens(boardYellow, Time)
       ).
 */

 /*  happens(boardRed, Time) :-
       not(happens(boardYellow, Time)),
       happens(board, Time).
 */

 /*  [not(happens(boardYellow, Time)), happens(board, Time)] ->
       ta(Time, happens(boardRed, Time)).
 */
axiom(happens(boardRed, Time),
    [not(happens(boardYellow, Time)), happens(board, Time)]).

 /*  happens(boardYellow, Time) :-
       not(happens(boardRed, Time)),
       happens(board, Time).
 */

 /*  [not(happens(boardRed, Time)), happens(board, Time)] ->
       ta(Time, happens(boardYellow, Time)).
 */
axiom(happens(boardYellow, Time),
    [not(happens(boardRed, Time)), happens(board, Time)]).

 /*  not(happens(board, Time)) :-
       not(happens(boardRed, Time)),
       not(happens(boardYellow, Time)).
 */

 /*  [not(happens(boardRed, Time)), not(happens(boardYellow, Time))] ->
       ta(Time, not(happens(board, Time))).
 */
axiom(not(happens(board, Time)),
    [not(happens(boardRed, Time)), not(happens(boardYellow, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:640
% [time]
 % Initiates(Buy(),HasTicket(),time).

 /*  [] ->
       ta(Time, initiates(buy, hasTicket, Time)).
 */
axiom(initiates(buy, hasTicket, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:641
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).

 /*  [holds_at(hasTicket, Time)] ->
       ta(Time, initiates(boardRed, onRed, Time)).
 */
axiom(initiates(boardRed, onRed, Time),
    [holds_at(hasTicket, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:642
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).

 /*  [holds_at(hasTicket, Time)] ->
       ta(Time, initiates(boardYellow, onYellow, Time)).
 */
axiom(initiates(boardYellow, onYellow, Time),
    [holds_at(hasTicket, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:644
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).

 /*   not(( holds_at(onRed, Time),
            holds_at(onYellow, Time)
          )).
 */

 /*  not(holds_at(onRed, Time)) :-
       holds_at(onYellow, Time).
 */

 /*  [holds_at(onYellow, Time)] ->
       ta(Time, holds_at(neg(onRed), Time)).
 */
axiom(holds_at(neg(onRed), Time),
    [holds_at(onYellow, Time)]).

 /*  not(holds_at(onYellow, Time)) :-
       holds_at(onRed, Time).
 */

 /*  [holds_at(onRed, Time)] ->
       ta(Time, holds_at(neg(onYellow), Time)).
 */
axiom(holds_at(neg(onYellow), Time),
    [holds_at(onRed, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:645
% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).

 /*  holds_at(onRed, Time) ->
       holds_at(hasTicket, Time).
 */

 /*  holds_at(hasTicket, Time) :-
       holds_at(onRed, Time).
 */

 /*  [holds_at(onRed, Time)] ->
       ta(Time, holds_at(hasTicket, Time)).
 */
axiom(holds_at(hasTicket, Time),
    [holds_at(onRed, Time)]).

 /*  not(holds_at(onRed, Time)) :-
       not(holds_at(hasTicket, Time)).
 */

 /*  [holds_at(neg(hasTicket), Time)] ->
       ta(Time, holds_at(neg(onRed), Time)).
 */
axiom(holds_at(neg(onRed), Time),
    [holds_at(neg(hasTicket), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:646
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).

 /*  holds_at(onYellow, Time) ->
       holds_at(hasTicket, Time).
 */

 /*  holds_at(hasTicket, Time) :-
       holds_at(onYellow, Time).
 */

 /*  [holds_at(onYellow, Time)] ->
       ta(Time, holds_at(hasTicket, Time)).
 */
axiom(holds_at(hasTicket, Time),
    [holds_at(onYellow, Time)]).

 /*  not(holds_at(onYellow, Time)) :-
       not(holds_at(hasTicket, Time)).
 */

 /*  [holds_at(neg(hasTicket), Time)] ->
       ta(Time, holds_at(neg(onYellow), Time)).
 */
axiom(holds_at(neg(onYellow), Time),
    [holds_at(neg(hasTicket), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:648
% HoldsAt(OnRed(),2).
holds_at(onRed,2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:650
% !HoldsAt(HasTicket(),0).
 %  not(initially(hasTicket)).

 /*  [] ->
       ta(Ta_Param, not(initially(hasTicket))).
 */
axiom(not(initially(hasTicket)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:651
% Happens(Buy(),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(buy, t)).
 */
axiom(happens(buy, t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:652
% Happens(Board(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(board, start)).
 */
axiom(happens(board, start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:653
%; ABDUCED Happens(BoardRed(), 1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:655
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:656
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:658
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:659
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/DeadOrAlive.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 324]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:695
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:696
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:697
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Load()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:699
event(load).
==> mpred_prop(load,event).

% event Shoot()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:700
event(shoot).
==> mpred_prop(shoot,event).

% event Sneeze()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:701
event(sneeze).
==> mpred_prop(sneeze,event).

% fluent Loaded()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:702
fluent(loaded).
==> mpred_prop(loaded,fluent).

% fluent Alive()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:703
fluent(alive).
==> mpred_prop(alive,fluent).

% fluent Dead()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:704
fluent(dead).
==> mpred_prop(dead,fluent).

% noninertial Dead
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:705
==> noninertial(dead).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:706
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time, initiates(load, loaded, Time)).
 */
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:707
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).

 /*  [holds_at(loaded, Time)] ->
       ta(Time, terminates(shoot, alive, Time)).
 */
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:708
% [time]
 % Terminates(Shoot(),Loaded(),time).

 /*  [] ->
       ta(Time, terminates(shoot, loaded, Time)).
 */
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:709
% [time]
 % HoldsAt(Dead(),time) <-> !HoldsAt(Alive(),time).

 /*  holds_at(dead, Time) <->
       holds_at(neg(alive), Time).
 */

 /*  [holds_at, dead] <->
       [holds_at, neg, alive].
 */

 /*  holds_at(dead, Time) ->
       holds_at(neg(alive), Time).
 */

 /*  holds_at(neg(alive), Time) :-
       holds_at(dead, Time).
 */

 /*  [holds_at(dead, Time)] ->
       ta(Time, holds_at(neg(alive), Time)).
 */
axiom(holds_at(neg(alive), Time),
    [holds_at(dead, Time)]).

 /*  not(holds_at(dead, Time)) :-
       not(holds_at(neg(alive), Time)).
 */

 /*  [holds_at(neg(neg(alive)), Time)] ->
       ta(Time, holds_at(neg(dead), Time)).
 */
axiom(holds_at(neg(dead), Time),
    [holds_at(neg(neg(alive)), Time)]).

 /*  holds_at(neg(alive), Time) ->
       holds_at(dead, Time).
 */

 /*  holds_at(dead, Time) :-
       holds_at(neg(alive), Time).
 */

 /*  [holds_at(neg(alive), Time)] ->
       ta(Time, holds_at(dead, Time)).
 */
axiom(holds_at(dead, Time),
    [holds_at(neg(alive), Time)]).

 /*  not(holds_at(neg(alive), Time)) :-
       not(holds_at(dead, Time)).
 */

 /*  [holds_at(neg(dead), Time)] ->
       ta(Time, holds_at(neg(neg(alive)), Time)).
 */
axiom(holds_at(neg(neg(alive)), Time),
    [holds_at(neg(dead), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:711
% HoldsAt(Alive(),0).

 /*  [] ->
       ta(Ta_Param, initially(alive)).
 */
axiom(initially(alive),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:712
% !HoldsAt(Loaded(),0).
 %  not(initially(loaded)).

 /*  [] ->
       ta(Ta_Param, not(initially(loaded))).
 */
axiom(not(initially(loaded)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:713
% Happens(Load(),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(load, t)).
 */
axiom(happens(load, t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:714
% Happens(Sneeze(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(sneeze, start)).
 */
axiom(happens(sneeze, start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:715
% Happens(Shoot(),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(shoot, t2)).
 */
axiom(happens(shoot, t2),
    [holds_at(is_time(2), t2), b(t, t2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:717
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:718
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:720
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:721
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Supermarket.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[pp. 302--304]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; reformulated using the method of \fullciteA[pp. 460--461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; added:
%; !HoldsAt(Forwards(), 0).
%; !HoldsAt(Backwards(), 0).
%; !HoldsAt(Spinning(), 0).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:773
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:774
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:775
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Push()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:777
event(push).
==> mpred_prop(push,event).

% event Pull()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:778
event(pull).
==> mpred_prop(pull,event).

% fluent Forwards()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:779
fluent(forwards).
==> mpred_prop(forwards,fluent).

% fluent Backwards()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:780
fluent(backwards).
==> mpred_prop(backwards,fluent).

% fluent Spinning()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:781
fluent(spinning).
==> mpred_prop(spinning,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:782
% [time]
% !Happens(Pull(), time) ->
% Initiates(Push(), Forwards(), time).

 /*  [not(happens(pull, Time))] ->
       ta(Time, initiates(push, forwards, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:784
axiom(initiates(push, forwards, Time),
    [not(happens(pull, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:786
% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Backwards(), time).

 /*  [not(happens(pull, Time))] ->
       ta(Time, terminates(push, backwards, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:788
axiom(terminates(push, backwards, Time),
    [not(happens(pull, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:790
% [time]
% !Happens(Push(), time) ->
% Initiates(Pull(), Backwards(), time).

 /*  [not(happens(push, Time))] ->
       ta(Time, initiates(pull, backwards, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:792
axiom(initiates(pull, backwards, Time),
    [not(happens(push, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:794
% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).

 /*  [not(happens(push, Time))] ->
       ta(Time, terminates(pull, forwards, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:796
axiom(terminates(pull, forwards, Time),
    [not(happens(push, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:798
% [time]
% Happens(Push(), time) ->
% Initiates(Pull(), Spinning(), time).

 /*  axiom_head(Time) ->
       requires(push, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(push, Time), Time).
 */

 /*  [holds_at(metreqs(push), Time)] ->
       ta(Time, holds_at(requires(push, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:800
axiom(holds_at(requires(push, Time), Time),
    [holds_at(metreqs(push), Time)]).

 /*  [initiates(pull, spinning, Time)] ->
       ta(Time, holds_at(requirements(push), Time)).
 */
axiom(holds_at(requirements(push), Time),
    [initiates(pull, spinning, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:802
% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).

 /*  axiom_head(Time) ->
       requires(push, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(push, Time), Time).
 */

 /*  [holds_at(metreqs(push), Time)] ->
       ta(Time, holds_at(requires(push, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:804
axiom(holds_at(requires(push, Time), Time),
    [holds_at(metreqs(push), Time)]).

 /*  [terminates(pull, forwards, Time)] ->
       ta(Time, holds_at(requirements(push), Time)).
 */
axiom(holds_at(requirements(push), Time),
    [terminates(pull, forwards, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:806
% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Backwards(), time).

 /*  axiom_head(Time) ->
       requires(push, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(push, Time), Time).
 */

 /*  [holds_at(metreqs(push), Time)] ->
       ta(Time, holds_at(requires(push, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:808
axiom(holds_at(requires(push, Time), Time),
    [holds_at(metreqs(push), Time)]).

 /*  [terminates(pull, backwards, Time)] ->
       ta(Time, holds_at(requirements(push), Time)).
 */
axiom(holds_at(requirements(push), Time),
    [terminates(pull, backwards, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:810
% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Spinning(), time).

 /*  [not(happens(pull, Time))] ->
       ta(Time, terminates(push, spinning, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:812
axiom(terminates(push, spinning, Time),
    [not(happens(pull, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:814
% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Spinning(), time).

 /*  [not(happens(push, Time))] ->
       ta(Time, terminates(pull, spinning, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:816
axiom(terminates(pull, spinning, Time),
    [not(happens(push, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:818
% !HoldsAt(Forwards(), 0).
 %  not(initially(forwards)).

 /*  [] ->
       ta(Ta_Param, not(initially(forwards))).
 */
axiom(not(initially(forwards)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:819
% !HoldsAt(Backwards(), 0).
 %  not(initially(backwards)).

 /*  [] ->
       ta(Ta_Param, not(initially(backwards))).
 */
axiom(not(initially(backwards)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:820
% !HoldsAt(Spinning(), 0).
 %  not(initially(spinning)).

 /*  [] ->
       ta(Ta_Param, not(initially(spinning))).
 */
axiom(not(initially(spinning)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:822
% Happens(Push(), 5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(push, t5)).
 */
axiom(happens(push, t5),
    [holds_at(is_time(5), t5), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:823
% Happens(Pull(), 5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(pull, t5)).
 */
axiom(happens(pull, t5),
    [holds_at(is_time(5), t5), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:824
% Happens(Pull(), 10).

 /*  axiom_head(10) ->
       is_time(10).
 */

 /*  fix_axiom_head(10) ->
       holds_at(is_time(10), 10).
 */

 /*  [holds_at(is_time(10), t10), b(t, t10), ignore(t+10==t10)] ->
       ta(10, happens(pull, t10)).
 */
axiom(happens(pull, t10),
    [holds_at(is_time(10), t10), b(t, t10)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:825
% Happens(Push(), 10).

 /*  axiom_head(10) ->
       is_time(10).
 */

 /*  fix_axiom_head(10) ->
       holds_at(is_time(10), 10).
 */

 /*  [holds_at(is_time(10), t10), b(t, t10), ignore(t+10==t10)] ->
       ta(10, happens(push, t10)).
 */
axiom(happens(push, t10),
    [holds_at(is_time(10), t10), b(t, t10)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:827
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:828
==> completion(happens).

% range time 0 12
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:830
==> range(time,0,12).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:831
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StolenCar.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Kautz:1986,
%;   author = "Henry A. Kautz",
%;   year = "1986",
%;   title = "The Logic of Persistence",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ifth \uppercase{N}ational \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "401--405",
%;   address = "Los Altos, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; \fullciteA[p. 359]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; abduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added !HoldsAt(CarParked(),0).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:876
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:877
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:878
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Park()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:880
event(park).
==> mpred_prop(park,event).

% event Steal()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:881
event(steal).
==> mpred_prop(steal,event).

% fluent CarParked()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:882
fluent(carParked).
==> mpred_prop(carParked,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:883
% [time]
 % Initiates(Park(),CarParked(),time).

 /*  [] ->
       ta(Time, initiates(park, carParked, Time)).
 */
axiom(initiates(park, carParked, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:884
% [time]
 % Terminates(Steal(),CarParked(),time).

 /*  [] ->
       ta(Time, terminates(steal, carParked, Time)).
 */
axiom(terminates(steal, carParked, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:886
% !HoldsAt(CarParked(),0).
 %  not(initially(carParked)).

 /*  [] ->
       ta(Ta_Param, not(initially(carParked))).
 */
axiom(not(initially(carParked)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:887
% Happens(Park(),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(park, t)).
 */
axiom(happens(park, t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:888
%; ABDUCED Happens(Steal(), 1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:889
% !HoldsAt(CarParked(),2).
holds_at(neg(carParked),2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:891
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:892
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:893
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/MillerShanahan2002/Bowl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:927
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:928
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:929
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event LiftLeft()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:931
event(liftLeft).
==> mpred_prop(liftLeft,event).

% event LiftRight()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:932
event(liftRight).
==> mpred_prop(liftRight,event).

% fluent Spilt()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:933
fluent(spilt).
==> mpred_prop(spilt,fluent).

% fluent Raised()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:934
fluent(raised).
==> mpred_prop(raised,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:935
% [time]
% !Happens(LiftRight(), time) ->
% Initiates(LiftLeft(), Spilt(), time).

 /*  [not(happens(liftRight, Time))] ->
       ta(Time, initiates(liftLeft, spilt, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:937
axiom(initiates(liftLeft, spilt, Time),
    [not(happens(liftRight, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:939
% [time]
% !Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Spilt(), time).

 /*  [not(happens(liftLeft, Time))] ->
       ta(Time, initiates(liftRight, spilt, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:941
axiom(initiates(liftRight, spilt, Time),
    [not(happens(liftLeft, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:943
% [time]
% Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Raised(), time).

 /*  axiom_head(Time) ->
       requires(liftLeft, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(liftLeft, Time), Time).
 */

 /*  [holds_at(metreqs(liftLeft), Time)] ->
       ta(Time, holds_at(requires(liftLeft, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:945
axiom(holds_at(requires(liftLeft, Time), Time),
    [holds_at(metreqs(liftLeft), Time)]).

 /*  [initiates(liftRight, raised, Time)] ->
       ta(Time, holds_at(requirements(liftLeft), Time)).
 */
axiom(holds_at(requirements(liftLeft), Time),
    [initiates(liftRight, raised, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:947
% !HoldsAt(Spilt(), 0).
 %  not(initially(spilt)).

 /*  [] ->
       ta(Ta_Param, not(initially(spilt))).
 */
axiom(not(initially(spilt)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:948
% !HoldsAt(Raised(), 0).
 %  not(initially(raised)).

 /*  [] ->
       ta(Ta_Param, not(initially(raised))).
 */
axiom(not(initially(raised)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:949
% Happens(LiftLeft(), 2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(liftLeft, t2)).
 */
axiom(happens(liftLeft, t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:950
% Happens(LiftRight(), 2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(liftRight, t2)).
 */
axiom(happens(liftRight, t2),
    [holds_at(is_time(2), t2), b(t, t2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:952
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:953
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:955
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:956
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: showing that inconsistency results
%; without a cancellation rule
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1000
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1001
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1002
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort x
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1004
==> sort(x).

% predicate Republican(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1006
predicate(republican(Republican_Ret)).
==> mpred_prop(republican(x),predicate).
==> meta_argtypes(republican(x)).

% predicate Quaker(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1007
predicate(quaker(Quaker_Ret)).
==> mpred_prop(quaker(x),predicate).
==> meta_argtypes(quaker(x)).

% predicate Pacifist(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1008
predicate(pacifist(Pacifist_Ret)).
==> mpred_prop(pacifist(x),predicate).
==> meta_argtypes(pacifist(x)).

% predicate Ab1(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1009
predicate(ab1(Ab1_Ret)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1010
predicate(ab2(Ab2_Ret)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x John
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1012
==> t(x,john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1013
% Republican(John).
republican(john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1014
% Quaker(John).
quaker(john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1016
% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).

 /*  republican(X), not(ab1(X)) ->
       not(pacifist(X)).
 */

 /*  not(pacifist(X)) :-
       republican(X),
       not(ab1(X)).
 */

 /*  [republican(X), not(ab1(X))] ->
       ta(Ta_Param, not(pacifist(X))).
 */
axiom(not(pacifist(X)),
    [republican(X), not(ab1(X))]).

 /*  not(republican(X)) :-
       not(ab1(X)),
       pacifist(X).
 */

 /*  [not(ab1(X)), pacifist(X)] ->
       ta(Ta_Param2, not(republican(X))).
 */
axiom(not(republican(X)),
    [not(ab1(X)), pacifist(X)]).

 /*  ab1(X) :-
       republican(X),
       pacifist(X).
 */

 /*  [republican(X), pacifist(X)] ->
       ta(Ta_Param3, ab1(X)).
 */
axiom(ab1(X),
    [republican(X), pacifist(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1017
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).

 /*  quaker(X), not(ab2(X)) ->
       pacifist(X).
 */

 /*  pacifist(X) :-
       quaker(X),
       not(ab2(X)).
 */

 /*  [quaker(X), not(ab2(X))] ->
       ta(Ta_Param, pacifist(X)).
 */
axiom(pacifist(X),
    [quaker(X), not(ab2(X))]).

 /*  not(quaker(X)) :-
       not(ab2(X)),
       not(pacifist(X)).
 */

 /*  [not(ab2(X)), not(pacifist(X))] ->
       ta(Ta_Param2, not(quaker(X))).
 */
axiom(not(quaker(X)),
    [not(ab2(X)), not(pacifist(X))]).

 /*  ab2(X) :-
       quaker(X),
       not(pacifist(X)).
 */

 /*  [quaker(X), not(pacifist(X))] ->
       ta(Ta_Param3, ab2(X)).
 */
axiom(ab2(X),
    [quaker(X), not(pacifist(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1019
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1020
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1021
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1023
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1024
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%; \fullciteA[p. 18]{BrewkaDixKonolige:1997}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1076
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1077
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1078
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort x
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1080
==> sort(x).

% predicate Republican(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1082
predicate(republican(Republican_Ret)).
==> mpred_prop(republican(x),predicate).
==> meta_argtypes(republican(x)).

% predicate Quaker(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1083
predicate(quaker(Quaker_Ret)).
==> mpred_prop(quaker(x),predicate).
==> meta_argtypes(quaker(x)).

% predicate Pacifist(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1084
predicate(pacifist(Pacifist_Ret)).
==> mpred_prop(pacifist(x),predicate).
==> meta_argtypes(pacifist(x)).

% predicate Ab1(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1085
predicate(ab1(Ab1_Ret)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1086
predicate(ab2(Ab2_Ret)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x John
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1088
==> t(x,john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1089
% Republican(John).
republican(john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1090
% Quaker(John).
quaker(john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1092
% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).

 /*  republican(X), not(ab1(X)) ->
       not(pacifist(X)).
 */

 /*  not(pacifist(X)) :-
       republican(X),
       not(ab1(X)).
 */

 /*  [republican(X), not(ab1(X))] ->
       ta(Ta_Param, not(pacifist(X))).
 */
axiom(not(pacifist(X)),
    [republican(X), not(ab1(X))]).

 /*  not(republican(X)) :-
       not(ab1(X)),
       pacifist(X).
 */

 /*  [not(ab1(X)), pacifist(X)] ->
       ta(Ta_Param2, not(republican(X))).
 */
axiom(not(republican(X)),
    [not(ab1(X)), pacifist(X)]).

 /*  ab1(X) :-
       republican(X),
       pacifist(X).
 */

 /*  [republican(X), pacifist(X)] ->
       ta(Ta_Param3, ab1(X)).
 */
axiom(ab1(X),
    [republican(X), pacifist(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1093
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).

 /*  quaker(X), not(ab2(X)) ->
       pacifist(X).
 */

 /*  pacifist(X) :-
       quaker(X),
       not(ab2(X)).
 */

 /*  [quaker(X), not(ab2(X))] ->
       ta(Ta_Param, pacifist(X)).
 */
axiom(pacifist(X),
    [quaker(X), not(ab2(X))]).

 /*  not(quaker(X)) :-
       not(ab2(X)),
       not(pacifist(X)).
 */

 /*  [not(ab2(X)), not(pacifist(X))] ->
       ta(Ta_Param2, not(quaker(X))).
 */
axiom(not(quaker(X)),
    [not(ab2(X)), not(pacifist(X))]).

 /*  ab2(X) :-
       quaker(X),
       not(pacifist(X)).
 */

 /*  [quaker(X), not(pacifist(X))] ->
       ta(Ta_Param3, ab2(X)).
 */
axiom(ab2(X),
    [quaker(X), not(pacifist(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1094
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1094
% [x]
 % Republican(x) -> Ab2(x).

 /*  republican(X) ->
       ab2(X).
 */

 /*  ab2(X) :-
       republican(X).
 */

 /*  [republican(X)] ->
       ta(Ta_Param, ab2(X)).
 */
axiom(ab2(X),
    [republican(X)]).

 /*  not(republican(X)) :-
       not(ab2(X)).
 */

 /*  [not(ab2(X))] ->
       ta(Ta_Param2, not(republican(X))).
 */
axiom(not(republican(X)),
    [not(ab2(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1096
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1097
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1098
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1100
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1101
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1128
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1129
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1130
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1132
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1134
==> t(agent,nathan).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1136
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1138
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1139
event(fallAsleep(FallAsleep_Ret)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1140
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1142
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1143
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1145
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1147
% !HoldsAt(Awake(Nathan),0).
 %  not(initially(awake(nathan))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(nathan)))).
 */
axiom(not(initially(awake(nathan))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1148
% HoldsAt(Awake(Nathan),1).
holds_at(awake(nathan),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1150
%; abduced:
%; Happens(WakeUp(Nathan),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1153
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1154
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1155
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1182
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1183
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1184
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1186
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1188
==> t(agent,nathan).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1190
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1192
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1193
event(fallAsleep(FallAsleep_Ret)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1194
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1196
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1197
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1199
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1201
% Happens(WakeUp(Nathan),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(wakeUp(nathan), start)).
 */
axiom(happens(wakeUp(nathan), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1203
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1205
% !HoldsAt(Awake(Nathan),0).
 %  not(initially(awake(nathan))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(nathan)))).
 */
axiom(not(initially(awake(nathan))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1207
%; entailed:
%; HoldsAt(Awake(Nathan),3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1210
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1211
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1213
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1214
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1241
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1242
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1243
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1245
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1247
==> t(agent,nathan).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1249
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1251
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1252
event(fallAsleep(FallAsleep_Ret)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1253
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1255
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1256
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1258
%; Delta
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1261
% Happens(WakeUp(agent),time) ->
% !HoldsAt(Awake(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(wakeUp(Agent), Time)->holds_at(neg(awake(Agent)), Time)
       ).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [happens(wakeUp(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(awake(Agent)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1262
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ happens(wakeUp(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(awake(Agent))), Time), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(wakeUp(Agent), Time))).
 */
axiom(not(happens(wakeUp(Agent), Time)),
   
    [ holds_at(neg(neg(awake(Agent))), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1264
% Happens(WakeUp(Nathan),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(wakeUp(nathan), t)).
 */
axiom(happens(wakeUp(nathan), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1266
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1268
% HoldsAt(Awake(Nathan),1).
holds_at(awake(nathan),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1270
%; inferred:
%; !HoldsAt(Awake(Nathan),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1273
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1274
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1276
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1277
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1304
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1305
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1306
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1308
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1309
==> t(object,o1).

% fluent F(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1311
fluent(f(Ret)).
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% event E(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1313
event(e(E_Ret)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1314
% [object,time]
 % Releases(E(object),F(object),time).

 /*  [] ->
       ta(Time, releases(e(Object), f(Object), Time)).
 */
axiom(releases(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1315
% [object,time]
 % Terminates(E(object),F(object),time).

 /*  [] ->
       ta(Time, terminates(e(Object), f(Object), Time)).
 */
axiom(terminates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1317
% Happens(E(O1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(e(o1), t)).
 */
axiom(happens(e(o1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1319
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1320
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1321
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1348
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1349
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1350
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1352
==> sort(agent).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1354
==> t(agent,nathan).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1356
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1358
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% event FallAsleep(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1359
event(fallAsleep(FallAsleep_Ret)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1360
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1362
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1363
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1365
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1367
% Happens(WakeUp(Nathan),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(wakeUp(nathan), start)).
 */
axiom(happens(wakeUp(nathan), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1369
%; entailed:
%; HoldsAt(Awake(Nathan),3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1372
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1373
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1375
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1376
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1403
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1404
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1405
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1407
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1408
==> t(object,o1).

% event E(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1410
event(e(E_Ret)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).

% fluent F1(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1412
fluent(f1(F1_Ret)).
==> mpred_prop(f1(object),fluent).
==> meta_argtypes(f1(object)).

% fluent F2(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1413
fluent(f2(F2_Ret)).
==> mpred_prop(f2(object),fluent).
==> meta_argtypes(f2(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1414
% [object,time]
% Initiates(E(object),F1(object),time).

 /*  [] ->
       ta(Time, initiates(e(Object), f1(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1415
axiom(initiates(e(Object), f1(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1417
% [object,time]
% HoldsAt(F1(object),time) <-> HoldsAt(F2(object),time).

 /*  holds_at(f1(Object), Time) <->
       holds_at(f2(Object), Time).
 */

 /*  [holds_at, f1] <->
       [holds_at, f2].
 */

 /*  allDifferent([Object, Time]) ->
       ( holds_at(f1(Object), Time)->holds_at(f2(Object), Time)
       ).
 */

 /*  holds_at(f2(Object), Time) :-
       holds_at(f1(Object), Time),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(f1(Object), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(f2(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1418
axiom(holds_at(f2(Object), Time),
   
    [ holds_at(f1(Object), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(f1(Object), Time)) :-
       not(holds_at(f2(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(neg(f2(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(f1(Object)), Time)).
 */
axiom(holds_at(neg(f1(Object)), Time),
   
    [ holds_at(neg(f2(Object)), Time),
      allDifferent([Object, Time])
    ]).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(f2(Object), Time)->holds_at(f1(Object), Time)
       ).
 */

 /*  holds_at(f1(Object), Time) :-
       holds_at(f2(Object), Time),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(f2(Object), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(f1(Object), Time)).
 */
axiom(holds_at(f1(Object), Time),
   
    [ holds_at(f2(Object), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(f2(Object), Time)) :-
       not(holds_at(f1(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(neg(f1(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(f2(Object)), Time)).
 */
axiom(holds_at(neg(f2(Object)), Time),
   
    [ holds_at(neg(f1(Object)), Time),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1420
% !HoldsAt(F2(O1),0).
 %  not(initially(f2(o1))).

 /*  [] ->
       ta(Ta_Param, not(initially(f2(o1)))).
 */
axiom(not(initially(f2(o1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1421
% Happens(E(O1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(e(o1), t)).
 */
axiom(happens(e(o1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1423
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1424
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1425
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1452
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1453
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1454
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1456
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1457
==> t(object,o1).

% fluent F(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1459
fluent(f(Ret)).
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% event E(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1461
event(e(E_Ret)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1462
% [object,time]
 % Initiates(E(object),F(object),time).

 /*  [] ->
       ta(Time, initiates(e(Object), f(Object), Time)).
 */
axiom(initiates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1463
% [object,time]
 % Terminates(E(object),F(object),time).

 /*  [] ->
       ta(Time, terminates(e(Object), f(Object), Time)).
 */
axiom(terminates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1465
% Happens(E(O1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(e(o1), t)).
 */
axiom(happens(e(o1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1467
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1468
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1469
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1496
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1497
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1498
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1500
==> sort(object).

% object O1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1501
==> t(object,o1).

% fluent F(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1503
fluent(f(Ret)).
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% event E(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1505
event(e(E_Ret)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1506
% [object,time]
 % Releases(E(object),F(object),time).

 /*  [] ->
       ta(Time, releases(e(Object), f(Object), Time)).
 */
axiom(releases(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1507
% [object,time]
 % Initiates(E(object),F(object),time).

 /*  [] ->
       ta(Time, initiates(e(Object), f(Object), Time)).
 */
axiom(initiates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1509
% Happens(E(O1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(e(o1), t)).
 */
axiom(happens(e(o1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1511
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1512
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1513
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/CameraWithFlash.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1540
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1541
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1542
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort camera
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1544
==> sort(camera).

% camera Camera1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1546
==> t(camera,camera1).

% fluent ProperlyExposedPicture(camera)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1548
fluent(properlyExposedPicture(ProperlyExposedPicture_Ret)).
==> mpred_prop(properlyExposedPicture(camera),fluent).
==> meta_argtypes(properlyExposedPicture(camera)).

% fluent ImproperlyExposedPicture(camera)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1549
fluent(improperlyExposedPicture(ImproperlyExposedPicture_Ret)).
==> mpred_prop(improperlyExposedPicture(camera),fluent).
==> meta_argtypes(improperlyExposedPicture(camera)).

% event ReleaseShutter(camera)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1551
event(releaseShutter(ReleaseShutter_Ret)).
==> mpred_prop(releaseShutter(camera),event).
==> meta_argtypes(releaseShutter(camera)).

% event TriggerFlash(camera)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1552
event(triggerFlash(TriggerFlash_Ret)).
==> mpred_prop(triggerFlash(camera),event).
==> meta_argtypes(triggerFlash(camera)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1553
%; Sigma
% [camera,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1556
% Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ProperlyExposedPicture(camera),time).

 /*  axiom_head(Time) ->
       requires(triggerFlash(Camera), Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(triggerFlash(Camera), Time), Time).
 */

 /*  [holds_at(metreqs(triggerFlash(Camera)), Time)] ->
       ta(Time,
          holds_at(requires(triggerFlash(Camera), Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1557
axiom(holds_at(requires(triggerFlash(Camera), Time), Time),
    [holds_at(metreqs(triggerFlash(Camera)), Time)]).

 /*  [initiates(releaseShutter(Camera), properlyExposedPicture(Camera), Time)] ->
       ta(Time,
          holds_at(requirements(triggerFlash(Camera)), Time)).
 */
axiom(holds_at(requirements(triggerFlash(Camera)), Time),
   
    [ initiates(releaseShutter(Camera),
                properlyExposedPicture(Camera),
                Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1559
% [camera,time]
% !Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ImproperlyExposedPicture(camera),time).

 /*  [not(happens(triggerFlash(Camera), Time))] ->
       ta(Time,
          initiates(releaseShutter(Camera),
                    improperlyExposedPicture(Camera),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1561
axiom(initiates(releaseShutter(Camera), improperlyExposedPicture(Camera), Time),
    [not(happens(triggerFlash(Camera), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1563
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1565
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1565
% Happens(ReleaseShutter(Camera1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(releaseShutter(camera1), t)).
 */
axiom(happens(releaseShutter(camera1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1566
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1566
% Happens(TriggerFlash(Camera1),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(triggerFlash(camera1), start)).
 */
axiom(happens(triggerFlash(camera1), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1567
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1567
% Happens(ReleaseShutter(Camera1),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(releaseShutter(camera1), start)).
 */
axiom(happens(releaseShutter(camera1), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1569
%; added:
% [camera]
 % !HoldsAt(ImproperlyExposedPicture(camera),0).
 %  not(initially(improperlyExposedPicture(Camera))).

 /*  [] ->
       ta(Ta_Param, not(initially(improperlyExposedPicture(Camera)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1570
axiom(not(initially(improperlyExposedPicture(Camera))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1571
% [camera]
 % !HoldsAt(ProperlyExposedPicture(camera),0).
 %  not(initially(properlyExposedPicture(Camera))).

 /*  [] ->
       ta(Ta_Param, not(initially(properlyExposedPicture(Camera)))).
 */
axiom(not(initially(properlyExposedPicture(Camera))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1573
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1574
==> completion(delta).
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1576
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1577
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/MovingRobot.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1996,
%;   author = "Murray Shanahan",
%;   year = "1996",
%;   title = "Robotics and the common sense informatic situation",
%;   editor = "Wolfgang Wahlster",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{T}welfth \uppercase{E}uropean \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "684--688",
%;   address = "Chichester, UK",
%;   publisher = "John Wiley",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1615
% option renaming off
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1616
:- set_ec_option(renaming, off).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1618
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1619
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort coord: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1621
==> subsort(coord,integer).

% sort direction: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1623
==> subsort(direction,integer).
%; 0 -> 0, 1 -> 90, 2 -> 180, 3 -> 370

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1625
% sort robot
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1626
==> sort(robot).

% robot Robot1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1628
==> t(robot,robot1).

% function Sin(direction): coord
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1630
functional_predicate(sin(Sin_Param,Sin_Ret)).
==> mpred_prop(sin(direction,coord),functional_predicate).
==> meta_argtypes(sin(direction,coord)).
==> resultIsa(sin,coord).

% function Cos(direction): coord
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1631
functional_predicate(cos(Cos_Param,Cos_Ret)).
==> mpred_prop(cos(direction,coord),functional_predicate).
==> meta_argtypes(cos(direction,coord)).
==> resultIsa(cos,coord).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1632
% Sin(0)=0.
sin(0,0).

 /*  axiom_head(Axiom_head_Ret) ->
       sin(0, 0).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(sin(0, 0), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1633
% Sin(1)=1.
sin(1,1).

 /*  axiom_head(Axiom_head_Ret) ->
       sin(1, 1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(sin(1, 1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1634
% Sin(2)=2.
sin(2,2).

 /*  axiom_head(Axiom_head_Ret) ->
       sin(2, 2).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(sin(2, 2), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1635
% Sin(3)=3.
sin(3,3).

 /*  axiom_head(Axiom_head_Ret) ->
       sin(3, 3).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(sin(3, 3), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1637
% Cos(0)=1.
cos(0,1).

 /*  axiom_head(Axiom_head_Ret) ->
       cos(0, 1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(cos(0, 1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1638
% Cos(1)=2.
cos(1,2).

 /*  axiom_head(Axiom_head_Ret) ->
       cos(1, 2).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(cos(1, 2), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1639
% Cos(2)=3.
cos(2,3).

 /*  axiom_head(Axiom_head_Ret) ->
       cos(2, 3).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(cos(2, 3), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1640
% Cos(3)=4.
cos(3,4).

 /*  axiom_head(Axiom_head_Ret) ->
       cos(3, 4).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(cos(3, 4), Axiom_head_Ret).
 */

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1642
% fluent Direction(robot,direction)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1643
fluent(direction(Direction_Param,Direction_Ret)).
==> mpred_prop(direction(robot,direction),fluent).
==> meta_argtypes(direction(robot,direction)).

% fluent Location(robot,coord,coord)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1644
fluent(location(Location_Param,_,Location_Ret)).
==> mpred_prop(location(robot,coord,coord),fluent).
==> meta_argtypes(location(robot,coord,coord)).

% event MoveLeftWheel(robot)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1646
event(moveLeftWheel(MoveLeftWheel_Ret)).
==> mpred_prop(moveLeftWheel(robot),event).
==> meta_argtypes(moveLeftWheel(robot)).

% event MoveRightWheel(robot)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1647
event(moveRightWheel(MoveRightWheel_Ret)).
==> mpred_prop(moveRightWheel(robot),event).
==> meta_argtypes(moveRightWheel(robot)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1648
%; Sigma
% [robot,direction1,direction2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1651
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1-1)->
% Initiates(MoveLeftWheel(robot),Direction(robot,direction2),time).

 /*  axiom_head(Time) ->
       equals(Direction2, Direction1-1).
 */

 /*  fix_axiom_head(Time) ->
       call(Direction2=Direction1-1).
 */

 /*  [not(happens(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), call(Direction2=Direction1-1)] ->
       ta(Time,
          initiates(moveLeftWheel(Robot),
                    direction(Robot, Direction2),
                    Time)).
 */

 /*  [not(happens(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), holds_at(call(Direction2=Direction1-1), Time)] ->
       ta(Time,
          initiates(moveLeftWheel(Robot),
                    direction(Robot, Direction2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1654
axiom(initiates(moveLeftWheel(Robot), direction(Robot, Direction2), Time),
   
    [ not(happens(moveRightWheel(Robot), Time)),
      holds_at(direction(Robot, Direction1), Time),
      holds_at(call(Direction2=Direction1-1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1656
% [robot,direction,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveLeftWheel(robot),Direction(robot,direction),time).

 /*  [not(happens(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction), Time)] ->
       ta(Time,
          terminates(moveLeftWheel(Robot),
                     direction(Robot, Direction),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1659
axiom(terminates(moveLeftWheel(Robot), direction(Robot, Direction), Time),
   
    [ not(happens(moveRightWheel(Robot), Time)),
      holds_at(direction(Robot, Direction), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1661
% [robot,direction1,direction2,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1+1)->
% Initiates(MoveRightWheel(robot),Direction(robot,direction2),time).

 /*  axiom_head(Time) ->
       equals(Direction2, Direction1+1).
 */

 /*  fix_axiom_head(Time) ->
       call(Direction2=Direction1+1).
 */

 /*  [not(happens(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), call(Direction2=Direction1+1)] ->
       ta(Time,
          initiates(moveRightWheel(Robot),
                    direction(Robot, Direction2),
                    Time)).
 */

 /*  [not(happens(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), holds_at(call(Direction2=Direction1+1), Time)] ->
       ta(Time,
          initiates(moveRightWheel(Robot),
                    direction(Robot, Direction2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1665
axiom(initiates(moveRightWheel(Robot), direction(Robot, Direction2), Time),
   
    [ not(happens(moveLeftWheel(Robot), Time)),
      holds_at(direction(Robot, Direction1), Time),
      holds_at(call(Direction2=Direction1+1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1667
% [robot,direction,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Direction(robot,direction),time).

 /*  [not(happens(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction), Time)] ->
       ta(Time,
          terminates(moveRightWheel(Robot),
                     direction(Robot, Direction),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1670
axiom(terminates(moveRightWheel(Robot), direction(Robot, Direction), Time),
   
    [ not(happens(moveLeftWheel(Robot), Time)),
      holds_at(direction(Robot, Direction), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1672
% [robot,direction,coord1,coord2,coord3,coord4,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Direction(robot,direction),time) &
% coord3 = coord1+Cos(direction) &
% coord4 = coord2+Sin(direction) ->
% Initiates(MoveRightWheel(robot),
%           Location(robot,coord3,coord4),
%           time).

 /*  axiom_head(Time) ->
       equals(Coord3, Coord1+cos(Direction)).
 */

 /*  fix_axiom_head(Time) ->
       call(Coord3=Coord1+cos(Direction)).
 */

 /*  axiom_head(Time) ->
       equals(Coord4, Coord2+sin(Direction)).
 */

 /*  fix_axiom_head(Time) ->
       call(Coord4=Coord2+sin(Direction)).
 */

 /*  [happens(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time), holds_at(direction(Robot, Direction), Time), call(Coord3=Coord1+cos(Direction)), call(Coord4=Coord2+sin(Direction))] ->
       ta(Time,
          initiates(moveRightWheel(Robot),
                    location(Robot, Coord3, Coord4),
                    Time)).
 */

 /*  [happens(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time), holds_at(direction(Robot, Direction), Time), holds_at(call(Coord3=Coord1+cos(Direction)), Time), holds_at(call(Coord4=Coord2+sin(Direction)), Time)] ->
       ta(Time,
          initiates(moveRightWheel(Robot),
                    location(Robot, Coord3, Coord4),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1680
axiom(initiates(moveRightWheel(Robot), location(Robot, Coord3, Coord4), Time),
   
    [ happens(moveLeftWheel(Robot), Time),
      holds_at(location(Robot, Coord1, Coord2), Time),
      holds_at(direction(Robot, Direction), Time),
      holds_at(call(Coord3=Coord1+cos(Direction)),
               Time),
      holds_at(call(Coord4=Coord2+sin(Direction)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1682
% [robot,coord1,coord2,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) ->
%; FIX: Direction not needed!!
%; HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Location(robot,coord1,coord2),time).

 /*  [happens(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time)] ->
       ta(Time,
          terminates(moveRightWheel(Robot),
                     location(Robot, Coord1, Coord2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1687
axiom(terminates(moveRightWheel(Robot), location(Robot, Coord1, Coord2), Time),
   
    [ happens(moveLeftWheel(Robot), Time),
      holds_at(location(Robot, Coord1, Coord2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1689
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1691
% Happens(MoveRightWheel(Robot1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(moveRightWheel(robot1), t)).
 */
axiom(happens(moveRightWheel(robot1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1692
% Happens(MoveLeftWheel(Robot1),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(moveLeftWheel(robot1), start)).
 */
axiom(happens(moveLeftWheel(robot1), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1693
% Happens(MoveRightWheel(Robot1),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(moveRightWheel(robot1), start)).
 */
axiom(happens(moveRightWheel(robot1), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1695
%; Psi
% [robot,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1699
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Location(robot,coord3,coord4),time) ->
% coord1=coord3 &
% coord2=coord4.

 /*  allDifferent([Robot, Coord1, Coord2, Time, Coord3, Coord4]) ->
       ( holds_at(location(Robot, Coord1, Coord2), Time), holds_at(location(Robot, Coord3, Coord4), Time)->Coord1=Coord3, Coord2=Coord4
       ).
 */

 /*  not(holds_at(location(Robot, Coord1, Coord2), Time)) :-
       holds_at(location(Robot, Coord3, Coord4), Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ),
       allDifferent(
                    [ Robot,
                      Coord1,
                      Coord2,
                      Time,
                      Coord3,
                      Coord4
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Coord1=Coord3))
       ;   not(call(Coord2=Coord4))
       ).
 */

 /*  [holds_at(location(Robot, Coord3, Coord4), Time),  (not(call(Coord1=Coord3));not(call(Coord2=Coord4))), allDifferent([Robot, Coord1, Coord2, Time, Coord3, Coord4])] ->
       ta(Time,
          holds_at(neg(location(Robot, Coord1, Coord2)),
                   Time)).
 */

 /*  [holds_at(location(Robot, Coord3, Coord4), Time),  (holds_at(neg(call(Coord1=Coord3)), Time);holds_at(neg(call(Coord2=Coord4)), Time)), allDifferent([Robot, Coord1, Coord2, Time, Coord3, Coord4])] ->
       ta(Time,
          holds_at(neg(location(Robot, Coord1, Coord2)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1702
axiom(holds_at(neg(location(Robot, Coord1, Coord2)), Time),
   
    [ holds_at(location(Robot, Coord3, Coord4), Time),
       (holds_at(neg(call(Coord1=Coord3)), Time);holds_at(neg(call(Coord2=Coord4)), Time)),
      allDifferent(
                   [ Robot,
                     Coord1,
                     Coord2,
                     Time,
                     Coord3,
                     Coord4
                   ])
    ]).

 /*  not(holds_at(location(Robot, Coord3, Coord4), Time)) :-
       holds_at(location(Robot, Coord1, Coord2), Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ),
       allDifferent(
                    [ Robot,
                      Coord1,
                      Coord2,
                      Time,
                      Coord3,
                      Coord4
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Coord1=Coord3))
       ;   not(call(Coord2=Coord4))
       ).
 */

 /*  [holds_at(location(Robot, Coord1, Coord2), Time),  (not(call(Coord1=Coord3));not(call(Coord2=Coord4))), allDifferent([Robot, Coord1, Coord2, Time, Coord3, Coord4])] ->
       ta(Time,
          holds_at(neg(location(Robot, Coord3, Coord4)),
                   Time)).
 */

 /*  [holds_at(location(Robot, Coord1, Coord2), Time),  (holds_at(neg(call(Coord1=Coord3)), Time);holds_at(neg(call(Coord2=Coord4)), Time)), allDifferent([Robot, Coord1, Coord2, Time, Coord3, Coord4])] ->
       ta(Time,
          holds_at(neg(location(Robot, Coord3, Coord4)),
                   Time)).
 */
axiom(holds_at(neg(location(Robot, Coord3, Coord4)), Time),
   
    [ holds_at(location(Robot, Coord1, Coord2), Time),
       (holds_at(neg(call(Coord1=Coord3)), Time);holds_at(neg(call(Coord2=Coord4)), Time)),
      allDifferent(
                   [ Robot,
                     Coord1,
                     Coord2,
                     Time,
                     Coord3,
                     Coord4
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1704
% [robot,direction1,direction2,time]
% HoldsAt(Direction(robot,direction1),time) &
% HoldsAt(Direction(robot,direction2),time) ->
% direction1=direction2.

 /*  allDifferent([Robot, Direction1, Time, Direction2]) ->
       ( holds_at(direction(Robot, Direction1), Time), holds_at(direction(Robot, Direction2), Time)->Direction1=Direction2
       ).
 */

 /*  not(holds_at(direction(Robot, Direction1), Time)) :-
       holds_at(direction(Robot, Direction2), Time),
       not(equals(Direction1, Direction2)),
       allDifferent([Robot, Direction1, Time, Direction2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Direction1, Direction2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Direction1=Direction2)).
 */

 /*  [holds_at(direction(Robot, Direction2), Time), not(call(Direction1=Direction2)), allDifferent([Robot, Direction1, Time, Direction2])] ->
       ta(Time,
          holds_at(neg(direction(Robot, Direction1)), Time)).
 */

 /*  [holds_at(direction(Robot, Direction2), Time), holds_at(neg(call(Direction1=Direction2)), Time), allDifferent([Robot, Direction1, Time, Direction2])] ->
       ta(Time,
          holds_at(neg(direction(Robot, Direction1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1707
axiom(holds_at(neg(direction(Robot, Direction1)), Time),
   
    [ holds_at(direction(Robot, Direction2), Time),
      holds_at(neg(call(Direction1=Direction2)), Time),
      allDifferent([Robot, Direction1, Time, Direction2])
    ]).

 /*  not(holds_at(direction(Robot, Direction2), Time)) :-
       holds_at(direction(Robot, Direction1), Time),
       not(equals(Direction1, Direction2)),
       allDifferent([Robot, Direction1, Time, Direction2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Direction1, Direction2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Direction1=Direction2)).
 */

 /*  [holds_at(direction(Robot, Direction1), Time), not(call(Direction1=Direction2)), allDifferent([Robot, Direction1, Time, Direction2])] ->
       ta(Time,
          holds_at(neg(direction(Robot, Direction2)), Time)).
 */

 /*  [holds_at(direction(Robot, Direction1), Time), holds_at(neg(call(Direction1=Direction2)), Time), allDifferent([Robot, Direction1, Time, Direction2])] ->
       ta(Time,
          holds_at(neg(direction(Robot, Direction2)), Time)).
 */
axiom(holds_at(neg(direction(Robot, Direction2)), Time),
   
    [ holds_at(direction(Robot, Direction1), Time),
      holds_at(neg(call(Direction1=Direction2)), Time),
      allDifferent([Robot, Direction1, Time, Direction2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1709
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1711
% HoldsAt(Location(Robot1,0,0),0).

 /*  [] ->
       ta(Ta_Param, initially(location(robot1, 0, 0))).
 */
axiom(initially(location(robot1, 0, 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1712
% HoldsAt(Direction(Robot1,0),0).

 /*  [] ->
       ta(Ta_Param, initially(direction(robot1, 0))).
 */
axiom(initially(direction(robot1, 0)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1714
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1715
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1717
==> range(time,0,3).

% range coord 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1718
==> range(coord,0,3).

% range direction 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1719
==> range(direction,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1720
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/PatHeadRubStomach.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1747
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1748
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1749
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1751
==> sort(agent).

% event PatHead(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1753
event(patHead(PatHead_Ret)).
==> mpred_prop(patHead(agent),event).
==> meta_argtypes(patHead(agent)).

% event RubStomach(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1754
event(rubStomach(RubStomach_Ret)).
==> mpred_prop(rubStomach(agent),event).
==> meta_argtypes(rubStomach(agent)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1756
==> t(agent,nathan).
%; Delta
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1760
% Happens(PatHead(agent),time) ->
% !Happens(RubStomach(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(patHead(Agent), Time)->not(happens(rubStomach(Agent), Time))
       ).
 */

 /*  not(happens(rubStomach(Agent), Time)) :-
       happens(patHead(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [happens(patHead(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(rubStomach(Agent), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1761
axiom(not(happens(rubStomach(Agent), Time)),
   
    [ happens(patHead(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(patHead(Agent), Time)) :-
       happens(rubStomach(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [happens(rubStomach(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(patHead(Agent), Time))).
 */
axiom(not(happens(patHead(Agent), Time)),
   
    [ happens(rubStomach(Agent), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1763
% Happens(PatHead(Nathan),0) & Happens(RubStomach(Nathan),0).

 /*   happens(patHead(nathan), 0),
      happens(rubStomach(nathan), 0).
 */

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(patHead(nathan), t)).
 */
axiom(happens(patHead(nathan), t),
    [holds_at(is_time(0), t)]).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(rubStomach(nathan), t)).
 */
axiom(happens(rubStomach(nathan), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1765
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1766
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1767
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/MovingNewspaperAndBox.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1794
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1795
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1796
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1798
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1799
==> subsort(agent,object).

% sort physobj: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1800
==> subsort(physobj,object).

% sort room: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1801
==> subsort(room,object).

% fluent IN(object,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1803
fluent(in(In_Param,In_Ret)).
==> mpred_prop(in(object,object),fluent).
==> meta_argtypes(in(object,object)).

% fluent INROOM(object,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1804
fluent(inroom(Inroom_Param,Inroom_Ret)).
==> mpred_prop(inroom(object,room),fluent).
==> meta_argtypes(inroom(object,room)).

% noninertial INROOM
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1805
==> noninertial(inroom).

% event MOVE(agent,object,object,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1807
event(move(Move_Param,_,_,Move_Ret)).
==> mpred_prop(move(agent,object,object,object),event).
==> meta_argtypes(move(agent,object,object,object)).

% agent Lisa
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1809
==> t(agent,lisa).

% physobj Box, Newspaper
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1810
==> t(physobj,box).
==> t(physobj,newspaper).

% room Kitchen, LivingRoom
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1811
==> t(room,kitchen).
==> t(room,livingRoom).
%; Sigma
%; RS10
% [agent,physobj1,physobj2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1816
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Initiates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,physobj2),time).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj1, Room), Time), holds_at(inroom(Physobj2, Room), Time)] ->
       ta(Time,
          initiates(move(Agent, Physobj1, Room, Physobj2),
                    in(Physobj1, Physobj2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1819
axiom(initiates(move(Agent, Physobj1, Room, Physobj2), in(Physobj1, Physobj2), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj1, Room), Time),
      holds_at(inroom(Physobj2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1821
%; RS11
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Terminates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,room),time).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj1, Room), Time), holds_at(inroom(Physobj2, Room), Time)] ->
       ta(Time,
          terminates(move(Agent, Physobj1, Room, Physobj2),
                     in(Physobj1, Room),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1826
axiom(terminates(move(Agent, Physobj1, Room, Physobj2), in(Physobj1, Room), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj1, Room), Time),
      holds_at(inroom(Physobj2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1828
%; RS12
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,room),time).

 /*  [holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          initiates(move(Agent, Physobj1, Physobj2, Room),
                    in(Physobj1, Room),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1831
axiom(initiates(move(Agent, Physobj1, Physobj2, Room), in(Physobj1, Room), Time),
    [holds_at(in(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1833
%; RS13
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,physobj2),time).

 /*  [holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          terminates(move(Agent, Physobj1, Physobj2, Room),
                     in(Physobj1, Physobj2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1836
axiom(terminates(move(Agent, Physobj1, Physobj2, Room), in(Physobj1, Physobj2), Time),
    [holds_at(in(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1838
%; RS14
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Initiates(MOVE(agent,agent,room1,room2),IN(agent,room2),time).

 /*  [holds_at(in(Agent, Room1), Time)] ->
       ta(Time,
          initiates(move(Agent, Agent, Room1, Room2),
                    in(Agent, Room2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1841
axiom(initiates(move(Agent, Agent, Room1, Room2), in(Agent, Room2), Time),
    [holds_at(in(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1843
%; RS15
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Terminates(MOVE(agent,agent,room1,room2),IN(agent,room1),time).

 /*  [holds_at(in(Agent, Room1), Time)] ->
       ta(Time,
          terminates(move(Agent, Agent, Room1, Room2),
                     in(Agent, Room1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1846
axiom(terminates(move(Agent, Agent, Room1, Room2), in(Agent, Room1), Time),
    [holds_at(in(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1848
%; RS16
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Initiates(MOVE(agent,physobj,room,agent),IN(physobj,agent),time).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj, Room), Time)] ->
       ta(Time,
          initiates(move(Agent, Physobj, Room, Agent),
                    in(Physobj, Agent),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1852
axiom(initiates(move(Agent, Physobj, Room, Agent), in(Physobj, Agent), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1854
%; RS17
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Terminates(MOVE(agent,physobj,room,agent),IN(physobj,room),time).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj, Room), Time)] ->
       ta(Time,
          terminates(move(Agent, Physobj, Room, Agent),
                     in(Physobj, Room),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1858
axiom(terminates(move(Agent, Physobj, Room, Agent), in(Physobj, Room), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1860
%; RS18
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj,agent,room),IN(physobj,room),time).

 /*  [holds_at(in(Physobj, Agent), Time), holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          initiates(move(Agent, Physobj, Agent, Room),
                    in(Physobj, Room),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1864
axiom(initiates(move(Agent, Physobj, Agent, Room), in(Physobj, Room), Time),
   
    [ holds_at(in(Physobj, Agent), Time),
      holds_at(in(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1866
%; RS19
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj,agent,room),IN(physobj,agent),time).

 /*  [holds_at(in(Physobj, Agent), Time), holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          terminates(move(Agent, Physobj, Agent, Room),
                     in(Physobj, Agent),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1870
axiom(terminates(move(Agent, Physobj, Agent, Room), in(Physobj, Agent), Time),
   
    [ holds_at(in(Physobj, Agent), Time),
      holds_at(in(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1872
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1874
% Happens(MOVE(Lisa,Newspaper,LivingRoom,Box),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(move(lisa, newspaper, livingRoom, box), t)).
 */
axiom(happens(move(lisa, newspaper, livingRoom, box), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1875
% Happens(MOVE(Lisa,Box,LivingRoom,Lisa),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(move(lisa, box, livingRoom, lisa), start)).
 */
axiom(happens(move(lisa, box, livingRoom, lisa), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1876
% Happens(MOVE(Lisa,Lisa,LivingRoom,Kitchen),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(move(lisa, lisa, livingRoom, kitchen), t2)).
 */
axiom(happens(move(lisa, lisa, livingRoom, kitchen), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1877
% Happens(MOVE(Lisa,Box,Lisa,Kitchen),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(move(lisa, box, lisa, kitchen), t3)).
 */
axiom(happens(move(lisa, box, lisa, kitchen), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1878
% Happens(MOVE(Lisa,Lisa,Kitchen,LivingRoom),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(move(lisa, lisa, kitchen, livingRoom), t4)).
 */
axiom(happens(move(lisa, lisa, kitchen, livingRoom), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1880
%; Psi
%; RS1
% [object,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1883
% !HoldsAt(IN(object,object),time).
holds_at(neg(in(Object,Object)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1885
%; RS2
% [object1,object2,time]
% HoldsAt(IN(object1,object2),time) ->
% !HoldsAt(IN(object2,object1),time).

 /*  allDifferent([Object1, Object2, Time]) ->
       ( holds_at(in(Object1, Object2), Time)->holds_at(neg(in(Object2, Object1)), Time)
       ).
 */

 /*  holds_at(neg(in(Object2, Object1)), Time) :-
       holds_at(in(Object1, Object2), Time),
       allDifferent([Object1, Object2, Time]).
 */

 /*  [holds_at(in(Object1, Object2), Time), allDifferent([Object1, Object2, Time])] ->
       ta(Time, holds_at(neg(in(Object2, Object1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1888
axiom(holds_at(neg(in(Object2, Object1)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      allDifferent([Object1, Object2, Time])
    ]).

 /*  not(holds_at(in(Object1, Object2), Time)) :-
       not(holds_at(neg(in(Object2, Object1)), Time)),
       allDifferent([Object1, Object2, Time]).
 */

 /*  [holds_at(neg(neg(in(Object2, Object1))), Time), allDifferent([Object1, Object2, Time])] ->
       ta(Time, holds_at(neg(in(Object1, Object2)), Time)).
 */
axiom(holds_at(neg(in(Object1, Object2)), Time),
   
    [ holds_at(neg(neg(in(Object2, Object1))), Time),
      allDifferent([Object1, Object2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1890
%; RS3
% [object1,object2,object3,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(IN(object2,object3),time) ->
% !HoldsAt(IN(object1,object3),time).

 /*  allDifferent([Object1, Object2, Time, Object3]) ->
       ( holds_at(in(Object1, Object2), Time), holds_at(in(Object2, Object3), Time)->holds_at(neg(in(Object1, Object3)), Time)
       ).
 */

 /*  holds_at(neg(in(Object1, Object3)), Time) :-
       ( holds_at(in(Object1, Object2), Time),
         holds_at(in(Object2, Object3), Time)
       ),
       allDifferent([Object1, Object2, Time, Object3]).
 */

 /*  [holds_at(in(Object1, Object2), Time), holds_at(in(Object2, Object3), Time), allDifferent([Object1, Object2, Time, Object3])] ->
       ta(Time, holds_at(neg(in(Object1, Object3)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1894
axiom(holds_at(neg(in(Object1, Object3)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(in(Object2, Object3), Time),
      allDifferent([Object1, Object2, Time, Object3])
    ]).

 /*  not(holds_at(in(Object1, Object2), Time)) :-
       holds_at(in(Object2, Object3), Time),
       not(holds_at(neg(in(Object1, Object3)), Time)),
       allDifferent([Object1, Object2, Time, Object3]).
 */

 /*  [holds_at(in(Object2, Object3), Time), holds_at(neg(neg(in(Object1, Object3))), Time), allDifferent([Object1, Object2, Time, Object3])] ->
       ta(Time, holds_at(neg(in(Object1, Object2)), Time)).
 */
axiom(holds_at(neg(in(Object1, Object2)), Time),
   
    [ holds_at(in(Object2, Object3), Time),
      holds_at(neg(neg(in(Object1, Object3))), Time),
      allDifferent([Object1, Object2, Time, Object3])
    ]).

 /*  not(holds_at(in(Object2, Object3), Time)) :-
       holds_at(in(Object1, Object2), Time),
       not(holds_at(neg(in(Object1, Object3)), Time)),
       allDifferent([Object1, Object2, Time, Object3]).
 */

 /*  [holds_at(in(Object1, Object2), Time), holds_at(neg(neg(in(Object1, Object3))), Time), allDifferent([Object1, Object2, Time, Object3])] ->
       ta(Time, holds_at(neg(in(Object2, Object3)), Time)).
 */
axiom(holds_at(neg(in(Object2, Object3)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(neg(neg(in(Object1, Object3))), Time),
      allDifferent([Object1, Object2, Time, Object3])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1896
%; RS4
% [object,object1,object2,time]
% HoldsAt(IN(object,object1),time) &
% HoldsAt(IN(object,object2),time) ->
% object1=object2.

 /*  allDifferent([Object, Object1, Time, Object2]) ->
       ( holds_at(in(Object, Object1), Time), holds_at(in(Object, Object2), Time)->Object1=Object2
       ).
 */

 /*  not(holds_at(in(Object, Object1), Time)) :-
       holds_at(in(Object, Object2), Time),
       not(equals(Object1, Object2)),
       allDifferent([Object, Object1, Time, Object2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Object1, Object2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Object1=Object2)).
 */

 /*  [holds_at(in(Object, Object2), Time), not(call(Object1=Object2)), allDifferent([Object, Object1, Time, Object2])] ->
       ta(Time, holds_at(neg(in(Object, Object1)), Time)).
 */

 /*  [holds_at(in(Object, Object2), Time), holds_at(neg(call(Object1=Object2)), Time), allDifferent([Object, Object1, Time, Object2])] ->
       ta(Time, holds_at(neg(in(Object, Object1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1900
axiom(holds_at(neg(in(Object, Object1)), Time),
   
    [ holds_at(in(Object, Object2), Time),
      holds_at(neg(call(Object1=Object2)), Time),
      allDifferent([Object, Object1, Time, Object2])
    ]).

 /*  not(holds_at(in(Object, Object2), Time)) :-
       holds_at(in(Object, Object1), Time),
       not(equals(Object1, Object2)),
       allDifferent([Object, Object1, Time, Object2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Object1, Object2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Object1=Object2)).
 */

 /*  [holds_at(in(Object, Object1), Time), not(call(Object1=Object2)), allDifferent([Object, Object1, Time, Object2])] ->
       ta(Time, holds_at(neg(in(Object, Object2)), Time)).
 */

 /*  [holds_at(in(Object, Object1), Time), holds_at(neg(call(Object1=Object2)), Time), allDifferent([Object, Object1, Time, Object2])] ->
       ta(Time, holds_at(neg(in(Object, Object2)), Time)).
 */
axiom(holds_at(neg(in(Object, Object2)), Time),
   
    [ holds_at(in(Object, Object1), Time),
      holds_at(neg(call(Object1=Object2)), Time),
      allDifferent([Object, Object1, Time, Object2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1902
%; RS7
% [object,room,time]
% HoldsAt(IN(object,room),time) ->
% HoldsAt(INROOM(object,room),time).

 /*  allDifferent([Object, Room, Time]) ->
       ( holds_at(in(Object, Room), Time)->holds_at(inroom(Object, Room), Time)
       ).
 */

 /*  holds_at(inroom(Object, Room), Time) :-
       holds_at(in(Object, Room), Time),
       allDifferent([Object, Room, Time]).
 */

 /*  [holds_at(in(Object, Room), Time), allDifferent([Object, Room, Time])] ->
       ta(Time, holds_at(inroom(Object, Room), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1905
axiom(holds_at(inroom(Object, Room), Time),
   
    [ holds_at(in(Object, Room), Time),
      allDifferent([Object, Room, Time])
    ]).

 /*  not(holds_at(in(Object, Room), Time)) :-
       not(holds_at(inroom(Object, Room), Time)),
       allDifferent([Object, Room, Time]).
 */

 /*  [holds_at(neg(inroom(Object, Room)), Time), allDifferent([Object, Room, Time])] ->
       ta(Time, holds_at(neg(in(Object, Room)), Time)).
 */
axiom(holds_at(neg(in(Object, Room)), Time),
   
    [ holds_at(neg(inroom(Object, Room)), Time),
      allDifferent([Object, Room, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1907
%; RS8
% [object1,object2,room,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(INROOM(object2,room),time) ->
% HoldsAt(INROOM(object1,room),time).

 /*  allDifferent([Object1, Object2, Time, Room]) ->
       ( holds_at(in(Object1, Object2), Time), holds_at(inroom(Object2, Room), Time)->holds_at(inroom(Object1, Room), Time)
       ).
 */

 /*  holds_at(inroom(Object1, Room), Time) :-
       ( holds_at(in(Object1, Object2), Time),
         holds_at(inroom(Object2, Room), Time)
       ),
       allDifferent([Object1, Object2, Time, Room]).
 */

 /*  [holds_at(in(Object1, Object2), Time), holds_at(inroom(Object2, Room), Time), allDifferent([Object1, Object2, Time, Room])] ->
       ta(Time, holds_at(inroom(Object1, Room), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1911
axiom(holds_at(inroom(Object1, Room), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(inroom(Object2, Room), Time),
      allDifferent([Object1, Object2, Time, Room])
    ]).

 /*  not(holds_at(in(Object1, Object2), Time)) :-
       holds_at(inroom(Object2, Room), Time),
       not(holds_at(inroom(Object1, Room), Time)),
       allDifferent([Object1, Object2, Time, Room]).
 */

 /*  [holds_at(inroom(Object2, Room), Time), holds_at(neg(inroom(Object1, Room)), Time), allDifferent([Object1, Object2, Time, Room])] ->
       ta(Time, holds_at(neg(in(Object1, Object2)), Time)).
 */
axiom(holds_at(neg(in(Object1, Object2)), Time),
   
    [ holds_at(inroom(Object2, Room), Time),
      holds_at(neg(inroom(Object1, Room)), Time),
      allDifferent([Object1, Object2, Time, Room])
    ]).

 /*  not(holds_at(inroom(Object2, Room), Time)) :-
       holds_at(in(Object1, Object2), Time),
       not(holds_at(inroom(Object1, Room), Time)),
       allDifferent([Object1, Object2, Time, Room]).
 */

 /*  [holds_at(in(Object1, Object2), Time), holds_at(neg(inroom(Object1, Room)), Time), allDifferent([Object1, Object2, Time, Room])] ->
       ta(Time, holds_at(neg(inroom(Object2, Room)), Time)).
 */
axiom(holds_at(neg(inroom(Object2, Room)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(neg(inroom(Object1, Room)), Time),
      allDifferent([Object1, Object2, Time, Room])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1913
%; RS9
% [object,room1,room2,time]
% HoldsAt(INROOM(object,room1),time) &
% HoldsAt(INROOM(object,room2),time) ->
% room1=room2.

 /*  allDifferent([Object, Room1, Time, Room2]) ->
       ( holds_at(inroom(Object, Room1), Time), holds_at(inroom(Object, Room2), Time)->Room1=Room2
       ).
 */

 /*  not(holds_at(inroom(Object, Room1), Time)) :-
       holds_at(inroom(Object, Room2), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inroom(Object, Room2), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inroom(Object, Room1)), Time)).
 */

 /*  [holds_at(inroom(Object, Room2), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inroom(Object, Room1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1917
axiom(holds_at(neg(inroom(Object, Room1)), Time),
   
    [ holds_at(inroom(Object, Room2), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).

 /*  not(holds_at(inroom(Object, Room2), Time)) :-
       holds_at(inroom(Object, Room1), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inroom(Object, Room1), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inroom(Object, Room2)), Time)).
 */

 /*  [holds_at(inroom(Object, Room1), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inroom(Object, Room2)), Time)).
 */
axiom(holds_at(neg(inroom(Object, Room2)), Time),
   
    [ holds_at(inroom(Object, Room1), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1919
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1921
% HoldsAt(IN(Lisa,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(in(lisa, livingRoom))).
 */
axiom(initially(in(lisa, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1922
% HoldsAt(IN(Newspaper,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(in(newspaper, livingRoom))).
 */
axiom(initially(in(newspaper, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1923
% HoldsAt(IN(Box,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(in(box, livingRoom))).
 */
axiom(initially(in(box, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1925
%; added:
% [room1,room2,time]
 % !HoldsAt(INROOM(room1,room2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1926
holds_at(neg(inroom(Room1,Room2)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1927
% [room,object,time]
 % !HoldsAt(IN(room,object),time).
holds_at(neg(in(Room,Object)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1929
%; entailed:
%; HoldsAt(IN(Lisa,LivingRoom),5).
%; HoldsAt(IN(Box,Kitchen),5).
%; HoldsAt(INROOM(Newspaper,Kitchen),5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1934
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1935
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1937
==> range(time,0,5).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1938
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1973
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1974
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1975
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1977
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1978
==> sort(location).

% object O1, O2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1980
==> t(object,o1).
==> t(object,o2).

% location L1, L2, L3, L4, L5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1981
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).
==> t(location,l4).
==> t(location,l5).

% predicate Adjacent(location,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1983
predicate(adjacent(Adjacent_Param,Adjacent_Ret)).
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).

% predicate Equal(object,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1984
predicate(equal(Equal_Param,Equal_Ret)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% fluent At(object,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1986
fluent(at(At_Param,Location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% event Move(object,location,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1987
event(move(Move_Param,_,Move_Ret)).
==> mpred_prop(move(object,location,location),event).
==> meta_argtypes(move(object,location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1988
%; Sigma
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1991
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          initiates(move(Object, Location1, Location2),
                    at(Object, Location2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1993
axiom(initiates(move(Object, Location1, Location2), at(Object, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1995
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          terminates(move(Object, Location1, Location2),
                     at(Object, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1998
axiom(terminates(move(Object, Location1, Location2), at(Object, Location1), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2000
%; Psi
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2003
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.

 /*  allDifferent([Object, Location1, Time, Location2]) ->
       ( holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->Location1=Location2
       ).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location2), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */

 /*  [holds_at(at(Object, Location2), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2005
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location1), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */

 /*  [holds_at(at(Object, Location1), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2007
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2008
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
    holds_at(at(Object,Location),Time)).
 */

 /*  holds_at(at(Object, Location), Time) :-
       some(Location, '$kolem_Fn_336'(Object, Time)).
 */

 /*  [some(Location, '$kolem_Fn_336'(Object, Time))] ->
       ta(Time, holds_at(at(Object, Location), Time)).
 */
axiom(holds_at(at(Object, Location), Time),
    [some(Location, '$kolem_Fn_336'(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2010
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).

 /*  allDifferent([Object1, Location, Time, Object2]) ->
       ( holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time)->equal(Object1, Object2)
       ).
 */

 /*  equal(Object1, Object2) :-
       ( holds_at(at(Object1, Location), Time),
         holds_at(at(Object2, Location), Time)
       ),
       allDifferent([Object1, Location, Time, Object2]).
 */

 /*  [holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time), allDifferent([Object1, Location, Time, Object2])] ->
       ta(Time, equal(Object1, Object2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2013
axiom(equal(Object1, Object2),
   
    [ holds_at(at(Object1, Location), Time),
      holds_at(at(Object2, Location), Time),
      allDifferent([Object1, Location, Time, Object2])
    ]).

 /*  not(holds_at(at(Object1, Location), Time)) :-
       holds_at(at(Object2, Location), Time),
       not(equal(Object1, Object2)),
       allDifferent([Object1, Location, Time, Object2]).
 */

 /*  [holds_at(at(Object2, Location), Time), not(equal(Object1, Object2)), allDifferent([Object1, Location, Time, Object2])] ->
       ta(Time, holds_at(neg(at(Object1, Location)), Time)).
 */
axiom(holds_at(neg(at(Object1, Location)), Time),
   
    [ holds_at(at(Object2, Location), Time),
      not(equal(Object1, Object2)),
      allDifferent([Object1, Location, Time, Object2])
    ]).

 /*  not(holds_at(at(Object2, Location), Time)) :-
       holds_at(at(Object1, Location), Time),
       not(equal(Object1, Object2)),
       allDifferent([Object1, Location, Time, Object2]).
 */

 /*  [holds_at(at(Object1, Location), Time), not(equal(Object1, Object2)), allDifferent([Object1, Location, Time, Object2])] ->
       ta(Time, holds_at(neg(at(Object2, Location)), Time)).
 */
axiom(holds_at(neg(at(Object2, Location)), Time),
   
    [ holds_at(at(Object1, Location), Time),
      not(equal(Object1, Object2)),
      allDifferent([Object1, Location, Time, Object2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2015
% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */

 /*  [adjacent] <->
       [adjacent].
 */

 /*  allDifferent([Location1, Location2]) ->
       ( adjacent(Location1, Location2)->adjacent(Location2, Location1)
       ).
 */

 /*  adjacent(Location2, Location1) :-
       adjacent(Location1, Location2),
       allDifferent([Location1, Location2]).
 */

 /*  [adjacent(Location1, Location2), allDifferent([Location1, Location2])] ->
       ta(Ta_Param, adjacent(Location2, Location1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2017
axiom(adjacent(Location2, Location1),
   
    [ adjacent(Location1, Location2),
      allDifferent([Location1, Location2])
    ]).

 /*  not(adjacent(Location1, Location2)) :-
       not(adjacent(Location2, Location1)),
       allDifferent([Location1, Location2]).
 */

 /*  [not(adjacent(Location2, Location1)), allDifferent([Location1, Location2])] ->
       ta(Ta_Param3, not(adjacent(Location1, Location2))).
 */
axiom(not(adjacent(Location1, Location2)),
   
    [ not(adjacent(Location2, Location1)),
      allDifferent([Location1, Location2])
    ]).

 /*  allDifferent([Location2, Location1]) ->
       ( adjacent(Location2, Location1)->adjacent(Location1, Location2)
       ).
 */

 /*  adjacent(Location1, Location2) :-
       adjacent(Location2, Location1),
       allDifferent([Location2, Location1]).
 */

 /*  [adjacent(Location2, Location1), allDifferent([Location2, Location1])] ->
       ta(Ta_Param4, adjacent(Location1, Location2)).
 */
axiom(adjacent(Location1, Location2),
   
    [ adjacent(Location2, Location1),
      allDifferent([Location2, Location1])
    ]).

 /*  not(adjacent(Location2, Location1)) :-
       not(adjacent(Location1, Location2)),
       allDifferent([Location2, Location1]).
 */

 /*  [not(adjacent(Location1, Location2)), allDifferent([Location2, Location1])] ->
       ta(Ta_Param5, not(adjacent(Location2, Location1))).
 */
axiom(not(adjacent(Location2, Location1)),
   
    [ not(adjacent(Location1, Location2)),
      allDifferent([Location2, Location1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2019
% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */

 /*  [equal] <->
       [equal].
 */

 /*  allDifferent([Object1, Object2]) ->
       ( equal(Object1, Object2)->equal(Object2, Object1)
       ).
 */

 /*  equal(Object2, Object1) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2])] ->
       ta(Ta_Param, equal(Object2, Object1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2021
axiom(equal(Object2, Object1),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2])
    ]).

 /*  not(equal(Object1, Object2)) :-
       not(equal(Object2, Object1)),
       allDifferent([Object1, Object2]).
 */

 /*  [not(equal(Object2, Object1)), allDifferent([Object1, Object2])] ->
       ta(Ta_Param3, not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [ not(equal(Object2, Object1)),
      allDifferent([Object1, Object2])
    ]).

 /*  allDifferent([Object2, Object1]) ->
       ( equal(Object2, Object1)->equal(Object1, Object2)
       ).
 */

 /*  equal(Object1, Object2) :-
       equal(Object2, Object1),
       allDifferent([Object2, Object1]).
 */

 /*  [equal(Object2, Object1), allDifferent([Object2, Object1])] ->
       ta(Ta_Param4, equal(Object1, Object2)).
 */
axiom(equal(Object1, Object2),
   
    [ equal(Object2, Object1),
      allDifferent([Object2, Object1])
    ]).

 /*  not(equal(Object2, Object1)) :-
       not(equal(Object1, Object2)),
       allDifferent([Object2, Object1]).
 */

 /*  [not(equal(Object1, Object2)), allDifferent([Object2, Object1])] ->
       ta(Ta_Param5, not(equal(Object2, Object1))).
 */
axiom(not(equal(Object2, Object1)),
   
    [ not(equal(Object1, Object2)),
      allDifferent([Object2, Object1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2023
%; Gamma
% [location1,location2]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2026
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2) |
% (location1=L3 & location2=L4) |
% (location1=L4 & location2=L3) |
% (location1=L4 & location2=L5) |
% (location1=L5 & location2=L4).

 /*  adjacent(Location1, Location2) <->
       (   Location1=l1,
           Location2=l2
       ;   Location1=l2,
           Location2=l1
       ;   Location1=l2,
           Location2=l3
       ;   Location1=l3,
           Location2=l2
       ;   Location1=l3,
           Location2=l4
       ;   Location1=l4,
           Location2=l3
       ;   Location1=l4,
           Location2=l5
       ;   Location1=l5,
           Location2=l4
       ).
 */

 /*  [adjacent] <->
       
       [  (;),
          (=),
         l1,
          (=),
         l2,
          (;),
          (=),
         l2,
          (=),
         l1,
          (;),
          (=),
         l2,
          (=),
         l3,
          (;),
          (=),
         l3,
          (=),
         l2,
          (;),
          (=),
         l3,
          (=),
         l4,
          (;),
          (=),
         l4,
          (=),
         l3,
          (;),
          (=),
         l4,
          (=),
         l5,
          (=),
         l5,
          (=),
         l4
       ].
 */

 /*  allDifferent([Location1, Location2]) ->
       ( adjacent(Location1, Location2)->Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2;Location1=l3, Location2=l4;Location1=l4, Location2=l3;Location1=l4, Location2=l5;Location1=l5, Location2=l4
       ).
 */

 /*  not(adjacent(Location1, Location2)) :-
       ( (   not(equals(Location1, l1))
         ;   not(equals(Location2, l2))
         ),
         (   not(equals(Location1, l2))
         ;   not(equals(Location2, l1))
         ),
         (   not(equals(Location1, l2))
         ;   not(equals(Location2, l3))
         ),
         (   not(equals(Location1, l3))
         ;   not(equals(Location2, l2))
         ),
         (   not(equals(Location1, l3))
         ;   not(equals(Location2, l4))
         ),
         (   not(equals(Location1, l4))
         ;   not(equals(Location2, l3))
         ),
         (   not(equals(Location1, l4))
         ;   not(equals(Location2, l5))
         ),
         (   not(equals(Location1, l5))
         ;   not(equals(Location2, l4))
         )
       ),
       allDifferent([Location1, Location2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l1))
       ;   not(equals(Location2, l2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l1))
       ;   not(call(Location2=l2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l1))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l2))
       ;   not(call(Location2=l1))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l2))
       ;   not(call(Location2=l3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l3))
       ;   not(equals(Location2, l2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l3))
       ;   not(call(Location2=l2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l3))
       ;   not(equals(Location2, l4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l3))
       ;   not(call(Location2=l4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l4))
       ;   not(equals(Location2, l3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l4))
       ;   not(call(Location2=l3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l4))
       ;   not(equals(Location2, l5))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l4))
       ;   not(call(Location2=l5))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l5))
       ;   not(equals(Location2, l4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l5))
       ;   not(call(Location2=l4))
       ).
 */

 /*  [(not(call(Location1=l1));not(call(Location2=l2))),  (not(call(Location1=l2));not(call(Location2=l1))),  (not(call(Location1=l2));not(call(Location2=l3))),  (not(call(Location1=l3));not(call(Location2=l2))),  (not(call(Location1=l3));not(call(Location2=l4))),  (not(call(Location1=l4));not(call(Location2=l3))),  (not(call(Location1=l4));not(call(Location2=l5))),  (not(call(Location1=l5));not(call(Location2=l4))), allDifferent([Location1, Location2])] ->
       ta(Axiom_head_Ret, not(adjacent(Location1, Location2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2034
axiom(not(adjacent(Location1, Location2)),
   
    [  (not(call(Location1=l1));not(call(Location2=l2))),
       (not(call(Location1=l2));not(call(Location2=l1))),
       (not(call(Location1=l2));not(call(Location2=l3))),
       (not(call(Location1=l3));not(call(Location2=l2))),
       (not(call(Location1=l3));not(call(Location2=l4))),
       (not(call(Location1=l4));not(call(Location2=l3))),
       (not(call(Location1=l4));not(call(Location2=l5))),
       (not(call(Location1=l5));not(call(Location2=l4))),
      allDifferent([Location1, Location2])
    ]).

 /*  allDifferent([Location1, Location2]) ->
       ( Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2;Location1=l3, Location2=l4;Location1=l4, Location2=l3;Location1=l4, Location2=l5;Location1=l5, Location2=l4->adjacent(Location1, Location2)
       ).
 */

 /*  adjacent(Location1, Location2) :-
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ;   equals(Location1, l3),
           equals(Location2, l4)
       ;   equals(Location1, l4),
           equals(Location2, l3)
       ;   equals(Location1, l4),
           equals(Location2, l5)
       ;   equals(Location1, l5),
           equals(Location2, l4)
       ),
       allDifferent([Location1, Location2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ;   equals(Location1, l3),
           equals(Location2, l4)
       ;   equals(Location1, l4),
           equals(Location2, l3)
       ;   equals(Location1, l4),
           equals(Location2, l5)
       ;   equals(Location1, l5),
           equals(Location2, l4)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Location1=l1),
           call(Location2=l2)
       ;   call(Location1=l2),
           call(Location2=l1)
       ;   call(Location1=l2),
           call(Location2=l3)
       ;   call(Location1=l3),
           call(Location2=l2)
       ;   call(Location1=l3),
           call(Location2=l4)
       ;   call(Location1=l4),
           call(Location2=l3)
       ;   call(Location1=l4),
           call(Location2=l5)
       ;   call(Location1=l5),
           call(Location2=l4)
       ).
 */

 /*  [(call(Location1=l1), call(Location2=l2);call(Location1=l2), call(Location2=l1);call(Location1=l2), call(Location2=l3);call(Location1=l3), call(Location2=l2);call(Location1=l3), call(Location2=l4);call(Location1=l4), call(Location2=l3);call(Location1=l4), call(Location2=l5);call(Location1=l5), call(Location2=l4)), allDifferent([Location1, Location2])] ->
       ta(Axiom_head_Ret3, adjacent(Location1, Location2)).
 */
axiom(adjacent(Location1, Location2),
   
    [  (call(Location1=l1), call(Location2=l2);call(Location1=l2), call(Location2=l1);call(Location1=l2), call(Location2=l3);call(Location1=l3), call(Location2=l2);call(Location1=l3), call(Location2=l4);call(Location1=l4), call(Location2=l3);call(Location1=l4), call(Location2=l5);call(Location1=l5), call(Location2=l4)),
      allDifferent([Location1, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2036
% HoldsAt(At(O1,L1),0).

 /*  [] ->
       ta(Ta_Param, initially(at(o1, l1))).
 */
axiom(initially(at(o1, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2037
% [object]
 % !HoldsAt(At(object,L5),0).
 %  not(initially(at(Object,l5))).

 /*  [] ->
       ta(Ta_Param, not(initially(at(Object, l5)))).
 */
axiom(not(initially(at(Object, l5))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2039
% HoldsAt(At(O2,L5),4).
holds_at(at(o2,l5),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2040
% [object]
 % !HoldsAt(At(object,L1),4).
holds_at(neg(at(Object,l1)),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2042
% [object,time]
 % !HoldsAt(At(object,L3),time).
holds_at(neg(at(Object,l3)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2044
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).

 /*  allDifferent([Object, Location1, Location2, Time]) ->
       ( happens(move(Object, Location1, Location2), Time)->holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)
       ).
 */

 /*  not(happens(move(Object, Location1, Location2), Time)) :-
       (   not(holds_at(at(Object, Location1), Time))
       ;   not(adjacent(Location1, Location2))
       ),
       allDifferent([Object, Location1, Location2, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(at(Object, Location1), Time))
       ;   not(adjacent(Location1, Location2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(at(Object, Location1)), Time)
       ;   not(adjacent(Location1, Location2))
       ).
 */

 /*  [(holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2))), allDifferent([Object, Location1, Location2, Time])] ->
       ta(Time,
          not(happens(move(Object, Location1, Location2),
                      Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2048
axiom(not(happens(move(Object, Location1, Location2), Time)),
   
    [  (holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2))),
      allDifferent([Object, Location1, Location2, Time])
    ]).

 /*  holds_at(at(Object, Location1), Time) :-
       happens(move(Object, Location1, Location2), Time),
       allDifferent([Object, Location1, Location2, Time]).
 */

 /*  [happens(move(Object, Location1, Location2), Time), allDifferent([Object, Location1, Location2, Time])] ->
       ta(Time, holds_at(at(Object, Location1), Time)).
 */
axiom(holds_at(at(Object, Location1), Time),
   
    [ happens(move(Object, Location1, Location2), Time),
      allDifferent([Object, Location1, Location2, Time])
    ]).

 /*  adjacent(Location1, Location2) :-
       happens(move(Object, Location1, Location2), Time),
       allDifferent([Object, Location1, Location2, Time]).
 */

 /*  [happens(move(Object, Location1, Location2), Time), allDifferent([Object, Location1, Location2, Time])] ->
       ta(Time, adjacent(Location1, Location2)).
 */
axiom(adjacent(Location1, Location2),
   
    [ happens(move(Object, Location1, Location2), Time),
      allDifferent([Object, Location1, Location2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2050
% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).

 /*  allDifferent([Object1, Object2, Location1, Location2, Time]) ->
       ( equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time)->happens(move(Object2, Location1, Location2), Time)
       ).
 */

 /*  happens(move(Object2, Location1, Location2), Time) :-
       ( equal(Object1, Object2),
         happens(move(Object1, Location1, Location2), Time)
       ),
       allDifferent(
                    [ Object1,
                      Object2,
                      Location1,
                      Location2,
                      Time
                    ]).
 */

 /*  [equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time), allDifferent([Object1, Object2, Location1, Location2, Time])] ->
       ta(Time,
          happens(move(Object2, Location1, Location2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2053
axiom(happens(move(Object2, Location1, Location2), Time),
   
    [ equal(Object1, Object2),
      happens(move(Object1, Location1, Location2), Time),
      allDifferent(
                   [ Object1,
                     Object2,
                     Location1,
                     Location2,
                     Time
                   ])
    ]).

 /*  not(equal(Object1, Object2)) :-
       happens(move(Object1, Location1, Location2), Time),
       not(happens(move(Object2, Location1, Location2),
                   Time)),
       allDifferent(
                    [ Object1,
                      Object2,
                      Location1,
                      Location2,
                      Time
                    ]).
 */

 /*  [happens(move(Object1, Location1, Location2), Time), not(happens(move(Object2, Location1, Location2), Time)), allDifferent([Object1, Object2, Location1, Location2, Time])] ->
       ta(Time, not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [ happens(move(Object1, Location1, Location2), Time),
      not(happens(move(Object2, Location1, Location2),
                  Time)),
      allDifferent(
                   [ Object1,
                     Object2,
                     Location1,
                     Location2,
                     Time
                   ])
    ]).

 /*  not(happens(move(Object1, Location1, Location2), Time)) :-
       equal(Object1, Object2),
       not(happens(move(Object2, Location1, Location2),
                   Time)),
       allDifferent(
                    [ Object1,
                      Object2,
                      Location1,
                      Location2,
                      Time
                    ]).
 */

 /*  [equal(Object1, Object2), not(happens(move(Object2, Location1, Location2), Time)), allDifferent([Object1, Object2, Location1, Location2, Time])] ->
       ta(Time,
          not(happens(move(Object1, Location1, Location2),
                      Time))).
 */
axiom(not(happens(move(Object1, Location1, Location2), Time)),
   
    [ equal(Object1, Object2),
      not(happens(move(Object2, Location1, Location2),
                  Time)),
      allDifferent(
                   [ Object1,
                     Object2,
                     Location1,
                     Location2,
                     Time
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2055
%; entailed: !Equal(O1,O2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2057
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2058
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2059
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2094
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2095
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2096
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2098
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2099
==> sort(location).

% object O1, O2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2101
==> t(object,o1).
==> t(object,o2).

% location L1, L2, L3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2102
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% predicate Adjacent(location,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2104
predicate(adjacent(Adjacent_Param,Adjacent_Ret)).
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).

% predicate Equal(object,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2105
predicate(equal(Equal_Param,Equal_Ret)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% fluent At(object,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2107
fluent(at(At_Param,Location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% event Move(object,location,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2108
event(move(Move_Param,_,Move_Ret)).
==> mpred_prop(move(object,location,location),event).
==> meta_argtypes(move(object,location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2109
%; Sigma
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2112
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          initiates(move(Object, Location1, Location2),
                    at(Object, Location2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2114
axiom(initiates(move(Object, Location1, Location2), at(Object, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2116
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          terminates(move(Object, Location1, Location2),
                     at(Object, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2119
axiom(terminates(move(Object, Location1, Location2), at(Object, Location1), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2121
%; Psi
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2124
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.

 /*  allDifferent([Object, Location1, Time, Location2]) ->
       ( holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->Location1=Location2
       ).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location2), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */

 /*  [holds_at(at(Object, Location2), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2126
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location1), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */

 /*  [holds_at(at(Object, Location1), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2128
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2129
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
    holds_at(at(Object,Location),Time)).
 */

 /*  holds_at(at(Object, Location), Time) :-
       some(Location, '$kolem_Fn_337'(Object, Time)).
 */

 /*  [some(Location, '$kolem_Fn_337'(Object, Time))] ->
       ta(Time, holds_at(at(Object, Location), Time)).
 */
axiom(holds_at(at(Object, Location), Time),
    [some(Location, '$kolem_Fn_337'(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2131
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).

 /*  allDifferent([Object1, Location, Time, Object2]) ->
       ( holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time)->equal(Object1, Object2)
       ).
 */

 /*  equal(Object1, Object2) :-
       ( holds_at(at(Object1, Location), Time),
         holds_at(at(Object2, Location), Time)
       ),
       allDifferent([Object1, Location, Time, Object2]).
 */

 /*  [holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time), allDifferent([Object1, Location, Time, Object2])] ->
       ta(Time, equal(Object1, Object2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2134
axiom(equal(Object1, Object2),
   
    [ holds_at(at(Object1, Location), Time),
      holds_at(at(Object2, Location), Time),
      allDifferent([Object1, Location, Time, Object2])
    ]).

 /*  not(holds_at(at(Object1, Location), Time)) :-
       holds_at(at(Object2, Location), Time),
       not(equal(Object1, Object2)),
       allDifferent([Object1, Location, Time, Object2]).
 */

 /*  [holds_at(at(Object2, Location), Time), not(equal(Object1, Object2)), allDifferent([Object1, Location, Time, Object2])] ->
       ta(Time, holds_at(neg(at(Object1, Location)), Time)).
 */
axiom(holds_at(neg(at(Object1, Location)), Time),
   
    [ holds_at(at(Object2, Location), Time),
      not(equal(Object1, Object2)),
      allDifferent([Object1, Location, Time, Object2])
    ]).

 /*  not(holds_at(at(Object2, Location), Time)) :-
       holds_at(at(Object1, Location), Time),
       not(equal(Object1, Object2)),
       allDifferent([Object1, Location, Time, Object2]).
 */

 /*  [holds_at(at(Object1, Location), Time), not(equal(Object1, Object2)), allDifferent([Object1, Location, Time, Object2])] ->
       ta(Time, holds_at(neg(at(Object2, Location)), Time)).
 */
axiom(holds_at(neg(at(Object2, Location)), Time),
   
    [ holds_at(at(Object1, Location), Time),
      not(equal(Object1, Object2)),
      allDifferent([Object1, Location, Time, Object2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2136
% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */

 /*  [adjacent] <->
       [adjacent].
 */

 /*  allDifferent([Location1, Location2]) ->
       ( adjacent(Location1, Location2)->adjacent(Location2, Location1)
       ).
 */

 /*  adjacent(Location2, Location1) :-
       adjacent(Location1, Location2),
       allDifferent([Location1, Location2]).
 */

 /*  [adjacent(Location1, Location2), allDifferent([Location1, Location2])] ->
       ta(Ta_Param, adjacent(Location2, Location1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2138
axiom(adjacent(Location2, Location1),
   
    [ adjacent(Location1, Location2),
      allDifferent([Location1, Location2])
    ]).

 /*  not(adjacent(Location1, Location2)) :-
       not(adjacent(Location2, Location1)),
       allDifferent([Location1, Location2]).
 */

 /*  [not(adjacent(Location2, Location1)), allDifferent([Location1, Location2])] ->
       ta(Ta_Param3, not(adjacent(Location1, Location2))).
 */
axiom(not(adjacent(Location1, Location2)),
   
    [ not(adjacent(Location2, Location1)),
      allDifferent([Location1, Location2])
    ]).

 /*  allDifferent([Location2, Location1]) ->
       ( adjacent(Location2, Location1)->adjacent(Location1, Location2)
       ).
 */

 /*  adjacent(Location1, Location2) :-
       adjacent(Location2, Location1),
       allDifferent([Location2, Location1]).
 */

 /*  [adjacent(Location2, Location1), allDifferent([Location2, Location1])] ->
       ta(Ta_Param4, adjacent(Location1, Location2)).
 */
axiom(adjacent(Location1, Location2),
   
    [ adjacent(Location2, Location1),
      allDifferent([Location2, Location1])
    ]).

 /*  not(adjacent(Location2, Location1)) :-
       not(adjacent(Location1, Location2)),
       allDifferent([Location2, Location1]).
 */

 /*  [not(adjacent(Location1, Location2)), allDifferent([Location2, Location1])] ->
       ta(Ta_Param5, not(adjacent(Location2, Location1))).
 */
axiom(not(adjacent(Location2, Location1)),
   
    [ not(adjacent(Location1, Location2)),
      allDifferent([Location2, Location1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2140
% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */

 /*  [equal] <->
       [equal].
 */

 /*  allDifferent([Object1, Object2]) ->
       ( equal(Object1, Object2)->equal(Object2, Object1)
       ).
 */

 /*  equal(Object2, Object1) :-
       equal(Object1, Object2),
       allDifferent([Object1, Object2]).
 */

 /*  [equal(Object1, Object2), allDifferent([Object1, Object2])] ->
       ta(Ta_Param, equal(Object2, Object1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2142
axiom(equal(Object2, Object1),
   
    [ equal(Object1, Object2),
      allDifferent([Object1, Object2])
    ]).

 /*  not(equal(Object1, Object2)) :-
       not(equal(Object2, Object1)),
       allDifferent([Object1, Object2]).
 */

 /*  [not(equal(Object2, Object1)), allDifferent([Object1, Object2])] ->
       ta(Ta_Param3, not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [ not(equal(Object2, Object1)),
      allDifferent([Object1, Object2])
    ]).

 /*  allDifferent([Object2, Object1]) ->
       ( equal(Object2, Object1)->equal(Object1, Object2)
       ).
 */

 /*  equal(Object1, Object2) :-
       equal(Object2, Object1),
       allDifferent([Object2, Object1]).
 */

 /*  [equal(Object2, Object1), allDifferent([Object2, Object1])] ->
       ta(Ta_Param4, equal(Object1, Object2)).
 */
axiom(equal(Object1, Object2),
   
    [ equal(Object2, Object1),
      allDifferent([Object2, Object1])
    ]).

 /*  not(equal(Object2, Object1)) :-
       not(equal(Object1, Object2)),
       allDifferent([Object2, Object1]).
 */

 /*  [not(equal(Object1, Object2)), allDifferent([Object2, Object1])] ->
       ta(Ta_Param5, not(equal(Object2, Object1))).
 */
axiom(not(equal(Object2, Object1)),
   
    [ not(equal(Object1, Object2)),
      allDifferent([Object2, Object1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2144
%; Gamma
% [location1,location2]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2147
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2).

 /*  adjacent(Location1, Location2) <->
       (   Location1=l1,
           Location2=l2
       ;   Location1=l2,
           Location2=l1
       ;   Location1=l2,
           Location2=l3
       ;   Location1=l3,
           Location2=l2
       ).
 */

 /*  [adjacent] <->
       [;, =, l1, =, l2, ;, =, l2, =, l1, ;, =, l2, =, l3, =, l3, =, l2].
 */

 /*  allDifferent([Location1, Location2]) ->
       ( adjacent(Location1, Location2)->Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2
       ).
 */

 /*  not(adjacent(Location1, Location2)) :-
       ( (   not(equals(Location1, l1))
         ;   not(equals(Location2, l2))
         ),
         (   not(equals(Location1, l2))
         ;   not(equals(Location2, l1))
         ),
         (   not(equals(Location1, l2))
         ;   not(equals(Location2, l3))
         ),
         (   not(equals(Location1, l3))
         ;   not(equals(Location2, l2))
         )
       ),
       allDifferent([Location1, Location2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l1))
       ;   not(equals(Location2, l2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l1))
       ;   not(call(Location2=l2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l1))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l2))
       ;   not(call(Location2=l1))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l2))
       ;   not(call(Location2=l3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Location1, l3))
       ;   not(equals(Location2, l2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Location1=l3))
       ;   not(call(Location2=l2))
       ).
 */

 /*  [(not(call(Location1=l1));not(call(Location2=l2))),  (not(call(Location1=l2));not(call(Location2=l1))),  (not(call(Location1=l2));not(call(Location2=l3))),  (not(call(Location1=l3));not(call(Location2=l2))), allDifferent([Location1, Location2])] ->
       ta(Axiom_head_Ret, not(adjacent(Location1, Location2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2151
axiom(not(adjacent(Location1, Location2)),
   
    [  (not(call(Location1=l1));not(call(Location2=l2))),
       (not(call(Location1=l2));not(call(Location2=l1))),
       (not(call(Location1=l2));not(call(Location2=l3))),
       (not(call(Location1=l3));not(call(Location2=l2))),
      allDifferent([Location1, Location2])
    ]).

 /*  allDifferent([Location1, Location2]) ->
       ( Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2->adjacent(Location1, Location2)
       ).
 */

 /*  adjacent(Location1, Location2) :-
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ),
       allDifferent([Location1, Location2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Location1=l1),
           call(Location2=l2)
       ;   call(Location1=l2),
           call(Location2=l1)
       ;   call(Location1=l2),
           call(Location2=l3)
       ;   call(Location1=l3),
           call(Location2=l2)
       ).
 */

 /*  [(call(Location1=l1), call(Location2=l2);call(Location1=l2), call(Location2=l1);call(Location1=l2), call(Location2=l3);call(Location1=l3), call(Location2=l2)), allDifferent([Location1, Location2])] ->
       ta(Axiom_head_Ret3, adjacent(Location1, Location2)).
 */
axiom(adjacent(Location1, Location2),
   
    [  (call(Location1=l1), call(Location2=l2);call(Location1=l2), call(Location2=l1);call(Location1=l2), call(Location2=l3);call(Location1=l3), call(Location2=l2)),
      allDifferent([Location1, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2153
% HoldsAt(At(O1,L1),0).

 /*  [] ->
       ta(Ta_Param, initially(at(o1, l1))).
 */
axiom(initially(at(o1, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2154
% [object]
 % !HoldsAt(At(object,L3),0).
 %  not(initially(at(Object,l3))).

 /*  [] ->
       ta(Ta_Param, not(initially(at(Object, l3)))).
 */
axiom(not(initially(at(Object, l3))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2156
% [object]
 % !HoldsAt(At(object,L1),1).
holds_at(neg(at(Object,l1)),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2157
% [object]
 % !HoldsAt(At(object,L3),1).
holds_at(neg(at(Object,l3)),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2159
% HoldsAt(At(O2,L3),2).
holds_at(at(o2,l3),2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2160
% [object]
 % !HoldsAt(At(object,L1),2).
holds_at(neg(at(Object,l1)),2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2162
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).

 /*  allDifferent([Object, Location1, Location2, Time]) ->
       ( happens(move(Object, Location1, Location2), Time)->holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)
       ).
 */

 /*  not(happens(move(Object, Location1, Location2), Time)) :-
       (   not(holds_at(at(Object, Location1), Time))
       ;   not(adjacent(Location1, Location2))
       ),
       allDifferent([Object, Location1, Location2, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(at(Object, Location1), Time))
       ;   not(adjacent(Location1, Location2))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(at(Object, Location1)), Time)
       ;   not(adjacent(Location1, Location2))
       ).
 */

 /*  [(holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2))), allDifferent([Object, Location1, Location2, Time])] ->
       ta(Time,
          not(happens(move(Object, Location1, Location2),
                      Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2166
axiom(not(happens(move(Object, Location1, Location2), Time)),
   
    [  (holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2))),
      allDifferent([Object, Location1, Location2, Time])
    ]).

 /*  holds_at(at(Object, Location1), Time) :-
       happens(move(Object, Location1, Location2), Time),
       allDifferent([Object, Location1, Location2, Time]).
 */

 /*  [happens(move(Object, Location1, Location2), Time), allDifferent([Object, Location1, Location2, Time])] ->
       ta(Time, holds_at(at(Object, Location1), Time)).
 */
axiom(holds_at(at(Object, Location1), Time),
   
    [ happens(move(Object, Location1, Location2), Time),
      allDifferent([Object, Location1, Location2, Time])
    ]).

 /*  adjacent(Location1, Location2) :-
       happens(move(Object, Location1, Location2), Time),
       allDifferent([Object, Location1, Location2, Time]).
 */

 /*  [happens(move(Object, Location1, Location2), Time), allDifferent([Object, Location1, Location2, Time])] ->
       ta(Time, adjacent(Location1, Location2)).
 */
axiom(adjacent(Location1, Location2),
   
    [ happens(move(Object, Location1, Location2), Time),
      allDifferent([Object, Location1, Location2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2168
% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).

 /*  allDifferent([Object1, Object2, Location1, Location2, Time]) ->
       ( equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time)->happens(move(Object2, Location1, Location2), Time)
       ).
 */

 /*  happens(move(Object2, Location1, Location2), Time) :-
       ( equal(Object1, Object2),
         happens(move(Object1, Location1, Location2), Time)
       ),
       allDifferent(
                    [ Object1,
                      Object2,
                      Location1,
                      Location2,
                      Time
                    ]).
 */

 /*  [equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time), allDifferent([Object1, Object2, Location1, Location2, Time])] ->
       ta(Time,
          happens(move(Object2, Location1, Location2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2171
axiom(happens(move(Object2, Location1, Location2), Time),
   
    [ equal(Object1, Object2),
      happens(move(Object1, Location1, Location2), Time),
      allDifferent(
                   [ Object1,
                     Object2,
                     Location1,
                     Location2,
                     Time
                   ])
    ]).

 /*  not(equal(Object1, Object2)) :-
       happens(move(Object1, Location1, Location2), Time),
       not(happens(move(Object2, Location1, Location2),
                   Time)),
       allDifferent(
                    [ Object1,
                      Object2,
                      Location1,
                      Location2,
                      Time
                    ]).
 */

 /*  [happens(move(Object1, Location1, Location2), Time), not(happens(move(Object2, Location1, Location2), Time)), allDifferent([Object1, Object2, Location1, Location2, Time])] ->
       ta(Time, not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [ happens(move(Object1, Location1, Location2), Time),
      not(happens(move(Object2, Location1, Location2),
                  Time)),
      allDifferent(
                   [ Object1,
                     Object2,
                     Location1,
                     Location2,
                     Time
                   ])
    ]).

 /*  not(happens(move(Object1, Location1, Location2), Time)) :-
       equal(Object1, Object2),
       not(happens(move(Object2, Location1, Location2),
                   Time)),
       allDifferent(
                    [ Object1,
                      Object2,
                      Location1,
                      Location2,
                      Time
                    ]).
 */

 /*  [equal(Object1, Object2), not(happens(move(Object2, Location1, Location2), Time)), allDifferent([Object1, Object2, Location1, Location2, Time])] ->
       ta(Time,
          not(happens(move(Object1, Location1, Location2),
                      Time))).
 */
axiom(not(happens(move(Object1, Location1, Location2), Time)),
   
    [ equal(Object1, Object2),
      not(happens(move(Object2, Location1, Location2),
                  Time)),
      allDifferent(
                   [ Object1,
                     Object2,
                     Location1,
                     Location2,
                     Time
                   ])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2173
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2174
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2175
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RunningAndDriving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2202
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2203
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2204
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2206
==> sort(agent).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2207
==> sort(location).

% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2209
==> t(agent,james).

% location Bookstore
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2210
==> t(location,bookstore).

% fluent Tired(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2212
fluent(tired(Tired_Ret)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% event Go(agent,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2214
event(go(Go_Param,Go_Ret)).
==> mpred_prop(go(agent,location),event).
==> meta_argtypes(go(agent,location)).

% event Run(agent,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2215
event(run(Run_Param,Run_Ret)).
==> mpred_prop(run(agent,location),event).
==> meta_argtypes(run(agent,location)).

% event Drive(agent,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2216
event(drive(Drive_Param,Drive_Ret)).
==> mpred_prop(drive(agent,location),event).
==> meta_argtypes(drive(agent,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2217
% [agent,location,time]
% Happens(Go(agent,location),time) ->
% Happens(Run(agent,location),time) | Happens(Drive(agent,location),time).

 /*  allDifferent([Agent, Location, Time]) ->
       ( happens(go(Agent, Location), Time)->happens(run(Agent, Location), Time);happens(drive(Agent, Location), Time)
       ).
 */

 /*  happens(run(Agent, Location), Time) :-
       not(happens(drive(Agent, Location), Time)),
       happens(go(Agent, Location), Time),
       allDifferent([Agent, Location, Time]).
 */

 /*  [not(happens(drive(Agent, Location), Time)), happens(go(Agent, Location), Time), allDifferent([Agent, Location, Time])] ->
       ta(Time, happens(run(Agent, Location), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2219
axiom(happens(run(Agent, Location), Time),
   
    [ not(happens(drive(Agent, Location), Time)),
      happens(go(Agent, Location), Time),
      allDifferent([Agent, Location, Time])
    ]).

 /*  happens(drive(Agent, Location), Time) :-
       not(happens(run(Agent, Location), Time)),
       happens(go(Agent, Location), Time),
       allDifferent([Agent, Location, Time]).
 */

 /*  [not(happens(run(Agent, Location), Time)), happens(go(Agent, Location), Time), allDifferent([Agent, Location, Time])] ->
       ta(Time, happens(drive(Agent, Location), Time)).
 */
axiom(happens(drive(Agent, Location), Time),
   
    [ not(happens(run(Agent, Location), Time)),
      happens(go(Agent, Location), Time),
      allDifferent([Agent, Location, Time])
    ]).

 /*  not(happens(go(Agent, Location), Time)) :-
       ( not(happens(run(Agent, Location), Time)),
         not(happens(drive(Agent, Location), Time))
       ),
       allDifferent([Agent, Location, Time]).
 */

 /*  [not(happens(run(Agent, Location), Time)), not(happens(drive(Agent, Location), Time)), allDifferent([Agent, Location, Time])] ->
       ta(Time, not(happens(go(Agent, Location), Time))).
 */
axiom(not(happens(go(Agent, Location), Time)),
   
    [ not(happens(run(Agent, Location), Time)),
      not(happens(drive(Agent, Location), Time)),
      allDifferent([Agent, Location, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2221
% xor Run, Drive
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2222
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2223
% [agent,location,time]
 % Initiates(Run(agent,location),Tired(agent),time).

 /*  [] ->
       ta(Time,
          initiates(run(Agent, Location),
                    tired(Agent),
                    Time)).
 */
axiom(initiates(run(Agent, Location), tired(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2225
% !HoldsAt(Tired(James),0).
 %  not(initially(tired(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(tired(james)))).
 */
axiom(not(initially(tired(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2226
% Happens(Go(James,Bookstore),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(go(james, bookstore), t)).
 */
axiom(happens(go(james, bookstore), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2227
% HoldsAt(Tired(James),1).
holds_at(tired(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2229
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2230
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2231
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2258
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2259
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2261
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2262
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort dealer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2264
==> sort(dealer).

% sort wheel
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2265
==> sort(wheel).

% sort value: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2266
==> subsort(value,integer).

% wheel Wheel1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2268
==> t(wheel,wheel1).

% dealer Dealer1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2269
==> t(dealer,dealer1).

% fluent WheelNumberDeterminer(wheel,value)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2271
fluent(wheelNumberDeterminer(WheelNumberDeterminer_Param,
			     WheelNumberDeterminer_Ret)).
==> mpred_prop(wheelNumberDeterminer(wheel,value),fluent).
==> meta_argtypes(wheelNumberDeterminer(wheel,value)).

% fluent WheelNumber(wheel,value)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2272
fluent(wheelNumber(WheelNumber_Param,WheelNumber_Ret)).
==> mpred_prop(wheelNumber(wheel,value),fluent).
==> meta_argtypes(wheelNumber(wheel,value)).

% noninertial WheelNumberDeterminer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2273
==> noninertial(wheelNumberDeterminer).

% event Spin(dealer,wheel)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2275
event(spin(Spin_Param,Spin_Ret)).
==> mpred_prop(spin(dealer,wheel),event).
==> meta_argtypes(spin(dealer,wheel)).

% event Reset(dealer,wheel)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2276
event(reset(Reset_Param,Reset_Ret)).
==> mpred_prop(reset(dealer,wheel),event).
==> meta_argtypes(reset(dealer,wheel)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2277
% [wheel,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2278
% {value}% HoldsAt(WheelNumberDeterminer(wheel,value),time).

 /*  exists([Value],
    holds_at(wheelNumberDeterminer(Wheel,Value),Time)).
 */

 /*  holds_at(wheelNumberDeterminer(Wheel, Value), Time) :-
       some(Value, '$kolem_Fn_338'(Wheel, Time)).
 */

 /*  [some(Value, '$kolem_Fn_338'(Wheel, Time))] ->
       ta(Time,
          holds_at(wheelNumberDeterminer(Wheel, Value), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2279
axiom(holds_at(wheelNumberDeterminer(Wheel, Value), Time),
    [some(Value, '$kolem_Fn_338'(Wheel, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2281
% [wheel,value1,value2,time]
% HoldsAt(WheelNumberDeterminer(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) ->
% value1=value2.

 /*  allDifferent([Wheel, Value1, Time, Value2]) ->
       ( holds_at(wheelNumberDeterminer(Wheel, Value1), Time), holds_at(wheelNumberDeterminer(Wheel, Value2), Time)->Value1=Value2
       ).
 */

 /*  not(holds_at(wheelNumberDeterminer(Wheel, Value1), Time)) :-
       holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value2), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumberDeterminer(Wheel, Value1)),
                   Time)).
 */

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value2), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumberDeterminer(Wheel, Value1)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2284
axiom(holds_at(neg(wheelNumberDeterminer(Wheel, Value1)), Time),
   
    [ holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).

 /*  not(holds_at(wheelNumberDeterminer(Wheel, Value2), Time)) :-
       holds_at(wheelNumberDeterminer(Wheel, Value1), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value1), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumberDeterminer(Wheel, Value2)),
                   Time)).
 */

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value1), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumberDeterminer(Wheel, Value2)),
                   Time)).
 */
axiom(holds_at(neg(wheelNumberDeterminer(Wheel, Value2)), Time),
   
    [ holds_at(wheelNumberDeterminer(Wheel, Value1), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2286
% [dealer,wheel,value,time]
% HoldsAt(WheelNumberDeterminer(wheel,value),time) ->
% Initiates(Spin(dealer,wheel),WheelNumber(wheel,value),time).

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value), Time)] ->
       ta(Time,
          initiates(spin(Dealer, Wheel),
                    wheelNumber(Wheel, Value),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2288
axiom(initiates(spin(Dealer, Wheel), wheelNumber(Wheel, Value), Time),
    [holds_at(wheelNumberDeterminer(Wheel, Value), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2290
% [dealer,wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(dealer,wheel),WheelNumber(wheel,value1),time).

 /*  [holds_at(wheelNumber(Wheel, Value1), Time), holds_at(wheelNumberDeterminer(Wheel, Value2), Time), diff(Value1, Value2)] ->
       ta(Time,
          terminates(spin(Dealer, Wheel),
                     wheelNumber(Wheel, Value1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2294
axiom(terminates(spin(Dealer, Wheel), wheelNumber(Wheel, Value1), Time),
   
    [ holds_at(wheelNumber(Wheel, Value1), Time),
      holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
      diff(Value1, Value2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2296
% [dealer,wheel,value,time]
% Terminates(Reset(dealer,wheel),WheelNumber(wheel,value),time).

 /*  [] ->
       ta(Time,
          terminates(reset(Dealer, Wheel),
                     wheelNumber(Wheel, Value),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2297
axiom(terminates(reset(Dealer, Wheel), wheelNumber(Wheel, Value), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2299
% [wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumber(wheel,value2),time) ->
% value1=value2.

 /*  allDifferent([Wheel, Value1, Time, Value2]) ->
       ( holds_at(wheelNumber(Wheel, Value1), Time), holds_at(wheelNumber(Wheel, Value2), Time)->Value1=Value2
       ).
 */

 /*  not(holds_at(wheelNumber(Wheel, Value1), Time)) :-
       holds_at(wheelNumber(Wheel, Value2), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelNumber(Wheel, Value2), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumber(Wheel, Value1)), Time)).
 */

 /*  [holds_at(wheelNumber(Wheel, Value2), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumber(Wheel, Value1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2302
axiom(holds_at(neg(wheelNumber(Wheel, Value1)), Time),
   
    [ holds_at(wheelNumber(Wheel, Value2), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).

 /*  not(holds_at(wheelNumber(Wheel, Value2), Time)) :-
       holds_at(wheelNumber(Wheel, Value1), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelNumber(Wheel, Value1), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumber(Wheel, Value2)), Time)).
 */

 /*  [holds_at(wheelNumber(Wheel, Value1), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelNumber(Wheel, Value2)), Time)).
 */
axiom(holds_at(neg(wheelNumber(Wheel, Value2)), Time),
   
    [ holds_at(wheelNumber(Wheel, Value1), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2304
% [value]
 % !HoldsAt(WheelNumber(Wheel1,value),0).
 %  not(initially(wheelNumber(wheel1,Value))).

 /*  [] ->
       ta(Ta_Param, not(initially(wheelNumber(wheel1, Value)))).
 */
axiom(not(initially(wheelNumber(wheel1, Value))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2306
% Happens(Spin(Dealer1,Wheel1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(spin(dealer1, wheel1), t)).
 */
axiom(happens(spin(dealer1, wheel1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2307
%;Happens(Reset(Dealer1,Wheel1),1).
%; added to prune models


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2310
% HoldsAt(WheelNumberDeterminer(Wheel1, 1),1).
holds_at(wheelNumberDeterminer(wheel1,1),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2312
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2313
==> completion(happens).

% range value 1 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2315
==> range(value,1,3).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2316
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2317
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2355
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2356
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2358
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2359
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2361
==> sort(agent).

% agent MusicStore, Jen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2362
==> t(agent,musicStore).
==> t(agent,jen).

% sort product
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2364
==> sort(product).

% product BritneyCD
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2365
==> t(product,britneyCD).

% sort f
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2367
==> sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2368
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% f DeliveredMusicStoreJenBritneyCD
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2369
==> t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2370
==> t(f,ePOSentJenMusicStore1).

% sort amount: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2372
==> subsort(amount,integer).

% fluent C(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2374
fluent(c(C_Param,_,C_Ret)).
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2375
fluent(cc(Cc_Param,_,_,Cc_Ret)).
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% event CreateC(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2377
event(createC(CreateC_Param,_,CreateC_Ret)).
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2378
event(createCC(CreateCC_Param,_,_,CreateCC_Ret)).
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% event DischargeC(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2379
event(dischargeC(DischargeC_Param,_,DischargeC_Ret)).
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2380
event(dischargeCC(DischargeCC_Param,
		  _,
		  _,
		  DischargeCC_Ret)).
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% fluent QuoteSent(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2382
fluent(quoteSent(QuoteSent_Param,
		 _,
		 _,
		 QuoteSent_Ret)).
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2383
fluent(purchaseRequested(PurchaseRequested_Param,
			 _,
			 _,
			 PurchaseRequested_Ret)).
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% fluent Delivered(agent,agent,product)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2384
fluent(delivered(Delivered_Param,_,Delivered_Ret)).
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2385
fluent(ePOSent(EPOSent_Param,_,EPOSent_Ret)).
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% event SendQuote(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2387
event(sendQuote(SendQuote_Param,
		_,
		_,
		SendQuote_Ret)).
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2388
event(requestPurchase(RequestPurchase_Param,
		      _,
		      _,
		      RequestPurchase_Ret)).
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% event Deliver(agent,agent,product)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2389
event(deliver(Deliver_Param,_,Deliver_Ret)).
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2390
event(sendEPO(SendEPO_Param,_,SendEPO_Ret)).
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2391
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2394
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          initiates(createC(Agent1, Agent2, F),
                    c(Agent1, Agent2, F),
                    Time)).
 */
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2396
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).

 /*  [] ->
       ta(Time,
          initiates(createCC(Agent1, Agent2, F1, F2),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2397
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2399
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          terminates(dischargeC(Agent1, Agent2, F),
                     c(Agent1, Agent2, F),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2400
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2402
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).

 /*  [] ->
       ta(Time,
          terminates(dischargeCC(Agent1, Agent2, F1, F2),
                     cc(Agent1, Agent2, F1, F2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2403
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2405
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    quoteSent(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2408
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2410
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    purchaseRequested(Agent1,
                                      Agent2,
                                      Product,
                                      Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2413
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2415
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).

 /*  [] ->
       ta(Time,
          initiates(deliver(Agent1, Agent2, Product),
                    delivered(Agent1, Agent2, Product),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2418
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2420
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(sendEPO(Agent1, Agent2, Amount),
                    ePOSent(Agent1, Agent2, Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2423
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2425
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).

 /*  axiom_head(Time) ->
       equals(Agent1, musicStore).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent1=musicStore).
 */

 /*  axiom_head(Time) ->
       equals(Agent2, jen).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent2=jen).
 */

 /*  axiom_head(Time) ->
       equals(Product, britneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(Product=britneyCD).
 */

 /*  axiom_head(Time) ->
       equals(Amount, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Amount=1).
 */

 /*  axiom_head(Time) ->
       equals(F1, purchaseRequestedJenMusicStoreBritneyCD1).
 */

 /*  fix_axiom_head(Time) ->
       call(F1=purchaseRequestedJenMusicStoreBritneyCD1).
 */

 /*  axiom_head(Time) ->
       equals(F2, deliveredMusicStoreJenBritneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(F2=deliveredMusicStoreJenBritneyCD).
 */

 /*  [call(Agent1=musicStore), call(Agent2=jen), call(Product=britneyCD), call(Amount=1), call(F1=purchaseRequestedJenMusicStoreBritneyCD1), call(F2=deliveredMusicStoreJenBritneyCD)] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */

 /*  [holds_at(call(Agent1=musicStore), Time), holds_at(call(Agent2=jen), Time), holds_at(call(Product=britneyCD), Time), holds_at(call(Amount=1), Time), holds_at(call(F1=purchaseRequestedJenMusicStoreBritneyCD1), Time), holds_at(call(F2=deliveredMusicStoreJenBritneyCD), Time)] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2434
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ holds_at(call(Agent1=musicStore), Time),
      holds_at(call(Agent2=jen), Time),
      holds_at(call(Product=britneyCD), Time),
      holds_at(call(Amount=1), Time),
      holds_at(call(F1=purchaseRequestedJenMusicStoreBritneyCD1),
               Time),
      holds_at(call(F2=deliveredMusicStoreJenBritneyCD), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2436
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).

 /*  axiom_head(Time) ->
       equals(Agent1, jen).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent1=jen).
 */

 /*  axiom_head(Time) ->
       equals(Agent2, musicStore).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent2=musicStore).
 */

 /*  axiom_head(Time) ->
       equals(Product, britneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(Product=britneyCD).
 */

 /*  axiom_head(Time) ->
       equals(Amount, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Amount=1).
 */

 /*  axiom_head(Time) ->
       equals(F1, deliveredMusicStoreJenBritneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(F1=deliveredMusicStoreJenBritneyCD).
 */

 /*  axiom_head(Time) ->
       equals(F2, ePOSentJenMusicStore1).
 */

 /*  fix_axiom_head(Time) ->
       call(F2=ePOSentJenMusicStore1).
 */

 /*  [call(Agent1=jen), call(Agent2=musicStore), call(Product=britneyCD), call(Amount=1), call(F1=deliveredMusicStoreJenBritneyCD), call(F2=ePOSentJenMusicStore1), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */

 /*  [holds_at(call(Agent1=jen), Time), holds_at(call(Agent2=musicStore), Time), holds_at(call(Product=britneyCD), Time), holds_at(call(Amount=1), Time), holds_at(call(F1=deliveredMusicStoreJenBritneyCD), Time), holds_at(call(F2=ePOSentJenMusicStore1), Time), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2446
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ holds_at(call(Agent1=jen), Time),
      holds_at(call(Agent2=musicStore), Time),
      holds_at(call(Product=britneyCD), Time),
      holds_at(call(Amount=1), Time),
      holds_at(call(F1=deliveredMusicStoreJenBritneyCD), Time),
      holds_at(call(F2=ePOSentJenMusicStore1), Time),
      holds_at(neg(delivered(Agent2, Agent1, Product)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2448
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2450
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2450
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
       happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2453
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2455
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2455
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
       happens(dischargeCC(musicStore,
                           jen,
                           purchaseRequestedJenMusicStoreBritneyCD1,
                           deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2458
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2460
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2460
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).

 /*  holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time).
 */

 /*  happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2463
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2465
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2465
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).

 /*  holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(dischargeCC(jen,
                           musicStore,
                           deliveredMusicStoreJenBritneyCD,
                           ePOSentJenMusicStore1),
               Time).
 */

 /*  happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2468
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2470
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2470
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2473
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2475
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2475
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).

 /*  holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time) ->
       happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time).
 */

 /*  happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       holds_at(ePOSent(jen, musicStore, 1), Time).
 */

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)] ->
       ta(Time,
          happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2478
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

 /*  not(holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time)) :-
       holds_at(ePOSent(jen, musicStore, 1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(ePOSent(jen, musicStore, 1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time)).
 */
axiom(holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(ePOSent(jen, musicStore, 1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

 /*  not(holds_at(ePOSent(jen, musicStore, 1), Time)) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time, holds_at(neg(ePOSent(jen, musicStore, 1)), Time)).
 */
axiom(holds_at(neg(ePOSent(jen, musicStore, 1)), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2480
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2480
% Happens(SendQuote(MusicStore,Jen,BritneyCD,1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(sendQuote(musicStore, jen, britneyCD, 1), t)).
 */
axiom(happens(sendQuote(musicStore, jen, britneyCD, 1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2481
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2481
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(requestPurchase(jen, musicStore, britneyCD, 1), start)).
 */
axiom(happens(requestPurchase(jen, musicStore, britneyCD, 1), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2482
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2482
% Happens(Deliver(MusicStore,Jen,BritneyCD),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(deliver(musicStore, jen, britneyCD), t3)).
 */
axiom(happens(deliver(musicStore, jen, britneyCD), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2483
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2483
% Happens(SendEPO(Jen,MusicStore,1),5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(sendEPO(jen, musicStore, 1), t5)).
 */
axiom(happens(sendEPO(jen, musicStore, 1), t5),
    [holds_at(is_time(5), t5), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2485
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2488
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).

 /*  not(initially(quoteSent(Agent1,
   			Agent2,
   			Product,
   			Amount))).
 */

 /*  [] ->
       ta(Ta_Param,
          not(initially(quoteSent(Agent1,
                                  Agent2,
                                  Product,
                                  Amount)))).
 */
axiom(not(initially(quoteSent(Agent1, Agent2, Product, Amount))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2490
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).

 /*  not(initially(purchaseRequested(Agent1,
   				Agent2,
   				Product,
   				Amount))).
 */

 /*  [] ->
       ta(Ta_Param,
          not(initially(purchaseRequested(Agent1,
                                          Agent2,
                                          Product,
                                          Amount)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2491
axiom(not(initially(purchaseRequested(Agent1, Agent2, Product, Amount))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2493
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
 %  not(initially(delivered(Agent1,Agent2,Product))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(delivered(Agent1, Agent2, Product)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2494
axiom(not(initially(delivered(Agent1, Agent2, Product))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2496
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
 %  not(initially(c(Agent1,Agent2,F))).

 /*  [] ->
       ta(Ta_Param, not(initially(c(Agent1, Agent2, F)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2497
axiom(not(initially(c(Agent1, Agent2, F))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2499
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
 %  not(initially(cc(Agent1,Agent2,F1,F2))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(cc(Agent1, Agent2, F1, F2)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2500
axiom(not(initially(cc(Agent1, Agent2, F1, F2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2502
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
 %  not(initially(ePOSent(Agent1,Agent2,Amount))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(ePOSent(Agent1, Agent2, Amount)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2503
axiom(not(initially(ePOSent(Agent1, Agent2, Amount))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2505
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2506
==> completion(delta).
==> completion(happens).

% range time 0 7
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2508
==> range(time,0,7).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2509
==> range(offset,1,1).

% range amount 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2510
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2548
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2549
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2551
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2552
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2554
==> sort(agent).

% agent MusicStore, Jen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2555
==> t(agent,musicStore).
==> t(agent,jen).

% sort product
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2557
==> sort(product).

% product BritneyCD
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2558
==> t(product,britneyCD).

% sort f
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2560
==> sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2561
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% f DeliveredMusicStoreJenBritneyCD
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2562
==> t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2563
==> t(f,ePOSentJenMusicStore1).

% sort amount: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2565
==> subsort(amount,integer).

% fluent C(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2567
fluent(c(C_Param,_,C_Ret)).
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2568
fluent(cc(Cc_Param,_,_,Cc_Ret)).
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% event CreateC(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2570
event(createC(CreateC_Param,_,CreateC_Ret)).
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2571
event(createCC(CreateCC_Param,_,_,CreateCC_Ret)).
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% event DischargeC(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2572
event(dischargeC(DischargeC_Param,_,DischargeC_Ret)).
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2573
event(dischargeCC(DischargeCC_Param,
		  _,
		  _,
		  DischargeCC_Ret)).
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% fluent QuoteSent(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2575
fluent(quoteSent(QuoteSent_Param,
		 _,
		 _,
		 QuoteSent_Ret)).
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2576
fluent(purchaseRequested(PurchaseRequested_Param,
			 _,
			 _,
			 PurchaseRequested_Ret)).
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% fluent Delivered(agent,agent,product)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2577
fluent(delivered(Delivered_Param,_,Delivered_Ret)).
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2578
fluent(ePOSent(EPOSent_Param,_,EPOSent_Ret)).
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% event SendQuote(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2580
event(sendQuote(SendQuote_Param,
		_,
		_,
		SendQuote_Ret)).
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2581
event(requestPurchase(RequestPurchase_Param,
		      _,
		      _,
		      RequestPurchase_Ret)).
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% event Deliver(agent,agent,product)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2582
event(deliver(Deliver_Param,_,Deliver_Ret)).
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2583
event(sendEPO(SendEPO_Param,_,SendEPO_Ret)).
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2584
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2587
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          initiates(createC(Agent1, Agent2, F),
                    c(Agent1, Agent2, F),
                    Time)).
 */
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2589
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).

 /*  [] ->
       ta(Time,
          initiates(createCC(Agent1, Agent2, F1, F2),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2590
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2592
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          terminates(dischargeC(Agent1, Agent2, F),
                     c(Agent1, Agent2, F),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2593
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2595
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).

 /*  [] ->
       ta(Time,
          terminates(dischargeCC(Agent1, Agent2, F1, F2),
                     cc(Agent1, Agent2, F1, F2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2596
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2598
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    quoteSent(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2601
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2603
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    purchaseRequested(Agent1,
                                      Agent2,
                                      Product,
                                      Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2606
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2608
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).

 /*  [] ->
       ta(Time,
          initiates(deliver(Agent1, Agent2, Product),
                    delivered(Agent1, Agent2, Product),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2611
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2613
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(sendEPO(Agent1, Agent2, Amount),
                    ePOSent(Agent1, Agent2, Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2616
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2618
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).

 /*  axiom_head(Time) ->
       equals(Agent1, musicStore).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent1=musicStore).
 */

 /*  axiom_head(Time) ->
       equals(Agent2, jen).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent2=jen).
 */

 /*  axiom_head(Time) ->
       equals(Product, britneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(Product=britneyCD).
 */

 /*  axiom_head(Time) ->
       equals(Amount, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Amount=1).
 */

 /*  axiom_head(Time) ->
       equals(F1, purchaseRequestedJenMusicStoreBritneyCD1).
 */

 /*  fix_axiom_head(Time) ->
       call(F1=purchaseRequestedJenMusicStoreBritneyCD1).
 */

 /*  axiom_head(Time) ->
       equals(F2, deliveredMusicStoreJenBritneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(F2=deliveredMusicStoreJenBritneyCD).
 */

 /*  [call(Agent1=musicStore), call(Agent2=jen), call(Product=britneyCD), call(Amount=1), call(F1=purchaseRequestedJenMusicStoreBritneyCD1), call(F2=deliveredMusicStoreJenBritneyCD)] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */

 /*  [holds_at(call(Agent1=musicStore), Time), holds_at(call(Agent2=jen), Time), holds_at(call(Product=britneyCD), Time), holds_at(call(Amount=1), Time), holds_at(call(F1=purchaseRequestedJenMusicStoreBritneyCD1), Time), holds_at(call(F2=deliveredMusicStoreJenBritneyCD), Time)] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2627
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ holds_at(call(Agent1=musicStore), Time),
      holds_at(call(Agent2=jen), Time),
      holds_at(call(Product=britneyCD), Time),
      holds_at(call(Amount=1), Time),
      holds_at(call(F1=purchaseRequestedJenMusicStoreBritneyCD1),
               Time),
      holds_at(call(F2=deliveredMusicStoreJenBritneyCD), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2629
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).

 /*  axiom_head(Time) ->
       equals(Agent1, jen).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent1=jen).
 */

 /*  axiom_head(Time) ->
       equals(Agent2, musicStore).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent2=musicStore).
 */

 /*  axiom_head(Time) ->
       equals(Product, britneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(Product=britneyCD).
 */

 /*  axiom_head(Time) ->
       equals(Amount, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Amount=1).
 */

 /*  axiom_head(Time) ->
       equals(F1, deliveredMusicStoreJenBritneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(F1=deliveredMusicStoreJenBritneyCD).
 */

 /*  axiom_head(Time) ->
       equals(F2, ePOSentJenMusicStore1).
 */

 /*  fix_axiom_head(Time) ->
       call(F2=ePOSentJenMusicStore1).
 */

 /*  [call(Agent1=jen), call(Agent2=musicStore), call(Product=britneyCD), call(Amount=1), call(F1=deliveredMusicStoreJenBritneyCD), call(F2=ePOSentJenMusicStore1), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */

 /*  [holds_at(call(Agent1=jen), Time), holds_at(call(Agent2=musicStore), Time), holds_at(call(Product=britneyCD), Time), holds_at(call(Amount=1), Time), holds_at(call(F1=deliveredMusicStoreJenBritneyCD), Time), holds_at(call(F2=ePOSentJenMusicStore1), Time), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2639
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ holds_at(call(Agent1=jen), Time),
      holds_at(call(Agent2=musicStore), Time),
      holds_at(call(Product=britneyCD), Time),
      holds_at(call(Amount=1), Time),
      holds_at(call(F1=deliveredMusicStoreJenBritneyCD), Time),
      holds_at(call(F2=ePOSentJenMusicStore1), Time),
      holds_at(neg(delivered(Agent2, Agent1, Product)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2641
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2643
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2643
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
       happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2646
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2648
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2648
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
       happens(dischargeCC(musicStore,
                           jen,
                           purchaseRequestedJenMusicStoreBritneyCD1,
                           deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2651
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2653
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2653
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).

 /*  holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time).
 */

 /*  happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2656
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2658
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2658
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).

 /*  holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(dischargeCC(jen,
                           musicStore,
                           deliveredMusicStoreJenBritneyCD,
                           ePOSentJenMusicStore1),
               Time).
 */

 /*  happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2661
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2663
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2663
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2666
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2668
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2668
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).

 /*  holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time) ->
       happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time).
 */

 /*  happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       holds_at(ePOSent(jen, musicStore, 1), Time).
 */

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)] ->
       ta(Time,
          happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2671
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

 /*  not(holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time)) :-
       holds_at(ePOSent(jen, musicStore, 1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(ePOSent(jen, musicStore, 1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time)).
 */
axiom(holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(ePOSent(jen, musicStore, 1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

 /*  not(holds_at(ePOSent(jen, musicStore, 1), Time)) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time, holds_at(neg(ePOSent(jen, musicStore, 1)), Time)).
 */
axiom(holds_at(neg(ePOSent(jen, musicStore, 1)), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2673
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2673
% Happens(Deliver(MusicStore,Jen,BritneyCD),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(deliver(musicStore, jen, britneyCD), t)).
 */
axiom(happens(deliver(musicStore, jen, britneyCD), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2674
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2674
% Happens(SendEPO(Jen,MusicStore,1),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(sendEPO(jen, musicStore, 1), t2)).
 */
axiom(happens(sendEPO(jen, musicStore, 1), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2676
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2679
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).

 /*  not(initially(quoteSent(Agent1,
   			Agent2,
   			Product,
   			Amount))).
 */

 /*  [] ->
       ta(Ta_Param,
          not(initially(quoteSent(Agent1,
                                  Agent2,
                                  Product,
                                  Amount)))).
 */
axiom(not(initially(quoteSent(Agent1, Agent2, Product, Amount))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2681
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).

 /*  not(initially(purchaseRequested(Agent1,
   				Agent2,
   				Product,
   				Amount))).
 */

 /*  [] ->
       ta(Ta_Param,
          not(initially(purchaseRequested(Agent1,
                                          Agent2,
                                          Product,
                                          Amount)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2682
axiom(not(initially(purchaseRequested(Agent1, Agent2, Product, Amount))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2684
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
 %  not(initially(delivered(Agent1,Agent2,Product))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(delivered(Agent1, Agent2, Product)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2685
axiom(not(initially(delivered(Agent1, Agent2, Product))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2687
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
 %  not(initially(c(Agent1,Agent2,F))).

 /*  [] ->
       ta(Ta_Param, not(initially(c(Agent1, Agent2, F)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2688
axiom(not(initially(c(Agent1, Agent2, F))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2690
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
 %  not(initially(cc(Agent1,Agent2,F1,F2))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(cc(Agent1, Agent2, F1, F2)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2691
axiom(not(initially(cc(Agent1, Agent2, F1, F2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2693
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
 %  not(initially(ePOSent(Agent1,Agent2,Amount))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(ePOSent(Agent1, Agent2, Amount)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2694
axiom(not(initially(ePOSent(Agent1, Agent2, Amount))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2696
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2697
==> completion(delta).
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2699
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2700
==> range(offset,1,1).

% range amount 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2701
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2739
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2740
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2742
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2743
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2745
==> sort(agent).

% agent MusicStore, Jen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2746
==> t(agent,musicStore).
==> t(agent,jen).

% sort product
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2748
==> sort(product).

% product BritneyCD
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2749
==> t(product,britneyCD).

% sort f
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2751
==> sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2752
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% f DeliveredMusicStoreJenBritneyCD
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2753
==> t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2754
==> t(f,ePOSentJenMusicStore1).

% sort amount: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2756
==> subsort(amount,integer).

% fluent C(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2758
fluent(c(C_Param,_,C_Ret)).
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2759
fluent(cc(Cc_Param,_,_,Cc_Ret)).
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% event CreateC(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2761
event(createC(CreateC_Param,_,CreateC_Ret)).
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2762
event(createCC(CreateCC_Param,_,_,CreateCC_Ret)).
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% event DischargeC(agent,agent,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2763
event(dischargeC(DischargeC_Param,_,DischargeC_Ret)).
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2764
event(dischargeCC(DischargeCC_Param,
		  _,
		  _,
		  DischargeCC_Ret)).
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% fluent QuoteSent(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2766
fluent(quoteSent(QuoteSent_Param,
		 _,
		 _,
		 QuoteSent_Ret)).
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2767
fluent(purchaseRequested(PurchaseRequested_Param,
			 _,
			 _,
			 PurchaseRequested_Ret)).
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% fluent Delivered(agent,agent,product)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2768
fluent(delivered(Delivered_Param,_,Delivered_Ret)).
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2769
fluent(ePOSent(EPOSent_Param,_,EPOSent_Ret)).
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% event SendQuote(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2771
event(sendQuote(SendQuote_Param,
		_,
		_,
		SendQuote_Ret)).
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2772
event(requestPurchase(RequestPurchase_Param,
		      _,
		      _,
		      RequestPurchase_Ret)).
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% event Deliver(agent,agent,product)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2773
event(deliver(Deliver_Param,_,Deliver_Ret)).
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2774
event(sendEPO(SendEPO_Param,_,SendEPO_Ret)).
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2775
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2778
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          initiates(createC(Agent1, Agent2, F),
                    c(Agent1, Agent2, F),
                    Time)).
 */
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2780
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).

 /*  [] ->
       ta(Time,
          initiates(createCC(Agent1, Agent2, F1, F2),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2781
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2783
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          terminates(dischargeC(Agent1, Agent2, F),
                     c(Agent1, Agent2, F),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2784
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2786
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).

 /*  [] ->
       ta(Time,
          terminates(dischargeCC(Agent1, Agent2, F1, F2),
                     cc(Agent1, Agent2, F1, F2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2787
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2789
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    quoteSent(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2792
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2794
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    purchaseRequested(Agent1,
                                      Agent2,
                                      Product,
                                      Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2797
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2799
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).

 /*  [] ->
       ta(Time,
          initiates(deliver(Agent1, Agent2, Product),
                    delivered(Agent1, Agent2, Product),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2802
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2804
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).

 /*  [] ->
       ta(Time,
          initiates(sendEPO(Agent1, Agent2, Amount),
                    ePOSent(Agent1, Agent2, Amount),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2807
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2809
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).

 /*  axiom_head(Time) ->
       equals(Agent1, musicStore).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent1=musicStore).
 */

 /*  axiom_head(Time) ->
       equals(Agent2, jen).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent2=jen).
 */

 /*  axiom_head(Time) ->
       equals(Product, britneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(Product=britneyCD).
 */

 /*  axiom_head(Time) ->
       equals(Amount, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Amount=1).
 */

 /*  axiom_head(Time) ->
       equals(F1, purchaseRequestedJenMusicStoreBritneyCD1).
 */

 /*  fix_axiom_head(Time) ->
       call(F1=purchaseRequestedJenMusicStoreBritneyCD1).
 */

 /*  axiom_head(Time) ->
       equals(F2, deliveredMusicStoreJenBritneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(F2=deliveredMusicStoreJenBritneyCD).
 */

 /*  [call(Agent1=musicStore), call(Agent2=jen), call(Product=britneyCD), call(Amount=1), call(F1=purchaseRequestedJenMusicStoreBritneyCD1), call(F2=deliveredMusicStoreJenBritneyCD)] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */

 /*  [holds_at(call(Agent1=musicStore), Time), holds_at(call(Agent2=jen), Time), holds_at(call(Product=britneyCD), Time), holds_at(call(Amount=1), Time), holds_at(call(F1=purchaseRequestedJenMusicStoreBritneyCD1), Time), holds_at(call(F2=deliveredMusicStoreJenBritneyCD), Time)] ->
       ta(Time,
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2818
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ holds_at(call(Agent1=musicStore), Time),
      holds_at(call(Agent2=jen), Time),
      holds_at(call(Product=britneyCD), Time),
      holds_at(call(Amount=1), Time),
      holds_at(call(F1=purchaseRequestedJenMusicStoreBritneyCD1),
               Time),
      holds_at(call(F2=deliveredMusicStoreJenBritneyCD), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2820
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).

 /*  axiom_head(Time) ->
       equals(Agent1, jen).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent1=jen).
 */

 /*  axiom_head(Time) ->
       equals(Agent2, musicStore).
 */

 /*  fix_axiom_head(Time) ->
       call(Agent2=musicStore).
 */

 /*  axiom_head(Time) ->
       equals(Product, britneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(Product=britneyCD).
 */

 /*  axiom_head(Time) ->
       equals(Amount, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Amount=1).
 */

 /*  axiom_head(Time) ->
       equals(F1, deliveredMusicStoreJenBritneyCD).
 */

 /*  fix_axiom_head(Time) ->
       call(F1=deliveredMusicStoreJenBritneyCD).
 */

 /*  axiom_head(Time) ->
       equals(F2, ePOSentJenMusicStore1).
 */

 /*  fix_axiom_head(Time) ->
       call(F2=ePOSentJenMusicStore1).
 */

 /*  [call(Agent1=jen), call(Agent2=musicStore), call(Product=britneyCD), call(Amount=1), call(F1=deliveredMusicStoreJenBritneyCD), call(F2=ePOSentJenMusicStore1), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */

 /*  [holds_at(call(Agent1=jen), Time), holds_at(call(Agent2=musicStore), Time), holds_at(call(Product=britneyCD), Time), holds_at(call(Amount=1), Time), holds_at(call(F1=deliveredMusicStoreJenBritneyCD), Time), holds_at(call(F2=ePOSentJenMusicStore1), Time), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2830
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ holds_at(call(Agent1=jen), Time),
      holds_at(call(Agent2=musicStore), Time),
      holds_at(call(Product=britneyCD), Time),
      holds_at(call(Amount=1), Time),
      holds_at(call(F1=deliveredMusicStoreJenBritneyCD), Time),
      holds_at(call(F2=ePOSentJenMusicStore1), Time),
      holds_at(neg(delivered(Agent2, Agent1, Product)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2832
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2834
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2834
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
       happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2837
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2839
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2839
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
       happens(dischargeCC(musicStore,
                           jen,
                           purchaseRequestedJenMusicStoreBritneyCD1,
                           deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2842
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2844
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2844
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).

 /*  holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time).
 */

 /*  happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2847
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2849
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2849
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).

 /*  holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(dischargeCC(jen,
                           musicStore,
                           deliveredMusicStoreJenBritneyCD,
                           ePOSentJenMusicStore1),
               Time).
 */

 /*  happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2852
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)).
 */

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2854
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2854
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).

 /*  holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
       happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).
 */

 /*  happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2857
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

 /*  not(holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
axiom(holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)).
 */

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time))] ->
       ta(Time,
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2859
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2859
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).

 /*  holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time) ->
       happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time).
 */

 /*  happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       holds_at(ePOSent(jen, musicStore, 1), Time).
 */

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)] ->
       ta(Time,
          happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2862
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

 /*  not(holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time)) :-
       holds_at(ePOSent(jen, musicStore, 1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(ePOSent(jen, musicStore, 1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time,
          holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time)).
 */
axiom(holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(ePOSent(jen, musicStore, 1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

 /*  not(holds_at(ePOSent(jen, musicStore, 1), Time)) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))] ->
       ta(Time, holds_at(neg(ePOSent(jen, musicStore, 1)), Time)).
 */
axiom(holds_at(neg(ePOSent(jen, musicStore, 1)), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2864
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2864
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(requestPurchase(jen, musicStore, britneyCD, 1), t)).
 */
axiom(happens(requestPurchase(jen, musicStore, britneyCD, 1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2865
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2865
% Happens(Deliver(MusicStore,Jen,BritneyCD),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(deliver(musicStore, jen, britneyCD), t2)).
 */
axiom(happens(deliver(musicStore, jen, britneyCD), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2866
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2866
% Happens(SendEPO(Jen,MusicStore,1),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(sendEPO(jen, musicStore, 1), t4)).
 */
axiom(happens(sendEPO(jen, musicStore, 1), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2868
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2871
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).

 /*  not(initially(quoteSent(Agent1,
   			Agent2,
   			Product,
   			Amount))).
 */

 /*  [] ->
       ta(Ta_Param,
          not(initially(quoteSent(Agent1,
                                  Agent2,
                                  Product,
                                  Amount)))).
 */
axiom(not(initially(quoteSent(Agent1, Agent2, Product, Amount))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2873
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).

 /*  not(initially(purchaseRequested(Agent1,
   				Agent2,
   				Product,
   				Amount))).
 */

 /*  [] ->
       ta(Ta_Param,
          not(initially(purchaseRequested(Agent1,
                                          Agent2,
                                          Product,
                                          Amount)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2874
axiom(not(initially(purchaseRequested(Agent1, Agent2, Product, Amount))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2876
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
 %  not(initially(delivered(Agent1,Agent2,Product))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(delivered(Agent1, Agent2, Product)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2877
axiom(not(initially(delivered(Agent1, Agent2, Product))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2879
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
 %  not(initially(c(Agent1,Agent2,F))).

 /*  [] ->
       ta(Ta_Param, not(initially(c(Agent1, Agent2, F)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2880
axiom(not(initially(c(Agent1, Agent2, F))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2882
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
 %  not(initially(cc(Agent1,Agent2,F1,F2))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(cc(Agent1, Agent2, F1, F2)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2883
axiom(not(initially(cc(Agent1, Agent2, F1, F2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2885
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
 %  not(initially(ePOSent(Agent1,Agent2,Amount))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(ePOSent(Agent1, Agent2, Amount)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2886
axiom(not(initially(ePOSent(Agent1, Agent2, Amount))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2888
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2889
==> completion(delta).
==> completion(happens).

% range time 0 6
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2891
==> range(time,0,6).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2892
==> range(offset,1,1).

% range amount 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2893
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Vision.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{ShanahanRandell:2004,
%;   author = "Murray Shanahan and David A. Randell",
%;   year = "2004",
%;   title = "A logic-based formulation of active visual perception",
%;   editor = "Didier Dubois and Christopher A. Welty and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{N}inth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "64--72",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2931
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2932
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2934
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2935
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2937
==> sort(object).

% sort shape
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2938
==> sort(shape).

% sort aspect
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2939
==> sort(aspect).

% object Object1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2941
==> t(object,object1).

% aspect Aspect1, Aspect2, Aspect3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2942
==> t(aspect,aspect1).
==> t(aspect,aspect2).
==> t(aspect,aspect3).

% shape Shape1, Shape2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2943
==> t(shape,shape1).
==> t(shape,shape2).

% predicate Shape(object,shape)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2945
predicate(shape(Shape_Param,Shape_Ret)).
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% predicate Arc(shape,aspect,aspect)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2946
predicate(arc(Arc_Param,_,Arc_Ret)).
==> mpred_prop(arc(shape,aspect,aspect),predicate).
==> meta_argtypes(arc(shape,aspect,aspect)).

% fluent Aspect(object,aspect)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2947
fluent(aspect(Aspect_Param,Aspect_Ret)).
==> mpred_prop(aspect(object,aspect),fluent).
==> meta_argtypes(aspect(object,aspect)).

% event Change(object,aspect,aspect)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2948
event(change(Change_Param,_,Change_Ret)).
==> mpred_prop(change(object,aspect,aspect),event).
==> meta_argtypes(change(object,aspect,aspect)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2949
%; Sigma
% [object,aspect1,aspect2,shape,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2952
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Initiates(Change(object,aspect1,aspect2),Aspect(object,aspect2),time).

 /*  [holds_at(aspect(Object, Aspect1), Time), shape(Object, Shape),  (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))] ->
       ta(Time,
          initiates(change(Object, Aspect1, Aspect2),
                    aspect(Object, Aspect2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2956
axiom(initiates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect2), Time),
   
    [ holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape),
       (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2958
% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Terminates(Change(object,aspect1,aspect2),Aspect(object,aspect1),time).

 /*  [holds_at(aspect(Object, Aspect1), Time), shape(Object, Shape),  (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))] ->
       ta(Time,
          terminates(change(Object, Aspect1, Aspect2),
                     aspect(Object, Aspect1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2963
axiom(terminates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect1), Time),
   
    [ holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape),
       (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2965
%; preconditions (added)
% [object,aspect1,aspect2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2968
% Happens(Change(object,aspect1,aspect2),time) ->
% HoldsAt(Aspect(object,aspect1),time).

 /*  allDifferent([Object, Aspect1, Aspect2, Time]) ->
       ( happens(change(Object, Aspect1, Aspect2), Time)->holds_at(aspect(Object, Aspect1), Time)
       ).
 */

 /*  holds_at(aspect(Object, Aspect1), Time) :-
       happens(change(Object, Aspect1, Aspect2), Time),
       allDifferent([Object, Aspect1, Aspect2, Time]).
 */

 /*  [happens(change(Object, Aspect1, Aspect2), Time), allDifferent([Object, Aspect1, Aspect2, Time])] ->
       ta(Time, holds_at(aspect(Object, Aspect1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2969
axiom(holds_at(aspect(Object, Aspect1), Time),
   
    [ happens(change(Object, Aspect1, Aspect2), Time),
      allDifferent([Object, Aspect1, Aspect2, Time])
    ]).

 /*  not(happens(change(Object, Aspect1, Aspect2), Time)) :-
       not(holds_at(aspect(Object, Aspect1), Time)),
       allDifferent([Object, Aspect1, Aspect2, Time]).
 */

 /*  [holds_at(neg(aspect(Object, Aspect1)), Time), allDifferent([Object, Aspect1, Aspect2, Time])] ->
       ta(Time,
          not(happens(change(Object, Aspect1, Aspect2),
                      Time))).
 */
axiom(not(happens(change(Object, Aspect1, Aspect2), Time)),
   
    [ holds_at(neg(aspect(Object, Aspect1)), Time),
      allDifferent([Object, Aspect1, Aspect2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2971
% [object,aspect1,aspect2,aspect3,time]
% Happens(Change(object,aspect1,aspect2),time) &
% Happens(Change(object,aspect1,aspect3),time) ->
% aspect2=aspect3.

 /*  allDifferent([Object, Aspect1, Aspect2, Time, Aspect3]) ->
       ( happens(change(Object, Aspect1, Aspect2), Time), happens(change(Object, Aspect1, Aspect3), Time)->Aspect2=Aspect3
       ).
 */

 /*  not(happens(change(Object, Aspect1, Aspect2), Time)) :-
       happens(change(Object, Aspect1, Aspect3), Time),
       not(equals(Aspect2, Aspect3)),
       allDifferent(
                    [ Object,
                      Aspect1,
                      Aspect2,
                      Time,
                      Aspect3
                    ]).
 */

 /*  axiom_head(Time) ->
       not(equals(Aspect2, Aspect3)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Aspect2=Aspect3)).
 */

 /*  [happens(change(Object, Aspect1, Aspect3), Time), not(call(Aspect2=Aspect3)), allDifferent([Object, Aspect1, Aspect2, Time, Aspect3])] ->
       ta(Time,
          not(happens(change(Object, Aspect1, Aspect2),
                      Time))).
 */

 /*  [happens(change(Object, Aspect1, Aspect3), Time), holds_at(neg(call(Aspect2=Aspect3)), Time), allDifferent([Object, Aspect1, Aspect2, Time, Aspect3])] ->
       ta(Time,
          not(happens(change(Object, Aspect1, Aspect2),
                      Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2974
axiom(not(happens(change(Object, Aspect1, Aspect2), Time)),
   
    [ happens(change(Object, Aspect1, Aspect3), Time),
      holds_at(neg(call(Aspect2=Aspect3)), Time),
      allDifferent(
                   [ Object,
                     Aspect1,
                     Aspect2,
                     Time,
                     Aspect3
                   ])
    ]).

 /*  not(happens(change(Object, Aspect1, Aspect3), Time)) :-
       happens(change(Object, Aspect1, Aspect2), Time),
       not(equals(Aspect2, Aspect3)),
       allDifferent(
                    [ Object,
                      Aspect1,
                      Aspect2,
                      Time,
                      Aspect3
                    ]).
 */

 /*  axiom_head(Time) ->
       not(equals(Aspect2, Aspect3)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Aspect2=Aspect3)).
 */

 /*  [happens(change(Object, Aspect1, Aspect2), Time), not(call(Aspect2=Aspect3)), allDifferent([Object, Aspect1, Aspect2, Time, Aspect3])] ->
       ta(Time,
          not(happens(change(Object, Aspect1, Aspect3),
                      Time))).
 */

 /*  [happens(change(Object, Aspect1, Aspect2), Time), holds_at(neg(call(Aspect2=Aspect3)), Time), allDifferent([Object, Aspect1, Aspect2, Time, Aspect3])] ->
       ta(Time,
          not(happens(change(Object, Aspect1, Aspect3),
                      Time))).
 */
axiom(not(happens(change(Object, Aspect1, Aspect3), Time)),
   
    [ happens(change(Object, Aspect1, Aspect2), Time),
      holds_at(neg(call(Aspect2=Aspect3)), Time),
      allDifferent(
                   [ Object,
                     Aspect1,
                     Aspect2,
                     Time,
                     Aspect3
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2976
%; Psi
% [object,shape1,shape2]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2979
% Shape(object,shape1) &
% Shape(object,shape2) ->
% shape1=shape2.

 /*  allDifferent([Object, Shape1, Shape2]) ->
       ( shape(Object, Shape1), shape(Object, Shape2)->Shape1=Shape2
       ).
 */

 /*  not(shape(Object, Shape1)) :-
       shape(Object, Shape2),
       not(equals(Shape1, Shape2)),
       allDifferent([Object, Shape1, Shape2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       not(equals(Shape1, Shape2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       not(call(Shape1=Shape2)).
 */

 /*  [shape(Object, Shape2), not(call(Shape1=Shape2)), allDifferent([Object, Shape1, Shape2])] ->
       ta(Axiom_head_Ret, not(shape(Object, Shape1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2981
axiom(not(shape(Object, Shape1)),
   
    [ shape(Object, Shape2),
      not(call(Shape1=Shape2)),
      allDifferent([Object, Shape1, Shape2])
    ]).

 /*  not(shape(Object, Shape2)) :-
       shape(Object, Shape1),
       not(equals(Shape1, Shape2)),
       allDifferent([Object, Shape1, Shape2]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       not(equals(Shape1, Shape2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       not(call(Shape1=Shape2)).
 */

 /*  [shape(Object, Shape1), not(call(Shape1=Shape2)), allDifferent([Object, Shape1, Shape2])] ->
       ta(Axiom_head_Ret4, not(shape(Object, Shape2))).
 */
axiom(not(shape(Object, Shape2)),
   
    [ shape(Object, Shape1),
      not(call(Shape1=Shape2)),
      allDifferent([Object, Shape1, Shape2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2983
% [object,aspect1,aspect2,time]
% HoldsAt(Aspect(object,aspect1),time) &
% HoldsAt(Aspect(object,aspect2),time) ->
% aspect1=aspect2.

 /*  allDifferent([Object, Aspect1, Time, Aspect2]) ->
       ( holds_at(aspect(Object, Aspect1), Time), holds_at(aspect(Object, Aspect2), Time)->Aspect1=Aspect2
       ).
 */

 /*  not(holds_at(aspect(Object, Aspect1), Time)) :-
       holds_at(aspect(Object, Aspect2), Time),
       not(equals(Aspect1, Aspect2)),
       allDifferent([Object, Aspect1, Time, Aspect2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Aspect1, Aspect2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Aspect1=Aspect2)).
 */

 /*  [holds_at(aspect(Object, Aspect2), Time), not(call(Aspect1=Aspect2)), allDifferent([Object, Aspect1, Time, Aspect2])] ->
       ta(Time,
          holds_at(neg(aspect(Object, Aspect1)), Time)).
 */

 /*  [holds_at(aspect(Object, Aspect2), Time), holds_at(neg(call(Aspect1=Aspect2)), Time), allDifferent([Object, Aspect1, Time, Aspect2])] ->
       ta(Time,
          holds_at(neg(aspect(Object, Aspect1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2986
axiom(holds_at(neg(aspect(Object, Aspect1)), Time),
   
    [ holds_at(aspect(Object, Aspect2), Time),
      holds_at(neg(call(Aspect1=Aspect2)), Time),
      allDifferent([Object, Aspect1, Time, Aspect2])
    ]).

 /*  not(holds_at(aspect(Object, Aspect2), Time)) :-
       holds_at(aspect(Object, Aspect1), Time),
       not(equals(Aspect1, Aspect2)),
       allDifferent([Object, Aspect1, Time, Aspect2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Aspect1, Aspect2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Aspect1=Aspect2)).
 */

 /*  [holds_at(aspect(Object, Aspect1), Time), not(call(Aspect1=Aspect2)), allDifferent([Object, Aspect1, Time, Aspect2])] ->
       ta(Time,
          holds_at(neg(aspect(Object, Aspect2)), Time)).
 */

 /*  [holds_at(aspect(Object, Aspect1), Time), holds_at(neg(call(Aspect1=Aspect2)), Time), allDifferent([Object, Aspect1, Time, Aspect2])] ->
       ta(Time,
          holds_at(neg(aspect(Object, Aspect2)), Time)).
 */
axiom(holds_at(neg(aspect(Object, Aspect2)), Time),
   
    [ holds_at(aspect(Object, Aspect1), Time),
      holds_at(neg(call(Aspect1=Aspect2)), Time),
      allDifferent([Object, Aspect1, Time, Aspect2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2988
% [aspect1,aspect2]
% Arc(Shape1,aspect1,aspect2) <->
% (aspect1=Aspect1 & aspect2=Aspect2).

 /*  arc(shape1, Aspect1, Aspect2) <->
       Aspect1=aspect1,
       Aspect2=aspect2.
 */

 /*  [arc, shape1] <->
       [=, aspect1, =, aspect2].
 */

 /*  allDifferent([Aspect1, Aspect2]) ->
       ( arc(shape1, Aspect1, Aspect2)->Aspect1=aspect1, Aspect2=aspect2
       ).
 */

 /*  not(arc(shape1, Aspect1, Aspect2)) :-
       (   not(equals(Aspect1, aspect1))
       ;   not(equals(Aspect2, aspect2))
       ),
       allDifferent([Aspect1, Aspect2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Aspect1, aspect1))
       ;   not(equals(Aspect2, aspect2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Aspect1=aspect1))
       ;   not(call(Aspect2=aspect2))
       ).
 */

 /*  [(not(call(Aspect1=aspect1));not(call(Aspect2=aspect2))), allDifferent([Aspect1, Aspect2])] ->
       ta(Axiom_head_Ret, not(arc(shape1, Aspect1, Aspect2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2990
axiom(not(arc(shape1, Aspect1, Aspect2)),
   
    [  (not(call(Aspect1=aspect1));not(call(Aspect2=aspect2))),
      allDifferent([Aspect1, Aspect2])
    ]).

 /*  allDifferent([Aspect1, Aspect2]) ->
       ( Aspect1=aspect1, Aspect2=aspect2->arc(shape1, Aspect1, Aspect2)
       ).
 */

 /*  arc(shape1, Aspect1, Aspect2) :-
       ( equals(Aspect1, aspect1),
         equals(Aspect2, aspect2)
       ),
       allDifferent([Aspect1, Aspect2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       equals(Aspect1, aspect1).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       call(Aspect1=aspect1).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       equals(Aspect2, aspect2).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       call(Aspect2=aspect2).
 */

 /*  [call(Aspect1=aspect1), call(Aspect2=aspect2), allDifferent([Aspect1, Aspect2])] ->
       ta(Axiom_head_Ret3, arc(shape1, Aspect1, Aspect2)).
 */
axiom(arc(shape1, Aspect1, Aspect2),
   
    [ call(Aspect1=aspect1),
      call(Aspect2=aspect2),
      allDifferent([Aspect1, Aspect2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2992
% [aspect1,aspect2]
% Arc(Shape2,aspect1,aspect2) <->
% ((aspect1=Aspect1 & aspect2=Aspect3) |
%  (aspect1=Aspect3 & aspect2=Aspect2)).

 /*  arc(shape2, Aspect1, Aspect2) <->
       (   Aspect1=aspect1,
           Aspect2=aspect3
       ;   Aspect1=aspect3,
           Aspect2=aspect2
       ).
 */

 /*  [arc, shape2] <->
       [;, =, aspect1, =, aspect3, =, aspect3, =, aspect2].
 */

 /*  allDifferent([Aspect1, Aspect2]) ->
       ( arc(shape2, Aspect1, Aspect2)->Aspect1=aspect1, Aspect2=aspect3;Aspect1=aspect3, Aspect2=aspect2
       ).
 */

 /*  not(arc(shape2, Aspect1, Aspect2)) :-
       ( (   not(equals(Aspect1, aspect1))
         ;   not(equals(Aspect2, aspect3))
         ),
         (   not(equals(Aspect1, aspect3))
         ;   not(equals(Aspect2, aspect2))
         )
       ),
       allDifferent([Aspect1, Aspect2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Aspect1, aspect1))
       ;   not(equals(Aspect2, aspect3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Aspect1=aspect1))
       ;   not(call(Aspect2=aspect3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Aspect1, aspect3))
       ;   not(equals(Aspect2, aspect2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Aspect1=aspect3))
       ;   not(call(Aspect2=aspect2))
       ).
 */

 /*  [(not(call(Aspect1=aspect1));not(call(Aspect2=aspect3))),  (not(call(Aspect1=aspect3));not(call(Aspect2=aspect2))), allDifferent([Aspect1, Aspect2])] ->
       ta(Axiom_head_Ret, not(arc(shape2, Aspect1, Aspect2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2995
axiom(not(arc(shape2, Aspect1, Aspect2)),
   
    [  (not(call(Aspect1=aspect1));not(call(Aspect2=aspect3))),
       (not(call(Aspect1=aspect3));not(call(Aspect2=aspect2))),
      allDifferent([Aspect1, Aspect2])
    ]).

 /*  allDifferent([Aspect1, Aspect2]) ->
       ( Aspect1=aspect1, Aspect2=aspect3;Aspect1=aspect3, Aspect2=aspect2->arc(shape2, Aspect1, Aspect2)
       ).
 */

 /*  arc(shape2, Aspect1, Aspect2) :-
       (   equals(Aspect1, aspect1),
           equals(Aspect2, aspect3)
       ;   equals(Aspect1, aspect3),
           equals(Aspect2, aspect2)
       ),
       allDifferent([Aspect1, Aspect2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Aspect1, aspect1),
           equals(Aspect2, aspect3)
       ;   equals(Aspect1, aspect3),
           equals(Aspect2, aspect2)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Aspect1=aspect1),
           call(Aspect2=aspect3)
       ;   call(Aspect1=aspect3),
           call(Aspect2=aspect2)
       ).
 */

 /*  [(call(Aspect1=aspect1), call(Aspect2=aspect3);call(Aspect1=aspect3), call(Aspect2=aspect2)), allDifferent([Aspect1, Aspect2])] ->
       ta(Axiom_head_Ret3, arc(shape2, Aspect1, Aspect2)).
 */
axiom(arc(shape2, Aspect1, Aspect2),
   
    [  (call(Aspect1=aspect1), call(Aspect2=aspect3);call(Aspect1=aspect3), call(Aspect2=aspect2)),
      allDifferent([Aspect1, Aspect2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2997
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2999
% HoldsAt(Aspect(Object1,Aspect1),0).

 /*  [] ->
       ta(Ta_Param, initially(aspect(object1, aspect1))).
 */
axiom(initially(aspect(object1, aspect1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3000
% HoldsAt(Aspect(Object1,Aspect2),1).
holds_at(aspect(object1,aspect2),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3002
%;completion Delta Happens

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3004
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3005
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3006
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Workflow.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{CicekliYildirim:2000,
%;   author = "Nihan Kesim Cicekli and Yakup Yildirim",
%;   year = "2000",
%;   title = "Formalizing workflows using the event calculus",
%;   editor = "Mohamed T. Ibrahim and Josef K{\"{u}}ng and Norman Revell",
%;   booktitle = "Database and Expert Systems Applications",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1873",
%;   pages = "222--231",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; @unpublished{WFMC:1999,
%;   author = "{Workflow Management Coalition}",
%;   year = "1999",
%;   title = "\uppercase{W}orkflow \uppercase{M}anagement \uppercase{C}oalition Terminology \& Glossary",
%;   howpublished = "Document Number WFMC-TC-1011, Document Status -- Issue 3.0, Workflow Management Coalition, Winchester, UK",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3053
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3054
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3056
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3057
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort activity
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3059
==> sort(activity).

% sort condition
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3060
==> sort(condition).

% activity A, B, C1, C2, C3, D, E1, E2, E3, F, G
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3061
==> t(activity,a).
==> t(activity,b).
==> t(activity,c1).
==> t(activity,c2).
==> t(activity,c3).
==> t(activity,d).
==> t(activity,e1).
==> t(activity,e2).
==> t(activity,e3).
==> t(activity,f).
==> t(activity,g).

% condition E1C, E2C, E3C, FC
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3062
==> t(condition,e1c).
==> t(condition,e2c).
==> t(condition,e3c).
==> t(condition,fc).

% fluent Active(activity)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3064
fluent(active(Active_Ret)).
==> mpred_prop(active(activity),fluent).
==> meta_argtypes(active(activity)).

% fluent Completed(activity)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3065
fluent(completed(Completed_Ret)).
==> mpred_prop(completed(activity),fluent).
==> meta_argtypes(completed(activity)).

% fluent Condition(condition)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3066
fluent(condition(Condition_Ret)).
==> mpred_prop(condition(condition),fluent).
==> meta_argtypes(condition(condition)).

% noninertial Condition
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3067
==> noninertial(condition).

% event Start(activity)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3069
event(start(Start_Ret)).
==> mpred_prop(start(activity),event).
==> meta_argtypes(start(activity)).

% event End(activity)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3070
event(end(End_Ret)).
==> mpred_prop(end(activity),event).
==> meta_argtypes(end(activity)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3071
%; Sigma
% [activity,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3074
% Initiates(Start(activity),Active(activity),time).

 /*  [] ->
       ta(Time,
          initiates(start(Activity), active(Activity), Time)).
 */
axiom(initiates(start(Activity), active(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3076
% [activity,time]
% Terminates(Start(activity),Completed(activity),time).

 /*  [] ->
       ta(Time,
          terminates(start(Activity), completed(Activity), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3077
axiom(terminates(start(Activity), completed(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3079
% [activity,time]
% Initiates(End(activity),Completed(activity),time).

 /*  [] ->
       ta(Time,
          initiates(end(Activity), completed(Activity), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3080
axiom(initiates(end(Activity), completed(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3082
% [activity,time]
% Terminates(End(activity),Active(activity),time).

 /*  [] ->
       ta(Time,
          terminates(end(Activity), active(Activity), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3083
axiom(terminates(end(Activity), active(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3085
%; Delta
%; A; B

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3088
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3088
% [time]
% !HoldsAt(Active(B),time) &
% !HoldsAt(Completed(A),time-1) &
% HoldsAt(Completed(A),time) ->
% Happens(Start(B),time).

 /*  holds_at(neg(active(b)), Time), holds_at(neg(completed(a)), Time-1), holds_at(completed(a), Time) ->
       happens(start(b), Time).
 */

 /*  happens(start(b), Time) :-
       holds_at(neg(active(b)), Time),
       holds_at(neg(completed(a)), Time-1),
       holds_at(completed(a), Time).
 */

 /*  [holds_at(neg(active(b)), Time), holds_at(neg(completed(a)), Time1), holds_at(completed(a), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(b), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3092
axiom(happens(start(b), Time),
   
    [ holds_at(neg(active(b)), Time),
      holds_at(neg(completed(a)), Time1),
      holds_at(completed(a), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(b)), Time)) :-
       ( holds_at(neg(completed(a)), Time-1),
         holds_at(completed(a), Time)
       ),
       not(happens(start(b), Time)).
 */

 /*  [holds_at(neg(completed(a)), Time2), holds_at(completed(a), Time), not(happens(start(b), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(b))), Time)).
 */
axiom(holds_at(neg(neg(active(b))), Time),
   
    [ holds_at(neg(completed(a)), Time2),
      holds_at(completed(a), Time),
      not(happens(start(b), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(a)), Time-1)) :-
       holds_at(completed(a), Time),
       holds_at(neg(active(b)), Time),
       not(happens(start(b), Time)).
 */

 /*  [holds_at(completed(a), Time), holds_at(neg(active(b)), Time), not(happens(start(b), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(a))), Time3)).
 */
axiom(holds_at(neg(neg(completed(a))), Time3),
   
    [ holds_at(completed(a), Time),
      holds_at(neg(active(b)), Time),
      not(happens(start(b), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(a), Time)) :-
       holds_at(neg(completed(a)), Time-1),
       holds_at(neg(active(b)), Time),
       not(happens(start(b), Time)).
 */

 /*  [holds_at(neg(completed(a)), Time4), holds_at(neg(active(b)), Time), not(happens(start(b), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(a)), Time)).
 */
axiom(holds_at(neg(completed(a)), Time),
   
    [ holds_at(neg(completed(a)), Time4),
      holds_at(neg(active(b)), Time),
      not(happens(start(b), Time)),
      b(Time4, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3094
%; B; AND-split C1, C2, C3

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3095
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3095
% [time]
% !HoldsAt(Active(C1),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C1),time).

 /*  holds_at(neg(active(c1)), Time), holds_at(neg(completed(b)), Time-1), holds_at(completed(b), Time) ->
       happens(start(c1), Time).
 */

 /*  happens(start(c1), Time) :-
       holds_at(neg(active(c1)), Time),
       holds_at(neg(completed(b)), Time-1),
       holds_at(completed(b), Time).
 */

 /*  [holds_at(neg(active(c1)), Time), holds_at(neg(completed(b)), Time1), holds_at(completed(b), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(c1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3099
axiom(happens(start(c1), Time),
   
    [ holds_at(neg(active(c1)), Time),
      holds_at(neg(completed(b)), Time1),
      holds_at(completed(b), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(c1)), Time)) :-
       ( holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       not(happens(start(c1), Time)).
 */

 /*  [holds_at(neg(completed(b)), Time2), holds_at(completed(b), Time), not(happens(start(c1), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(c1))), Time)).
 */
axiom(holds_at(neg(neg(active(c1))), Time),
   
    [ holds_at(neg(completed(b)), Time2),
      holds_at(completed(b), Time),
      not(happens(start(c1), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(b)), Time-1)) :-
       holds_at(completed(b), Time),
       holds_at(neg(active(c1)), Time),
       not(happens(start(c1), Time)).
 */

 /*  [holds_at(completed(b), Time), holds_at(neg(active(c1)), Time), not(happens(start(c1), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(b))), Time3)).
 */
axiom(holds_at(neg(neg(completed(b))), Time3),
   
    [ holds_at(completed(b), Time),
      holds_at(neg(active(c1)), Time),
      not(happens(start(c1), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(b), Time)) :-
       holds_at(neg(completed(b)), Time-1),
       holds_at(neg(active(c1)), Time),
       not(happens(start(c1), Time)).
 */

 /*  [holds_at(neg(completed(b)), Time4), holds_at(neg(active(c1)), Time), not(happens(start(c1), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(b)), Time)).
 */
axiom(holds_at(neg(completed(b)), Time),
   
    [ holds_at(neg(completed(b)), Time4),
      holds_at(neg(active(c1)), Time),
      not(happens(start(c1), Time)),
      b(Time4, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3101
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3101
% [time]
% !HoldsAt(Active(C2),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C2),time).

 /*  holds_at(neg(active(c2)), Time), holds_at(neg(completed(b)), Time-1), holds_at(completed(b), Time) ->
       happens(start(c2), Time).
 */

 /*  happens(start(c2), Time) :-
       holds_at(neg(active(c2)), Time),
       holds_at(neg(completed(b)), Time-1),
       holds_at(completed(b), Time).
 */

 /*  [holds_at(neg(active(c2)), Time), holds_at(neg(completed(b)), Time1), holds_at(completed(b), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(c2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3105
axiom(happens(start(c2), Time),
   
    [ holds_at(neg(active(c2)), Time),
      holds_at(neg(completed(b)), Time1),
      holds_at(completed(b), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(c2)), Time)) :-
       ( holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       not(happens(start(c2), Time)).
 */

 /*  [holds_at(neg(completed(b)), Time2), holds_at(completed(b), Time), not(happens(start(c2), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(c2))), Time)).
 */
axiom(holds_at(neg(neg(active(c2))), Time),
   
    [ holds_at(neg(completed(b)), Time2),
      holds_at(completed(b), Time),
      not(happens(start(c2), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(b)), Time-1)) :-
       holds_at(completed(b), Time),
       holds_at(neg(active(c2)), Time),
       not(happens(start(c2), Time)).
 */

 /*  [holds_at(completed(b), Time), holds_at(neg(active(c2)), Time), not(happens(start(c2), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(b))), Time3)).
 */
axiom(holds_at(neg(neg(completed(b))), Time3),
   
    [ holds_at(completed(b), Time),
      holds_at(neg(active(c2)), Time),
      not(happens(start(c2), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(b), Time)) :-
       holds_at(neg(completed(b)), Time-1),
       holds_at(neg(active(c2)), Time),
       not(happens(start(c2), Time)).
 */

 /*  [holds_at(neg(completed(b)), Time4), holds_at(neg(active(c2)), Time), not(happens(start(c2), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(b)), Time)).
 */
axiom(holds_at(neg(completed(b)), Time),
   
    [ holds_at(neg(completed(b)), Time4),
      holds_at(neg(active(c2)), Time),
      not(happens(start(c2), Time)),
      b(Time4, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3107
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3107
% [time]
% !HoldsAt(Active(C3),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C3),time).

 /*  holds_at(neg(active(c3)), Time), holds_at(neg(completed(b)), Time-1), holds_at(completed(b), Time) ->
       happens(start(c3), Time).
 */

 /*  happens(start(c3), Time) :-
       holds_at(neg(active(c3)), Time),
       holds_at(neg(completed(b)), Time-1),
       holds_at(completed(b), Time).
 */

 /*  [holds_at(neg(active(c3)), Time), holds_at(neg(completed(b)), Time1), holds_at(completed(b), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(c3), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3111
axiom(happens(start(c3), Time),
   
    [ holds_at(neg(active(c3)), Time),
      holds_at(neg(completed(b)), Time1),
      holds_at(completed(b), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(c3)), Time)) :-
       ( holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       not(happens(start(c3), Time)).
 */

 /*  [holds_at(neg(completed(b)), Time2), holds_at(completed(b), Time), not(happens(start(c3), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(c3))), Time)).
 */
axiom(holds_at(neg(neg(active(c3))), Time),
   
    [ holds_at(neg(completed(b)), Time2),
      holds_at(completed(b), Time),
      not(happens(start(c3), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(b)), Time-1)) :-
       holds_at(completed(b), Time),
       holds_at(neg(active(c3)), Time),
       not(happens(start(c3), Time)).
 */

 /*  [holds_at(completed(b), Time), holds_at(neg(active(c3)), Time), not(happens(start(c3), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(b))), Time3)).
 */
axiom(holds_at(neg(neg(completed(b))), Time3),
   
    [ holds_at(completed(b), Time),
      holds_at(neg(active(c3)), Time),
      not(happens(start(c3), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(b), Time)) :-
       holds_at(neg(completed(b)), Time-1),
       holds_at(neg(active(c3)), Time),
       not(happens(start(c3), Time)).
 */

 /*  [holds_at(neg(completed(b)), Time4), holds_at(neg(active(c3)), Time), not(happens(start(c3), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(b)), Time)).
 */
axiom(holds_at(neg(completed(b)), Time),
   
    [ holds_at(neg(completed(b)), Time4),
      holds_at(neg(active(c3)), Time),
      not(happens(start(c3), Time)),
      b(Time4, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3113
%; AND-join C1, C2, C3; D

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3114
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3114
% [time]
% !HoldsAt(Active(D),time) &
% ((!HoldsAt(Completed(C1),time-1) & HoldsAt(Completed(C1),time))|
%  (!HoldsAt(Completed(C2),time-1) & HoldsAt(Completed(C2),time))|
%  (!HoldsAt(Completed(C3),time-1) & HoldsAt(Completed(C3),time))) &
% HoldsAt(Completed(C1),time) &
% HoldsAt(Completed(C2),time) &
% HoldsAt(Completed(C3),time) ->
% Happens(Start(D),time).

 /*  holds_at(neg(active(d)), Time), (holds_at(neg(completed(c1)), Time-1), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time-1), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time-1), holds_at(completed(c3), Time)), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time) ->
       happens(start(d), Time).
 */

 /*  happens(start(d), Time) :-
       holds_at(neg(active(d)), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ).
 */

 /*  [ignore(Time-1==Time1), b(Time1, Time), holds_at(neg(active(d)), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time1), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time1), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time1), holds_at(completed(c3), Time))] ->
       ta(Time, happens(start(d), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3122
axiom(happens(start(d), Time),
   
    [ b(Time1, Time),
      holds_at(neg(active(d)), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time1), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time1), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time1), holds_at(completed(c3), Time))
    ]).

 /*  not(holds_at(neg(active(d)), Time)) :-
       ( ( holds_at(completed(c1), Time),
           holds_at(completed(c2), Time),
           holds_at(completed(c3), Time)
         ),
         (   holds_at(neg(completed(c1)), Time-1),
             holds_at(completed(c1), Time)
         ;   holds_at(neg(completed(c2)), Time-1),
             holds_at(completed(c2), Time)
         ;   holds_at(neg(completed(c3)), Time-1),
             holds_at(completed(c3), Time)
         )
       ),
       not(happens(start(d), Time)).
 */

 /*  [ignore(Time-1==Time2), b(Time2, Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time2), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time2), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time2), holds_at(completed(c3), Time)), not(happens(start(d), Time))] ->
       ta(Time, holds_at(neg(neg(active(d))), Time)).
 */
axiom(holds_at(neg(neg(active(d))), Time),
   
    [ b(Time2, Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time2), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time2), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time2), holds_at(completed(c3), Time)),
      not(happens(start(d), Time))
    ]).

 /*  not(holds_at(completed(c1), Time)) :-
       ( holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [ignore(Time-1==Time3), b(Time3, Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time3), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time3), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time3), holds_at(completed(c3), Time)), holds_at(neg(active(d)), Time), not(happens(start(d), Time))] ->
       ta(Time, holds_at(neg(completed(c1)), Time)).
 */
axiom(holds_at(neg(completed(c1)), Time),
   
    [ b(Time3, Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time3), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time3), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time3), holds_at(completed(c3), Time)),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time))
    ]).

 /*  not(holds_at(completed(c2), Time)) :-
       holds_at(completed(c3), Time),
       holds_at(completed(c1), Time),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [ignore(Time-1==Time4), b(Time4, Time), holds_at(completed(c3), Time), holds_at(completed(c1), Time),  (holds_at(neg(completed(c1)), Time4), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time4), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time4), holds_at(completed(c3), Time)), holds_at(neg(active(d)), Time), not(happens(start(d), Time))] ->
       ta(Time, holds_at(neg(completed(c2)), Time)).
 */
axiom(holds_at(neg(completed(c2)), Time),
   
    [ b(Time4, Time),
      holds_at(completed(c3), Time),
      holds_at(completed(c1), Time),
       (holds_at(neg(completed(c1)), Time4), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time4), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time4), holds_at(completed(c3), Time)),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time))
    ]).

 /*  not(holds_at(completed(c3), Time)) :-
       holds_at(completed(c2), Time),
       holds_at(completed(c1), Time),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [ignore(Time-1==Time5), b(Time5, Time), holds_at(completed(c2), Time), holds_at(completed(c1), Time),  (holds_at(neg(completed(c1)), Time5), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time5), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time5), holds_at(completed(c3), Time)), holds_at(neg(active(d)), Time), not(happens(start(d), Time))] ->
       ta(Time, holds_at(neg(completed(c3)), Time)).
 */
axiom(holds_at(neg(completed(c3)), Time),
   
    [ b(Time5, Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c1), Time),
       (holds_at(neg(completed(c1)), Time5), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time5), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time5), holds_at(completed(c3), Time)),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time))
    ]).

 /*  not(holds_at(neg(completed(c1)), Time-1)) :-
       holds_at(completed(c1), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [holds_at(completed(c1), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time, holds_at(neg(neg(completed(c1))), Time6)).
 */
axiom(holds_at(neg(neg(completed(c1))), Time6),
   
    [ holds_at(completed(c1), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      b(Time6, Time)
    ]).

 /*  not(holds_at(completed(c1), Time)) :-
       holds_at(neg(completed(c1)), Time-1),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [holds_at(neg(completed(c1)), Time7), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time, holds_at(neg(completed(c1)), Time)).
 */
axiom(holds_at(neg(completed(c1)), Time),
   
    [ holds_at(neg(completed(c1)), Time7),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      b(Time7, Time)
    ]).

 /*  not(holds_at(neg(completed(c2)), Time-1)) :-
       holds_at(completed(c2), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [holds_at(completed(c2), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), b(Time8, Time), ignore(Time-1==Time8)] ->
       ta(Time, holds_at(neg(neg(completed(c2))), Time8)).
 */
axiom(holds_at(neg(neg(completed(c2))), Time8),
   
    [ holds_at(completed(c2), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      b(Time8, Time)
    ]).

 /*  not(holds_at(completed(c2), Time)) :-
       holds_at(neg(completed(c2)), Time-1),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [holds_at(neg(completed(c2)), Time9), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), b(Time9, Time), ignore(Time-1==Time9)] ->
       ta(Time, holds_at(neg(completed(c2)), Time)).
 */
axiom(holds_at(neg(completed(c2)), Time),
   
    [ holds_at(neg(completed(c2)), Time9),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      b(Time9, Time)
    ]).

 /*  not(holds_at(neg(completed(c3)), Time-1)) :-
       holds_at(completed(c3), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [holds_at(completed(c3), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), b(Time10, Time), ignore(Time-1==Time10)] ->
       ta(Time, holds_at(neg(neg(completed(c3))), Time10)).
 */
axiom(holds_at(neg(neg(completed(c3))), Time10),
   
    [ holds_at(completed(c3), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      b(Time10, Time)
    ]).

 /*  not(holds_at(completed(c3), Time)) :-
       holds_at(neg(completed(c3)), Time-1),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)).
 */

 /*  [holds_at(neg(completed(c3)), Time11), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), b(Time11, Time), ignore(Time-1==Time11)] ->
       ta(Time, holds_at(neg(completed(c3)), Time)).
 */
axiom(holds_at(neg(completed(c3)), Time),
   
    [ holds_at(neg(completed(c3)), Time11),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      b(Time11, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3124
%; D; XOR-split E1, E2, E3

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3125
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3125
% [time]
% !HoldsAt(Active(E1),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E1C),time) ->
% Happens(Start(E1),time).

 /*  holds_at(neg(active(e1)), Time), holds_at(neg(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e1c), Time) ->
       happens(start(e1), Time).
 */

 /*  happens(start(e1), Time) :-
       holds_at(neg(active(e1)), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(completed(d), Time),
       holds_at(condition(e1c), Time).
 */

 /*  [holds_at(neg(active(e1)), Time), holds_at(neg(completed(d)), Time1), holds_at(completed(d), Time), holds_at(condition(e1c), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(e1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3130
axiom(happens(start(e1), Time),
   
    [ holds_at(neg(active(e1)), Time),
      holds_at(neg(completed(d)), Time1),
      holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(e1)), Time)) :-
       ( holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e1c), Time)
       ),
       not(happens(start(e1), Time)).
 */

 /*  [holds_at(neg(completed(d)), Time2), holds_at(completed(d), Time), holds_at(condition(e1c), Time), not(happens(start(e1), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(e1))), Time)).
 */
axiom(holds_at(neg(neg(active(e1))), Time),
   
    [ holds_at(neg(completed(d)), Time2),
      holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      not(happens(start(e1), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(d)), Time-1)) :-
       ( holds_at(completed(d), Time),
         holds_at(condition(e1c), Time)
       ),
       holds_at(neg(active(e1)), Time),
       not(happens(start(e1), Time)).
 */

 /*  [holds_at(completed(d), Time), holds_at(condition(e1c), Time), holds_at(neg(active(e1)), Time), not(happens(start(e1), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(d))), Time3)).
 */
axiom(holds_at(neg(neg(completed(d))), Time3),
   
    [ holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      holds_at(neg(active(e1)), Time),
      not(happens(start(e1), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(d), Time)) :-
       holds_at(condition(e1c), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e1)), Time),
       not(happens(start(e1), Time)).
 */

 /*  [holds_at(condition(e1c), Time), holds_at(neg(completed(d)), Time4), holds_at(neg(active(e1)), Time), not(happens(start(e1), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(d)), Time)).
 */
axiom(holds_at(neg(completed(d)), Time),
   
    [ holds_at(condition(e1c), Time),
      holds_at(neg(completed(d)), Time4),
      holds_at(neg(active(e1)), Time),
      not(happens(start(e1), Time)),
      b(Time4, Time)
    ]).

 /*  not(holds_at(condition(e1c), Time)) :-
       holds_at(completed(d), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e1)), Time),
       not(happens(start(e1), Time)).
 */

 /*  [holds_at(completed(d), Time), holds_at(neg(completed(d)), Time5), holds_at(neg(active(e1)), Time), not(happens(start(e1), Time)), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(condition(e1c)), Time)).
 */
axiom(holds_at(neg(condition(e1c)), Time),
   
    [ holds_at(completed(d), Time),
      holds_at(neg(completed(d)), Time5),
      holds_at(neg(active(e1)), Time),
      not(happens(start(e1), Time)),
      b(Time5, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3132
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3132
% [time]
% !HoldsAt(Active(E2),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E2C),time) ->
% Happens(Start(E2),time).

 /*  holds_at(neg(active(e2)), Time), holds_at(neg(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e2c), Time) ->
       happens(start(e2), Time).
 */

 /*  happens(start(e2), Time) :-
       holds_at(neg(active(e2)), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(completed(d), Time),
       holds_at(condition(e2c), Time).
 */

 /*  [holds_at(neg(active(e2)), Time), holds_at(neg(completed(d)), Time1), holds_at(completed(d), Time), holds_at(condition(e2c), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(e2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3137
axiom(happens(start(e2), Time),
   
    [ holds_at(neg(active(e2)), Time),
      holds_at(neg(completed(d)), Time1),
      holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(e2)), Time)) :-
       ( holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e2c), Time)
       ),
       not(happens(start(e2), Time)).
 */

 /*  [holds_at(neg(completed(d)), Time2), holds_at(completed(d), Time), holds_at(condition(e2c), Time), not(happens(start(e2), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(e2))), Time)).
 */
axiom(holds_at(neg(neg(active(e2))), Time),
   
    [ holds_at(neg(completed(d)), Time2),
      holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      not(happens(start(e2), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(d)), Time-1)) :-
       ( holds_at(completed(d), Time),
         holds_at(condition(e2c), Time)
       ),
       holds_at(neg(active(e2)), Time),
       not(happens(start(e2), Time)).
 */

 /*  [holds_at(completed(d), Time), holds_at(condition(e2c), Time), holds_at(neg(active(e2)), Time), not(happens(start(e2), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(d))), Time3)).
 */
axiom(holds_at(neg(neg(completed(d))), Time3),
   
    [ holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      holds_at(neg(active(e2)), Time),
      not(happens(start(e2), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(d), Time)) :-
       holds_at(condition(e2c), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e2)), Time),
       not(happens(start(e2), Time)).
 */

 /*  [holds_at(condition(e2c), Time), holds_at(neg(completed(d)), Time4), holds_at(neg(active(e2)), Time), not(happens(start(e2), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(d)), Time)).
 */
axiom(holds_at(neg(completed(d)), Time),
   
    [ holds_at(condition(e2c), Time),
      holds_at(neg(completed(d)), Time4),
      holds_at(neg(active(e2)), Time),
      not(happens(start(e2), Time)),
      b(Time4, Time)
    ]).

 /*  not(holds_at(condition(e2c), Time)) :-
       holds_at(completed(d), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e2)), Time),
       not(happens(start(e2), Time)).
 */

 /*  [holds_at(completed(d), Time), holds_at(neg(completed(d)), Time5), holds_at(neg(active(e2)), Time), not(happens(start(e2), Time)), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(condition(e2c)), Time)).
 */
axiom(holds_at(neg(condition(e2c)), Time),
   
    [ holds_at(completed(d), Time),
      holds_at(neg(completed(d)), Time5),
      holds_at(neg(active(e2)), Time),
      not(happens(start(e2), Time)),
      b(Time5, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3139
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3139
% [time]
% !HoldsAt(Active(E3),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E3C),time) ->
% Happens(Start(E3),time).

 /*  holds_at(neg(active(e3)), Time), holds_at(neg(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e3c), Time) ->
       happens(start(e3), Time).
 */

 /*  happens(start(e3), Time) :-
       holds_at(neg(active(e3)), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(completed(d), Time),
       holds_at(condition(e3c), Time).
 */

 /*  [holds_at(neg(active(e3)), Time), holds_at(neg(completed(d)), Time1), holds_at(completed(d), Time), holds_at(condition(e3c), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(e3), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3144
axiom(happens(start(e3), Time),
   
    [ holds_at(neg(active(e3)), Time),
      holds_at(neg(completed(d)), Time1),
      holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(e3)), Time)) :-
       ( holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e3c), Time)
       ),
       not(happens(start(e3), Time)).
 */

 /*  [holds_at(neg(completed(d)), Time2), holds_at(completed(d), Time), holds_at(condition(e3c), Time), not(happens(start(e3), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(e3))), Time)).
 */
axiom(holds_at(neg(neg(active(e3))), Time),
   
    [ holds_at(neg(completed(d)), Time2),
      holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      not(happens(start(e3), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(d)), Time-1)) :-
       ( holds_at(completed(d), Time),
         holds_at(condition(e3c), Time)
       ),
       holds_at(neg(active(e3)), Time),
       not(happens(start(e3), Time)).
 */

 /*  [holds_at(completed(d), Time), holds_at(condition(e3c), Time), holds_at(neg(active(e3)), Time), not(happens(start(e3), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(d))), Time3)).
 */
axiom(holds_at(neg(neg(completed(d))), Time3),
   
    [ holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      holds_at(neg(active(e3)), Time),
      not(happens(start(e3), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(d), Time)) :-
       holds_at(condition(e3c), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e3)), Time),
       not(happens(start(e3), Time)).
 */

 /*  [holds_at(condition(e3c), Time), holds_at(neg(completed(d)), Time4), holds_at(neg(active(e3)), Time), not(happens(start(e3), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(d)), Time)).
 */
axiom(holds_at(neg(completed(d)), Time),
   
    [ holds_at(condition(e3c), Time),
      holds_at(neg(completed(d)), Time4),
      holds_at(neg(active(e3)), Time),
      not(happens(start(e3), Time)),
      b(Time4, Time)
    ]).

 /*  not(holds_at(condition(e3c), Time)) :-
       holds_at(completed(d), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e3)), Time),
       not(happens(start(e3), Time)).
 */

 /*  [holds_at(completed(d), Time), holds_at(neg(completed(d)), Time5), holds_at(neg(active(e3)), Time), not(happens(start(e3), Time)), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(condition(e3c)), Time)).
 */
axiom(holds_at(neg(condition(e3c)), Time),
   
    [ holds_at(completed(d), Time),
      holds_at(neg(completed(d)), Time5),
      holds_at(neg(active(e3)), Time),
      not(happens(start(e3), Time)),
      b(Time5, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3146
%; XOR-join E1, E2, E3; F

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3147
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3147
% [time]
% !HoldsAt(Active(F),time) &
% ((!HoldsAt(Completed(E1),time-1) & HoldsAt(Completed(E1),time))|
%  (!HoldsAt(Completed(E2),time-1) & HoldsAt(Completed(E2),time))|
%  (!HoldsAt(Completed(E3),time-1) & HoldsAt(Completed(E3),time))) ->
% Happens(Start(F),time).

 /*  holds_at(neg(active(f)), Time), (holds_at(neg(completed(e1)), Time-1), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time-1), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time-1), holds_at(completed(e3), Time)) ->
       happens(start(f), Time).
 */

 /*  happens(start(f), Time) :-
       holds_at(neg(active(f)), Time),
       (   holds_at(neg(completed(e1)), Time-1),
           holds_at(completed(e1), Time)
       ;   holds_at(neg(completed(e2)), Time-1),
           holds_at(completed(e2), Time)
       ;   holds_at(neg(completed(e3)), Time-1),
           holds_at(completed(e3), Time)
       ).
 */

 /*  [ignore(Time-1==Time1), b(Time1, Time), holds_at(neg(active(f)), Time),  (holds_at(neg(completed(e1)), Time1), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time1), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time1), holds_at(completed(e3), Time))] ->
       ta(Time, happens(start(f), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3152
axiom(happens(start(f), Time),
   
    [ b(Time1, Time),
      holds_at(neg(active(f)), Time),
       (holds_at(neg(completed(e1)), Time1), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time1), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time1), holds_at(completed(e3), Time))
    ]).

 /*  not(holds_at(neg(active(f)), Time)) :-
       (   holds_at(neg(completed(e1)), Time-1),
           holds_at(completed(e1), Time)
       ;   holds_at(neg(completed(e2)), Time-1),
           holds_at(completed(e2), Time)
       ;   holds_at(neg(completed(e3)), Time-1),
           holds_at(completed(e3), Time)
       ),
       not(happens(start(f), Time)).
 */

 /*  [ignore(Time-1==Time2), b(Time2, Time),  (holds_at(neg(completed(e1)), Time2), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time2), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time2), holds_at(completed(e3), Time)), not(happens(start(f), Time))] ->
       ta(Time, holds_at(neg(neg(active(f))), Time)).
 */
axiom(holds_at(neg(neg(active(f))), Time),
   
    [ b(Time2, Time),
       (holds_at(neg(completed(e1)), Time2), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time2), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time2), holds_at(completed(e3), Time)),
      not(happens(start(f), Time))
    ]).

 /*  not(holds_at(neg(completed(e1)), Time-1)) :-
       holds_at(completed(e1), Time),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(completed(e1), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(e1))), Time3)).
 */
axiom(holds_at(neg(neg(completed(e1))), Time3),
   
    [ holds_at(completed(e1), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(e1), Time)) :-
       holds_at(neg(completed(e1)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(neg(completed(e1)), Time4), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(e1)), Time)).
 */
axiom(holds_at(neg(completed(e1)), Time),
   
    [ holds_at(neg(completed(e1)), Time4),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time4, Time)
    ]).

 /*  not(holds_at(neg(completed(e2)), Time-1)) :-
       holds_at(completed(e2), Time),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(completed(e2), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(neg(completed(e2))), Time5)).
 */
axiom(holds_at(neg(neg(completed(e2))), Time5),
   
    [ holds_at(completed(e2), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time5, Time)
    ]).

 /*  not(holds_at(completed(e2), Time)) :-
       holds_at(neg(completed(e2)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(neg(completed(e2)), Time6), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time, holds_at(neg(completed(e2)), Time)).
 */
axiom(holds_at(neg(completed(e2)), Time),
   
    [ holds_at(neg(completed(e2)), Time6),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time6, Time)
    ]).

 /*  not(holds_at(neg(completed(e3)), Time-1)) :-
       holds_at(completed(e3), Time),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(completed(e3), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time, holds_at(neg(neg(completed(e3))), Time7)).
 */
axiom(holds_at(neg(neg(completed(e3))), Time7),
   
    [ holds_at(completed(e3), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time7, Time)
    ]).

 /*  not(holds_at(completed(e3), Time)) :-
       holds_at(neg(completed(e3)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(neg(completed(e3)), Time8), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time8, Time), ignore(Time-1==Time8)] ->
       ta(Time, holds_at(neg(completed(e3)), Time)).
 */
axiom(holds_at(neg(completed(e3)), Time),
   
    [ holds_at(neg(completed(e3)), Time8),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time8, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3154
%; while (FC) F; G

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3155
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3155
% [time]
% !HoldsAt(Active(F),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% HoldsAt(Condition(FC),time) ->
% Happens(Start(F),time).

 /*  holds_at(neg(active(f)), Time), holds_at(neg(completed(f)), Time-1), holds_at(completed(f), Time), holds_at(condition(fc), Time) ->
       happens(start(f), Time).
 */

 /*  happens(start(f), Time) :-
       holds_at(neg(active(f)), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(completed(f), Time),
       holds_at(condition(fc), Time).
 */

 /*  [holds_at(neg(active(f)), Time), holds_at(neg(completed(f)), Time1), holds_at(completed(f), Time), holds_at(condition(fc), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(f), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3160
axiom(happens(start(f), Time),
   
    [ holds_at(neg(active(f)), Time),
      holds_at(neg(completed(f)), Time1),
      holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(f)), Time)) :-
       ( holds_at(neg(completed(f)), Time-1),
         holds_at(completed(f), Time),
         holds_at(condition(fc), Time)
       ),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(neg(completed(f)), Time2), holds_at(completed(f), Time), holds_at(condition(fc), Time), not(happens(start(f), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(f))), Time)).
 */
axiom(holds_at(neg(neg(active(f))), Time),
   
    [ holds_at(neg(completed(f)), Time2),
      holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      not(happens(start(f), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(f)), Time-1)) :-
       ( holds_at(completed(f), Time),
         holds_at(condition(fc), Time)
       ),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(completed(f), Time), holds_at(condition(fc), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(f))), Time3)).
 */
axiom(holds_at(neg(neg(completed(f))), Time3),
   
    [ holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(f), Time)) :-
       holds_at(condition(fc), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(condition(fc), Time), holds_at(neg(completed(f)), Time4), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(f)), Time)).
 */
axiom(holds_at(neg(completed(f)), Time),
   
    [ holds_at(condition(fc), Time),
      holds_at(neg(completed(f)), Time4),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time4, Time)
    ]).

 /*  not(holds_at(condition(fc), Time)) :-
       holds_at(completed(f), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)).
 */

 /*  [holds_at(completed(f), Time), holds_at(neg(completed(f)), Time5), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(condition(fc)), Time)).
 */
axiom(holds_at(neg(condition(fc)), Time),
   
    [ holds_at(completed(f), Time),
      holds_at(neg(completed(f)), Time5),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      b(Time5, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3162
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3162
% [time]
% !HoldsAt(Active(G),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% !HoldsAt(Condition(FC),time) ->
% Happens(Start(G),time).

 /*  holds_at(neg(active(g)), Time), holds_at(neg(completed(f)), Time-1), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time) ->
       happens(start(g), Time).
 */

 /*  happens(start(g), Time) :-
       holds_at(neg(active(g)), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(completed(f), Time),
       holds_at(neg(condition(fc)), Time).
 */

 /*  [holds_at(neg(active(g)), Time), holds_at(neg(completed(f)), Time1), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time, happens(start(g), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3167
axiom(happens(start(g), Time),
   
    [ holds_at(neg(active(g)), Time),
      holds_at(neg(completed(f)), Time1),
      holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      b(Time1, Time)
    ]).

 /*  not(holds_at(neg(active(g)), Time)) :-
       ( holds_at(neg(completed(f)), Time-1),
         holds_at(completed(f), Time),
         holds_at(neg(condition(fc)), Time)
       ),
       not(happens(start(g), Time)).
 */

 /*  [holds_at(neg(completed(f)), Time2), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), not(happens(start(g), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(neg(neg(active(g))), Time)).
 */
axiom(holds_at(neg(neg(active(g))), Time),
   
    [ holds_at(neg(completed(f)), Time2),
      holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      not(happens(start(g), Time)),
      b(Time2, Time)
    ]).

 /*  not(holds_at(neg(completed(f)), Time-1)) :-
       ( holds_at(completed(f), Time),
         holds_at(neg(condition(fc)), Time)
       ),
       holds_at(neg(active(g)), Time),
       not(happens(start(g), Time)).
 */

 /*  [holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), holds_at(neg(active(g)), Time), not(happens(start(g), Time)), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(neg(neg(completed(f))), Time3)).
 */
axiom(holds_at(neg(neg(completed(f))), Time3),
   
    [ holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      holds_at(neg(active(g)), Time),
      not(happens(start(g), Time)),
      b(Time3, Time)
    ]).

 /*  not(holds_at(completed(f), Time)) :-
       holds_at(neg(condition(fc)), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(g)), Time),
       not(happens(start(g), Time)).
 */

 /*  [holds_at(neg(condition(fc)), Time), holds_at(neg(completed(f)), Time4), holds_at(neg(active(g)), Time), not(happens(start(g), Time)), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(neg(completed(f)), Time)).
 */
axiom(holds_at(neg(completed(f)), Time),
   
    [ holds_at(neg(condition(fc)), Time),
      holds_at(neg(completed(f)), Time4),
      holds_at(neg(active(g)), Time),
      not(happens(start(g), Time)),
      b(Time4, Time)
    ]).

 /*  not(holds_at(neg(condition(fc)), Time)) :-
       holds_at(completed(f), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(g)), Time),
       not(happens(start(g), Time)).
 */

 /*  [holds_at(completed(f), Time), holds_at(neg(completed(f)), Time5), holds_at(neg(active(g)), Time), not(happens(start(g), Time)), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(neg(condition(fc))), Time)).
 */
axiom(holds_at(neg(neg(condition(fc))), Time),
   
    [ holds_at(completed(f), Time),
      holds_at(neg(completed(f)), Time5),
      holds_at(neg(active(g)), Time),
      not(happens(start(g), Time)),
      b(Time5, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3169
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3169
% Happens(Start(A),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(start(a), t)).
 */
axiom(happens(start(a), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3170
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3170
% Happens(End(A),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(end(a), start)).
 */
axiom(happens(end(a), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3171
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3171
% Happens(End(B),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(end(b), t3)).
 */
axiom(happens(end(b), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3172
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3172
% Happens(End(C1),5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(end(c1), t5)).
 */
axiom(happens(end(c1), t5),
    [holds_at(is_time(5), t5), b(t, t5)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3173
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3173
% Happens(End(C2),6).

 /*  axiom_head(6) ->
       is_time(6).
 */

 /*  fix_axiom_head(6) ->
       holds_at(is_time(6), 6).
 */

 /*  [holds_at(is_time(6), t6), b(t, t6), ignore(t+6==t6)] ->
       ta(6, happens(end(c2), t6)).
 */
axiom(happens(end(c2), t6),
    [holds_at(is_time(6), t6), b(t, t6)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3174
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3174
% Happens(End(C3),7).

 /*  axiom_head(7) ->
       is_time(7).
 */

 /*  fix_axiom_head(7) ->
       holds_at(is_time(7), 7).
 */

 /*  [holds_at(is_time(7), t7), b(t, t7), ignore(t+7==t7)] ->
       ta(7, happens(end(c3), t7)).
 */
axiom(happens(end(c3), t7),
    [holds_at(is_time(7), t7), b(t, t7)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3175
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3175
% Happens(End(D),9).

 /*  axiom_head(9) ->
       is_time(9).
 */

 /*  fix_axiom_head(9) ->
       holds_at(is_time(9), 9).
 */

 /*  [holds_at(is_time(9), t9), b(t, t9), ignore(t+9==t9)] ->
       ta(9, happens(end(d), t9)).
 */
axiom(happens(end(d), t9),
    [holds_at(is_time(9), t9), b(t, t9)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3176
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3176
% Happens(End(E2),11).

 /*  axiom_head(11) ->
       is_time(11).
 */

 /*  fix_axiom_head(11) ->
       holds_at(is_time(11), 11).
 */

 /*  [holds_at(is_time(11), t11), b(t, t11), ignore(t+11==t11)] ->
       ta(11, happens(end(e2), t11)).
 */
axiom(happens(end(e2), t11),
    [holds_at(is_time(11), t11), b(t, t11)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3177
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3177
% Happens(End(F),13).

 /*  axiom_head(13) ->
       is_time(13).
 */

 /*  fix_axiom_head(13) ->
       holds_at(is_time(13), 13).
 */

 /*  [holds_at(is_time(13), t13), b(t, t13), ignore(t+13==t13)] ->
       ta(13, happens(end(f), t13)).
 */
axiom(happens(end(f), t13),
    [holds_at(is_time(13), t13), b(t, t13)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3178
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3178
% Happens(End(F),15).

 /*  axiom_head(15) ->
       is_time(15).
 */

 /*  fix_axiom_head(15) ->
       holds_at(is_time(15), 15).
 */

 /*  [holds_at(is_time(15), t15), b(t, t15), ignore(t+15==t15)] ->
       ta(15, happens(end(f), t15)).
 */
axiom(happens(end(f), t15),
    [holds_at(is_time(15), t15), b(t, t15)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3180
%; Gamma
% [activity]
 % !HoldsAt(Active(activity),0).
 %  not(initially(active(Activity))).

 /*  [] ->
       ta(Ta_Param, not(initially(active(Activity)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3182
axiom(not(initially(active(Activity))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3183
% [activity]
 % !HoldsAt(Completed(activity),0).
 %  not(initially(completed(Activity))).

 /*  [] ->
       ta(Ta_Param, not(initially(completed(Activity)))).
 */
axiom(not(initially(completed(Activity))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3184
% [time]
 % time=% 14 <-> HoldsAt(Condition(FC),time).

 /*  Time=14 <->
       holds_at(condition(fc), Time).
 */

 /*  [=] <->
       [holds_at, condition, fc].
 */

 /*  Time=14 ->
       holds_at(condition(fc), Time).
 */

 /*  holds_at(condition(fc), Time) :-
       equals(Time, 14).
 */

 /*  axiom_head(Time) ->
       equals(Time, 14).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=14).
 */

 /*  [call(Time=14)] ->
       ta(Time, holds_at(condition(fc), Time)).
 */

 /*  [holds_at(call(Time=14), Time)] ->
       ta(Time, holds_at(condition(fc), Time)).
 */
axiom(holds_at(condition(fc), Time),
    [holds_at(call(Time=14), Time)]).

 /*  holds_at(condition(fc), Time) ->
       Time=14.
 */

 /*  not(holds_at(condition(fc), Time)) :-
       not(equals(Time, 14)).
 */

 /*  axiom_head(Time) ->
       not(equals(Time, 14)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time=14)).
 */

 /*  [not(call(Time=14))] ->
       ta(Time, holds_at(neg(condition(fc)), Time)).
 */

 /*  [holds_at(neg(call(Time=14)), Time)] ->
       ta(Time, holds_at(neg(condition(fc)), Time)).
 */
axiom(holds_at(neg(condition(fc)), Time),
    [holds_at(neg(call(Time=14)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3185
% [time]
 % !HoldsAt(Condition(E1C),time).
holds_at(neg(condition(e1c)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3186
% [time]
 % time=% 10 <-> HoldsAt(Condition(E2C),time).

 /*  Time=10 <->
       holds_at(condition(e2c), Time).
 */

 /*  [=] <->
       [holds_at, condition, e2c].
 */

 /*  Time=10 ->
       holds_at(condition(e2c), Time).
 */

 /*  holds_at(condition(e2c), Time) :-
       equals(Time, 10).
 */

 /*  axiom_head(Time) ->
       equals(Time, 10).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=10).
 */

 /*  [call(Time=10)] ->
       ta(Time, holds_at(condition(e2c), Time)).
 */

 /*  [holds_at(call(Time=10), Time)] ->
       ta(Time, holds_at(condition(e2c), Time)).
 */
axiom(holds_at(condition(e2c), Time),
    [holds_at(call(Time=10), Time)]).

 /*  holds_at(condition(e2c), Time) ->
       Time=10.
 */

 /*  not(holds_at(condition(e2c), Time)) :-
       not(equals(Time, 10)).
 */

 /*  axiom_head(Time) ->
       not(equals(Time, 10)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time=10)).
 */

 /*  [not(call(Time=10))] ->
       ta(Time, holds_at(neg(condition(e2c)), Time)).
 */

 /*  [holds_at(neg(call(Time=10)), Time)] ->
       ta(Time, holds_at(neg(condition(e2c)), Time)).
 */
axiom(holds_at(neg(condition(e2c)), Time),
    [holds_at(neg(call(Time=10)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3187
% [time]
 % !HoldsAt(Condition(E3C),time).
holds_at(neg(condition(e3c)),Time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3189
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3190
==> completion(delta).
==> completion(happens).

% range time 0 18
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3192
==> range(time,0,18).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3193
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3229
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3230
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3231
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load foundations/ECCausal.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3232
:- load_e('foundations/ECCausal.e', changed).
:- if(false).
:- endif.

% sort switch
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3234
==> sort(switch).

% sort relay
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3235
==> sort(relay).

% sort light
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3236
==> sort(light).

% switch S1, S2, S3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3238
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% relay R
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3239
==> t(relay,r).

% light L
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3240
==> t(light,l).

% event Light(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3242
event(light(Light_Ret)).
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% event Close(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3243
event(close(Close_Ret)).
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% event Open(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3244
event(open(Open_Ret)).
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% event Activate(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3245
event(activate(Activate_Ret)).
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% fluent Lit(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3247
fluent(lit(Lit_Ret)).
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% fluent Closed(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3248
fluent(closed(Closed_Ret)).
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% fluent Activated(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3249
fluent(activated(Activated_Ret)).
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3250
% [time]
% Stopped(Lit(L),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S2),time) ->
% Happens(Light(L),time).

 /*  stopped(lit(l), Time), initiated(closed(s1), Time), initiated(closed(s2), Time) ->
       happens(light(l), Time).
 */

 /*  happens(light(l), Time) :-
       stopped(lit(l), Time),
       initiated(closed(s1), Time),
       initiated(closed(s2), Time).
 */

 /*  [stopped(lit(l), Time), initiated(closed(s1), Time), initiated(closed(s2), Time)] ->
       ta(Time, happens(light(l), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3254
axiom(happens(light(l), Time),
   
    [ stopped(lit(l), Time),
      initiated(closed(s1), Time),
      initiated(closed(s2), Time)
    ]).

 /*  not(stopped(lit(l), Time)) :-
       ( initiated(closed(s1), Time),
         initiated(closed(s2), Time)
       ),
       not(happens(light(l), Time)).
 */

 /*  [initiated(closed(s1), Time), initiated(closed(s2), Time), not(happens(light(l), Time))] ->
       ta(Time, not(stopped(lit(l), Time))).
 */
axiom(not(stopped(lit(l), Time)),
   
    [ initiated(closed(s1), Time),
      initiated(closed(s2), Time),
      not(happens(light(l), Time))
    ]).

 /*  not(initiated(closed(s1), Time)) :-
       initiated(closed(s2), Time),
       stopped(lit(l), Time),
       not(happens(light(l), Time)).
 */

 /*  [initiated(closed(s2), Time), stopped(lit(l), Time), not(happens(light(l), Time))] ->
       ta(Time, not(initiated(closed(s1), Time))).
 */
axiom(not(initiated(closed(s1), Time)),
   
    [ initiated(closed(s2), Time),
      stopped(lit(l), Time),
      not(happens(light(l), Time))
    ]).

 /*  not(initiated(closed(s2), Time)) :-
       initiated(closed(s1), Time),
       stopped(lit(l), Time),
       not(happens(light(l), Time)).
 */

 /*  [initiated(closed(s1), Time), stopped(lit(l), Time), not(happens(light(l), Time))] ->
       ta(Time, not(initiated(closed(s2), Time))).
 */
axiom(not(initiated(closed(s2), Time)),
   
    [ initiated(closed(s1), Time),
      stopped(lit(l), Time),
      not(happens(light(l), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3256
% [time]
% Started(Closed(S2),time) &
% Initiated(Activated(R),time) ->
% Happens(Open(S2),time).

 /*  started(closed(s2), Time), initiated(activated(r), Time) ->
       happens(open(s2), Time).
 */

 /*  happens(open(s2), Time) :-
       started(closed(s2), Time),
       initiated(activated(r), Time).
 */

 /*  [started(closed(s2), Time), initiated(activated(r), Time)] ->
       ta(Time, happens(open(s2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3259
axiom(happens(open(s2), Time),
    [started(closed(s2), Time), initiated(activated(r), Time)]).

 /*  not(started(closed(s2), Time)) :-
       initiated(activated(r), Time),
       not(happens(open(s2), Time)).
 */

 /*  [initiated(activated(r), Time), not(happens(open(s2), Time))] ->
       ta(Time, not(started(closed(s2), Time))).
 */
axiom(not(started(closed(s2), Time)),
    [initiated(activated(r), Time), not(happens(open(s2), Time))]).

 /*  not(initiated(activated(r), Time)) :-
       started(closed(s2), Time),
       not(happens(open(s2), Time)).
 */

 /*  [started(closed(s2), Time), not(happens(open(s2), Time))] ->
       ta(Time, not(initiated(activated(r), Time))).
 */
axiom(not(initiated(activated(r), Time)),
    [started(closed(s2), Time), not(happens(open(s2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3261
% [time]
% Stopped(Activated(R),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S3),time) ->
% Happens(Activate(R),time).

 /*  stopped(activated(r), Time), initiated(closed(s1), Time), initiated(closed(s3), Time) ->
       happens(activate(r), Time).
 */

 /*  happens(activate(r), Time) :-
       stopped(activated(r), Time),
       initiated(closed(s1), Time),
       initiated(closed(s3), Time).
 */

 /*  [stopped(activated(r), Time), initiated(closed(s1), Time), initiated(closed(s3), Time)] ->
       ta(Time, happens(activate(r), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3265
axiom(happens(activate(r), Time),
   
    [ stopped(activated(r), Time),
      initiated(closed(s1), Time),
      initiated(closed(s3), Time)
    ]).

 /*  not(stopped(activated(r), Time)) :-
       ( initiated(closed(s1), Time),
         initiated(closed(s3), Time)
       ),
       not(happens(activate(r), Time)).
 */

 /*  [initiated(closed(s1), Time), initiated(closed(s3), Time), not(happens(activate(r), Time))] ->
       ta(Time, not(stopped(activated(r), Time))).
 */
axiom(not(stopped(activated(r), Time)),
   
    [ initiated(closed(s1), Time),
      initiated(closed(s3), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(initiated(closed(s1), Time)) :-
       initiated(closed(s3), Time),
       stopped(activated(r), Time),
       not(happens(activate(r), Time)).
 */

 /*  [initiated(closed(s3), Time), stopped(activated(r), Time), not(happens(activate(r), Time))] ->
       ta(Time, not(initiated(closed(s1), Time))).
 */
axiom(not(initiated(closed(s1), Time)),
   
    [ initiated(closed(s3), Time),
      stopped(activated(r), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(initiated(closed(s3), Time)) :-
       initiated(closed(s1), Time),
       stopped(activated(r), Time),
       not(happens(activate(r), Time)).
 */

 /*  [initiated(closed(s1), Time), stopped(activated(r), Time), not(happens(activate(r), Time))] ->
       ta(Time, not(initiated(closed(s3), Time))).
 */
axiom(not(initiated(closed(s3), Time)),
   
    [ initiated(closed(s1), Time),
      stopped(activated(r), Time),
      not(happens(activate(r), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3267
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          initiates(close(Switch), closed(Switch), Time)).
 */
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3268
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          terminates(open(Switch), closed(Switch), Time)).
 */
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3269
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).

 /*  [] ->
       ta(Time,
          initiates(activate(Relay), activated(Relay), Time)).
 */
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3270
% [light,time]
 % Initiates(Light(light),Lit(light),time).

 /*  [] ->
       ta(Time, initiates(light(Light), lit(Light), Time)).
 */
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3272
% !HoldsAt(Closed(S1),0).
 %  not(initially(closed(s1))).

 /*  [] ->
       ta(Ta_Param, not(initially(closed(s1)))).
 */
axiom(not(initially(closed(s1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3273
% HoldsAt(Closed(S2),0).

 /*  [] ->
       ta(Ta_Param, initially(closed(s2))).
 */
axiom(initially(closed(s2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3274
% HoldsAt(Closed(S3),0).

 /*  [] ->
       ta(Ta_Param, initially(closed(s3))).
 */
axiom(initially(closed(s3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3275
% !HoldsAt(Activated(R),0).
 %  not(initially(activated(r))).

 /*  [] ->
       ta(Ta_Param, not(initially(activated(r)))).
 */
axiom(not(initially(activated(r))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3276
% !HoldsAt(Lit(L),0).
 %  not(initially(lit(l))).

 /*  [] ->
       ta(Ta_Param, not(initially(lit(l)))).
 */
axiom(not(initially(lit(l))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3278
% Happens(Close(S1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(close(s1), t)).
 */
axiom(happens(close(s1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3280
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3281
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3283
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3284
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Effect Axioms)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3314
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3315
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3317
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3318
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3320
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3321
==> subsort(agent,object).

% sort room
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3322
==> sort(room).

% object Book
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3324
==> t(object,book).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3325
==> t(agent,nathan).

% room LivingRoom, Kitchen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3326
==> t(room,livingRoom).
==> t(room,kitchen).

% event LetGoOf(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3328
event(letGoOf(LetGoOf_Param,LetGoOf_Ret)).
==> mpred_prop(letGoOf(agent,object),event).
==> meta_argtypes(letGoOf(agent,object)).

% event PickUp(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3329
event(pickUp(PickUp_Param,PickUp_Ret)).
==> mpred_prop(pickUp(agent,object),event).
==> meta_argtypes(pickUp(agent,object)).

% event Walk(agent,room,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3330
event(walk(Walk_Param,_,Walk_Ret)).
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% fluent InRoom(object,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3332
fluent(inRoom(InRoom_Param,InRoom_Ret)).
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% fluent Holding(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3333
fluent(holding(Holding_Param,Holding_Ret)).
==> mpred_prop(holding(agent,object),fluent).
==> meta_argtypes(holding(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3334
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3337
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).

 /*  [] ->
       ta(Time,
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Agent, Room2),
                    Time)).
 */
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3339
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).

 /*  [diff(Room1, Room2)] ->
       ta(Time,
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Agent, Room1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3341
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [diff(Room1, Room2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3343
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).

 /*  [holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Object, Room), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Object),
                    holding(Agent, Object),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3346
axiom(initiates(pickUp(Agent, Object), holding(Agent, Object), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(inRoom(Object, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3348
% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).

 /*  [holds_at(holding(Agent, Object), Time)] ->
       ta(Time,
          terminates(letGoOf(Agent, Object),
                     holding(Agent, Object),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3350
axiom(terminates(letGoOf(Agent, Object), holding(Agent, Object), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3352
% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) ->
% Initiates(Walk(agent,room1,room2),InRoom(object,room2),time).

 /*  [holds_at(holding(Agent, Object), Time)] ->
       ta(Time,
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Object, Room2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3354
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Object, Room2), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3356
% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) &
% room1!=room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(object,room1),time).

 /*  [holds_at(holding(Agent, Object), Time), diff(Room1, Room2)] ->
       ta(Time,
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Object, Room1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3359
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Object, Room1), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      diff(Room1, Room2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3361
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3363
% Happens(PickUp(Nathan,Book),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(pickUp(nathan, book), t)).
 */
axiom(happens(pickUp(nathan, book), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3364
% Happens(Walk(Nathan,LivingRoom,Kitchen),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(walk(nathan, livingRoom, kitchen), start)).
 */
axiom(happens(walk(nathan, livingRoom, kitchen), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3366
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3369
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.

 /*  allDifferent([Object, Room1, Time, Room2]) ->
       ( holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time)->Room1=Room2
       ).
 */

 /*  not(holds_at(inRoom(Object, Room1), Time)) :-
       holds_at(inRoom(Object, Room2), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Object, Room2), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room1)), Time)).
 */

 /*  [holds_at(inRoom(Object, Room2), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3371
axiom(holds_at(neg(inRoom(Object, Room1)), Time),
   
    [ holds_at(inRoom(Object, Room2), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).

 /*  not(holds_at(inRoom(Object, Room2), Time)) :-
       holds_at(inRoom(Object, Room1), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Object, Room1), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room2)), Time)).
 */

 /*  [holds_at(inRoom(Object, Room1), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room2)), Time)).
 */
axiom(holds_at(neg(inRoom(Object, Room2)), Time),
   
    [ holds_at(inRoom(Object, Room1), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3373
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3375
% HoldsAt(InRoom(Nathan,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(inRoom(nathan, livingRoom))).
 */
axiom(initially(inRoom(nathan, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3376
% HoldsAt(InRoom(Book,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(inRoom(book, livingRoom))).
 */
axiom(initially(inRoom(book, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3378
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3379
% !HoldsAt(Holding(Nathan,Book),0).
 %  not(initially(holding(nathan,book))).

 /*  [] ->
       ta(Ta_Param, not(initially(holding(nathan, book)))).
 */
axiom(not(initially(holding(nathan, book))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3380
% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
holds_at(neg(holding(Agent,Agent)),Time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3382
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3383
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3385
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3386
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3422
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3423
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3424
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort switch
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3426
==> sort(switch).

% sort relay
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3427
==> sort(relay).

% sort light
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3428
==> sort(light).

% switch S1, S2, S3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3430
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% relay R
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3431
==> t(relay,r).

% light L
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3432
==> t(light,l).

% event Light(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3434
event(light(Light_Ret)).
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% event Unlight(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3435
event(unlight(Unlight_Ret)).
==> mpred_prop(unlight(light),event).
==> meta_argtypes(unlight(light)).

% event Close(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3436
event(close(Close_Ret)).
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% event Open(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3437
event(open(Open_Ret)).
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% event Activate(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3438
event(activate(Activate_Ret)).
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% fluent Lit(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3440
fluent(lit(Lit_Ret)).
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% fluent Closed(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3441
fluent(closed(Closed_Ret)).
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% fluent Activated(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3442
fluent(activated(Activated_Ret)).
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3443
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).

 /*  holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time) ->
       happens(light(l), Time).
 */

 /*  happens(light(l), Time) :-
       holds_at(neg(lit(l)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s2), Time).
 */

 /*  [holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time)] ->
       ta(Time, happens(light(l), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3447
axiom(happens(light(l), Time),
   
    [ holds_at(neg(lit(l)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time)
    ]).

 /*  not(holds_at(neg(lit(l)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s2), Time)
       ),
       not(happens(light(l), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(closed(s2), Time), not(happens(light(l), Time))] ->
       ta(Time, holds_at(neg(neg(lit(l))), Time)).
 */
axiom(holds_at(neg(neg(lit(l))), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      not(happens(light(l), Time))
    ]).

 /*  not(holds_at(closed(s1), Time)) :-
       holds_at(closed(s2), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */

 /*  [holds_at(closed(s2), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time, holds_at(neg(closed(s1)), Time)).
 */
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(closed(s1), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time, holds_at(neg(closed(s2)), Time)).
 */
axiom(holds_at(neg(closed(s2)), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3449
% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).

 /*  holds_at(lit(l), Time), (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)) ->
       happens(unlight(l), Time).
 */

 /*  happens(unlight(l), Time) :-
       holds_at(lit(l), Time),
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ).
 */

 /*  [holds_at(lit(l), Time),  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))] ->
       ta(Time, happens(unlight(l), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3452
axiom(happens(unlight(l), Time),
   
    [ holds_at(lit(l), Time),
       (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))
    ]).

 /*  not(holds_at(lit(l), Time)) :-
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ),
       not(happens(unlight(l), Time)).
 */

 /*  [(holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)), not(happens(unlight(l), Time))] ->
       ta(Time, holds_at(neg(lit(l)), Time)).
 */
axiom(holds_at(neg(lit(l)), Time),
   
    [  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)),
      not(happens(unlight(l), Time))
    ]).

 /*  not(holds_at(neg(closed(s1)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s1))), Time)).
 */
axiom(holds_at(neg(neg(closed(s1))), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).

 /*  not(holds_at(neg(closed(s2)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s2))), Time)).
 */
axiom(holds_at(neg(neg(closed(s2))), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3454
% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).

 /*  holds_at(closed(s2), Time), holds_at(activated(r), Time) ->
       happens(open(s2), Time).
 */

 /*  happens(open(s2), Time) :-
       holds_at(closed(s2), Time),
       holds_at(activated(r), Time).
 */

 /*  [holds_at(closed(s2), Time), holds_at(activated(r), Time)] ->
       ta(Time, happens(open(s2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3457
axiom(happens(open(s2), Time),
    [holds_at(closed(s2), Time), holds_at(activated(r), Time)]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(activated(r), Time),
       not(happens(open(s2), Time)).
 */

 /*  [holds_at(activated(r), Time), not(happens(open(s2), Time))] ->
       ta(Time, holds_at(neg(closed(s2)), Time)).
 */
axiom(holds_at(neg(closed(s2)), Time),
    [holds_at(activated(r), Time), not(happens(open(s2), Time))]).

 /*  not(holds_at(activated(r), Time)) :-
       holds_at(closed(s2), Time),
       not(happens(open(s2), Time)).
 */

 /*  [holds_at(closed(s2), Time), not(happens(open(s2), Time))] ->
       ta(Time, holds_at(neg(activated(r)), Time)).
 */
axiom(holds_at(neg(activated(r)), Time),
    [holds_at(closed(s2), Time), not(happens(open(s2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3459
% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).

 /*  holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s3), Time) ->
       happens(activate(r), Time).
 */

 /*  happens(activate(r), Time) :-
       holds_at(neg(activated(r)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s3), Time).
 */

 /*  [holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s3), Time)] ->
       ta(Time, happens(activate(r), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3463
axiom(happens(activate(r), Time),
   
    [ holds_at(neg(activated(r)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s3), Time)
    ]).

 /*  not(holds_at(neg(activated(r)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s3), Time)
       ),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(closed(s3), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(neg(activated(r))), Time)).
 */
axiom(holds_at(neg(neg(activated(r))), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s3), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(holds_at(closed(s1), Time)) :-
       holds_at(closed(s3), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s3), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(closed(s1)), Time)).
 */
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s3), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(holds_at(closed(s3), Time)) :-
       holds_at(closed(s1), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(closed(s3)), Time)).
 */
axiom(holds_at(neg(closed(s3)), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3465
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          initiates(close(Switch), closed(Switch), Time)).
 */
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3466
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          terminates(open(Switch), closed(Switch), Time)).
 */
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3467
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).

 /*  [] ->
       ta(Time,
          initiates(activate(Relay), activated(Relay), Time)).
 */
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3468
% [light,time]
 % Initiates(Light(light),Lit(light),time).

 /*  [] ->
       ta(Time, initiates(light(Light), lit(Light), Time)).
 */
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3469
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).

 /*  [] ->
       ta(Time,
          terminates(unlight(Light), lit(Light), Time)).
 */
axiom(terminates(unlight(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3471
% !HoldsAt(Closed(S1),0).
 %  not(initially(closed(s1))).

 /*  [] ->
       ta(Ta_Param, not(initially(closed(s1)))).
 */
axiom(not(initially(closed(s1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3472
% HoldsAt(Closed(S2),0).

 /*  [] ->
       ta(Ta_Param, initially(closed(s2))).
 */
axiom(initially(closed(s2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3473
% HoldsAt(Closed(S3),0).

 /*  [] ->
       ta(Ta_Param, initially(closed(s3))).
 */
axiom(initially(closed(s3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3474
% !HoldsAt(Activated(R),0).
 %  not(initially(activated(r))).

 /*  [] ->
       ta(Ta_Param, not(initially(activated(r)))).
 */
axiom(not(initially(activated(r))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3475
% !HoldsAt(Lit(L),0).
 %  not(initially(lit(l))).

 /*  [] ->
       ta(Ta_Param, not(initially(lit(l)))).
 */
axiom(not(initially(lit(l))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3477
% Happens(Close(S1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(close(s1), t)).
 */
axiom(happens(close(s1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3479
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3480
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3482
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3483
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ShanahanCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3520
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3521
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3522
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort switch
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3524
==> sort(switch).

% sort relay
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3525
==> sort(relay).

% sort light
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3526
==> sort(light).

% switch S1, S2, S3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3528
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% relay R
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3529
==> t(relay,r).

% light L
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3530
==> t(light,l).

% event Light(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3532
event(light(Light_Ret)).
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% event Unlight(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3533
event(unlight(Unlight_Ret)).
==> mpred_prop(unlight(light),event).
==> meta_argtypes(unlight(light)).

% event Close(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3534
event(close(Close_Ret)).
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% event Open(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3535
event(open(Open_Ret)).
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% event Activate(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3536
event(activate(Activate_Ret)).
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% event Deactivate(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3537
event(deactivate(Deactivate_Ret)).
==> mpred_prop(deactivate(relay),event).
==> meta_argtypes(deactivate(relay)).

% fluent Lit(light)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3539
fluent(lit(Lit_Ret)).
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% fluent Closed(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3540
fluent(closed(Closed_Ret)).
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% fluent Activated(relay)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3541
fluent(activated(Activated_Ret)).
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3542
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).

 /*  holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time) ->
       happens(light(l), Time).
 */

 /*  happens(light(l), Time) :-
       holds_at(neg(lit(l)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s2), Time).
 */

 /*  [holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time)] ->
       ta(Time, happens(light(l), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3546
axiom(happens(light(l), Time),
   
    [ holds_at(neg(lit(l)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time)
    ]).

 /*  not(holds_at(neg(lit(l)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s2), Time)
       ),
       not(happens(light(l), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(closed(s2), Time), not(happens(light(l), Time))] ->
       ta(Time, holds_at(neg(neg(lit(l))), Time)).
 */
axiom(holds_at(neg(neg(lit(l))), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      not(happens(light(l), Time))
    ]).

 /*  not(holds_at(closed(s1), Time)) :-
       holds_at(closed(s2), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */

 /*  [holds_at(closed(s2), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time, holds_at(neg(closed(s1)), Time)).
 */
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(closed(s1), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time, holds_at(neg(closed(s2)), Time)).
 */
axiom(holds_at(neg(closed(s2)), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3548
% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).

 /*  holds_at(lit(l), Time), (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)) ->
       happens(unlight(l), Time).
 */

 /*  happens(unlight(l), Time) :-
       holds_at(lit(l), Time),
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ).
 */

 /*  [holds_at(lit(l), Time),  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))] ->
       ta(Time, happens(unlight(l), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3551
axiom(happens(unlight(l), Time),
   
    [ holds_at(lit(l), Time),
       (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))
    ]).

 /*  not(holds_at(lit(l), Time)) :-
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ),
       not(happens(unlight(l), Time)).
 */

 /*  [(holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)), not(happens(unlight(l), Time))] ->
       ta(Time, holds_at(neg(lit(l)), Time)).
 */
axiom(holds_at(neg(lit(l)), Time),
   
    [  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)),
      not(happens(unlight(l), Time))
    ]).

 /*  not(holds_at(neg(closed(s1)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s1))), Time)).
 */
axiom(holds_at(neg(neg(closed(s1))), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).

 /*  not(holds_at(neg(closed(s2)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s2))), Time)).
 */
axiom(holds_at(neg(neg(closed(s2))), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3553
% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).

 /*  holds_at(closed(s2), Time), holds_at(activated(r), Time) ->
       happens(open(s2), Time).
 */

 /*  happens(open(s2), Time) :-
       holds_at(closed(s2), Time),
       holds_at(activated(r), Time).
 */

 /*  [holds_at(closed(s2), Time), holds_at(activated(r), Time)] ->
       ta(Time, happens(open(s2), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3556
axiom(happens(open(s2), Time),
    [holds_at(closed(s2), Time), holds_at(activated(r), Time)]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(activated(r), Time),
       not(happens(open(s2), Time)).
 */

 /*  [holds_at(activated(r), Time), not(happens(open(s2), Time))] ->
       ta(Time, holds_at(neg(closed(s2)), Time)).
 */
axiom(holds_at(neg(closed(s2)), Time),
    [holds_at(activated(r), Time), not(happens(open(s2), Time))]).

 /*  not(holds_at(activated(r), Time)) :-
       holds_at(closed(s2), Time),
       not(happens(open(s2), Time)).
 */

 /*  [holds_at(closed(s2), Time), not(happens(open(s2), Time))] ->
       ta(Time, holds_at(neg(activated(r)), Time)).
 */
axiom(holds_at(neg(activated(r)), Time),
    [holds_at(closed(s2), Time), not(happens(open(s2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3558
% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).

 /*  holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time) ->
       happens(activate(r), Time).
 */

 /*  happens(activate(r), Time) :-
       holds_at(neg(activated(r)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s2), Time),
       holds_at(closed(s3), Time).
 */

 /*  [holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time)] ->
       ta(Time, happens(activate(r), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3563
axiom(happens(activate(r), Time),
   
    [ holds_at(neg(activated(r)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      holds_at(closed(s3), Time)
    ]).

 /*  not(holds_at(neg(activated(r)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s2), Time),
         holds_at(closed(s3), Time)
       ),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(neg(activated(r))), Time)).
 */
axiom(holds_at(neg(neg(activated(r))), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      holds_at(closed(s3), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(holds_at(closed(s1), Time)) :-
       ( holds_at(closed(s2), Time),
         holds_at(closed(s3), Time)
       ),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s2), Time), holds_at(closed(s3), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(closed(s1)), Time)).
 */
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(closed(s3), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(closed(s3), Time),
       holds_at(closed(s1), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s3), Time), holds_at(closed(s1), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(closed(s2)), Time)).
 */
axiom(holds_at(neg(closed(s2)), Time),
   
    [ holds_at(closed(s3), Time),
      holds_at(closed(s1), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).

 /*  not(holds_at(closed(s3), Time)) :-
       holds_at(closed(s2), Time),
       holds_at(closed(s1), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */

 /*  [holds_at(closed(s2), Time), holds_at(closed(s1), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time, holds_at(neg(closed(s3)), Time)).
 */
axiom(holds_at(neg(closed(s3)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(closed(s1), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3565
% [time]
% HoldsAt(Activated(R),time) &
% (!HoldsAt(Closed(S1),time) |
%  !HoldsAt(Closed(S2),time) |
%  !HoldsAt(Closed(S3),time)) ->
% Happens(Deactivate(R),time).

 /*  holds_at(activated(r), Time), (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time)) ->
       happens(deactivate(r), Time).
 */

 /*  happens(deactivate(r), Time) :-
       holds_at(activated(r), Time),
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ;   holds_at(neg(closed(s3)), Time)
       ).
 */

 /*  [holds_at(activated(r), Time),  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time))] ->
       ta(Time, happens(deactivate(r), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3570
axiom(happens(deactivate(r), Time),
   
    [ holds_at(activated(r), Time),
       (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time))
    ]).

 /*  not(holds_at(activated(r), Time)) :-
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ;   holds_at(neg(closed(s3)), Time)
       ),
       not(happens(deactivate(r), Time)).
 */

 /*  [(holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time)), not(happens(deactivate(r), Time))] ->
       ta(Time, holds_at(neg(activated(r)), Time)).
 */
axiom(holds_at(neg(activated(r)), Time),
   
    [  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time)),
      not(happens(deactivate(r), Time))
    ]).

 /*  not(holds_at(neg(closed(s1)), Time)) :-
       holds_at(activated(r), Time),
       not(happens(deactivate(r), Time)).
 */

 /*  [holds_at(activated(r), Time), not(happens(deactivate(r), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s1))), Time)).
 */
axiom(holds_at(neg(neg(closed(s1))), Time),
    [holds_at(activated(r), Time), not(happens(deactivate(r), Time))]).

 /*  not(holds_at(neg(closed(s2)), Time)) :-
       holds_at(activated(r), Time),
       not(happens(deactivate(r), Time)).
 */

 /*  [holds_at(activated(r), Time), not(happens(deactivate(r), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s2))), Time)).
 */
axiom(holds_at(neg(neg(closed(s2))), Time),
    [holds_at(activated(r), Time), not(happens(deactivate(r), Time))]).

 /*  not(holds_at(neg(closed(s3)), Time)) :-
       holds_at(activated(r), Time),
       not(happens(deactivate(r), Time)).
 */

 /*  [holds_at(activated(r), Time), not(happens(deactivate(r), Time))] ->
       ta(Time, holds_at(neg(neg(closed(s3))), Time)).
 */
axiom(holds_at(neg(neg(closed(s3))), Time),
    [holds_at(activated(r), Time), not(happens(deactivate(r), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3572
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          initiates(close(Switch), closed(Switch), Time)).
 */
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3573
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          terminates(open(Switch), closed(Switch), Time)).
 */
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3574
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).

 /*  [] ->
       ta(Time,
          initiates(activate(Relay), activated(Relay), Time)).
 */
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3575
% [relay,time]
 % Terminates(Deactivate(relay),Activated(relay),time).

 /*  [] ->
       ta(Time,
          terminates(deactivate(Relay), activated(Relay), Time)).
 */
axiom(terminates(deactivate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3576
% [light,time]
 % Initiates(Light(light),Lit(light),time).

 /*  [] ->
       ta(Time, initiates(light(Light), lit(Light), Time)).
 */
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3577
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).

 /*  [] ->
       ta(Time,
          terminates(unlight(Light), lit(Light), Time)).
 */
axiom(terminates(unlight(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3579
% !HoldsAt(Closed(S1),0).
 %  not(initially(closed(s1))).

 /*  [] ->
       ta(Ta_Param, not(initially(closed(s1)))).
 */
axiom(not(initially(closed(s1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3580
% HoldsAt(Closed(S2),0).

 /*  [] ->
       ta(Ta_Param, initially(closed(s2))).
 */
axiom(initially(closed(s2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3581
% HoldsAt(Closed(S3),0).

 /*  [] ->
       ta(Ta_Param, initially(closed(s3))).
 */
axiom(initially(closed(s3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3582
% !HoldsAt(Activated(R),0).
 %  not(initially(activated(r))).

 /*  [] ->
       ta(Ta_Param, not(initially(activated(r)))).
 */
axiom(not(initially(activated(r))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3583
% !HoldsAt(Lit(L),0).
 %  not(initially(lit(l))).

 /*  [] ->
       ta(Ta_Param, not(initially(lit(l)))).
 */
axiom(not(initially(lit(l))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3585
% Happens(Close(S1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(close(s1), t)).
 */
axiom(happens(close(s1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3587
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3588
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3590
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3591
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Release Axioms and State Constraints)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3620
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3621
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3622
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3624
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3625
==> subsort(agent,object).

% sort room
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3626
==> sort(room).

% object Book
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3628
==> t(object,book).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3629
==> t(agent,nathan).

% room LivingRoom, Kitchen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3630
==> t(room,livingRoom).
==> t(room,kitchen).

% event LetGoOf(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3632
event(letGoOf(LetGoOf_Param,LetGoOf_Ret)).
==> mpred_prop(letGoOf(agent,object),event).
==> meta_argtypes(letGoOf(agent,object)).

% event PickUp(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3633
event(pickUp(PickUp_Param,PickUp_Ret)).
==> mpred_prop(pickUp(agent,object),event).
==> meta_argtypes(pickUp(agent,object)).

% event Walk(agent,room,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3634
event(walk(Walk_Param,_,Walk_Ret)).
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% fluent InRoom(object,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3636
fluent(inRoom(InRoom_Param,InRoom_Ret)).
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% fluent Holding(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3637
fluent(holding(Holding_Param,Holding_Ret)).
==> mpred_prop(holding(agent,object),fluent).
==> meta_argtypes(holding(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3638
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3641
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).

 /*  [] ->
       ta(Time,
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Agent, Room2),
                    Time)).
 */
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3643
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).

 /*  [diff(Room1, Room2)] ->
       ta(Time,
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Agent, Room1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3645
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [diff(Room1, Room2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3647
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).

 /*  [holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Object, Room), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Object),
                    holding(Agent, Object),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3650
axiom(initiates(pickUp(Agent, Object), holding(Agent, Object), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(inRoom(Object, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3652
% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).

 /*  [holds_at(holding(Agent, Object), Time)] ->
       ta(Time,
          terminates(letGoOf(Agent, Object),
                     holding(Agent, Object),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3654
axiom(terminates(letGoOf(Agent, Object), holding(Agent, Object), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3656
% [agent,object,room,time]
% Releases(PickUp(agent,object),InRoom(object,room),time).

 /*  [] ->
       ta(Time,
          releases(pickUp(Agent, Object),
                   inRoom(Object, Room),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3657
axiom(releases(pickUp(Agent, Object), inRoom(Object, Room), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3659
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) ->
% Initiates(LetGoOf(agent,object),InRoom(object,room),time).

 /*  [holds_at(inRoom(Agent, Room), Time)] ->
       ta(Time,
          initiates(letGoOf(Agent, Object),
                    inRoom(Object, Room),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3661
axiom(initiates(letGoOf(Agent, Object), inRoom(Object, Room), Time),
    [holds_at(inRoom(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3663
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3665
% Happens(PickUp(Nathan,Book),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(pickUp(nathan, book), t)).
 */
axiom(happens(pickUp(nathan, book), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3666
% Happens(Walk(Nathan,LivingRoom,Kitchen),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(walk(nathan, livingRoom, kitchen), start)).
 */
axiom(happens(walk(nathan, livingRoom, kitchen), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3668
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3671
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.

 /*  allDifferent([Object, Room1, Time, Room2]) ->
       ( holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time)->Room1=Room2
       ).
 */

 /*  not(holds_at(inRoom(Object, Room1), Time)) :-
       holds_at(inRoom(Object, Room2), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Object, Room2), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room1)), Time)).
 */

 /*  [holds_at(inRoom(Object, Room2), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3673
axiom(holds_at(neg(inRoom(Object, Room1)), Time),
   
    [ holds_at(inRoom(Object, Room2), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).

 /*  not(holds_at(inRoom(Object, Room2), Time)) :-
       holds_at(inRoom(Object, Room1), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Object, Room1), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room2)), Time)).
 */

 /*  [holds_at(inRoom(Object, Room1), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room2)), Time)).
 */
axiom(holds_at(neg(inRoom(Object, Room2)), Time),
   
    [ holds_at(inRoom(Object, Room1), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3675
% [agent,object,room,time]
% HoldsAt(Holding(agent,object),time) &
% HoldsAt(InRoom(agent,room),time) ->
% HoldsAt(InRoom(object,room),time).

 /*  allDifferent([Agent, Object, Time, Room]) ->
       ( holds_at(holding(Agent, Object), Time), holds_at(inRoom(Agent, Room), Time)->holds_at(inRoom(Object, Room), Time)
       ).
 */

 /*  holds_at(inRoom(Object, Room), Time) :-
       ( holds_at(holding(Agent, Object), Time),
         holds_at(inRoom(Agent, Room), Time)
       ),
       allDifferent([Agent, Object, Time, Room]).
 */

 /*  [holds_at(holding(Agent, Object), Time), holds_at(inRoom(Agent, Room), Time), allDifferent([Agent, Object, Time, Room])] ->
       ta(Time, holds_at(inRoom(Object, Room), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3678
axiom(holds_at(inRoom(Object, Room), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      holds_at(inRoom(Agent, Room), Time),
      allDifferent([Agent, Object, Time, Room])
    ]).

 /*  not(holds_at(holding(Agent, Object), Time)) :-
       holds_at(inRoom(Agent, Room), Time),
       not(holds_at(inRoom(Object, Room), Time)),
       allDifferent([Agent, Object, Time, Room]).
 */

 /*  [holds_at(inRoom(Agent, Room), Time), holds_at(neg(inRoom(Object, Room)), Time), allDifferent([Agent, Object, Time, Room])] ->
       ta(Time, holds_at(neg(holding(Agent, Object)), Time)).
 */
axiom(holds_at(neg(holding(Agent, Object)), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(neg(inRoom(Object, Room)), Time),
      allDifferent([Agent, Object, Time, Room])
    ]).

 /*  not(holds_at(inRoom(Agent, Room), Time)) :-
       holds_at(holding(Agent, Object), Time),
       not(holds_at(inRoom(Object, Room), Time)),
       allDifferent([Agent, Object, Time, Room]).
 */

 /*  [holds_at(holding(Agent, Object), Time), holds_at(neg(inRoom(Object, Room)), Time), allDifferent([Agent, Object, Time, Room])] ->
       ta(Time, holds_at(neg(inRoom(Agent, Room)), Time)).
 */
axiom(holds_at(neg(inRoom(Agent, Room)), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      holds_at(neg(inRoom(Object, Room)), Time),
      allDifferent([Agent, Object, Time, Room])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3680
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3682
% HoldsAt(InRoom(Nathan,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(inRoom(nathan, livingRoom))).
 */
axiom(initially(inRoom(nathan, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3683
% HoldsAt(InRoom(Book,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param, initially(inRoom(book, livingRoom))).
 */
axiom(initially(inRoom(book, livingRoom)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3685
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3686
% !HoldsAt(Holding(Nathan,Book),0).
 %  not(initially(holding(nathan,book))).

 /*  [] ->
       ta(Ta_Param, not(initially(holding(nathan, book)))).
 */
axiom(not(initially(holding(nathan, book))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3687
% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
holds_at(neg(holding(Agent,Agent)),Time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3689
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3690
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3692
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3693
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/HotAirBalloon.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{MillerShanahan:1999,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "1999",
%;   title = "The event calculus in classical logic---\uppercase{A}lternative axiomatisations",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "4",
%;   number = "016",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3729
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3730
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3731
:- set_ec_option(trajectory, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3733
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3734
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort balloon
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3736
==> sort(balloon).

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3737
==> sort(agent).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3738
==> subsort(height,integer).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3740
==> t(agent,nathan).

% balloon Balloon
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3741
==> t(balloon,balloon).

% fluent HeaterOn(balloon)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3743
fluent(heaterOn(HeaterOn_Ret)).
==> mpred_prop(heaterOn(balloon),fluent).
==> meta_argtypes(heaterOn(balloon)).

% fluent Height(balloon,height)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3744
fluent(height(Height_Param,Height_Ret)).
==> mpred_prop(height(balloon,height),fluent).
==> meta_argtypes(height(balloon,height)).

% noninertial Height
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3745
==> noninertial(height).

% event TurnOnHeater(agent,balloon)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3747
event(turnOnHeater(TurnOnHeater_Param,TurnOnHeater_Ret)).
==> mpred_prop(turnOnHeater(agent,balloon),event).
==> meta_argtypes(turnOnHeater(agent,balloon)).

% event TurnOffHeater(agent,balloon)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3748
event(turnOffHeater(TurnOffHeater_Param,TurnOffHeater_Ret)).
==> mpred_prop(turnOffHeater(agent,balloon),event).
==> meta_argtypes(turnOffHeater(agent,balloon)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3749
%; Sigma
% [agent,balloon,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3752
% Initiates(TurnOnHeater(agent,balloon),HeaterOn(balloon),time).

 /*  [] ->
       ta(Time,
          initiates(turnOnHeater(Agent, Balloon),
                    heaterOn(Balloon),
                    Time)).
 */
axiom(initiates(turnOnHeater(Agent, Balloon), heaterOn(Balloon), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3754
% [agent,balloon,time]
% Terminates(TurnOffHeater(agent,balloon),HeaterOn(balloon),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffHeater(Agent, Balloon),
                     heaterOn(Balloon),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3755
axiom(terminates(turnOffHeater(Agent, Balloon), heaterOn(Balloon), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3757
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3759
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3759
% Happens(TurnOnHeater(Nathan,Balloon),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOnHeater(nathan, balloon), t)).
 */
axiom(happens(turnOnHeater(nathan, balloon), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3760
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3760
% Happens(TurnOffHeater(Nathan,Balloon),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(turnOffHeater(nathan, balloon), t2)).
 */
axiom(happens(turnOffHeater(nathan, balloon), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3762
%; Psi
% [balloon,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3765
% HoldsAt(Height(balloon,height1),time) &
% HoldsAt(Height(balloon,height2),time) ->
% height1=height2.

 /*  allDifferent([Balloon, Height1, Time, Height2]) ->
       ( holds_at(height(Balloon, Height1), Time), holds_at(height(Balloon, Height2), Time)->Height1=Height2
       ).
 */

 /*  not(holds_at(height(Balloon, Height1), Time)) :-
       holds_at(height(Balloon, Height2), Time),
       not(equals(Height1, Height2)),
       allDifferent([Balloon, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Balloon, Height2), Time), not(call(Height1=Height2)), allDifferent([Balloon, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height1)), Time)).
 */

 /*  [holds_at(height(Balloon, Height2), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Balloon, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3767
axiom(holds_at(neg(height(Balloon, Height1)), Time),
   
    [ holds_at(height(Balloon, Height2), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Balloon, Height1, Time, Height2])
    ]).

 /*  not(holds_at(height(Balloon, Height2), Time)) :-
       holds_at(height(Balloon, Height1), Time),
       not(equals(Height1, Height2)),
       allDifferent([Balloon, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Balloon, Height1), Time), not(call(Height1=Height2)), allDifferent([Balloon, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height2)), Time)).
 */

 /*  [holds_at(height(Balloon, Height1), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Balloon, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height2)), Time)).
 */
axiom(holds_at(neg(height(Balloon, Height2)), Time),
   
    [ holds_at(height(Balloon, Height1), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Balloon, Height1, Time, Height2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3769
%; Pi
% [balloon,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3772
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 + offset) ->
% Trajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).

 /*  allDifferent([Balloon, Height1, Time, Height2, Offset]) ->
       ( holds_at(height(Balloon, Height1), Time), Height2=Height1+Offset->trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset)
       ).
 */

 /*  trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset) :-
       ( holds_at(height(Balloon, Height1), Time),
         equals(Height2, Height1+Offset)
       ),
       allDifferent(
                    [ Balloon,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1+Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1+Offset).
 */

 /*  [holds_at(height(Balloon, Height1), Time), call(Height2=Height1+Offset), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(heaterOn(Balloon),
                     Time,
                     height(Balloon, Height2),
                     Offset)).
 */

 /*  [holds_at(height(Balloon, Height1), Time), holds_at(call(Height2=Height1+Offset), Time), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(heaterOn(Balloon),
                     Time,
                     height(Balloon, Height2),
                     Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3774
axiom(trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset),
   
    [ holds_at(height(Balloon, Height1), Time),
      holds_at(call(Height2=Height1+Offset), Time),
      allDifferent(
                   [ Balloon,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).

 /*  not(holds_at(height(Balloon, Height1), Time)) :-
       equals(Height2, Height1+Offset),
       not(trajectory(heaterOn(Balloon),
                      Time,
                      height(Balloon, Height2),
                      Offset)),
       allDifferent(
                    [ Balloon,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1+Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1+Offset).
 */

 /*  [call(Height2=Height1+Offset), not(trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset)), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height1)), Time)).
 */

 /*  [holds_at(call(Height2=Height1+Offset), Time), not(trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset)), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height1)), Time)).
 */
axiom(holds_at(neg(height(Balloon, Height1)), Time),
   
    [ holds_at(call(Height2=Height1+Offset), Time),
      not(trajectory(heaterOn(Balloon),
                     Time,
                     height(Balloon, Height2),
                     Offset)),
      allDifferent(
                   [ Balloon,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3776
% [balloon,height1,height2,offset,time]
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 - offset) ->
% AntiTrajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).

 /*  allDifferent([Balloon, Height1, Time, Height2, Offset]) ->
       ( holds_at(height(Balloon, Height1), Time), Height2=Height1-Offset->antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset)
       ).
 */

 /*  antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset) :-
       ( holds_at(height(Balloon, Height1), Time),
         equals(Height2, Height1-Offset)
       ),
       allDifferent(
                    [ Balloon,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [holds_at(height(Balloon, Height1), Time), call(Height2=Height1-Offset), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          antiTrajectory(heaterOn(Balloon),
                         Time,
                         height(Balloon, Height2),
                         Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3779
axiom(antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset),
   
    [ holds_at(height(Balloon, Height1), Time),
      call(Height2=Height1-Offset),
      allDifferent(
                   [ Balloon,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).

 /*  not(holds_at(height(Balloon, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(antiTrajectory(heaterOn(Balloon),
                          Time,
                          height(Balloon, Height2),
                          Offset)),
       allDifferent(
                    [ Balloon,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [call(Height2=Height1-Offset), not(antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset)), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height1)), Time)).
 */

 /*  [holds_at(call(Height2=Height1-Offset), Time), not(antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset)), allDifferent([Balloon, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Balloon, Height1)), Time)).
 */
axiom(holds_at(neg(height(Balloon, Height1)), Time),
   
    [ holds_at(call(Height2=Height1-Offset), Time),
      not(antiTrajectory(heaterOn(Balloon),
                         Time,
                         height(Balloon, Height2),
                         Offset)),
      allDifferent(
                   [ Balloon,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3781
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3783
% HoldsAt(Height(Balloon,0),0).

 /*  [] ->
       ta(Ta_Param, initially(height(balloon, 0))).
 */
axiom(initially(height(balloon, 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3785
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3786
% !HoldsAt(HeaterOn(Balloon),0).
 %  not(initially(heaterOn(balloon))).

 /*  [] ->
       ta(Ta_Param, not(initially(heaterOn(balloon)))).
 */
axiom(not(initially(heaterOn(balloon))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3788
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3789
==> completion(delta).
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3791
==> range(time,0,3).

% range height 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3792
==> range(height,0,2).

% range offset 1 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3793
==> range(offset,1,2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithEvents.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3820
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3821
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3822
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3824
==> sort(object).

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3825
==> sort(agent).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3826
==> subsort(height,integer).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3828
==> t(agent,nathan).

% object Apple
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3829
==> t(object,apple).

% fluent Falling(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3831
fluent(falling(Falling_Ret)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% fluent Height(object,height)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3832
fluent(height(Height_Param,Height_Ret)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% event Drop(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3834
event(drop(Drop_Param,Drop_Ret)).
==> mpred_prop(drop(agent,object),event).
==> meta_argtypes(drop(agent,object)).

% event HitGround(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3835
event(hitGround(HitGround_Ret)).
==> mpred_prop(hitGround(object),event).
==> meta_argtypes(hitGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3836
%; Sigma
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3839
% Initiates(Drop(agent,object),Falling(object),time).

 /*  [] ->
       ta(Time,
          initiates(drop(Agent, Object),
                    falling(Object),
                    Time)).
 */
axiom(initiates(drop(Agent, Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3841
% [agent,object,height,time]
% Releases(Drop(agent,object),Height(object,height),time).

 /*  [] ->
       ta(Time,
          releases(drop(Agent, Object),
                   height(Object, Height),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3842
axiom(releases(drop(Agent, Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3844
% [object,time]
% Terminates(HitGround(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          terminates(hitGround(Object), falling(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3845
axiom(terminates(hitGround(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3847
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitGround(object),Height(object,height),time).

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          initiates(hitGround(Object),
                    height(Object, Height),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3849
axiom(initiates(hitGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3851
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3853
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3853
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)->happens(hitGround(Object), Time)
       ).
 */

 /*  happens(hitGround(Object), Time) :-
       ( holds_at(falling(Object), Time),
         holds_at(height(Object, 0), Time)
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time), allDifferent([Object, Time])] ->
       ta(Time, happens(hitGround(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3856
axiom(happens(hitGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(height(Object, 0), Time), not(happens(hitGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(falling(Object)), Time)).
 */
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitGround(Object), Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), not(happens(hitGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(height(Object, 0)), Time)).
 */
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitGround(Object), Time)),
      allDifferent([Object, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3858
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3858
% Happens(Drop(Nathan,Apple),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(drop(nathan, apple), t)).
 */
axiom(happens(drop(nathan, apple), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3860
%; Psi
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3863
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.

 /*  allDifferent([Object, Height1, Time, Height2]) ->
       ( holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time)->Height1=Height2
       ).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height2), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(height(Object, Height2), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3865
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height1), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3867
%; Pi
% [object,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3870
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).

 /*  allDifferent([Object, Height1, Time, Height2, Offset]) ->
       ( holds_at(height(Object, Height1), Time), Height2=Height1-Offset->trajectory(falling(Object), Time, height(Object, Height2), Offset)
       ).
 */

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       ( holds_at(height(Object, Height1), Time),
         equals(Height2, Height1-Offset)
       ),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [holds_at(height(Object, Height1), Time), call(Height2=Height1-Offset), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(call(Height2=Height1-Offset), Time), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3872
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(call(Height2=Height1-Offset), Time),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [call(Height2=Height1-Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(call(Height2=Height1-Offset), Time), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(call(Height2=Height1-Offset), Time),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3874
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3876
% !HoldsAt(Falling(Apple),0).
 %  not(initially(falling(apple))).

 /*  [] ->
       ta(Ta_Param, not(initially(falling(apple)))).
 */
axiom(not(initially(falling(apple))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3877
% HoldsAt(Height(Apple,3),0).

 /*  [] ->
       ta(Ta_Param, initially(height(apple, 3))).
 */
axiom(initially(height(apple, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3879
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3880
==> completion(delta).
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3882
==> range(time,0,5).

% range height 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3883
==> range(height,0,3).

% range offset 1 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3884
==> range(offset,1,3).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithAntiTrajectory.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3911
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3912
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3913
:- set_ec_option(trajectory, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3915
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3916
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3918
==> sort(object).

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3919
==> sort(agent).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3920
==> subsort(height,integer).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3922
==> t(agent,nathan).

% object Apple
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3923
==> t(object,apple).

% fluent Falling(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3925
fluent(falling(Falling_Ret)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% fluent Height(object,height)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3926
fluent(height(Height_Param,Height_Ret)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% noninertial Height
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3927
==> noninertial(height).

% event Drop(agent,object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3929
event(drop(Drop_Param,Drop_Ret)).
==> mpred_prop(drop(agent,object),event).
==> meta_argtypes(drop(agent,object)).

% event HitGround(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3930
event(hitGround(HitGround_Ret)).
==> mpred_prop(hitGround(object),event).
==> meta_argtypes(hitGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3931
%; Sigma
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3934
% Initiates(Drop(agent,object),Falling(object),time).

 /*  [] ->
       ta(Time,
          initiates(drop(Agent, Object),
                    falling(Object),
                    Time)).
 */
axiom(initiates(drop(Agent, Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3936
% [object,time]
% Terminates(HitGround(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          terminates(hitGround(Object), falling(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3937
axiom(terminates(hitGround(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3939
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3941
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3941
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)->happens(hitGround(Object), Time)
       ).
 */

 /*  happens(hitGround(Object), Time) :-
       ( holds_at(falling(Object), Time),
         holds_at(height(Object, 0), Time)
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time), allDifferent([Object, Time])] ->
       ta(Time, happens(hitGround(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3944
axiom(happens(hitGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(height(Object, 0), Time), not(happens(hitGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(falling(Object)), Time)).
 */
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitGround(Object), Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), not(happens(hitGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(height(Object, 0)), Time)).
 */
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitGround(Object), Time)),
      allDifferent([Object, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3946
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3946
% Happens(Drop(Nathan,Apple),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(drop(nathan, apple), t)).
 */
axiom(happens(drop(nathan, apple), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3948
%; Psi
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3951
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.

 /*  allDifferent([Object, Height1, Time, Height2]) ->
       ( holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time)->Height1=Height2
       ).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height2), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(height(Object, Height2), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3953
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height1), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3955
%; Pi
% [object,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3958
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).

 /*  allDifferent([Object, Height1, Time, Height2, Offset]) ->
       ( holds_at(height(Object, Height1), Time), Height2=Height1-Offset->trajectory(falling(Object), Time, height(Object, Height2), Offset)
       ).
 */

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       ( holds_at(height(Object, Height1), Time),
         equals(Height2, Height1-Offset)
       ),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [holds_at(height(Object, Height1), Time), call(Height2=Height1-Offset), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(call(Height2=Height1-Offset), Time), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3960
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(call(Height2=Height1-Offset), Time),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [call(Height2=Height1-Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(call(Height2=Height1-Offset), Time), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(call(Height2=Height1-Offset), Time),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3962
% [object,height,offset,time]
% HoldsAt(Height(object,height),time) ->
% AntiTrajectory(Falling(object),time,Height(object,height),offset).

 /*  allDifferent([Object, Height, Time, Offset]) ->
       ( holds_at(height(Object, Height), Time)->antiTrajectory(falling(Object), Time, height(Object, Height), Offset)
       ).
 */

 /*  antiTrajectory(falling(Object), Time, height(Object, Height), Offset) :-
       holds_at(height(Object, Height), Time),
       allDifferent([Object, Height, Time, Offset]).
 */

 /*  [holds_at(height(Object, Height), Time), allDifferent([Object, Height, Time, Offset])] ->
       ta(Time,
          antiTrajectory(falling(Object),
                         Time,
                         height(Object, Height),
                         Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3964
axiom(antiTrajectory(falling(Object), Time, height(Object, Height), Offset),
   
    [ holds_at(height(Object, Height), Time),
      allDifferent([Object, Height, Time, Offset])
    ]).

 /*  not(holds_at(height(Object, Height), Time)) :-
       not(antiTrajectory(falling(Object),
                          Time,
                          height(Object, Height),
                          Offset)),
       allDifferent([Object, Height, Time, Offset]).
 */

 /*  [not(antiTrajectory(falling(Object), Time, height(Object, Height), Offset)), allDifferent([Object, Height, Time, Offset])] ->
       ta(Time, holds_at(neg(height(Object, Height)), Time)).
 */
axiom(holds_at(neg(height(Object, Height)), Time),
   
    [ not(antiTrajectory(falling(Object),
                         Time,
                         height(Object, Height),
                         Offset)),
      allDifferent([Object, Height, Time, Offset])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3966
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3968
% !HoldsAt(Falling(Apple),0).
 %  not(initially(falling(apple))).

 /*  [] ->
       ta(Ta_Param, not(initially(falling(apple)))).
 */
axiom(not(initially(falling(apple))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3969
% HoldsAt(Height(Apple,3),0).

 /*  [] ->
       ta(Ta_Param, initially(height(apple, 3))).
 */
axiom(initially(height(apple, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3971
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3972
==> completion(delta).
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3974
==> range(time,0,5).

% range height 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3975
==> range(height,0,3).

% range offset 1 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3976
==> range(offset,1,3).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4003
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4004
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4005
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4007
==> sort(agent).

% sort phone
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4008
==> sort(phone).

% agent Agent1, Agent2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4010
==> t(agent,agent1).
==> t(agent,agent2).

% phone Phone1, Phone2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4011
==> t(phone,phone1).
==> t(phone,phone2).

% fluent Ringing(phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4013
fluent(ringing(Ringing_Param,Ringing_Ret)).
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% fluent DialTone(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4014
fluent(dialTone(DialTone_Ret)).
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% fluent BusySignal(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4015
fluent(busySignal(BusySignal_Ret)).
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% fluent Idle(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4016
fluent(idle(Idle_Ret)).
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% fluent Connected(phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4017
fluent(connected(Connected_Param,Connected_Ret)).
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% fluent Disconnected(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4018
fluent(disconnected(Disconnected_Ret)).
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% event PickUp(agent,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4020
event(pickUp(PickUp_Param,PickUp_Ret)).
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% event SetDown(agent,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4021
event(setDown(SetDown_Param,SetDown_Ret)).
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% event Dial(agent,phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4022
event(dial(Dial_Param,_,Dial_Ret)).
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4023
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4026
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Phone),
                    dialTone(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4027
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4029
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          terminates(pickUp(Agent, Phone),
                     idle(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4031
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4033
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4035
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4037
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     dialTone(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4039
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4041
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          initiates(dial(Agent, Phone1, Phone2),
                    ringing(Phone1, Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4044
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4046
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4049
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4051
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     idle(Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4054
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4056
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          initiates(dial(Agent, Phone1, Phone2),
                    busySignal(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4059
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4061
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4064
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4066
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4068
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4070
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     busySignal(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4072
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4074
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4076
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4078
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4080
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4082
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone1),
                     ringing(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4084
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4086
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Phone2),
                    connected(Phone1, Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4088
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4090
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(pickUp(Agent, Phone2),
                     ringing(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4092
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4094
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4096
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4098
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    disconnected(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4100
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4102
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone1),
                     connected(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4104
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4106
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone2),
                    idle(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4108
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4110
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone2),
                    disconnected(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4112
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4114
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone2),
                     connected(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4116
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4118
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4120
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4122
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     disconnected(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4124
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4126
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4128
% Happens(PickUp(Agent1,Phone1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(pickUp(agent1, phone1), t)).
 */
axiom(happens(pickUp(agent1, phone1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4129
% Happens(Dial(Agent1,Phone1,Phone2),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(dial(agent1, phone1, phone2), start)).
 */
axiom(happens(dial(agent1, phone1, phone2), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4130
% Happens(PickUp(Agent2,Phone2),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(pickUp(agent2, phone2), t2)).
 */
axiom(happens(pickUp(agent2, phone2), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4132
%; Psi
% [phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4135
% !HoldsAt(Ringing(phone,phone),time).
holds_at(neg(ringing(Phone,Phone)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4137
% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).

 /*  allDifferent([Phone1, Phone2, Time]) ->
       ( holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2)->holds_at(neg(ringing(Phone2, Phone1)), Time)
       ).
 */

 /*  holds_at(neg(ringing(Phone2, Phone1)), Time) :-
       ( holds_at(ringing(Phone1, Phone2), Time),
         diff(Phone1, Phone2)
       ),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(ringing(Phone2, Phone1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4140
axiom(holds_at(neg(ringing(Phone2, Phone1)), Time),
   
    [ holds_at(ringing(Phone1, Phone2), Time),
      diff(Phone1, Phone2),
      allDifferent([Phone1, Phone2, Time])
    ]).

 /*  not(holds_at(ringing(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(ringing(Phone2, Phone1)), Time)),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [diff(Phone1, Phone2), holds_at(neg(neg(ringing(Phone2, Phone1))), Time), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(neg(neg(ringing(Phone2, Phone1))), Time),
      allDifferent([Phone1, Phone2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4142
% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4143
holds_at(neg(connected(Phone,Phone)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4145
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).

 /*  allDifferent([Phone1, Phone2, Time]) ->
       ( holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2)->holds_at(neg(connected(Phone2, Phone1)), Time)
       ).
 */

 /*  holds_at(neg(connected(Phone2, Phone1)), Time) :-
       ( holds_at(connected(Phone1, Phone2), Time),
         diff(Phone1, Phone2)
       ),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(connected(Phone2, Phone1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4148
axiom(holds_at(neg(connected(Phone2, Phone1)), Time),
   
    [ holds_at(connected(Phone1, Phone2), Time),
      diff(Phone1, Phone2),
      allDifferent([Phone1, Phone2, Time])
    ]).

 /*  not(holds_at(connected(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(connected(Phone2, Phone1)), Time)),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [diff(Phone1, Phone2), holds_at(neg(neg(connected(Phone2, Phone1))), Time), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(neg(neg(connected(Phone2, Phone1))), Time),
      allDifferent([Phone1, Phone2, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4150
% mutex Idle, DialTone, BusySignal, Disconnected
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4151
mutex(idle).

 /*  axiom_head(Axiom_head_Ret) ->
       mutex(idle).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(mutex(idle), Axiom_head_Ret).
 */
mutex(dialTone).

 /*  axiom_head(Axiom_head_Ret1) ->
       mutex(dialTone).
 */

 /*  fix_axiom_head(Axiom_head_Ret1) ->
       holds_at(mutex(dialTone), Axiom_head_Ret1).
 */
mutex(busySignal).

 /*  axiom_head(Axiom_head_Ret2) ->
       mutex(busySignal).
 */

 /*  fix_axiom_head(Axiom_head_Ret2) ->
       holds_at(mutex(busySignal), Axiom_head_Ret2).
 */
mutex(disconnected).

 /*  axiom_head(Axiom_head_Ret3) ->
       mutex(disconnected).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       holds_at(mutex(disconnected), Axiom_head_Ret3).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4152
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).

 /*  allDifferent([Phone1, Time, Phone2]) ->
       ( holds_at(idle(Phone1), Time)->holds_at(neg(ringing(Phone1, Phone2)), Time), holds_at(neg(connected(Phone1, Phone2)), Time)
       ).
 */

 /*  not(holds_at(idle(Phone1), Time)) :-
       (   not(holds_at(neg(ringing(Phone1, Phone2)), Time))
       ;   not(holds_at(neg(connected(Phone1, Phone2)), Time))
       ),
       allDifferent([Phone1, Time, Phone2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(ringing(Phone1, Phone2)), Time))
       ;   not(holds_at(neg(connected(Phone1, Phone2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(ringing(Phone1, Phone2))), Time)
       ;   holds_at(neg(neg(connected(Phone1, Phone2))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(ringing(Phone1, Phone2))), Time);holds_at(neg(neg(connected(Phone1, Phone2))), Time)), allDifferent([Phone1, Time, Phone2])] ->
       ta(Time, holds_at(neg(idle(Phone1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4155
axiom(holds_at(neg(idle(Phone1)), Time),
   
    [  (holds_at(neg(neg(ringing(Phone1, Phone2))), Time);holds_at(neg(neg(connected(Phone1, Phone2))), Time)),
      allDifferent([Phone1, Time, Phone2])
    ]).

 /*  holds_at(neg(ringing(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time),
       allDifferent([Phone1, Time, Phone2]).
 */

 /*  [holds_at(idle(Phone1), Time), allDifferent([Phone1, Time, Phone2])] ->
       ta(Time,
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
   
    [ holds_at(idle(Phone1), Time),
      allDifferent([Phone1, Time, Phone2])
    ]).

 /*  holds_at(neg(connected(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time),
       allDifferent([Phone1, Time, Phone2]).
 */

 /*  [holds_at(idle(Phone1), Time), allDifferent([Phone1, Time, Phone2])] ->
       ta(Time,
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
   
    [ holds_at(idle(Phone1), Time),
      allDifferent([Phone1, Time, Phone2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4157
%; etc.
%; Gamma
% [phone]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4161
% HoldsAt(Idle(phone),0).

 /*  [] ->
       ta(Ta_Param, initially(idle(Phone))).
 */
axiom(initially(idle(Phone)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4163
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4164
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4166
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4167
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4194
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4195
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4196
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4198
==> sort(agent).

% sort phone
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4199
==> sort(phone).

% agent Agent1, Agent2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4201
==> t(agent,agent1).
==> t(agent,agent2).

% phone Phone1, Phone2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4202
==> t(phone,phone1).
==> t(phone,phone2).

% fluent Ringing(phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4204
fluent(ringing(Ringing_Param,Ringing_Ret)).
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% fluent DialTone(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4205
fluent(dialTone(DialTone_Ret)).
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% fluent BusySignal(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4206
fluent(busySignal(BusySignal_Ret)).
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% fluent Idle(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4207
fluent(idle(Idle_Ret)).
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% fluent Connected(phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4208
fluent(connected(Connected_Param,Connected_Ret)).
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% fluent Disconnected(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4209
fluent(disconnected(Disconnected_Ret)).
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% event PickUp(agent,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4211
event(pickUp(PickUp_Param,PickUp_Ret)).
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% event SetDown(agent,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4212
event(setDown(SetDown_Param,SetDown_Ret)).
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% event Dial(agent,phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4213
event(dial(Dial_Param,_,Dial_Ret)).
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4214
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4217
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Phone),
                    dialTone(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4218
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4220
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          terminates(pickUp(Agent, Phone),
                     idle(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4222
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4224
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4226
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4228
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     dialTone(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4230
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4232
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          initiates(dial(Agent, Phone1, Phone2),
                    ringing(Phone1, Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4235
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4237
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4240
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4242
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     idle(Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4245
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4247
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          initiates(dial(Agent, Phone1, Phone2),
                    busySignal(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4250
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4252
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4255
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4257
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4259
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4261
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     busySignal(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4263
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4265
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4267
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4269
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4271
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4273
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone1),
                     ringing(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4275
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4277
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Phone2),
                    connected(Phone1, Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4279
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4281
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(pickUp(Agent, Phone2),
                     ringing(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4283
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4285
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4287
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4289
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    disconnected(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4291
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4293
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone1),
                     connected(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4295
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4297
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone2),
                    idle(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4299
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4301
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone2),
                    disconnected(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4303
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4305
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone2),
                     connected(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4307
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4309
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4311
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4313
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     disconnected(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4315
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4317
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4319
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4319
% Happens(PickUp(Agent1,Phone1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(pickUp(agent1, phone1), t)).
 */
axiom(happens(pickUp(agent1, phone1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4320
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4320
% Happens(Dial(Agent1,Phone1,Phone2),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(dial(agent1, phone1, phone2), start)).
 */
axiom(happens(dial(agent1, phone1, phone2), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4321
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4321
% Happens(PickUp(Agent2,Phone2),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(pickUp(agent2, phone2), t2)).
 */
axiom(happens(pickUp(agent2, phone2), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4323
%; Gamma
% [phone]
 % HoldsAt(Idle(phone),0).

 /*  [] ->
       ta(Ta_Param, initially(idle(Phone))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4325
axiom(initially(idle(Phone)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4326
% [phone]
 % !HoldsAt(DialTone(phone),0).
 %  not(initially(dialTone(Phone))).

 /*  [] ->
       ta(Ta_Param, not(initially(dialTone(Phone)))).
 */
axiom(not(initially(dialTone(Phone))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4327
% [phone]
 % !HoldsAt(BusySignal(phone),0).
 %  not(initially(busySignal(Phone))).

 /*  [] ->
       ta(Ta_Param, not(initially(busySignal(Phone)))).
 */
axiom(not(initially(busySignal(Phone))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4328
% [phone1,phone2]
 % !HoldsAt(Ringing(phone1,phone2),0).
 %  not(initially(ringing(Phone1,Phone2))).

 /*  [] ->
       ta(Ta_Param, not(initially(ringing(Phone1, Phone2)))).
 */
axiom(not(initially(ringing(Phone1, Phone2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4329
% [phone1,phone2]
 % !HoldsAt(Connected(phone1,phone2),0).
 %  not(initially(connected(Phone1,Phone2))).

 /*  [] ->
       ta(Ta_Param, not(initially(connected(Phone1, Phone2)))).
 */
axiom(not(initially(connected(Phone1, Phone2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4330
% [phone]
 % !HoldsAt(Disconnected(phone),0).
 %  not(initially(disconnected(Phone))).

 /*  [] ->
       ta(Ta_Param, not(initially(disconnected(Phone)))).
 */
axiom(not(initially(disconnected(Phone))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4332
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4333
==> completion(delta).
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4335
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4336
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultLocation.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4363
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4364
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4365
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4367
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4368
==> subsort(agent,object).

% sort device: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4369
==> subsort(device,object).

% sort tv: device
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4370
==> subsort(tv,device).

% sort room
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4371
==> sort(room).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4373
==> t(agent,nathan).

% tv TV
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4374
==> t(tv,tv).

% room LivingRoom, Kitchen
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4375
==> t(room,livingRoom).
==> t(room,kitchen).

% event TurnOn(agent,device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4377
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).

% event Walk(agent,room,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4378
event(walk(Walk_Param,_,Walk_Ret)).
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% fluent InRoom(object,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4380
fluent(inRoom(InRoom_Param,InRoom_Ret)).
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% fluent On(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4381
fluent(on(On_Ret)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4382
fluent(pluggedIn(PluggedIn_Ret)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4383
fluent(brokenSwitch(BrokenSwitch_Ret)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% predicate Ab1(device,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4385
predicate(ab1(Ab1_Param,Ab1_Ret)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% predicate Ab2(room,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4386
predicate(ab2(Ab2_Param,Ab2_Ret)).
==> mpred_prop(ab2(room,time),predicate).
==> meta_argtypes(ab2(room,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4387
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4390
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).

 /*  [] ->
       ta(Time,
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Agent, Room2),
                    Time)).
 */
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4392
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).

 /*  [diff(Room1, Room2)] ->
       ta(Time,
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Agent, Room1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4394
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [diff(Room1, Room2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4396
% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4398
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4400
%; Delta
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4403
% Happens(Walk(agent,room1,room2),time) ->
% room1!=room2 &
% HoldsAt(InRoom(agent,room1),time).

 /*  allDifferent([Agent, Room1, Room2, Time]) ->
       ( happens(walk(Agent, Room1, Room2), Time)->diff(Room1, Room2), holds_at(inRoom(Agent, Room1), Time)
       ).
 */

 /*  not(happens(walk(Agent, Room1, Room2), Time)) :-
       (   not(diff(Room1, Room2))
       ;   not(holds_at(inRoom(Agent, Room1), Time))
       ),
       allDifferent([Agent, Room1, Room2, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Room1, Room2))
       ;   not(holds_at(inRoom(Agent, Room1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Room1, Room2))
       ;   holds_at(neg(inRoom(Agent, Room1)), Time)
       ).
 */

 /*  [(not(diff(Room1, Room2));holds_at(neg(inRoom(Agent, Room1)), Time)), allDifferent([Agent, Room1, Room2, Time])] ->
       ta(Time,
          not(happens(walk(Agent, Room1, Room2), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4405
axiom(not(happens(walk(Agent, Room1, Room2), Time)),
   
    [  (not(diff(Room1, Room2));holds_at(neg(inRoom(Agent, Room1)), Time)),
      allDifferent([Agent, Room1, Room2, Time])
    ]).

 /*  holds_at(inRoom(Agent, Room1), Time) :-
       happens(walk(Agent, Room1, Room2), Time),
       allDifferent([Agent, Room1, Room2, Time]).
 */

 /*  [happens(walk(Agent, Room1, Room2), Time), allDifferent([Agent, Room1, Room2, Time])] ->
       ta(Time, holds_at(inRoom(Agent, Room1), Time)).
 */
axiom(holds_at(inRoom(Agent, Room1), Time),
   
    [ happens(walk(Agent, Room1, Room2), Time),
      allDifferent([Agent, Room1, Room2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4407
% [agent,device,time]
% Happens(TurnOn(agent,device),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4409
% {room}%  HoldsAt(InRoom(agent,room),time) &
%        HoldsAt(InRoom(device,room),time).

 /*  exists([Room],
    happens(turnOn(Agent, Device), Time) ->
       holds_at(inRoom(Agent, Room), Time),
       holds_at(inRoom(Device, Room), Time)).
 */

 /*  not(happens(turnOn(Agent, Device), Time)) :-
       (   not(holds_at(inRoom(Agent, Room), Time))
       ;   not(holds_at(inRoom(Device, Room), Time))
       ),
       some(Room, '$kolem_Fn_339'(Agent, Device, Time)).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(inRoom(Agent, Room), Time))
       ;   not(holds_at(inRoom(Device, Room), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(inRoom(Agent, Room)), Time)
       ;   holds_at(neg(inRoom(Device, Room)), Time)
       ).
 */

 /*  [(holds_at(neg(inRoom(Agent, Room)), Time);holds_at(neg(inRoom(Device, Room)), Time)), some(Room, '$kolem_Fn_339'(Agent, Device, Time))] ->
       ta(Time, not(happens(turnOn(Agent, Device), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4410
axiom(not(happens(turnOn(Agent, Device), Time)),
   
    [  (holds_at(neg(inRoom(Agent, Room)), Time);holds_at(neg(inRoom(Device, Room)), Time)),
      some(Room, '$kolem_Fn_339'(Agent, Device, Time))
    ]).

 /*  holds_at(inRoom(Agent, Room), Time) :-
       happens(turnOn(Agent, Device), Time),
       some(Room, '$kolem_Fn_339'(Agent, Device, Time)).
 */

 /*  [happens(turnOn(Agent, Device), Time), some(Room, '$kolem_Fn_339'(Agent, Device, Time))] ->
       ta(Time, holds_at(inRoom(Agent, Room), Time)).
 */
axiom(holds_at(inRoom(Agent, Room), Time),
   
    [ happens(turnOn(Agent, Device), Time),
      some(Room, '$kolem_Fn_339'(Agent, Device, Time))
    ]).

 /*  holds_at(inRoom(Device, Room), Time) :-
       happens(turnOn(Agent, Device), Time),
       some(Room, '$kolem_Fn_339'(Agent, Device, Time)).
 */

 /*  [happens(turnOn(Agent, Device), Time), some(Room, '$kolem_Fn_339'(Agent, Device, Time))] ->
       ta(Time, holds_at(inRoom(Device, Room), Time)).
 */
axiom(holds_at(inRoom(Device, Room), Time),
   
    [ happens(turnOn(Agent, Device), Time),
      some(Room, '$kolem_Fn_339'(Agent, Device, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4412
% [event1,event2,time]
% Happens(event1,time) &
% Happens(event2,time) ->
% event1=event2.

 /*  allDifferent([Event1, Time, Event2]) ->
       ( happens(Event1, Time), happens(Event2, Time)->Event1=Event2
       ).
 */

 /*  not(happens(Event1, Time)) :-
       happens(Event2, Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [happens(Event2, Time), not(call(Event1=Event2)), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event1, Time))).
 */

 /*  [happens(Event2, Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event1, Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4415
axiom(not(happens(Event1, Time)),
   
    [ happens(Event2, Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Time, Event2])
    ]).

 /*  not(happens(Event2, Time)) :-
       happens(Event1, Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [happens(Event1, Time), not(call(Event1=Event2)), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event2, Time))).
 */

 /*  [happens(Event1, Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event2, Time))).
 */
axiom(not(happens(Event2, Time)),
   
    [ happens(Event1, Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Time, Event2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4417
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4419
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4419
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(brokenSwitch(Device), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(brokenSwitch(Device)), Time)).
 */
axiom(holds_at(neg(brokenSwitch(Device)), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4420
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4420
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(neg(pluggedIn(Device))), Time)).
 */
axiom(holds_at(neg(neg(pluggedIn(Device))), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4422
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4425
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.

 /*  allDifferent([Object, Room1, Time, Room2]) ->
       ( holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time)->Room1=Room2
       ).
 */

 /*  not(holds_at(inRoom(Object, Room1), Time)) :-
       holds_at(inRoom(Object, Room2), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Object, Room2), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room1)), Time)).
 */

 /*  [holds_at(inRoom(Object, Room2), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4427
axiom(holds_at(neg(inRoom(Object, Room1)), Time),
   
    [ holds_at(inRoom(Object, Room2), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).

 /*  not(holds_at(inRoom(Object, Room2), Time)) :-
       holds_at(inRoom(Object, Room1), Time),
       not(equals(Room1, Room2)),
       allDifferent([Object, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Object, Room1), Time), not(call(Room1=Room2)), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room2)), Time)).
 */

 /*  [holds_at(inRoom(Object, Room1), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Object, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Object, Room2)), Time)).
 */
axiom(holds_at(neg(inRoom(Object, Room2)), Time),
   
    [ holds_at(inRoom(Object, Room1), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Object, Room1, Time, Room2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4429
%; Gamma
% [tv]
 % !HoldsAt(On(tv),0).
 %  not(initially(on(Tv))).

 /*  [] ->
       ta(Ta_Param, not(initially(on(Tv)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4431
axiom(not(initially(on(Tv))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4432
% [tv]
 % !HoldsAt(BrokenSwitch(tv),0).
 %  not(initially(brokenSwitch(Tv))).

 /*  [] ->
       ta(Ta_Param, not(initially(brokenSwitch(Tv)))).
 */
axiom(not(initially(brokenSwitch(Tv))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4433
% [tv]
 % HoldsAt(PluggedIn(tv),0).

 /*  [] ->
       ta(Ta_Param, initially(pluggedIn(Tv))).
 */
axiom(initially(pluggedIn(Tv)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4435
% HoldsAt(InRoom(Nathan,Kitchen),0).

 /*  [] ->
       ta(Ta_Param, initially(inRoom(nathan, kitchen))).
 */
axiom(initially(inRoom(nathan, kitchen)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4437
% [time]
% !Ab2(LivingRoom,time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4439
% {tv}%  HoldsAt(InRoom(tv,LivingRoom),time).

 /*  exists([Tv],
    not(ab2(livingRoom, Time)) ->
       holds_at(inRoom(Tv, livingRoom), Time)).
 */

 /*  holds_at(inRoom(Tv, livingRoom), Time) :-
       not(ab2(livingRoom, Time)),
       some(Tv, '$kolem_Fn_340'(Time)).
 */

 /*  [not(ab2(livingRoom, Time)), some(Tv, '$kolem_Fn_340'(Time))] ->
       ta(Time, holds_at(inRoom(Tv, livingRoom), Time)).
 */
axiom(holds_at(inRoom(Tv, livingRoom), Time),
    [not(ab2(livingRoom, Time)), some(Tv, '$kolem_Fn_340'(Time))]).

 /*  ab2(livingRoom, Time) :-
       not(holds_at(inRoom(Tv, livingRoom), Time)),
       some(Tv, '$kolem_Fn_340'(Time)).
 */

 /*  [holds_at(neg(inRoom(Tv, livingRoom)), Time), some(Tv, '$kolem_Fn_340'(Time))] ->
       ta(Time, ab2(livingRoom, Time)).
 */
axiom(ab2(livingRoom, Time),
   
    [ holds_at(neg(inRoom(Tv, livingRoom)), Time),
      some(Tv, '$kolem_Fn_340'(Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4441
%; goal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4443
% {tv} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4443
% Happens(TurnOn(Nathan,tv),1).

 /*  exists([Tv],
    happens(turnOn(nathan,Tv),1)).
 */

 /*  happens(turnOn(nathan, Tv), 1) :-
       some(Tv, '$kolem_Fn_341').
 */

 /*  [some(Tv, '$kolem_Fn_341'), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(turnOn(nathan, Tv), start)).
 */
axiom(happens(turnOn(nathan, Tv), start),
    [some(Tv, '$kolem_Fn_341'), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4445
%; for two TVs:
%;[tv,time] !HoldsAt(InRoom(tv,Kitchen),time).
%;[tv,time] {room} HoldsAt(InRoom(tv,room),time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4449
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4450
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4451
==> completion(theta).
==> completion(ab2).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4453
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4454
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/Device.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4481
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4482
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4483
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4485
==> sort(agent).

% sort device
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4486
==> sort(device).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4488
==> t(agent,nathan).

% device Device1, AntiqueDevice1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4489
==> t(device,device1).
==> t(device,antiqueDevice1).

% predicate Ab1(device,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4491
predicate(ab1(Ab1_Param,Ab1_Ret)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% fluent On(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4493
fluent(on(On_Ret)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4494
fluent(pluggedIn(PluggedIn_Ret)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4495
fluent(brokenSwitch(BrokenSwitch_Ret)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% event TurnOn(agent,device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4497
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4498
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4501
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4502
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4504
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4506
% Happens(TurnOn(Nathan,Device1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOn(nathan, device1), t)).
 */
axiom(happens(turnOn(nathan, device1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4508
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4510
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4510
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(brokenSwitch(Device), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(brokenSwitch(Device)), Time)).
 */
axiom(holds_at(neg(brokenSwitch(Device)), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4511
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4511
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(neg(pluggedIn(Device))), Time)).
 */
axiom(holds_at(neg(neg(pluggedIn(Device))), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4512
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4512
% [time]
 % Ab1(AntiqueDevice1,time).
ab1(antiqueDevice1,Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4514
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4516
% !HoldsAt(On(Device1),0).
 %  not(initially(on(device1))).

 /*  [] ->
       ta(Ta_Param, not(initially(on(device1)))).
 */
axiom(not(initially(on(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4517
% !HoldsAt(BrokenSwitch(Device1),0).
 %  not(initially(brokenSwitch(device1))).

 /*  [] ->
       ta(Ta_Param, not(initially(brokenSwitch(device1)))).
 */
axiom(not(initially(brokenSwitch(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4518
% HoldsAt(PluggedIn(Device1),0).

 /*  [] ->
       ta(Ta_Param, initially(pluggedIn(device1))).
 */
axiom(initially(pluggedIn(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4520
%; added:
% [time]
 % !HoldsAt(On(AntiqueDevice1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4521
holds_at(neg(on(antiqueDevice1)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4522
% [time]
 % HoldsAt(PluggedIn(AntiqueDevice1),time).
holds_at(pluggedIn(antiqueDevice1),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4524
%; entailed:
%; HoldsAt(On(Device1),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4527
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4528
==> completion(theta).
==> completion(ab1).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4529
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4531
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4532
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/ErraticDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4559
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4560
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4561
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4563
==> sort(agent).

% sort device
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4564
==> sort(device).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4566
==> t(agent,nathan).

% device Device1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4567
==> t(device,device1).

% predicate Ab1(device,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4569
predicate(ab1(Ab1_Param,Ab1_Ret)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% fluent On(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4571
fluent(on(On_Ret)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4572
fluent(pluggedIn(PluggedIn_Ret)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4573
fluent(brokenSwitch(BrokenSwitch_Ret)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% fluent Erratic(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4574
fluent(erratic(Erratic_Ret)).
==> mpred_prop(erratic(device),fluent).
==> meta_argtypes(erratic(device)).

% fluent DeterminingFluent(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4576
fluent(determiningFluent(DeterminingFluent_Ret)).
==> mpred_prop(determiningFluent(device),fluent).
==> meta_argtypes(determiningFluent(device)).

% noninertial DeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4577
==> noninertial(determiningFluent).

% event TurnOn(agent,device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4579
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4580
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4583
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4584
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4586
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4588
% Happens(TurnOn(Nathan,Device1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOn(nathan, device1), t)).
 */
axiom(happens(turnOn(nathan, device1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4590
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4593
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4593
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(brokenSwitch(Device), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(brokenSwitch(Device)), Time)).
 */
axiom(holds_at(neg(brokenSwitch(Device)), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4594
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4594
% [device,time]
% HoldsAt(Erratic(device),time) & HoldsAt(DeterminingFluent(device),time) ->
% Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(erratic(Device), Time), holds_at(determiningFluent(Device), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       ( holds_at(erratic(Device), Time),
         holds_at(determiningFluent(Device), Time)
       ),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(erratic(Device), Time), holds_at(determiningFluent(Device), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4596
axiom(ab1(Device, Time),
   
    [ holds_at(erratic(Device), Time),
      holds_at(determiningFluent(Device), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(erratic(Device), Time)) :-
       holds_at(determiningFluent(Device), Time),
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(determiningFluent(Device), Time), not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(erratic(Device)), Time)).
 */
axiom(holds_at(neg(erratic(Device)), Time),
   
    [ holds_at(determiningFluent(Device), Time),
      not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(determiningFluent(Device), Time)) :-
       holds_at(erratic(Device), Time),
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(erratic(Device), Time), not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(determiningFluent(Device)), Time)).
 */
axiom(holds_at(neg(determiningFluent(Device)), Time),
   
    [ holds_at(erratic(Device), Time),
      not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4598
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4598
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(neg(pluggedIn(Device))), Time)).
 */
axiom(holds_at(neg(neg(pluggedIn(Device))), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4600
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4602
% !HoldsAt(On(Device1),0).
 %  not(initially(on(device1))).

 /*  [] ->
       ta(Ta_Param, not(initially(on(device1)))).
 */
axiom(not(initially(on(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4603
% !HoldsAt(BrokenSwitch(Device1),0).
 %  not(initially(brokenSwitch(device1))).

 /*  [] ->
       ta(Ta_Param, not(initially(brokenSwitch(device1)))).
 */
axiom(not(initially(brokenSwitch(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4604
% HoldsAt(Erratic(Device1),0).

 /*  [] ->
       ta(Ta_Param, initially(erratic(device1))).
 */
axiom(initially(erratic(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4605
% HoldsAt(PluggedIn(Device1),0).

 /*  [] ->
       ta(Ta_Param, initially(pluggedIn(device1))).
 */
axiom(initially(pluggedIn(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4607
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4608
% HoldsAt(DeterminingFluent(Device1),1).
holds_at(determiningFluent(device1),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4610
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4611
==> completion(theta).
==> completion(ab1).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4612
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4614
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4615
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultEvent.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4642
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4643
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4645
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4646
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4648
==> sort(agent).

% sort clock
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4649
==> sort(clock).

% fluent Beeping(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4651
fluent(beeping(Beeping_Ret)).
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% fluent AlarmTime(clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4652
fluent(alarmTime(AlarmTime_Param,AlarmTime_Ret)).
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% fluent AlarmOn(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4653
fluent(alarmOn(AlarmOn_Ret)).
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% event SetAlarmTime(agent,clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4655
event(setAlarmTime(SetAlarmTime_Param,
		   _,
		   SetAlarmTime_Ret)).
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4656
event(startBeeping(StartBeeping_Ret)).
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% event TurnOnAlarm(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4657
event(turnOnAlarm(TurnOnAlarm_Param,TurnOnAlarm_Ret)).
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4658
event(turnOffAlarm(TurnOffAlarm_Param,TurnOffAlarm_Ret)).
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% predicate Ab1(clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4660
predicate(ab1(Ab1_Param,Ab1_Ret)).
==> mpred_prop(ab1(clock,time),predicate).
==> meta_argtypes(ab1(clock,time)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4662
==> t(agent,nathan).

% clock Clock
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4663
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4667
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          initiates(setAlarmTime(Agent, Clock, Time2),
                    alarmTime(Clock, Time2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4669
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4671
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          terminates(setAlarmTime(Agent, Clock, Time2),
                     alarmTime(Clock, Time1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4674
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4676
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          initiates(turnOnAlarm(Agent, Clock),
                    alarmOn(Clock),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4677
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4679
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffAlarm(Agent, Clock),
                     alarmOn(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4680
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4682
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          initiates(startBeeping(Clock), beeping(Clock), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4683
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4685
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffAlarm(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4686
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4688
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4691
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) &
% !Ab1(clock,time) ->
% Happens(StartBeeping(clock),time).

 /*  allDifferent([Clock, Time]) ->
       ( holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time))->happens(startBeeping(Clock), Time)
       ).
 */

 /*  happens(startBeeping(Clock), Time) :-
       ( holds_at(alarmTime(Clock, Time), Time),
         holds_at(alarmOn(Clock), Time),
         not(ab1(Clock, Time))
       ),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time)), allDifferent([Clock, Time])] ->
       ta(Time, happens(startBeeping(Clock), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4694
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time),
      not(ab1(Clock, Time)),
      allDifferent([Clock, Time])
    ]).

 /*  not(holds_at(alarmTime(Clock, Time), Time)) :-
       ( holds_at(alarmOn(Clock), Time),
         not(ab1(Clock, Time))
       ),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time)), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, holds_at(neg(alarmTime(Clock, Time)), Time)).
 */
axiom(holds_at(neg(alarmTime(Clock, Time)), Time),
   
    [ holds_at(alarmOn(Clock), Time),
      not(ab1(Clock, Time)),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).

 /*  not(holds_at(alarmOn(Clock), Time)) :-
       not(ab1(Clock, Time)),
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [not(ab1(Clock, Time)), holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, holds_at(neg(alarmOn(Clock)), Time)).
 */
axiom(holds_at(neg(alarmOn(Clock)), Time),
   
    [ not(ab1(Clock, Time)),
      holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).

 /*  ab1(Clock, Time) :-
       holds_at(alarmOn(Clock), Time),
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmOn(Clock), Time), holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, ab1(Clock, Time)).
 */
axiom(ab1(Clock, Time),
   
    [ holds_at(alarmOn(Clock), Time),
      holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4696
% Happens(SetAlarmTime(Nathan,Clock,2),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(setAlarmTime(nathan, clock, 2), t)).
 */
axiom(happens(setAlarmTime(nathan, clock, 2), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4697
% Happens(TurnOnAlarm(Nathan,Clock),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(turnOnAlarm(nathan, clock), start)).
 */
axiom(happens(turnOnAlarm(nathan, clock), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4699
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4702
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.

 /*  allDifferent([Clock, Time1, Time, Time2]) ->
       ( holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time)->Time1=Time2
       ).
 */

 /*  not(holds_at(alarmTime(Clock, Time1), Time)) :-
       holds_at(alarmTime(Clock, Time2), Time),
       not(equals(Time1, Time2)),
       allDifferent([Clock, Time1, Time, Time2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Time1, Time2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time1=Time2)).
 */

 /*  [holds_at(alarmTime(Clock, Time2), Time), not(call(Time1=Time2)), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */

 /*  [holds_at(alarmTime(Clock, Time2), Time), holds_at(neg(call(Time1=Time2)), Time), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4704
axiom(holds_at(neg(alarmTime(Clock, Time1)), Time),
   
    [ holds_at(alarmTime(Clock, Time2), Time),
      holds_at(neg(call(Time1=Time2)), Time),
      allDifferent([Clock, Time1, Time, Time2])
    ]).

 /*  not(holds_at(alarmTime(Clock, Time2), Time)) :-
       holds_at(alarmTime(Clock, Time1), Time),
       not(equals(Time1, Time2)),
       allDifferent([Clock, Time1, Time, Time2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Time1, Time2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time1=Time2)).
 */

 /*  [holds_at(alarmTime(Clock, Time1), Time), not(call(Time1=Time2)), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */

 /*  [holds_at(alarmTime(Clock, Time1), Time), holds_at(neg(call(Time1=Time2)), Time), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */
axiom(holds_at(neg(alarmTime(Clock, Time2)), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      holds_at(neg(call(Time1=Time2)), Time),
      allDifferent([Clock, Time1, Time, Time2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4706
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4708
% !HoldsAt(AlarmOn(Clock),0).
 %  not(initially(alarmOn(clock))).

 /*  [] ->
       ta(Ta_Param, not(initially(alarmOn(clock)))).
 */
axiom(not(initially(alarmOn(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4709
% !HoldsAt(Beeping(Clock),0).
 %  not(initially(beeping(clock))).

 /*  [] ->
       ta(Ta_Param, not(initially(beeping(clock)))).
 */
axiom(not(initially(beeping(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4710
% HoldsAt(AlarmTime(Clock,3),0).

 /*  [] ->
       ta(Ta_Param, initially(alarmTime(clock, 3))).
 */
axiom(initially(alarmTime(clock, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4712
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4713
==> completion(happens).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4714
==> completion(theta).
==> completion(ab1).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4716
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4717
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodD.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4746
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4747
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4748
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4750
==> sort(object).

% object A,B
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4752
==> t(object,a).
==> t(object,b).

% fluent P(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4754
fluent(p(P_Ret)).
==> mpred_prop(p(object),fluent).
==> meta_argtypes(p(object)).

% fluent Q(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4755
fluent(q(Q_Ret)).
==> mpred_prop(q(object),fluent).
==> meta_argtypes(q(object)).

% fluent R(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4756
fluent(r(R_Ret)).
==> mpred_prop(r(object),fluent).
==> meta_argtypes(r(object)).

% predicate Ab1(object,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4758
predicate(ab1(Ab1_Param,Ab1_Ret)).
==> mpred_prop(ab1(object,time),predicate).
==> meta_argtypes(ab1(object,time)).

% predicate Ab2(object,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4759
predicate(ab2(Ab2_Param,Ab2_Ret)).
==> mpred_prop(ab2(object,time),predicate).
==> meta_argtypes(ab2(object,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4760
% [object,time]
% HoldsAt(P(object),time) & !Ab1(object,time) ->
% HoldsAt(Q(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(p(Object), Time), not(ab1(Object, Time))->holds_at(q(Object), Time)
       ).
 */

 /*  holds_at(q(Object), Time) :-
       ( holds_at(p(Object), Time),
         not(ab1(Object, Time))
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(p(Object), Time), not(ab1(Object, Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(q(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4762
axiom(holds_at(q(Object), Time),
   
    [ holds_at(p(Object), Time),
      not(ab1(Object, Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(p(Object), Time)) :-
       not(ab1(Object, Time)),
       not(holds_at(q(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [not(ab1(Object, Time)), holds_at(neg(q(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(p(Object)), Time)).
 */
axiom(holds_at(neg(p(Object)), Time),
   
    [ not(ab1(Object, Time)),
      holds_at(neg(q(Object)), Time),
      allDifferent([Object, Time])
    ]).

 /*  ab1(Object, Time) :-
       holds_at(p(Object), Time),
       not(holds_at(q(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(p(Object), Time), holds_at(neg(q(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, ab1(Object, Time)).
 */
axiom(ab1(Object, Time),
   
    [ holds_at(p(Object), Time),
      holds_at(neg(q(Object)), Time),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4764
% [object,time]
% HoldsAt(R(object),time) & !Ab2(object,time) ->
% !HoldsAt(Q(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(r(Object), Time), not(ab2(Object, Time))->holds_at(neg(q(Object)), Time)
       ).
 */

 /*  holds_at(neg(q(Object)), Time) :-
       ( holds_at(r(Object), Time),
         not(ab2(Object, Time))
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(r(Object), Time), not(ab2(Object, Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(q(Object)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4766
axiom(holds_at(neg(q(Object)), Time),
   
    [ holds_at(r(Object), Time),
      not(ab2(Object, Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(r(Object), Time)) :-
       not(ab2(Object, Time)),
       not(holds_at(neg(q(Object)), Time)),
       allDifferent([Object, Time]).
 */

 /*  [not(ab2(Object, Time)), holds_at(neg(neg(q(Object))), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(r(Object)), Time)).
 */
axiom(holds_at(neg(r(Object)), Time),
   
    [ not(ab2(Object, Time)),
      holds_at(neg(neg(q(Object))), Time),
      allDifferent([Object, Time])
    ]).

 /*  ab2(Object, Time) :-
       holds_at(r(Object), Time),
       not(holds_at(neg(q(Object)), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(r(Object), Time), holds_at(neg(neg(q(Object))), Time), allDifferent([Object, Time])] ->
       ta(Time, ab2(Object, Time)).
 */
axiom(ab2(Object, Time),
   
    [ holds_at(r(Object), Time),
      holds_at(neg(neg(q(Object))), Time),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4768
% [object,time]
% HoldsAt(R(object),time) -> HoldsAt(P(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(r(Object), Time)->holds_at(p(Object), Time)
       ).
 */

 /*  holds_at(p(Object), Time) :-
       holds_at(r(Object), Time),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(r(Object), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(p(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4769
axiom(holds_at(p(Object), Time),
   
    [ holds_at(r(Object), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(r(Object), Time)) :-
       not(holds_at(p(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(neg(p(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(r(Object)), Time)).
 */
axiom(holds_at(neg(r(Object)), Time),
   
    [ holds_at(neg(p(Object)), Time),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4771
% HoldsAt(R(A),0).

 /*  [] ->
       ta(Ta_Param, initially(r(a))).
 */
axiom(initially(r(a)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4772
% HoldsAt(P(B),0).

 /*  [] ->
       ta(Ta_Param, initially(p(b))).
 */
axiom(initially(p(b)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4773
% !HoldsAt(R(B),0).
 %  not(initially(r(b))).

 /*  [] ->
       ta(Ta_Param, not(initially(r(b)))).
 */
axiom(not(initially(r(b))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4775
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4776
% [object,time]
% HoldsAt(R(object),time) -> Ab1(object,time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(r(Object), Time)->ab1(Object, Time)
       ).
 */

 /*  ab1(Object, Time) :-
       holds_at(r(Object), Time),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(r(Object), Time), allDifferent([Object, Time])] ->
       ta(Time, ab1(Object, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4777
axiom(ab1(Object, Time),
   
    [ holds_at(r(Object), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(r(Object), Time)) :-
       not(ab1(Object, Time)),
       allDifferent([Object, Time]).
 */

 /*  [not(ab1(Object, Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(r(Object)), Time)).
 */
axiom(holds_at(neg(r(Object)), Time),
   
    [ not(ab1(Object, Time)),
      allDifferent([Object, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4779
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4780
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4781
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4783
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4784
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/BrokenDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4811
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4812
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4813
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4815
==> sort(agent).

% sort device
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4816
==> sort(device).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4818
==> t(agent,nathan).

% device Device1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4819
==> t(device,device1).

% predicate Ab1(device,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4821
predicate(ab1(Ab1_Param,Ab1_Ret)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% fluent On(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4823
fluent(on(On_Ret)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% fluent PluggedIn(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4824
fluent(pluggedIn(PluggedIn_Ret)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% fluent BrokenSwitch(device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4825
fluent(brokenSwitch(BrokenSwitch_Ret)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% event TurnOn(agent,device)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4827
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4828
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4831
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4832
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4834
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4836
% Happens(TurnOn(Nathan,Device1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOn(nathan, device1), t)).
 */
axiom(happens(turnOn(nathan, device1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4838
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4840
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4840
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(brokenSwitch(Device), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(brokenSwitch(Device)), Time)).
 */
axiom(holds_at(neg(brokenSwitch(Device)), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4841
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4841
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).

 /*  allDifferent([Device, Time]) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       allDifferent([Device, Time]).
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), allDifferent([Device, Time])] ->
       ta(Time, ab1(Device, Time)).
 */
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      allDifferent([Device, Time])
    ]).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       allDifferent([Device, Time]).
 */

 /*  [not(ab1(Device, Time)), allDifferent([Device, Time])] ->
       ta(Time, holds_at(neg(neg(pluggedIn(Device))), Time)).
 */
axiom(holds_at(neg(neg(pluggedIn(Device))), Time),
   
    [ not(ab1(Device, Time)),
      allDifferent([Device, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4843
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4845
% !HoldsAt(On(Device1),0).
 %  not(initially(on(device1))).

 /*  [] ->
       ta(Ta_Param, not(initially(on(device1)))).
 */
axiom(not(initially(on(device1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4846
% HoldsAt(BrokenSwitch(Device1),0).

 /*  [] ->
       ta(Ta_Param, initially(brokenSwitch(device1))).
 */
axiom(initially(brokenSwitch(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4848
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4849
% HoldsAt(PluggedIn(Device1),0).

 /*  [] ->
       ta(Ta_Param, initially(pluggedIn(device1))).
 */
axiom(initially(pluggedIn(device1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4851
%; entailed:
%; !HoldsAt(On(Device1),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4854
% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4855
==> completion(theta).
==> completion(ab1).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4856
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4858
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4859
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodB.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4888
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4889
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4890
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4892
==> sort(object).

% object A,B
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4894
==> t(object,a).
==> t(object,b).

% fluent P(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4896
fluent(p(P_Ret)).
==> mpred_prop(p(object),fluent).
==> meta_argtypes(p(object)).

% fluent Q(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4897
fluent(q(Q_Ret)).
==> mpred_prop(q(object),fluent).
==> meta_argtypes(q(object)).

% predicate Ab(object,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4898
predicate(ab(Ab_Param,Ab_Ret)).
==> mpred_prop(ab(object,time),predicate).
==> meta_argtypes(ab(object,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4899
% [object,time]
% HoldsAt(P(object),time) & !Ab(object,time) ->
% HoldsAt(Q(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(p(Object), Time), not(ab(Object, Time))->holds_at(q(Object), Time)
       ).
 */

 /*  holds_at(q(Object), Time) :-
       ( holds_at(p(Object), Time),
         not(ab(Object, Time))
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(p(Object), Time), not(ab(Object, Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(q(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4901
axiom(holds_at(q(Object), Time),
   
    [ holds_at(p(Object), Time),
      not(ab(Object, Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(p(Object), Time)) :-
       not(ab(Object, Time)),
       not(holds_at(q(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [not(ab(Object, Time)), holds_at(neg(q(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(p(Object)), Time)).
 */
axiom(holds_at(neg(p(Object)), Time),
   
    [ not(ab(Object, Time)),
      holds_at(neg(q(Object)), Time),
      allDifferent([Object, Time])
    ]).

 /*  ab(Object, Time) :-
       holds_at(p(Object), Time),
       not(holds_at(q(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(p(Object), Time), holds_at(neg(q(Object)), Time), allDifferent([Object, Time])] ->
       ta(Time, ab(Object, Time)).
 */
axiom(ab(Object, Time),
   
    [ holds_at(p(Object), Time),
      holds_at(neg(q(Object)), Time),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4903
% HoldsAt(P(A),0).

 /*  [] ->
       ta(Ta_Param, initially(p(a))).
 */
axiom(initially(p(a)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4904
% HoldsAt(P(B),0).

 /*  [] ->
       ta(Ta_Param, initially(p(b))).
 */
axiom(initially(p(b)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4906
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4906
% Ab(A,0).
ab(a,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4908
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4909
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4910
==> range(offset,1,1).

% completion Theta Ab
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4912
==> completion(theta).
==> completion(ab).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/ModelFinding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4939
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4940
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4941
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4943
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4945
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4946
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4947
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4948
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(wakeUp(Agent), Time)->holds_at(neg(awake(Agent)), Time)
       ).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [happens(wakeUp(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(awake(Agent)), Time)).
 */
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ happens(wakeUp(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(awake(Agent))), Time), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(wakeUp(Agent), Time))).
 */
axiom(not(happens(wakeUp(Agent), Time)),
   
    [ holds_at(neg(neg(awake(Agent))), Time),
      allDifferent([Agent, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4950
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4951
==> t(agent,james).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4953
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4954
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Postdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4979
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4980
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4981
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4983
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4985
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4986
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4987
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4988
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(wakeUp(Agent), Time)->holds_at(neg(awake(Agent)), Time)
       ).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [happens(wakeUp(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(awake(Agent)), Time)).
 */
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ happens(wakeUp(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(awake(Agent))), Time), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(wakeUp(Agent), Time))).
 */
axiom(not(happens(wakeUp(Agent), Time)),
   
    [ holds_at(neg(neg(awake(Agent))), Time),
      allDifferent([Agent, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4990
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4991
==> t(agent,james).

% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4991
% Happens(WakeUp(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(wakeUp(james), t)).
 */
axiom(happens(wakeUp(james), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4992
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4994
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4995
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4997
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4998
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5023
% option timediff off
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5024
:- set_ec_option(timediff, off).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5026
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5027
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5029
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5031
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5032
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5033
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5035
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5036
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5036
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5037
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5037
% Happens(WakeUp(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(wakeUp(james), t)).
 */
axiom(happens(wakeUp(james), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5039
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5040
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5042
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5043
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5068
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5069
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5070
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5072
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5074
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5075
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5076
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5078
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5079
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5079
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5080
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5080
% Happens(WakeUp(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(wakeUp(james), t)).
 */
axiom(happens(wakeUp(james), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5082
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5083
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5085
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5086
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Abduction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5111
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5112
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5113
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5115
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5117
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5118
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5119
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5121
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5122
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5122
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5123
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5125
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5126
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5127
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/AlarmClock.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5152
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5153
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5154
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5156
==> sort(agent).

% sort clock
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5157
==> sort(clock).

% fluent Beeping(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5159
fluent(beeping(Beeping_Ret)).
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% fluent AlarmTime(clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5160
fluent(alarmTime(AlarmTime_Param,AlarmTime_Ret)).
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% fluent AlarmOn(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5161
fluent(alarmOn(AlarmOn_Ret)).
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% event SetAlarmTime(agent,clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5163
event(setAlarmTime(SetAlarmTime_Param,
		   _,
		   SetAlarmTime_Ret)).
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5164
event(startBeeping(StartBeeping_Ret)).
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% event TurnOnAlarm(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5165
event(turnOnAlarm(TurnOnAlarm_Param,TurnOnAlarm_Ret)).
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5166
event(turnOffAlarm(TurnOffAlarm_Param,TurnOffAlarm_Ret)).
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5168
==> t(agent,nathan).

% clock Clock
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5169
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5173
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          initiates(setAlarmTime(Agent, Clock, Time2),
                    alarmTime(Clock, Time2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5175
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5177
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          terminates(setAlarmTime(Agent, Clock, Time2),
                     alarmTime(Clock, Time1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5180
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5182
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          initiates(turnOnAlarm(Agent, Clock),
                    alarmOn(Clock),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5183
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5185
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffAlarm(Agent, Clock),
                     alarmOn(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5186
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5188
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          initiates(startBeeping(Clock), beeping(Clock), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5189
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5191
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffAlarm(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5192
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5194
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5197
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).

 /*  allDifferent([Clock, Time]) ->
       ( holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time)->happens(startBeeping(Clock), Time)
       ).
 */

 /*  happens(startBeeping(Clock), Time) :-
       ( holds_at(alarmTime(Clock, Time), Time),
         holds_at(alarmOn(Clock), Time)
       ),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), allDifferent([Clock, Time])] ->
       ta(Time, happens(startBeeping(Clock), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5199
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time),
      allDifferent([Clock, Time])
    ]).

 /*  not(holds_at(alarmTime(Clock, Time), Time)) :-
       holds_at(alarmOn(Clock), Time),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmOn(Clock), Time), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, holds_at(neg(alarmTime(Clock, Time)), Time)).
 */
axiom(holds_at(neg(alarmTime(Clock, Time)), Time),
   
    [ holds_at(alarmOn(Clock), Time),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).

 /*  not(holds_at(alarmOn(Clock), Time)) :-
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, holds_at(neg(alarmOn(Clock)), Time)).
 */
axiom(holds_at(neg(alarmOn(Clock)), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5201
% Happens(SetAlarmTime(Nathan,Clock,2),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(setAlarmTime(nathan, clock, 2), t)).
 */
axiom(happens(setAlarmTime(nathan, clock, 2), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5202
% Happens(TurnOnAlarm(Nathan,Clock),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(turnOnAlarm(nathan, clock), start)).
 */
axiom(happens(turnOnAlarm(nathan, clock), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5204
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5207
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.

 /*  allDifferent([Clock, Time1, Time, Time2]) ->
       ( holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time)->Time1=Time2
       ).
 */

 /*  not(holds_at(alarmTime(Clock, Time1), Time)) :-
       holds_at(alarmTime(Clock, Time2), Time),
       not(equals(Time1, Time2)),
       allDifferent([Clock, Time1, Time, Time2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Time1, Time2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time1=Time2)).
 */

 /*  [holds_at(alarmTime(Clock, Time2), Time), not(call(Time1=Time2)), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */

 /*  [holds_at(alarmTime(Clock, Time2), Time), holds_at(neg(call(Time1=Time2)), Time), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5209
axiom(holds_at(neg(alarmTime(Clock, Time1)), Time),
   
    [ holds_at(alarmTime(Clock, Time2), Time),
      holds_at(neg(call(Time1=Time2)), Time),
      allDifferent([Clock, Time1, Time, Time2])
    ]).

 /*  not(holds_at(alarmTime(Clock, Time2), Time)) :-
       holds_at(alarmTime(Clock, Time1), Time),
       not(equals(Time1, Time2)),
       allDifferent([Clock, Time1, Time, Time2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Time1, Time2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time1=Time2)).
 */

 /*  [holds_at(alarmTime(Clock, Time1), Time), not(call(Time1=Time2)), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */

 /*  [holds_at(alarmTime(Clock, Time1), Time), holds_at(neg(call(Time1=Time2)), Time), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */
axiom(holds_at(neg(alarmTime(Clock, Time2)), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      holds_at(neg(call(Time1=Time2)), Time),
      allDifferent([Clock, Time1, Time, Time2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5211
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5213
% !HoldsAt(AlarmOn(Clock),0).
 %  not(initially(alarmOn(clock))).

 /*  [] ->
       ta(Ta_Param, not(initially(alarmOn(clock)))).
 */
axiom(not(initially(alarmOn(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5214
% !HoldsAt(Beeping(Clock),0).
 %  not(initially(beeping(clock))).

 /*  [] ->
       ta(Ta_Param, not(initially(beeping(clock)))).
 */
axiom(not(initially(beeping(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5215
% HoldsAt(AlarmTime(Clock,3),0).

 /*  [] ->
       ta(Ta_Param, initially(alarmTime(clock, 3))).
 */
axiom(initially(alarmTime(clock, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5217
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5218
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5220
==> range(time,0,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5221
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/BankAccountServiceFee.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5248
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5249
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5251
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5252
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort account
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5254
==> sort(account).

% sort value: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5255
==> subsort(value,integer).

% account Account1, Account2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5257
==> t(account,account1).
==> t(account,account2).

% predicate EndOfMonth(time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5259
predicate(endOfMonth(EndOfMonth_Ret)).
==> mpred_prop(endOfMonth(time),predicate).
==> meta_argtypes(endOfMonth(time)).

% function ServiceFee(account): value
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5260
functional_predicate(serviceFee(ServiceFee_Param,
				ServiceFee_Ret)).
==> mpred_prop(serviceFee(account,value),functional_predicate).
==> meta_argtypes(serviceFee(account,value)).
==> resultIsa(serviceFee,value).

% function MinimumBalance(account): value
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5261
functional_predicate(minimumBalance(MinimumBalance_Param,
				    MinimumBalance_Ret)).
==> mpred_prop(minimumBalance(account,value),functional_predicate).
==> meta_argtypes(minimumBalance(account,value)).
==> resultIsa(minimumBalance,value).

% fluent ServiceFeeCharged(account)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5263
fluent(serviceFeeCharged(ServiceFeeCharged_Ret)).
==> mpred_prop(serviceFeeCharged(account),fluent).
==> meta_argtypes(serviceFeeCharged(account)).

% fluent Balance(account,value)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5264
fluent(balance(Balance_Param,Balance_Ret)).
==> mpred_prop(balance(account,value),fluent).
==> meta_argtypes(balance(account,value)).

% event Transfer(account,account,value)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5266
event(transfer(Transfer_Param,_,Transfer_Ret)).
==> mpred_prop(transfer(account,account,value),event).
==> meta_argtypes(transfer(account,account,value)).

% event MonthlyReset(account)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5267
event(monthlyReset(MonthlyReset_Ret)).
==> mpred_prop(monthlyReset(account),event).
==> meta_argtypes(monthlyReset(account)).

% event ChargeServiceFee(account)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5268
event(chargeServiceFee(ChargeServiceFee_Ret)).
==> mpred_prop(chargeServiceFee(account),event).
==> meta_argtypes(chargeServiceFee(account)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5269
%; Sigma
% [account1,account2,value1,value2,value3,value4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5272
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value2+value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account2,value4),time).

 /*  axiom_head(Time) ->
       equals(Value4, Value2+Value3).
 */

 /*  fix_axiom_head(Time) ->
       call(Value4=Value2+Value3).
 */

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=), call(Value4=Value2+Value3)] ->
       ta(Time,
          initiates(transfer(Account1, Account2, Value3),
                    balance(Account2, Value4),
                    Time)).
 */

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=), holds_at(call(Value4=Value2+Value3), Time)] ->
       ta(Time,
          initiates(transfer(Account1, Account2, Value3),
                    balance(Account2, Value4),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5277
axiom(initiates(transfer(Account1, Account2, Value3), balance(Account2, Value4), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=),
      holds_at(call(Value4=Value2+Value3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5279
% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account2,value2),time).

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=)] ->
       ta(Time,
          terminates(transfer(Account1, Account2, Value3),
                     balance(Account2, Value2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5284
axiom(terminates(transfer(Account1, Account2, Value3), balance(Account2, Value2), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5286
% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value1-value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account1,value4),time).

 /*  axiom_head(Time) ->
       equals(Value4, Value1-Value3).
 */

 /*  fix_axiom_head(Time) ->
       call(Value4=Value1-Value3).
 */

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=), call(Value4=Value1-Value3)] ->
       ta(Time,
          initiates(transfer(Account1, Account2, Value3),
                    balance(Account1, Value4),
                    Time)).
 */

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=), holds_at(call(Value4=Value1-Value3), Time)] ->
       ta(Time,
          initiates(transfer(Account1, Account2, Value3),
                    balance(Account1, Value4),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5292
axiom(initiates(transfer(Account1, Account2, Value3), balance(Account1, Value4), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=),
      holds_at(call(Value4=Value1-Value3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5294
% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account1,value1),time).

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=)] ->
       ta(Time,
          terminates(transfer(Account1, Account2, Value3),
                     balance(Account1, Value1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5299
axiom(terminates(transfer(Account1, Account2, Value3), balance(Account1, Value1), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5301
% [account,time]
% Initiates(ChargeServiceFee(account),ServiceFeeCharged(account),time).

 /*  [] ->
       ta(Time,
          initiates(chargeServiceFee(Account),
                    serviceFeeCharged(Account),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5302
axiom(initiates(chargeServiceFee(Account), serviceFeeCharged(Account), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5304
% [account,time]
% Terminates(MonthlyReset(account),ServiceFeeCharged(account),time).

 /*  [] ->
       ta(Time,
          terminates(monthlyReset(Account),
                     serviceFeeCharged(Account),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5305
axiom(terminates(monthlyReset(Account), serviceFeeCharged(Account), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5307
% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% value2 = (value1-ServiceFee(account)) ->
% Initiates(ChargeServiceFee(account),
%           Balance(account,value2),
%           time).

 /*  axiom_head(Time) ->
       equals(Value2, Value1-serviceFee(Account)).
 */

 /*  fix_axiom_head(Time) ->
       call(Value2=Value1-serviceFee(Account)).
 */

 /*  [holds_at(balance(Account, Value1), Time), call(Value2=Value1-serviceFee(Account))] ->
       ta(Time,
          initiates(chargeServiceFee(Account),
                    balance(Account, Value2),
                    Time)).
 */

 /*  [holds_at(balance(Account, Value1), Time), holds_at(call(Value2=Value1-serviceFee(Account)), Time)] ->
       ta(Time,
          initiates(chargeServiceFee(Account),
                    balance(Account, Value2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5312
axiom(initiates(chargeServiceFee(Account), balance(Account, Value2), Time),
   
    [ holds_at(balance(Account, Value1), Time),
      holds_at(call(Value2=Value1-serviceFee(Account)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5314
% [account,value,time]
% HoldsAt(Balance(account,value),time) ->
% Terminates(ChargeServiceFee(account),Balance(account,value),time).

 /*  [holds_at(balance(Account, Value), Time)] ->
       ta(Time,
          terminates(chargeServiceFee(Account),
                     balance(Account, Value),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5316
axiom(terminates(chargeServiceFee(Account), balance(Account, Value), Time),
    [holds_at(balance(Account, Value), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5318
%; Delta
% [account,value,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5321
% HoldsAt(Balance(account,value),time) &
% value<MinimumBalance(account) &
% !HoldsAt(ServiceFeeCharged(account),time) ->
% Happens(ChargeServiceFee(account),time).

 /*  allDifferent([Account, Value, Time]) ->
       ( holds_at(balance(Account, Value), Time), Value<minimumBalance(Account), holds_at(neg(serviceFeeCharged(Account)), Time)->happens(chargeServiceFee(Account), Time)
       ).
 */

 /*  happens(chargeServiceFee(Account), Time) :-
       ( holds_at(balance(Account, Value), Time),
         comparison(Value, minimumBalance(Account), <),
         holds_at(neg(serviceFeeCharged(Account)), Time)
       ),
       allDifferent([Account, Value, Time]).
 */

 /*  [holds_at(balance(Account, Value), Time), comparison(Value, minimumBalance(Account), <), holds_at(neg(serviceFeeCharged(Account)), Time), allDifferent([Account, Value, Time])] ->
       ta(Time, happens(chargeServiceFee(Account), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5324
axiom(happens(chargeServiceFee(Account), Time),
   
    [ holds_at(balance(Account, Value), Time),
      comparison(Value, minimumBalance(Account), <),
      holds_at(neg(serviceFeeCharged(Account)), Time),
      allDifferent([Account, Value, Time])
    ]).

 /*  not(holds_at(balance(Account, Value), Time)) :-
       ( comparison(Value, minimumBalance(Account), <),
         holds_at(neg(serviceFeeCharged(Account)), Time)
       ),
       not(happens(chargeServiceFee(Account), Time)),
       allDifferent([Account, Value, Time]).
 */

 /*  [comparison(Value, minimumBalance(Account), <), holds_at(neg(serviceFeeCharged(Account)), Time), not(happens(chargeServiceFee(Account), Time)), allDifferent([Account, Value, Time])] ->
       ta(Time,
          holds_at(neg(balance(Account, Value)), Time)).
 */
axiom(holds_at(neg(balance(Account, Value)), Time),
   
    [ comparison(Value, minimumBalance(Account), <),
      holds_at(neg(serviceFeeCharged(Account)), Time),
      not(happens(chargeServiceFee(Account), Time)),
      allDifferent([Account, Value, Time])
    ]).

 /*  not(holds_at(neg(serviceFeeCharged(Account)), Time)) :-
       comparison(Value, minimumBalance(Account), <),
       holds_at(balance(Account, Value), Time),
       not(happens(chargeServiceFee(Account), Time)),
       allDifferent([Account, Value, Time]).
 */

 /*  [comparison(Value, minimumBalance(Account), <), holds_at(balance(Account, Value), Time), not(happens(chargeServiceFee(Account), Time)), allDifferent([Account, Value, Time])] ->
       ta(Time,
          holds_at(neg(neg(serviceFeeCharged(Account))), Time)).
 */
axiom(holds_at(neg(neg(serviceFeeCharged(Account))), Time),
   
    [ comparison(Value, minimumBalance(Account), <),
      holds_at(balance(Account, Value), Time),
      not(happens(chargeServiceFee(Account), Time)),
      allDifferent([Account, Value, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5326
% [account,time]
% EndOfMonth(time) ->
% Happens(MonthlyReset(account),time).

 /*  allDifferent([Time, Account]) ->
       ( endOfMonth(Time)->happens(monthlyReset(Account), Time)
       ).
 */

 /*  happens(monthlyReset(Account), Time) :-
       endOfMonth(Time),
       allDifferent([Time, Account]).
 */

 /*  [endOfMonth(Time), allDifferent([Time, Account])] ->
       ta(Time, happens(monthlyReset(Account), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5328
axiom(happens(monthlyReset(Account), Time),
    [endOfMonth(Time), allDifferent([Time, Account])]).

 /*  not(endOfMonth(Time)) :-
       not(happens(monthlyReset(Account), Time)),
       allDifferent([Time, Account]).
 */

 /*  [not(happens(monthlyReset(Account), Time)), allDifferent([Time, Account])] ->
       ta(Time, not(endOfMonth(Time))).
 */
axiom(not(endOfMonth(Time)),
   
    [ not(happens(monthlyReset(Account), Time)),
      allDifferent([Time, Account])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5330
% Happens(Transfer(Account1,Account2,1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(transfer(account1, account2, 1), t)).
 */
axiom(happens(transfer(account1, account2, 1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5331
% Happens(Transfer(Account1,Account2,1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(transfer(account1, account2, 1), t)).
 */
axiom(happens(transfer(account1, account2, 1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5333
%; Psi
% [account,value1,value2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5336
% HoldsAt(Balance(account,value1),time) &
% HoldsAt(Balance(account,value2),time) ->
% value1=value2.

 /*  allDifferent([Account, Value1, Time, Value2]) ->
       ( holds_at(balance(Account, Value1), Time), holds_at(balance(Account, Value2), Time)->Value1=Value2
       ).
 */

 /*  not(holds_at(balance(Account, Value1), Time)) :-
       holds_at(balance(Account, Value2), Time),
       not(equals(Value1, Value2)),
       allDifferent([Account, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(balance(Account, Value2), Time), not(call(Value1=Value2)), allDifferent([Account, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(balance(Account, Value1)), Time)).
 */

 /*  [holds_at(balance(Account, Value2), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Account, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(balance(Account, Value1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5338
axiom(holds_at(neg(balance(Account, Value1)), Time),
   
    [ holds_at(balance(Account, Value2), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Account, Value1, Time, Value2])
    ]).

 /*  not(holds_at(balance(Account, Value2), Time)) :-
       holds_at(balance(Account, Value1), Time),
       not(equals(Value1, Value2)),
       allDifferent([Account, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(balance(Account, Value1), Time), not(call(Value1=Value2)), allDifferent([Account, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(balance(Account, Value2)), Time)).
 */

 /*  [holds_at(balance(Account, Value1), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Account, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(balance(Account, Value2)), Time)).
 */
axiom(holds_at(neg(balance(Account, Value2)), Time),
   
    [ holds_at(balance(Account, Value1), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Account, Value1, Time, Value2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5340
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5342
% !HoldsAt(ServiceFeeCharged(Account1),0).
 %  not(initially(serviceFeeCharged(account1))).

 /*  [] ->
       ta(Ta_Param, not(initially(serviceFeeCharged(account1)))).
 */
axiom(not(initially(serviceFeeCharged(account1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5343
% !HoldsAt(ServiceFeeCharged(Account2),0).
 %  not(initially(serviceFeeCharged(account2))).

 /*  [] ->
       ta(Ta_Param, not(initially(serviceFeeCharged(account2)))).
 */
axiom(not(initially(serviceFeeCharged(account2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5344
% HoldsAt(Balance(Account1,3),0).

 /*  [] ->
       ta(Ta_Param, initially(balance(account1, 3))).
 */
axiom(initially(balance(account1, 3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5345
% HoldsAt(Balance(Account2,1),0).

 /*  [] ->
       ta(Ta_Param, initially(balance(account2, 1))).
 */
axiom(initially(balance(account2, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5346
% MinimumBalance(Account1)=3.
minimumBalance(account1,3).

 /*  axiom_head(Axiom_head_Ret) ->
       minimumBalance(account1, 3).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(minimumBalance(account1, 3), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5347
% MinimumBalance(Account2)=1.
minimumBalance(account2,1).

 /*  axiom_head(Axiom_head_Ret) ->
       minimumBalance(account2, 1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(minimumBalance(account2, 1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5348
% ServiceFee(Account1)=1.
serviceFee(account1,1).

 /*  axiom_head(Axiom_head_Ret) ->
       serviceFee(account1, 1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(serviceFee(account1, 1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5349
% ServiceFee(Account2)=1.
serviceFee(account2,1).

 /*  axiom_head(Axiom_head_Ret) ->
       serviceFee(account2, 1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(serviceFee(account2, 1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5350
% [time]
 % !EndOfMonth(time).
 %  not(endOfMonth(Time)).

 /*  [] ->
       ta(Ta_Param, not(endOfMonth(Time))).
 */
axiom(not(endOfMonth(Time)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5352
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5353
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5355
==> range(time,0,3).

% range value 1 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5356
==> range(value,1,3).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5357
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/Counter.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{DeneckerDupreBelleghem:1998,
%;   author = "Marc Denecker and Daniele Theseider Dupr\'{e} and Kristof Van Belleghem",
%;   year = "1998",
%;   title = "An inductive definition approach to ramifications",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "3",
%;   number = "007",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5393
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5394
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5395
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort counter
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5397
==> sort(counter).

% counter Counter1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5398
==> t(counter,counter1).

% event FalseToTrue(counter)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5400
event(falseToTrue(FalseToTrue_Ret)).
==> mpred_prop(falseToTrue(counter),event).
==> meta_argtypes(falseToTrue(counter)).

% event TrueToFalse(counter)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5401
event(trueToFalse(TrueToFalse_Ret)).
==> mpred_prop(trueToFalse(counter),event).
==> meta_argtypes(trueToFalse(counter)).

% fluent Count(counter,integer)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5403
fluent(count(Count_Param,Count_Ret)).
==> mpred_prop(count(counter,integer),fluent).
==> meta_argtypes(count(counter,integer)).

% fluent True(counter)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5404
fluent(true(True_Ret)).
==> mpred_prop(true(counter),fluent).
==> meta_argtypes(true(counter)).

% fluent InputLine(counter)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5405
fluent(inputLine(InputLine_Ret)).
==> mpred_prop(inputLine(counter),fluent).
==> meta_argtypes(inputLine(counter)).

% noninertial InputLine
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5406
==> noninertial(inputLine).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5407
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5407
% [counter,time]
% !HoldsAt(True(counter),time) &
% HoldsAt(InputLine(counter),time) ->
% Happens(FalseToTrue(counter),time).

 /*  allDifferent([Counter, Time]) ->
       ( holds_at(neg(true(Counter)), Time), holds_at(inputLine(Counter), Time)->happens(falseToTrue(Counter), Time)
       ).
 */

 /*  happens(falseToTrue(Counter), Time) :-
       ( holds_at(neg(true(Counter)), Time),
         holds_at(inputLine(Counter), Time)
       ),
       allDifferent([Counter, Time]).
 */

 /*  [holds_at(neg(true(Counter)), Time), holds_at(inputLine(Counter), Time), allDifferent([Counter, Time])] ->
       ta(Time, happens(falseToTrue(Counter), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5410
axiom(happens(falseToTrue(Counter), Time),
   
    [ holds_at(neg(true(Counter)), Time),
      holds_at(inputLine(Counter), Time),
      allDifferent([Counter, Time])
    ]).

 /*  not(holds_at(neg(true(Counter)), Time)) :-
       holds_at(inputLine(Counter), Time),
       not(happens(falseToTrue(Counter), Time)),
       allDifferent([Counter, Time]).
 */

 /*  [holds_at(inputLine(Counter), Time), not(happens(falseToTrue(Counter), Time)), allDifferent([Counter, Time])] ->
       ta(Time, holds_at(neg(neg(true(Counter))), Time)).
 */
axiom(holds_at(neg(neg(true(Counter))), Time),
   
    [ holds_at(inputLine(Counter), Time),
      not(happens(falseToTrue(Counter), Time)),
      allDifferent([Counter, Time])
    ]).

 /*  not(holds_at(inputLine(Counter), Time)) :-
       holds_at(neg(true(Counter)), Time),
       not(happens(falseToTrue(Counter), Time)),
       allDifferent([Counter, Time]).
 */

 /*  [holds_at(neg(true(Counter)), Time), not(happens(falseToTrue(Counter), Time)), allDifferent([Counter, Time])] ->
       ta(Time, holds_at(neg(inputLine(Counter)), Time)).
 */
axiom(holds_at(neg(inputLine(Counter)), Time),
   
    [ holds_at(neg(true(Counter)), Time),
      not(happens(falseToTrue(Counter), Time)),
      allDifferent([Counter, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5412
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5412
% [counter,time]
% HoldsAt(True(counter),time) &
% !HoldsAt(InputLine(counter),time) ->
% Happens(TrueToFalse(counter),time).

 /*  allDifferent([Counter, Time]) ->
       ( holds_at(true(Counter), Time), holds_at(neg(inputLine(Counter)), Time)->happens(trueToFalse(Counter), Time)
       ).
 */

 /*  happens(trueToFalse(Counter), Time) :-
       ( holds_at(true(Counter), Time),
         holds_at(neg(inputLine(Counter)), Time)
       ),
       allDifferent([Counter, Time]).
 */

 /*  [holds_at(true(Counter), Time), holds_at(neg(inputLine(Counter)), Time), allDifferent([Counter, Time])] ->
       ta(Time, happens(trueToFalse(Counter), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5415
axiom(happens(trueToFalse(Counter), Time),
   
    [ holds_at(true(Counter), Time),
      holds_at(neg(inputLine(Counter)), Time),
      allDifferent([Counter, Time])
    ]).

 /*  not(holds_at(true(Counter), Time)) :-
       holds_at(neg(inputLine(Counter)), Time),
       not(happens(trueToFalse(Counter), Time)),
       allDifferent([Counter, Time]).
 */

 /*  [holds_at(neg(inputLine(Counter)), Time), not(happens(trueToFalse(Counter), Time)), allDifferent([Counter, Time])] ->
       ta(Time, holds_at(neg(true(Counter)), Time)).
 */
axiom(holds_at(neg(true(Counter)), Time),
   
    [ holds_at(neg(inputLine(Counter)), Time),
      not(happens(trueToFalse(Counter), Time)),
      allDifferent([Counter, Time])
    ]).

 /*  not(holds_at(neg(inputLine(Counter)), Time)) :-
       holds_at(true(Counter), Time),
       not(happens(trueToFalse(Counter), Time)),
       allDifferent([Counter, Time]).
 */

 /*  [holds_at(true(Counter), Time), not(happens(trueToFalse(Counter), Time)), allDifferent([Counter, Time])] ->
       ta(Time, holds_at(neg(neg(inputLine(Counter))), Time)).
 */
axiom(holds_at(neg(neg(inputLine(Counter))), Time),
   
    [ holds_at(true(Counter), Time),
      not(happens(trueToFalse(Counter), Time)),
      allDifferent([Counter, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5417
% [counter,time]
 % Initiates(FalseToTrue(counter),True(counter),time).

 /*  [] ->
       ta(Time,
          initiates(falseToTrue(Counter), true(Counter), Time)).
 */
axiom(initiates(falseToTrue(Counter), true(Counter), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5419
% [counter,time]
 % Terminates(TrueToFalse(counter),True(counter),time).

 /*  [] ->
       ta(Time,
          terminates(trueToFalse(Counter), true(Counter), Time)).
 */
axiom(terminates(trueToFalse(Counter), true(Counter), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5421
% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% (integer2 = (integer1 + 1)) ->
% Initiates(FalseToTrue(counter),Count(counter,integer2),time).

 /*  axiom_head(Time) ->
       equals(Integer2, Integer1+1).
 */

 /*  fix_axiom_head(Time) ->
       call(Integer2=Integer1+1).
 */

 /*  [holds_at(count(Counter, Integer1), Time), call(Integer2=Integer1+1)] ->
       ta(Time,
          initiates(falseToTrue(Counter),
                    count(Counter, Integer2),
                    Time)).
 */

 /*  [holds_at(count(Counter, Integer1), Time), holds_at(call(Integer2=Integer1+1), Time)] ->
       ta(Time,
          initiates(falseToTrue(Counter),
                    count(Counter, Integer2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5424
axiom(initiates(falseToTrue(Counter), count(Counter, Integer2), Time),
   
    [ holds_at(count(Counter, Integer1), Time),
      holds_at(call(Integer2=Integer1+1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5426
% [counter,integer,time]
% HoldsAt(Count(counter,integer),time) ->
% Terminates(FalseToTrue(counter),Count(counter,integer),time).

 /*  [holds_at(count(Counter, Integer), Time)] ->
       ta(Time,
          terminates(falseToTrue(Counter),
                     count(Counter, Integer),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5428
axiom(terminates(falseToTrue(Counter), count(Counter, Integer), Time),
    [holds_at(count(Counter, Integer), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5430
% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% HoldsAt(Count(counter,integer2),time) ->
% integer1 = integer2.

 /*  allDifferent([Counter, Integer1, Time, Integer2]) ->
       ( holds_at(count(Counter, Integer1), Time), holds_at(count(Counter, Integer2), Time)->Integer1=Integer2
       ).
 */

 /*  not(holds_at(count(Counter, Integer1), Time)) :-
       holds_at(count(Counter, Integer2), Time),
       not(equals(Integer1, Integer2)),
       allDifferent([Counter, Integer1, Time, Integer2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Integer1, Integer2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Integer1=Integer2)).
 */

 /*  [holds_at(count(Counter, Integer2), Time), not(call(Integer1=Integer2)), allDifferent([Counter, Integer1, Time, Integer2])] ->
       ta(Time,
          holds_at(neg(count(Counter, Integer1)), Time)).
 */

 /*  [holds_at(count(Counter, Integer2), Time), holds_at(neg(call(Integer1=Integer2)), Time), allDifferent([Counter, Integer1, Time, Integer2])] ->
       ta(Time,
          holds_at(neg(count(Counter, Integer1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5433
axiom(holds_at(neg(count(Counter, Integer1)), Time),
   
    [ holds_at(count(Counter, Integer2), Time),
      holds_at(neg(call(Integer1=Integer2)), Time),
      allDifferent([Counter, Integer1, Time, Integer2])
    ]).

 /*  not(holds_at(count(Counter, Integer2), Time)) :-
       holds_at(count(Counter, Integer1), Time),
       not(equals(Integer1, Integer2)),
       allDifferent([Counter, Integer1, Time, Integer2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Integer1, Integer2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Integer1=Integer2)).
 */

 /*  [holds_at(count(Counter, Integer1), Time), not(call(Integer1=Integer2)), allDifferent([Counter, Integer1, Time, Integer2])] ->
       ta(Time,
          holds_at(neg(count(Counter, Integer2)), Time)).
 */

 /*  [holds_at(count(Counter, Integer1), Time), holds_at(neg(call(Integer1=Integer2)), Time), allDifferent([Counter, Integer1, Time, Integer2])] ->
       ta(Time,
          holds_at(neg(count(Counter, Integer2)), Time)).
 */
axiom(holds_at(neg(count(Counter, Integer2)), Time),
   
    [ holds_at(count(Counter, Integer1), Time),
      holds_at(neg(call(Integer1=Integer2)), Time),
      allDifferent([Counter, Integer1, Time, Integer2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5435
% !HoldsAt(True(Counter1),0).
 %  not(initially(true(counter1))).

 /*  [] ->
       ta(Ta_Param, not(initially(true(counter1)))).
 */
axiom(not(initially(true(counter1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5436
% !HoldsAt(InputLine(Counter1),0).
 %  not(initially(inputLine(counter1))).

 /*  [] ->
       ta(Ta_Param, not(initially(inputLine(counter1)))).
 */
axiom(not(initially(inputLine(counter1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5437
% HoldsAt(InputLine(Counter1),1).
holds_at(inputLine(counter1),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5438
% HoldsAt(InputLine(Counter1),2).
holds_at(inputLine(counter1),2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5439
% HoldsAt(InputLine(Counter1),3).
holds_at(inputLine(counter1),3).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5440
% !HoldsAt(InputLine(Counter1),4).
holds_at(neg(inputLine(counter1)),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5441
% !HoldsAt(InputLine(Counter1),5).
holds_at(neg(inputLine(counter1)),5).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5442
% !HoldsAt(InputLine(Counter1),6).
holds_at(neg(inputLine(counter1)),6).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5443
% HoldsAt(InputLine(Counter1),7).
holds_at(inputLine(counter1),7).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5444
% HoldsAt(InputLine(Counter1),8).
holds_at(inputLine(counter1),8).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5445
% HoldsAt(InputLine(Counter1),9).
holds_at(inputLine(counter1),9).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5447
% HoldsAt(Count(Counter1,0),0).

 /*  [] ->
       ta(Ta_Param, initially(count(counter1, 0))).
 */
axiom(initially(count(counter1, 0)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5449
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5450
==> completion(happens).

% range integer 0 6
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5452
==> range(integer,0,6).

% range time 0 10
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5453
==> range(time,0,10).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5454
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TeacherTells.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5481
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5482
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5484
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5485
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5487
==> sort(agent).

% sort room
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5488
==> sort(room).

% sort fact
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5489
==> sort(fact).

% agent Teacher, Student
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5491
==> t(agent,teacher).
==> t(agent,student).

% room Kitchen, Classroom
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5492
==> t(room,kitchen).
==> t(room,classroom).

% fact Fact1, Fact2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5493
==> t(fact,fact1).
==> t(fact,fact2).

% fluent InRoom(agent,room)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5495
fluent(inRoom(InRoom_Param,InRoom_Ret)).
==> mpred_prop(inRoom(agent,room),fluent).
==> meta_argtypes(inRoom(agent,room)).

% fluent ListeningTo(agent,agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5496
fluent(listeningTo(ListeningTo_Param,ListeningTo_Ret)).
==> mpred_prop(listeningTo(agent,agent),fluent).
==> meta_argtypes(listeningTo(agent,agent)).

% fluent Know(agent,fact)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5497
fluent(know(Know_Param,Know_Ret)).
==> mpred_prop(know(agent,fact),fluent).
==> meta_argtypes(know(agent,fact)).

% event Tell(agent,agent,fact)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5499
event(tell(Tell_Param,_,Tell_Ret)).
==> mpred_prop(tell(agent,agent,fact),event).
==> meta_argtypes(tell(agent,agent,fact)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5500
%; Sigma
% [agent1,agent2,fact,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5503
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5503
% {room} HoldsAt(InRoom(agent1,room),time) &
%         HoldsAt(InRoom(agent2,room),time)) &
% HoldsAt(ListeningTo(agent2,agent1),time) ->
% Initiates(Tell(agent1,agent2,fact),Know(agent2,fact),time).

 /*  exists([Room],
    (holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time)), holds_at(listeningTo(Agent2, Agent1), Time) ->
       initiates(tell(Agent1, Agent2, Fact),
                 know(Agent2, Fact),
                 Time)).
 */

 /*  initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time) :-
       ( ( holds_at(inRoom(Agent1, Room), Time),
           holds_at(inRoom(Agent2, Room), Time)
         ),
         holds_at(listeningTo(Agent2, Agent1), Time)
       ),
       some(Room,
            '$kolem_Fn_342'(Agent1, Time, Agent2, Fact)).
 */

 /*  [holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time), holds_at(listeningTo(Agent2, Agent1), Time), some(Room, '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))] ->
       ta(Time,
          initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5506
axiom(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time),
   
    [ holds_at(inRoom(Agent1, Room), Time),
      holds_at(inRoom(Agent2, Room), Time),
      holds_at(listeningTo(Agent2, Agent1), Time),
      some(Room,
           '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))
    ]).

 /*  not(holds_at(inRoom(Agent1, Room), Time)) :-
       holds_at(inRoom(Agent2, Room), Time),
       holds_at(listeningTo(Agent2, Agent1), Time),
       not(initiates(tell(Agent1, Agent2, Fact),
                     know(Agent2, Fact),
                     Time)),
       some(Room,
            '$kolem_Fn_342'(Agent1, Time, Agent2, Fact)).
 */

 /*  [holds_at(inRoom(Agent2, Room), Time), holds_at(listeningTo(Agent2, Agent1), Time), not(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time)), some(Room, '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))] ->
       ta(Time, holds_at(neg(inRoom(Agent1, Room)), Time)).
 */
axiom(holds_at(neg(inRoom(Agent1, Room)), Time),
   
    [ holds_at(inRoom(Agent2, Room), Time),
      holds_at(listeningTo(Agent2, Agent1), Time),
      not(initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)),
      some(Room,
           '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))
    ]).

 /*  not(holds_at(inRoom(Agent2, Room), Time)) :-
       holds_at(inRoom(Agent1, Room), Time),
       holds_at(listeningTo(Agent2, Agent1), Time),
       not(initiates(tell(Agent1, Agent2, Fact),
                     know(Agent2, Fact),
                     Time)),
       some(Room,
            '$kolem_Fn_342'(Agent1, Time, Agent2, Fact)).
 */

 /*  [holds_at(inRoom(Agent1, Room), Time), holds_at(listeningTo(Agent2, Agent1), Time), not(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time)), some(Room, '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))] ->
       ta(Time, holds_at(neg(inRoom(Agent2, Room)), Time)).
 */
axiom(holds_at(neg(inRoom(Agent2, Room)), Time),
   
    [ holds_at(inRoom(Agent1, Room), Time),
      holds_at(listeningTo(Agent2, Agent1), Time),
      not(initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)),
      some(Room,
           '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))
    ]).

 /*  not(holds_at(listeningTo(Agent2, Agent1), Time)) :-
       ( holds_at(inRoom(Agent1, Room), Time),
         holds_at(inRoom(Agent2, Room), Time)
       ),
       not(initiates(tell(Agent1, Agent2, Fact),
                     know(Agent2, Fact),
                     Time)),
       some(Room,
            '$kolem_Fn_342'(Agent1, Time, Agent2, Fact)).
 */

 /*  [holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time), not(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time)), some(Room, '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))] ->
       ta(Time,
          holds_at(neg(listeningTo(Agent2, Agent1)), Time)).
 */
axiom(holds_at(neg(listeningTo(Agent2, Agent1)), Time),
   
    [ holds_at(inRoom(Agent1, Room), Time),
      holds_at(inRoom(Agent2, Room), Time),
      not(initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)),
      some(Room,
           '$kolem_Fn_342'(Agent1, Time, Agent2, Fact))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5508
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5510
% Happens(Tell(Teacher,Student,Fact1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(tell(teacher, student, fact1), t)).
 */
axiom(happens(tell(teacher, student, fact1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5512
%; Psi
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5515
% HoldsAt(InRoom(agent,room1),time) &
% HoldsAt(InRoom(agent,room2),time) ->
% room1 = room2.

 /*  allDifferent([Agent, Room1, Time, Room2]) ->
       ( holds_at(inRoom(Agent, Room1), Time), holds_at(inRoom(Agent, Room2), Time)->Room1=Room2
       ).
 */

 /*  not(holds_at(inRoom(Agent, Room1), Time)) :-
       holds_at(inRoom(Agent, Room2), Time),
       not(equals(Room1, Room2)),
       allDifferent([Agent, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Agent, Room2), Time), not(call(Room1=Room2)), allDifferent([Agent, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Agent, Room1)), Time)).
 */

 /*  [holds_at(inRoom(Agent, Room2), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Agent, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Agent, Room1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5517
axiom(holds_at(neg(inRoom(Agent, Room1)), Time),
   
    [ holds_at(inRoom(Agent, Room2), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Agent, Room1, Time, Room2])
    ]).

 /*  not(holds_at(inRoom(Agent, Room2), Time)) :-
       holds_at(inRoom(Agent, Room1), Time),
       not(equals(Room1, Room2)),
       allDifferent([Agent, Room1, Time, Room2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Room1, Room2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Room1=Room2)).
 */

 /*  [holds_at(inRoom(Agent, Room1), Time), not(call(Room1=Room2)), allDifferent([Agent, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Agent, Room2)), Time)).
 */

 /*  [holds_at(inRoom(Agent, Room1), Time), holds_at(neg(call(Room1=Room2)), Time), allDifferent([Agent, Room1, Time, Room2])] ->
       ta(Time, holds_at(neg(inRoom(Agent, Room2)), Time)).
 */
axiom(holds_at(neg(inRoom(Agent, Room2)), Time),
   
    [ holds_at(inRoom(Agent, Room1), Time),
      holds_at(neg(call(Room1=Room2)), Time),
      allDifferent([Agent, Room1, Time, Room2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5519
%; Gamma
% [agent,fact]
 % !HoldsAt(Know(agent,fact),0).
 %  not(initially(know(Agent,Fact))).

 /*  [] ->
       ta(Ta_Param, not(initially(know(Agent, Fact)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5521
axiom(not(initially(know(Agent, Fact))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5522
% [agent1,agent2]
 % HoldsAt(ListeningTo(agent1,agent2),0).

 /*  [] ->
       ta(Ta_Param, initially(listeningTo(Agent1, Agent2))).
 */
axiom(initially(listeningTo(Agent1, Agent2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5523
% [agent]
 % HoldsAt(InRoom(agent,Classroom),0).

 /*  [] ->
       ta(Ta_Param, initially(inRoom(Agent, classroom))).
 */
axiom(initially(inRoom(Agent, classroom)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5525
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5526
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5528
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5529
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/MixingPaints.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5556
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5557
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5558
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort palette
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5560
==> sort(palette).

% sort color
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5561
==> sort(color).

% palette Palette1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5563
==> t(palette,palette1).

% color Red, Yellow, Blue, Green
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5564
==> t(color,red).
==> t(color,yellow).
==> t(color,blue).
==> t(color,green).

% event PlaceOnPalette(palette,color)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5566
event(placeOnPalette(PlaceOnPalette_Param,
		     PlaceOnPalette_Ret)).
==> mpred_prop(placeOnPalette(palette,color),event).
==> meta_argtypes(placeOnPalette(palette,color)).

% fluent OnPalette(palette,color)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5567
fluent(onPalette(OnPalette_Param,OnPalette_Ret)).
==> mpred_prop(onPalette(palette,color),fluent).
==> meta_argtypes(onPalette(palette,color)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5568
% [palette,color,time]
% !Happens(PlaceOnPalette(palette,Yellow),time) |
% !Happens(PlaceOnPalette(palette,Blue),time) ->
% Initiates(PlaceOnPalette(palette,color),OnPalette(palette,color),time).

 /*  [(not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time)))] ->
       ta(Time,
          initiates(placeOnPalette(Palette, Color),
                    onPalette(Palette, Color),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5571
axiom(initiates(placeOnPalette(Palette, Color), onPalette(Palette, Color), Time),
   
    [  (not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5573
% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% color1 = Blue &
% color2 = Green ->
% Initiates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).

 /*  axiom_head(Time) ->
       equals(Color1, blue).
 */

 /*  fix_axiom_head(Time) ->
       call(Color1=blue).
 */

 /*  axiom_head(Time) ->
       equals(Color2, green).
 */

 /*  fix_axiom_head(Time) ->
       call(Color2=green).
 */

 /*  [happens(placeOnPalette(Palette, yellow), Time), call(Color1=blue), call(Color2=green)] ->
       ta(Time,
          initiates(placeOnPalette(Palette, Color1),
                    onPalette(Palette, Color2),
                    Time)).
 */

 /*  [happens(placeOnPalette(Palette, yellow), Time), holds_at(call(Color1=blue), Time), holds_at(call(Color2=green), Time)] ->
       ta(Time,
          initiates(placeOnPalette(Palette, Color1),
                    onPalette(Palette, Color2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5577
axiom(initiates(placeOnPalette(Palette, Color1), onPalette(Palette, Color2), Time),
   
    [ happens(placeOnPalette(Palette, yellow), Time),
      holds_at(call(Color1=blue), Time),
      holds_at(call(Color2=green), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5579
% [palette,color1,color2,time]
% !(Happens(PlaceOnPalette(palette,Yellow),time) &
%   Happens(PlaceOnPalette(palette,Blue),time)) &
% HoldsAt(OnPalette(palette,color1),time) &
% color1 != color2 ->
% Terminates(PlaceOnPalette(palette,color2),OnPalette(palette,color1),time).

 /*  [(not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time))), holds_at(onPalette(Palette, Color1), Time), diff(Color1, Color2)] ->
       ta(Time,
          terminates(placeOnPalette(Palette, Color2),
                     onPalette(Palette, Color1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5584
axiom(terminates(placeOnPalette(Palette, Color2), onPalette(Palette, Color1), Time),
   
    [  (not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time))),
      holds_at(onPalette(Palette, Color1), Time),
      diff(Color1, Color2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5586
% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% HoldsAt(OnPalette(palette,color2),time) &
% color1 = Blue &
% color2 != Green ->
% Terminates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).

 /*  axiom_head(Time) ->
       equals(Color1, blue).
 */

 /*  fix_axiom_head(Time) ->
       call(Color1=blue).
 */

 /*  [happens(placeOnPalette(Palette, yellow), Time), holds_at(onPalette(Palette, Color2), Time), call(Color1=blue), diff(Color2, green)] ->
       ta(Time,
          terminates(placeOnPalette(Palette, Color1),
                     onPalette(Palette, Color2),
                     Time)).
 */

 /*  [happens(placeOnPalette(Palette, yellow), Time), holds_at(onPalette(Palette, Color2), Time), holds_at(call(Color1=blue), Time), diff(Color2, green)] ->
       ta(Time,
          terminates(placeOnPalette(Palette, Color1),
                     onPalette(Palette, Color2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5591
axiom(terminates(placeOnPalette(Palette, Color1), onPalette(Palette, Color2), Time),
   
    [ happens(placeOnPalette(Palette, yellow), Time),
      holds_at(onPalette(Palette, Color2), Time),
      holds_at(call(Color1=blue), Time),
      diff(Color2, green)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5593
%; state constraint
% [palette,color1,color2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5596
% HoldsAt(OnPalette(palette,color1),time) &
% HoldsAt(OnPalette(palette,color2),time) ->
% color1 = color2.

 /*  allDifferent([Palette, Color1, Time, Color2]) ->
       ( holds_at(onPalette(Palette, Color1), Time), holds_at(onPalette(Palette, Color2), Time)->Color1=Color2
       ).
 */

 /*  not(holds_at(onPalette(Palette, Color1), Time)) :-
       holds_at(onPalette(Palette, Color2), Time),
       not(equals(Color1, Color2)),
       allDifferent([Palette, Color1, Time, Color2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Color1, Color2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Color1=Color2)).
 */

 /*  [holds_at(onPalette(Palette, Color2), Time), not(call(Color1=Color2)), allDifferent([Palette, Color1, Time, Color2])] ->
       ta(Time,
          holds_at(neg(onPalette(Palette, Color1)), Time)).
 */

 /*  [holds_at(onPalette(Palette, Color2), Time), holds_at(neg(call(Color1=Color2)), Time), allDifferent([Palette, Color1, Time, Color2])] ->
       ta(Time,
          holds_at(neg(onPalette(Palette, Color1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5598
axiom(holds_at(neg(onPalette(Palette, Color1)), Time),
   
    [ holds_at(onPalette(Palette, Color2), Time),
      holds_at(neg(call(Color1=Color2)), Time),
      allDifferent([Palette, Color1, Time, Color2])
    ]).

 /*  not(holds_at(onPalette(Palette, Color2), Time)) :-
       holds_at(onPalette(Palette, Color1), Time),
       not(equals(Color1, Color2)),
       allDifferent([Palette, Color1, Time, Color2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Color1, Color2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Color1=Color2)).
 */

 /*  [holds_at(onPalette(Palette, Color1), Time), not(call(Color1=Color2)), allDifferent([Palette, Color1, Time, Color2])] ->
       ta(Time,
          holds_at(neg(onPalette(Palette, Color2)), Time)).
 */

 /*  [holds_at(onPalette(Palette, Color1), Time), holds_at(neg(call(Color1=Color2)), Time), allDifferent([Palette, Color1, Time, Color2])] ->
       ta(Time,
          holds_at(neg(onPalette(Palette, Color2)), Time)).
 */
axiom(holds_at(neg(onPalette(Palette, Color2)), Time),
   
    [ holds_at(onPalette(Palette, Color1), Time),
      holds_at(neg(call(Color1=Color2)), Time),
      allDifferent([Palette, Color1, Time, Color2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5600
%; (1) place green over red


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5601
% HoldsAt(OnPalette(Palette1,Red),0).

 /*  [] ->
       ta(Ta_Param, initially(onPalette(palette1, red))).
 */
axiom(initially(onPalette(palette1, red)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5602
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5602
% Happens(PlaceOnPalette(Palette1,Green),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(placeOnPalette(palette1, green), t)).
 */
axiom(happens(placeOnPalette(palette1, green), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5604
%; (2) place yellow+blue over green

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5605
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5605
% Happens(PlaceOnPalette(Palette1,Yellow),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(placeOnPalette(palette1, yellow), start)).
 */
axiom(happens(placeOnPalette(palette1, yellow), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5606
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5606
% Happens(PlaceOnPalette(Palette1,Blue),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(placeOnPalette(palette1, blue), start)).
 */
axiom(happens(placeOnPalette(palette1, blue), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5608
%; (3) place yellow

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5609
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5609
% Happens(PlaceOnPalette(Palette1,Yellow),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(placeOnPalette(palette1, yellow), t2)).
 */
axiom(happens(placeOnPalette(palette1, yellow), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5611
%; (4) place blue

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5612
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5612
% Happens(PlaceOnPalette(Palette1,Blue),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(placeOnPalette(palette1, blue), t3)).
 */
axiom(happens(placeOnPalette(palette1, blue), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5614
%; (5) place green

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5615
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5615
% Happens(PlaceOnPalette(Palette1,Yellow),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(placeOnPalette(palette1, yellow), t4)).
 */
axiom(happens(placeOnPalette(palette1, yellow), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5616
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5616
% Happens(PlaceOnPalette(Palette1,Blue),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(placeOnPalette(palette1, blue), t4)).
 */
axiom(happens(placeOnPalette(palette1, blue), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5618
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5619
==> completion(delta).
==> completion(happens).

% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5621
==> range(time,0,5).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5622
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/SnoozeAlarm.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Alarm Clock with snooze alarm added
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5651
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5652
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5653
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5655
==> sort(agent).

% sort clock
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5656
==> sort(clock).

% fluent Beeping(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5658
fluent(beeping(Beeping_Ret)).
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% fluent AlarmTime(clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5659
fluent(alarmTime(AlarmTime_Param,AlarmTime_Ret)).
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% fluent AlarmOn(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5660
fluent(alarmOn(AlarmOn_Ret)).
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% event SetAlarmTime(agent,clock,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5662
event(setAlarmTime(SetAlarmTime_Param,
		   _,
		   SetAlarmTime_Ret)).
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5663
event(startBeeping(StartBeeping_Ret)).
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% event TurnOnAlarm(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5664
event(turnOnAlarm(TurnOnAlarm_Param,TurnOnAlarm_Ret)).
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5665
event(turnOffAlarm(TurnOffAlarm_Param,TurnOffAlarm_Ret)).
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% event PressSnooze(agent,clock)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5667
event(pressSnooze(PressSnooze_Param,PressSnooze_Ret)).
==> mpred_prop(pressSnooze(agent,clock),event).
==> meta_argtypes(pressSnooze(agent,clock)).

% agent Nathan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5669
==> t(agent,nathan).

% clock Clock
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5670
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5674
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          initiates(setAlarmTime(Agent, Clock, Time2),
                    alarmTime(Clock, Time2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5676
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5678
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          terminates(setAlarmTime(Agent, Clock, Time2),
                     alarmTime(Clock, Time1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5681
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5683
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          initiates(turnOnAlarm(Agent, Clock),
                    alarmOn(Clock),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5684
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5686
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffAlarm(Agent, Clock),
                     alarmOn(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5687
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5689
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          initiates(startBeeping(Clock), beeping(Clock), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5690
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5692
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          terminates(turnOffAlarm(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5693
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5695
%; added axioms:
% [agent,clock,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5698
% HoldsAt(Beeping(clock),time) &
% time2 = time+9 ->
% Initiates(PressSnooze(agent,clock),AlarmTime(clock,time2),time).

 /*  axiom_head(Time) ->
       equals(Time2, Time+9).
 */

 /*  fix_axiom_head(Time) ->
       call(Time2=Time+9).
 */

 /*  [ignore(Time+9==B_Ret), b(Time, B_Ret), holds_at(beeping(Clock), Time), call(Time2=B_Ret)] ->
       ta(Time,
          initiates(pressSnooze(Agent, Clock),
                    alarmTime(Clock, Time2),
                    Time)).
 */

 /*  [ignore(Time+9==B_Ret), b(Time, B_Ret), holds_at(beeping(Clock), Time), holds_at(call(Time2=B_Ret), Time)] ->
       ta(Time,
          initiates(pressSnooze(Agent, Clock),
                    alarmTime(Clock, Time2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5700
axiom(initiates(pressSnooze(Agent, Clock), alarmTime(Clock, Time2), Time),
   
    [ b(Time, B_Ret),
      holds_at(beeping(Clock), Time),
      holds_at(call(Time2=B_Ret), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5702
% [agent,clock,time1,time2,time]
% HoldsAt(Beeping(clock),time) &
% HoldsAt(AlarmTime(clock,time1),time) &
% time2 = time+9 &
% time1 != time2 ->
% Terminates(PressSnooze(agent,clock),AlarmTime(clock,time1),time).

 /*  axiom_head(Time) ->
       equals(Time2, Time+9).
 */

 /*  fix_axiom_head(Time) ->
       call(Time2=Time+9).
 */

 /*  [ignore(Time+9==B_Ret), b(Time, B_Ret), holds_at(beeping(Clock), Time), holds_at(alarmTime(Clock, Time1), Time), call(Time2=B_Ret), diff(Time1, Time2)] ->
       ta(Time,
          terminates(pressSnooze(Agent, Clock),
                     alarmTime(Clock, Time1),
                     Time)).
 */

 /*  [ignore(Time+9==B_Ret), b(Time, B_Ret), holds_at(beeping(Clock), Time), holds_at(alarmTime(Clock, Time1), Time), holds_at(call(Time2=B_Ret), Time), diff(Time1, Time2)] ->
       ta(Time,
          terminates(pressSnooze(Agent, Clock),
                     alarmTime(Clock, Time1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5707
axiom(terminates(pressSnooze(Agent, Clock), alarmTime(Clock, Time1), Time),
   
    [ b(Time, B_Ret),
      holds_at(beeping(Clock), Time),
      holds_at(alarmTime(Clock, Time1), Time),
      holds_at(call(Time2=B_Ret), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5709
% [agent,clock,time]
% Terminates(PressSnooze(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          terminates(pressSnooze(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5710
axiom(terminates(pressSnooze(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5712
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5715
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).

 /*  allDifferent([Clock, Time]) ->
       ( holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time)->happens(startBeeping(Clock), Time)
       ).
 */

 /*  happens(startBeeping(Clock), Time) :-
       ( holds_at(alarmTime(Clock, Time), Time),
         holds_at(alarmOn(Clock), Time)
       ),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), allDifferent([Clock, Time])] ->
       ta(Time, happens(startBeeping(Clock), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5717
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time),
      allDifferent([Clock, Time])
    ]).

 /*  not(holds_at(alarmTime(Clock, Time), Time)) :-
       holds_at(alarmOn(Clock), Time),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmOn(Clock), Time), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, holds_at(neg(alarmTime(Clock, Time)), Time)).
 */
axiom(holds_at(neg(alarmTime(Clock, Time)), Time),
   
    [ holds_at(alarmOn(Clock), Time),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).

 /*  not(holds_at(alarmOn(Clock), Time)) :-
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)),
       allDifferent([Clock, Time]).
 */

 /*  [holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time)), allDifferent([Clock, Time])] ->
       ta(Time, holds_at(neg(alarmOn(Clock)), Time)).
 */
axiom(holds_at(neg(alarmOn(Clock)), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time)),
      allDifferent([Clock, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5719
% Happens(SetAlarmTime(Nathan,Clock,2),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(setAlarmTime(nathan, clock, 2), t)).
 */
axiom(happens(setAlarmTime(nathan, clock, 2), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5720
% Happens(TurnOnAlarm(Nathan,Clock),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(turnOnAlarm(nathan, clock), start)).
 */
axiom(happens(turnOnAlarm(nathan, clock), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5721
% Happens(PressSnooze(Nathan,Clock),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(pressSnooze(nathan, clock), t4)).
 */
axiom(happens(pressSnooze(nathan, clock), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5723
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5726
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.

 /*  allDifferent([Clock, Time1, Time, Time2]) ->
       ( holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time)->Time1=Time2
       ).
 */

 /*  not(holds_at(alarmTime(Clock, Time1), Time)) :-
       holds_at(alarmTime(Clock, Time2), Time),
       not(equals(Time1, Time2)),
       allDifferent([Clock, Time1, Time, Time2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Time1, Time2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time1=Time2)).
 */

 /*  [holds_at(alarmTime(Clock, Time2), Time), not(call(Time1=Time2)), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */

 /*  [holds_at(alarmTime(Clock, Time2), Time), holds_at(neg(call(Time1=Time2)), Time), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5728
axiom(holds_at(neg(alarmTime(Clock, Time1)), Time),
   
    [ holds_at(alarmTime(Clock, Time2), Time),
      holds_at(neg(call(Time1=Time2)), Time),
      allDifferent([Clock, Time1, Time, Time2])
    ]).

 /*  not(holds_at(alarmTime(Clock, Time2), Time)) :-
       holds_at(alarmTime(Clock, Time1), Time),
       not(equals(Time1, Time2)),
       allDifferent([Clock, Time1, Time, Time2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Time1, Time2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Time1=Time2)).
 */

 /*  [holds_at(alarmTime(Clock, Time1), Time), not(call(Time1=Time2)), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */

 /*  [holds_at(alarmTime(Clock, Time1), Time), holds_at(neg(call(Time1=Time2)), Time), allDifferent([Clock, Time1, Time, Time2])] ->
       ta(Time,
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */
axiom(holds_at(neg(alarmTime(Clock, Time2)), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      holds_at(neg(call(Time1=Time2)), Time),
      allDifferent([Clock, Time1, Time, Time2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5730
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5732
% !HoldsAt(AlarmOn(Clock),0).
 %  not(initially(alarmOn(clock))).

 /*  [] ->
       ta(Ta_Param, not(initially(alarmOn(clock)))).
 */
axiom(not(initially(alarmOn(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5733
% !HoldsAt(Beeping(Clock),0).
 %  not(initially(beeping(clock))).

 /*  [] ->
       ta(Ta_Param, not(initially(beeping(clock)))).
 */
axiom(not(initially(beeping(clock))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5734
% HoldsAt(AlarmTime(Clock,3),0).

 /*  [] ->
       ta(Ta_Param, initially(alarmTime(clock, 3))).
 */
axiom(initially(alarmTime(clock, 3)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5736
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5737
==> completion(happens).

% range time 0 15
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5739
==> range(time,0,15).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5740
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TelephoneBugs.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Telephone
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5769
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5770
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5771
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5773
==> sort(agent).

% sort phone
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5774
==> sort(phone).

% agent Agent1, Agent2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5776
==> t(agent,agent1).
==> t(agent,agent2).

% phone Phone1, Phone2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5777
==> t(phone,phone1).
==> t(phone,phone2).

% fluent Ringing(phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5779
fluent(ringing(Ringing_Param,Ringing_Ret)).
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% fluent DialTone(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5780
fluent(dialTone(DialTone_Ret)).
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% fluent BusySignal(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5781
fluent(busySignal(BusySignal_Ret)).
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% fluent Idle(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5782
fluent(idle(Idle_Ret)).
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% fluent Connected(phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5783
fluent(connected(Connected_Param,Connected_Ret)).
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% fluent Disconnected(phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5784
fluent(disconnected(Disconnected_Ret)).
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% event PickUp(agent,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5786
event(pickUp(PickUp_Param,PickUp_Ret)).
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% event SetDown(agent,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5787
event(setDown(SetDown_Param,SetDown_Ret)).
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% event Dial(agent,phone,phone)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5788
event(dial(Dial_Param,_,Dial_Ret)).
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5789
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5792
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Phone),
                    dialTone(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5793
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5795
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          terminates(pickUp(Agent, Phone),
                     idle(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5797
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5799
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5801
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5803
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     dialTone(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5805
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5807
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          initiates(dial(Agent, Phone1, Phone2),
                    ringing(Phone1, Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5810
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5812
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5815
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5817
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     idle(Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5820
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5822
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          initiates(dial(Agent, Phone1, Phone2),
                    busySignal(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5825
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5827
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5830
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5832
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5834
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5836
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     busySignal(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5838
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5840
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5842
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5844
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5846
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5848
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone1),
                     ringing(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5850
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5852
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(pickUp(Agent, Phone2),
                    connected(Phone1, Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5854
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5856
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(pickUp(Agent, Phone2),
                     ringing(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5858
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5860
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5862
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5864
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone1),
                    disconnected(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5866
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5868
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone1),
                     connected(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5870
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5872
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone2),
                    idle(Phone2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5874
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5876
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone2),
                    disconnected(Phone1),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5878
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5880
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone2),
                     connected(Phone1, Phone2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5882
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5884
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5886
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5888
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          terminates(setDown(Agent, Phone),
                     disconnected(Phone),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5890
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5892
%; Delta
%; (1) Two agents dial each other simultaneously without first
%; picking up phone.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5896
% Happens(Dial(Agent1,Phone1,Phone2),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(dial(agent1, phone1, phone2), t)).
 */
axiom(happens(dial(agent1, phone1, phone2), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5897
% Happens(Dial(Agent2,Phone2,Phone1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(dial(agent2, phone2, phone1), t)).
 */
axiom(happens(dial(agent2, phone2, phone1), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5899
%; (2) Two agents dial each other simultaneously.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5900
% Happens(PickUp(Agent1,Phone1),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(pickUp(agent1, phone1), start)).
 */
axiom(happens(pickUp(agent1, phone1), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5901
% Happens(PickUp(Agent2,Phone2),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(pickUp(agent2, phone2), start)).
 */
axiom(happens(pickUp(agent2, phone2), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5902
% Happens(Dial(Agent1,Phone1,Phone2),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(dial(agent1, phone1, phone2), t2)).
 */
axiom(happens(dial(agent1, phone1, phone2), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5903
% Happens(Dial(Agent2,Phone2,Phone1),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(dial(agent2, phone2, phone1), t2)).
 */
axiom(happens(dial(agent2, phone2, phone1), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5904
% Happens(SetDown(Agent1,Phone1),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(setDown(agent1, phone1), t3)).
 */
axiom(happens(setDown(agent1, phone1), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5905
% Happens(SetDown(Agent2,Phone2),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(setDown(agent2, phone2), t3)).
 */
axiom(happens(setDown(agent2, phone2), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5907
%; (3) One agent dials another agent just as the other
%; agent picks up the phone.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5909
% Happens(PickUp(Agent1,Phone1),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(pickUp(agent1, phone1), t4)).
 */
axiom(happens(pickUp(agent1, phone1), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5910
% Happens(Dial(Agent1,Phone1,Phone2),5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(dial(agent1, phone1, phone2), t5)).
 */
axiom(happens(dial(agent1, phone1, phone2), t5),
    [holds_at(is_time(5), t5), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5911
% Happens(PickUp(Agent2,Phone2),5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(pickUp(agent2, phone2), t5)).
 */
axiom(happens(pickUp(agent2, phone2), t5),
    [holds_at(is_time(5), t5), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5913
%; Psi
% [phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5916
% !HoldsAt(Ringing(phone,phone),time).
holds_at(neg(ringing(Phone,Phone)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5918
% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).

 /*  allDifferent([Phone1, Phone2, Time]) ->
       ( holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2)->holds_at(neg(ringing(Phone2, Phone1)), Time)
       ).
 */

 /*  holds_at(neg(ringing(Phone2, Phone1)), Time) :-
       ( holds_at(ringing(Phone1, Phone2), Time),
         diff(Phone1, Phone2)
       ),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(ringing(Phone2, Phone1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5921
axiom(holds_at(neg(ringing(Phone2, Phone1)), Time),
   
    [ holds_at(ringing(Phone1, Phone2), Time),
      diff(Phone1, Phone2),
      allDifferent([Phone1, Phone2, Time])
    ]).

 /*  not(holds_at(ringing(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(ringing(Phone2, Phone1)), Time)),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [diff(Phone1, Phone2), holds_at(neg(neg(ringing(Phone2, Phone1))), Time), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(neg(neg(ringing(Phone2, Phone1))), Time),
      allDifferent([Phone1, Phone2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5923
% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5924
holds_at(neg(connected(Phone,Phone)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5926
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).

 /*  allDifferent([Phone1, Phone2, Time]) ->
       ( holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2)->holds_at(neg(connected(Phone2, Phone1)), Time)
       ).
 */

 /*  holds_at(neg(connected(Phone2, Phone1)), Time) :-
       ( holds_at(connected(Phone1, Phone2), Time),
         diff(Phone1, Phone2)
       ),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(connected(Phone2, Phone1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5929
axiom(holds_at(neg(connected(Phone2, Phone1)), Time),
   
    [ holds_at(connected(Phone1, Phone2), Time),
      diff(Phone1, Phone2),
      allDifferent([Phone1, Phone2, Time])
    ]).

 /*  not(holds_at(connected(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(connected(Phone2, Phone1)), Time)),
       allDifferent([Phone1, Phone2, Time]).
 */

 /*  [diff(Phone1, Phone2), holds_at(neg(neg(connected(Phone2, Phone1))), Time), allDifferent([Phone1, Phone2, Time])] ->
       ta(Time,
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(neg(neg(connected(Phone2, Phone1))), Time),
      allDifferent([Phone1, Phone2, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5931
% mutex Idle, DialTone, BusySignal, Disconnected
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5932
mutex(idle).

 /*  axiom_head(Axiom_head_Ret) ->
       mutex(idle).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(mutex(idle), Axiom_head_Ret).
 */
mutex(dialTone).

 /*  axiom_head(Axiom_head_Ret1) ->
       mutex(dialTone).
 */

 /*  fix_axiom_head(Axiom_head_Ret1) ->
       holds_at(mutex(dialTone), Axiom_head_Ret1).
 */
mutex(busySignal).

 /*  axiom_head(Axiom_head_Ret2) ->
       mutex(busySignal).
 */

 /*  fix_axiom_head(Axiom_head_Ret2) ->
       holds_at(mutex(busySignal), Axiom_head_Ret2).
 */
mutex(disconnected).

 /*  axiom_head(Axiom_head_Ret3) ->
       mutex(disconnected).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       holds_at(mutex(disconnected), Axiom_head_Ret3).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5933
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).

 /*  allDifferent([Phone1, Time, Phone2]) ->
       ( holds_at(idle(Phone1), Time)->holds_at(neg(ringing(Phone1, Phone2)), Time), holds_at(neg(connected(Phone1, Phone2)), Time)
       ).
 */

 /*  not(holds_at(idle(Phone1), Time)) :-
       (   not(holds_at(neg(ringing(Phone1, Phone2)), Time))
       ;   not(holds_at(neg(connected(Phone1, Phone2)), Time))
       ),
       allDifferent([Phone1, Time, Phone2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(ringing(Phone1, Phone2)), Time))
       ;   not(holds_at(neg(connected(Phone1, Phone2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(ringing(Phone1, Phone2))), Time)
       ;   holds_at(neg(neg(connected(Phone1, Phone2))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(ringing(Phone1, Phone2))), Time);holds_at(neg(neg(connected(Phone1, Phone2))), Time)), allDifferent([Phone1, Time, Phone2])] ->
       ta(Time, holds_at(neg(idle(Phone1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5936
axiom(holds_at(neg(idle(Phone1)), Time),
   
    [  (holds_at(neg(neg(ringing(Phone1, Phone2))), Time);holds_at(neg(neg(connected(Phone1, Phone2))), Time)),
      allDifferent([Phone1, Time, Phone2])
    ]).

 /*  holds_at(neg(ringing(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time),
       allDifferent([Phone1, Time, Phone2]).
 */

 /*  [holds_at(idle(Phone1), Time), allDifferent([Phone1, Time, Phone2])] ->
       ta(Time,
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
   
    [ holds_at(idle(Phone1), Time),
      allDifferent([Phone1, Time, Phone2])
    ]).

 /*  holds_at(neg(connected(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time),
       allDifferent([Phone1, Time, Phone2]).
 */

 /*  [holds_at(idle(Phone1), Time), allDifferent([Phone1, Time, Phone2])] ->
       ta(Time,
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
   
    [ holds_at(idle(Phone1), Time),
      allDifferent([Phone1, Time, Phone2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5938
%; contradicts (3) above:
%;[phone1,phone2,time]
%;HoldsAt(DialTone(phone2),time) ->
%;!HoldsAt(Ringing(phone1,phone2),time) &
%;!HoldsAt(Connected(phone1,phone2),time).
%; etc.
%; Gamma
% [phone]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5948
% HoldsAt(Idle(phone),0).

 /*  [] ->
       ta(Ta_Param, initially(idle(Phone))).
 */
axiom(initially(idle(Phone)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5950
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5951
==> completion(happens).

% range time 0 6
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5953
==> range(time,0,6).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5954
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/HungryCat.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{WinikoffEtAl:2002,
%;   author = "Michael Winikoff and Lin Padgham and James Harland and John Thangarajah",
%;   year = "2002",
%;   title = "Declarative \& procedural goals in intelligent agent systems",
%;   editor = "Dieter Fensel and Fausto Giunchiglia and Deborah McGuinness and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{E}ighth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "470--481",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5992
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5993
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5994
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5996
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5997
==> subsort(agent,object).

% sort food: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5998
==> subsort(food,object).

% sort surface
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5999
==> sort(surface).

% sort plan
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6000
==> sort(plan).

% reified sort belief
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6002
reified_sort(belief).
==> mpred_prop(belief,reified_sort).

% agent Cat
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6004
==> t(agent,cat).

% surface Floor, Chair, Shelf, Table
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6005
==> t(surface,floor).
==> t(surface,chair).
==> t(surface,shelf).
==> t(surface,table).

% food Food1, Food2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6006
==> t(food,food1).
==> t(food,food2).

% plan P1, P1a, P1b, P2, P2a
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6007
==> t(plan,p1).
==> t(plan,p1a).
==> t(plan,p1b).
==> t(plan,p2).
==> t(plan,p2a).

% predicate SelectedPlan(agent,belief,plan,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6009
predicate(selectedPlan(SelectedPlan_Param,
		       _,
		       _,
		       SelectedPlan_Ret)).
==> mpred_prop(selectedPlan(agent,belief,plan,time),predicate).
==> meta_argtypes(selectedPlan(agent,belief,plan,time)).

% predicate SoundPlan(agent,belief,plan,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6010
predicate(soundPlan(SoundPlan_Param,
		    _,
		    _,
		    SoundPlan_Ret)).
==> mpred_prop(soundPlan(agent,belief,plan,time),predicate).
==> meta_argtypes(soundPlan(agent,belief,plan,time)).

% fluent On(object,surface)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6012
fluent(on(On_Param,On_Ret)).
==> mpred_prop(on(object,surface),fluent).
==> meta_argtypes(on(object,surface)).

% fluent Goal(agent,belief)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6013
fluent(goal(Goal_Param,Goal_Ret)).
==> mpred_prop(goal(agent,belief),fluent).
==> meta_argtypes(goal(agent,belief)).

% fluent CanJump(surface,surface)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6014
fluent(canJump(CanJump_Param,CanJump_Ret)).
==> mpred_prop(canJump(surface,surface),fluent).
==> meta_argtypes(canJump(surface,surface)).

% fluent Plan(agent,belief,plan)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6015
fluent(plan(Plan_Param,_,Plan_Ret)).
==> mpred_prop(plan(agent,belief,plan),fluent).
==> meta_argtypes(plan(agent,belief,plan)).

% fluent Satiated(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6016
fluent(satiated(Satiated_Ret)).
==> mpred_prop(satiated(agent),fluent).
==> meta_argtypes(satiated(agent)).

% fluent Believe(agent,belief)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6017
fluent(believe(Believe_Param,Believe_Ret)).
==> mpred_prop(believe(agent,belief),fluent).
==> meta_argtypes(believe(agent,belief)).

% event AddPlan(agent,belief,plan)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6019
event(addPlan(AddPlan_Param,_,AddPlan_Ret)).
==> mpred_prop(addPlan(agent,belief,plan),event).
==> meta_argtypes(addPlan(agent,belief,plan)).

% event DropPlan(agent,belief,plan)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6020
event(dropPlan(DropPlan_Param,_,DropPlan_Ret)).
==> mpred_prop(dropPlan(agent,belief,plan),event).
==> meta_argtypes(dropPlan(agent,belief,plan)).

% event Jump(agent,surface,surface)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6021
event(jump(Jump_Param,_,Jump_Ret)).
==> mpred_prop(jump(agent,surface,surface),event).
==> meta_argtypes(jump(agent,surface,surface)).

% event Move(surface,surface,surface)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6022
event(move(Move_Param,_,Move_Ret)).
==> mpred_prop(move(surface,surface,surface),event).
==> meta_argtypes(move(surface,surface,surface)).

% event Eat(agent,food)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6023
event(eat(Eat_Param,Eat_Ret)).
==> mpred_prop(eat(agent,food),event).
==> meta_argtypes(eat(agent,food)).

% event Wait(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6024
event(wait(Wait_Ret)).
==> mpred_prop(wait(agent),event).
==> meta_argtypes(wait(agent)).

% belief BSatiated(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6026
==> t(belief,'bSatiated(agent)').

% belief BCanJump(surface,surface)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6027
==> t(belief,'bCanJump(surface').
==> t(belief,'surface)').

% belief BOn(object,surface)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6028
==> t(belief,'bOn(object').
==> t(belief,'surface)').
%; Sigma
%; A5
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6033
% Initiates(AddPlan(agent,belief,plan),Plan(agent,belief,plan),time).

 /*  [] ->
       ta(Time,
          initiates(addPlan(Agent, Belief, Plan),
                    plan(Agent, Belief, Plan),
                    Time)).
 */
axiom(initiates(addPlan(Agent, Belief, Plan), plan(Agent, Belief, Plan), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6035
%; A6
% [agent,belief,plan,time]
% Terminates(DropPlan(agent,belief,plan),Plan(agent,belief,plan),time).

 /*  [] ->
       ta(Time,
          terminates(dropPlan(Agent, Belief, Plan),
                     plan(Agent, Belief, Plan),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6037
axiom(terminates(dropPlan(Agent, Belief, Plan), plan(Agent, Belief, Plan), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6039
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Initiates(Jump(agent,surface1,surface2),On(agent,surface2),time).

 /*  [holds_at(on(Agent, Surface1), Time), holds_at(canJump(Surface1, Surface2), Time)] ->
       ta(Time,
          initiates(jump(Agent, Surface1, Surface2),
                    on(Agent, Surface2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6042
axiom(initiates(jump(Agent, Surface1, Surface2), on(Agent, Surface2), Time),
   
    [ holds_at(on(Agent, Surface1), Time),
      holds_at(canJump(Surface1, Surface2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6044
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Terminates(Jump(agent,surface1,surface2),On(agent,surface1),time).

 /*  [holds_at(on(Agent, Surface1), Time), holds_at(canJump(Surface1, Surface2), Time)] ->
       ta(Time,
          terminates(jump(Agent, Surface1, Surface2),
                     on(Agent, Surface1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6047
axiom(terminates(jump(Agent, Surface1, Surface2), on(Agent, Surface1), Time),
   
    [ holds_at(on(Agent, Surface1), Time),
      holds_at(canJump(Surface1, Surface2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6049
% [surface1,surface2,surface3,time]
% Initiates(Move(surface1,surface2,surface3),CanJump(surface1,surface3),time).

 /*  [] ->
       ta(Time,
          initiates(move(Surface1, Surface2, Surface3),
                    canJump(Surface1, Surface3),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6050
axiom(initiates(move(Surface1, Surface2, Surface3), canJump(Surface1, Surface3), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6052
% [surface1,surface2,surface3,time]
% Terminates(Move(surface1,surface2,surface3),CanJump(surface1,surface2),time).

 /*  [] ->
       ta(Time,
          terminates(move(Surface1, Surface2, Surface3),
                     canJump(Surface1, Surface2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6053
axiom(terminates(move(Surface1, Surface2, Surface3), canJump(Surface1, Surface2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6055
% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Initiates(Eat(agent,food),Satiated(agent),time).

 /*  [holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time)] ->
       ta(Time,
          initiates(eat(Agent, Food), satiated(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6058
axiom(initiates(eat(Agent, Food), satiated(Agent), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6060
% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Terminates(Eat(agent,food),On(food,surface),time).

 /*  [holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time)] ->
       ta(Time,
          terminates(eat(Agent, Food),
                     on(Food, Surface),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6063
axiom(terminates(eat(Agent, Food), on(Food, Surface), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6065
% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface2)) ->
% Initiates(Jump(agent,surface1,surface2),
%           Believe(agent,belief),
%           time).

 /*  axiom_head(Time) ->
       equals(Belief, bOn(Agent, Surface2)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bOn(Agent, Surface2)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), call(Belief=bOn(Agent, Surface2))] ->
       ta(Time,
          initiates(jump(Agent, Surface1, Surface2),
                    believe(Agent, Belief),
                    Time)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(call(Belief=bOn(Agent, Surface2)), Time)] ->
       ta(Time,
          initiates(jump(Agent, Surface1, Surface2),
                    believe(Agent, Belief),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6071
axiom(initiates(jump(Agent, Surface1, Surface2), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(call(Belief=bOn(Agent, Surface2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6073
% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface1)) ->
% Terminates(Jump(agent,surface1,surface2),
%            Believe(agent,belief),
%            time).

 /*  axiom_head(Time) ->
       equals(Belief, bOn(Agent, Surface1)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bOn(Agent, Surface1)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), call(Belief=bOn(Agent, Surface1))] ->
       ta(Time,
          terminates(jump(Agent, Surface1, Surface2),
                     believe(Agent, Belief),
                     Time)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(call(Belief=bOn(Agent, Surface1)), Time)] ->
       ta(Time,
          terminates(jump(Agent, Surface1, Surface2),
                     believe(Agent, Belief),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6079
axiom(terminates(jump(Agent, Surface1, Surface2), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(call(Belief=bOn(Agent, Surface1)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6081
% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface3)) ->
% Initiates(Move(surface1,surface2,surface3),
%           Believe(agent,belief),
%           time).

 /*  axiom_head(Time) ->
       equals(Belief, bCanJump(Surface1, Surface3)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bCanJump(Surface1, Surface3)).
 */

 /*  [call(Belief=bCanJump(Surface1, Surface3))] ->
       ta(Time,
          initiates(move(Surface1, Surface2, Surface3),
                    believe(Agent, Belief),
                    Time)).
 */

 /*  [holds_at(call(Belief=bCanJump(Surface1, Surface3)), Time)] ->
       ta(Time,
          initiates(move(Surface1, Surface2, Surface3),
                    believe(Agent, Belief),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6085
axiom(initiates(move(Surface1, Surface2, Surface3), believe(Agent, Belief), Time),
   
    [ holds_at(call(Belief=bCanJump(Surface1, Surface3)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6087
% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface2)) ->
% Terminates(Move(surface1,surface2,surface3),
%            Believe(agent,belief),
%            time).

 /*  axiom_head(Time) ->
       equals(Belief, bCanJump(Surface1, Surface2)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bCanJump(Surface1, Surface2)).
 */

 /*  [call(Belief=bCanJump(Surface1, Surface2))] ->
       ta(Time,
          terminates(move(Surface1, Surface2, Surface3),
                     believe(Agent, Belief),
                     Time)).
 */

 /*  [holds_at(call(Belief=bCanJump(Surface1, Surface2)), Time)] ->
       ta(Time,
          terminates(move(Surface1, Surface2, Surface3),
                     believe(Agent, Belief),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6091
axiom(terminates(move(Surface1, Surface2, Surface3), believe(Agent, Belief), Time),
   
    [ holds_at(call(Belief=bCanJump(Surface1, Surface2)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6093
% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BSatiated(agent)) ->
% Initiates(Eat(agent,food),Believe(agent,belief),time).

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), call(Belief=bSatiated(Agent))] ->
       ta(Time,
          initiates(eat(Agent, Food),
                    believe(Agent, Belief),
                    Time)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), holds_at(call(Belief=bSatiated(Agent)), Time)] ->
       ta(Time,
          initiates(eat(Agent, Food),
                    believe(Agent, Belief),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6097
axiom(initiates(eat(Agent, Food), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface)), Time),
      holds_at(believe(Agent, bOn(Food, Surface)), Time),
      holds_at(call(Belief=bSatiated(Agent)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6099
% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BOn(food,surface)) ->
% Terminates(Eat(agent,food),Believe(agent,belief),time).

 /*  axiom_head(Time) ->
       equals(Belief, bOn(Food, Surface)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bOn(Food, Surface)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), call(Belief=bOn(Food, Surface))] ->
       ta(Time,
          terminates(eat(Agent, Food),
                     believe(Agent, Belief),
                     Time)).
 */

 /*  [holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), holds_at(call(Belief=bOn(Food, Surface)), Time)] ->
       ta(Time,
          terminates(eat(Agent, Food),
                     believe(Agent, Belief),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6103
axiom(terminates(eat(Agent, Food), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface)), Time),
      holds_at(believe(Agent, bOn(Food, Surface)), Time),
      holds_at(call(Belief=bOn(Food, Surface)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6105
%; Delta
%; A7
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6109
% HoldsAt(Goal(agent,belief),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SelectedPlan(agent,belief,plan,time) &
% (!{plan1} HoldsAt(Plan(agent,belief,plan1),time)) ->
% Happens(AddPlan(agent,belief,plan),time).

 /*  allDifferent([Agent, Belief, Time, Plan, Plan1]) ->
       ( holds_at(goal(Agent, Belief), Time), holds_at(neg(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), not(exists([Plan1], holds_at(plan(Agent, Belief, Plan1), Time)))->happens(addPlan(Agent, Belief, Plan), Time)
       ).
 */

 /*  happens(addPlan(Agent, Belief, Plan), Time) :-
       ( holds_at(goal(Agent, Belief), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         selectedPlan(Agent, Belief, Plan, Time),
         not(holds_at(plan(Agent, Belief, Plan1), Time))
       ),
       allDifferent([Agent, Belief, Time, Plan, Plan1]).
 */

 /*  [holds_at(goal(Agent, Belief), Time), holds_at(neg(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(plan(Agent, Belief, Plan1)), Time), allDifferent([Agent, Belief, Time, Plan, Plan1])] ->
       ta(Time,
          happens(addPlan(Agent, Belief, Plan), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6113
axiom(happens(addPlan(Agent, Belief, Plan), Time),
   
    [ holds_at(goal(Agent, Belief), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Time,
                     Plan,
                     Plan1
                   ])
    ]).

 /*  not(holds_at(goal(Agent, Belief), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         selectedPlan(Agent, Belief, Plan, Time),
         not(holds_at(plan(Agent, Belief, Plan1), Time))
       ),
       not(happens(addPlan(Agent, Belief, Plan), Time)),
       allDifferent([Agent, Belief, Time, Plan, Plan1]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(plan(Agent, Belief, Plan1)), Time), not(happens(addPlan(Agent, Belief, Plan), Time)), allDifferent([Agent, Belief, Time, Plan, Plan1])] ->
       ta(Time, holds_at(neg(goal(Agent, Belief)), Time)).
 */
axiom(holds_at(neg(goal(Agent, Belief)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time)),
      allDifferent(
                   [ Agent,
                     Belief,
                     Time,
                     Plan,
                     Plan1
                   ])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       ( selectedPlan(Agent, Belief, Plan, Time),
         not(holds_at(plan(Agent, Belief, Plan1), Time))
       ),
       holds_at(goal(Agent, Belief), Time),
       not(happens(addPlan(Agent, Belief, Plan), Time)),
       allDifferent([Agent, Belief, Time, Plan, Plan1]).
 */

 /*  [selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(plan(Agent, Belief, Plan1)), Time), holds_at(goal(Agent, Belief), Time), not(happens(addPlan(Agent, Belief, Plan), Time)), allDifferent([Agent, Belief, Time, Plan, Plan1])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      holds_at(goal(Agent, Belief), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time)),
      allDifferent(
                   [ Agent,
                     Belief,
                     Time,
                     Plan,
                     Plan1
                   ])
    ]).

 /*  not(selectedPlan(Agent, Belief, Plan, Time)) :-
       not(holds_at(plan(Agent, Belief, Plan1), Time)),
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(goal(Agent, Belief), Time),
       not(happens(addPlan(Agent, Belief, Plan), Time)),
       allDifferent([Agent, Belief, Time, Plan, Plan1]).
 */

 /*  [holds_at(neg(plan(Agent, Belief, Plan1)), Time), holds_at(neg(believe(Agent, Belief)), Time), holds_at(goal(Agent, Belief), Time), not(happens(addPlan(Agent, Belief, Plan), Time)), allDifferent([Agent, Belief, Time, Plan, Plan1])] ->
       ta(Time,
          not(selectedPlan(Agent, Belief, Plan, Time))).
 */
axiom(not(selectedPlan(Agent, Belief, Plan, Time)),
   
    [ holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(goal(Agent, Belief), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time)),
      allDifferent(
                   [ Agent,
                     Belief,
                     Time,
                     Plan,
                     Plan1
                   ])
    ]).

 /*  holds_at(plan(Agent, Belief, Plan1), Time) :-
       selectedPlan(Agent, Belief, Plan, Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(goal(Agent, Belief), Time),
       not(happens(addPlan(Agent, Belief, Plan), Time)),
       allDifferent([Agent, Belief, Time, Plan, Plan1]).
 */

 /*  [selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(believe(Agent, Belief)), Time), holds_at(goal(Agent, Belief), Time), not(happens(addPlan(Agent, Belief, Plan), Time)), allDifferent([Agent, Belief, Time, Plan, Plan1])] ->
       ta(Time,
          holds_at(plan(Agent, Belief, Plan1), Time)).
 */
axiom(holds_at(plan(Agent, Belief, Plan1), Time),
   
    [ selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(goal(Agent, Belief), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time)),
      allDifferent(
                   [ Agent,
                     Belief,
                     Time,
                     Plan,
                     Plan1
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6115
%; A8
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(Jump(Cat,Floor,Chair),time).

 /*  allDifferent([Agent, Belief, Time]) ->
       ( holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time)->happens(jump(cat, floor, chair), Time)
       ).
 */

 /*  happens(jump(cat, floor, chair), Time) :-
       ( holds_at(plan(Agent, Belief, p1), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1, Time)
       ),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time), allDifferent([Agent, Belief, Time])] ->
       ta(Time, happens(jump(cat, floor, chair), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6120
axiom(happens(jump(cat, floor, chair), Time),
   
    [ holds_at(plan(Agent, Belief, p1), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, p1), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1, Time)
       ),
       not(happens(jump(cat, floor, chair), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time), not(happens(jump(cat, floor, chair), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, holds_at(neg(plan(Agent, Belief, p1)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, p1)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time),
      not(happens(jump(cat, floor, chair), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1, Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(jump(cat, floor, chair), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [soundPlan(Agent, Belief, p1, Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(jump(cat, floor, chair), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ soundPlan(Agent, Belief, p1, Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(jump(cat, floor, chair), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(soundPlan(Agent, Belief, p1, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(jump(cat, floor, chair), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(jump(cat, floor, chair), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, not(soundPlan(Agent, Belief, p1, Time))).
 */
axiom(not(soundPlan(Agent, Belief, p1, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(jump(cat, floor, chair), Time)),
      allDifferent([Agent, Belief, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6122
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(Wait(Cat),time).

 /*  allDifferent([Agent, Belief, Time]) ->
       ( holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time)->happens(wait(cat), Time)
       ).
 */

 /*  happens(wait(cat), Time) :-
       ( holds_at(plan(Agent, Belief, p1a), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1a, Time)
       ),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time), allDifferent([Agent, Belief, Time])] ->
       ta(Time, happens(wait(cat), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6126
axiom(happens(wait(cat), Time),
   
    [ holds_at(plan(Agent, Belief, p1a), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, p1a), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1a, Time)
       ),
       not(happens(wait(cat), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time), not(happens(wait(cat), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(plan(Agent, Belief, p1a)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, p1a)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time),
      not(happens(wait(cat), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1a, Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(wait(cat), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [soundPlan(Agent, Belief, p1a, Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(wait(cat), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ soundPlan(Agent, Belief, p1a, Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(wait(cat), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(soundPlan(Agent, Belief, p1a, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(wait(cat), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(wait(cat), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, not(soundPlan(Agent, Belief, p1a, Time))).
 */
axiom(not(soundPlan(Agent, Belief, p1a, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(wait(cat), Time)),
      allDifferent([Agent, Belief, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6128
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(Jump(Cat,Chair,Shelf),time).

 /*  allDifferent([Agent, Belief, Time]) ->
       ( holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time)->happens(jump(cat, chair, shelf), Time)
       ).
 */

 /*  happens(jump(cat, chair, shelf), Time) :-
       ( holds_at(plan(Agent, Belief, p2), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p2, Time)
       ),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time), allDifferent([Agent, Belief, Time])] ->
       ta(Time, happens(jump(cat, chair, shelf), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6132
axiom(happens(jump(cat, chair, shelf), Time),
   
    [ holds_at(plan(Agent, Belief, p2), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, p2), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p2, Time)
       ),
       not(happens(jump(cat, chair, shelf), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time), not(happens(jump(cat, chair, shelf), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, holds_at(neg(plan(Agent, Belief, p2)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, p2)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time),
      not(happens(jump(cat, chair, shelf), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p2, Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(jump(cat, chair, shelf), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [soundPlan(Agent, Belief, p2, Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(jump(cat, chair, shelf), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ soundPlan(Agent, Belief, p2, Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(jump(cat, chair, shelf), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(soundPlan(Agent, Belief, p2, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(jump(cat, chair, shelf), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(jump(cat, chair, shelf), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, not(soundPlan(Agent, Belief, p2, Time))).
 */
axiom(not(soundPlan(Agent, Belief, p2, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(jump(cat, chair, shelf), Time)),
      allDifferent([Agent, Belief, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6134
%; A9
% [agent,belief,plan,time]
% HoldsAt(Plan(agent,belief,plan),time) ->
% Happens(DropPlan(agent,belief,plan),time).

 /*  allDifferent([Agent, Belief, Plan, Time]) ->
       ( holds_at(plan(Agent, Belief, Plan), Time)->happens(dropPlan(Agent, Belief, Plan), Time)
       ).
 */

 /*  happens(dropPlan(Agent, Belief, Plan), Time) :-
       holds_at(plan(Agent, Belief, Plan), Time),
       allDifferent([Agent, Belief, Plan, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, Plan), Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          happens(dropPlan(Agent, Belief, Plan), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6137
axiom(happens(dropPlan(Agent, Belief, Plan), Time),
   
    [ holds_at(plan(Agent, Belief, Plan), Time),
      allDifferent([Agent, Belief, Plan, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, Plan), Time)) :-
       not(happens(dropPlan(Agent, Belief, Plan), Time)),
       allDifferent([Agent, Belief, Plan, Time]).
 */

 /*  [not(happens(dropPlan(Agent, Belief, Plan), Time)), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(neg(plan(Agent, Belief, Plan)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, Plan)), Time),
   
    [ not(happens(dropPlan(Agent, Belief, Plan), Time)),
      allDifferent([Agent, Belief, Plan, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6139
%; A10
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(AddPlan(agent,belief,P1a),time).

 /*  allDifferent([Agent, Belief, Time]) ->
       ( holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time)->happens(addPlan(Agent, Belief, p1a), Time)
       ).
 */

 /*  happens(addPlan(Agent, Belief, p1a), Time) :-
       ( holds_at(plan(Agent, Belief, p1), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1, Time)
       ),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time), allDifferent([Agent, Belief, Time])] ->
       ta(Time, happens(addPlan(Agent, Belief, p1a), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6144
axiom(happens(addPlan(Agent, Belief, p1a), Time),
   
    [ holds_at(plan(Agent, Belief, p1), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, p1), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1, Time)
       ),
       not(happens(addPlan(Agent, Belief, p1a), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time), not(happens(addPlan(Agent, Belief, p1a), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, holds_at(neg(plan(Agent, Belief, p1)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, p1)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time),
      not(happens(addPlan(Agent, Belief, p1a), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1, Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(addPlan(Agent, Belief, p1a), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [soundPlan(Agent, Belief, p1, Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(addPlan(Agent, Belief, p1a), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ soundPlan(Agent, Belief, p1, Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(addPlan(Agent, Belief, p1a), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(soundPlan(Agent, Belief, p1, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(addPlan(Agent, Belief, p1a), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(addPlan(Agent, Belief, p1a), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, not(soundPlan(Agent, Belief, p1, Time))).
 */
axiom(not(soundPlan(Agent, Belief, p1, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(addPlan(Agent, Belief, p1a), Time)),
      allDifferent([Agent, Belief, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6146
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(AddPlan(agent,belief,P1b),time).

 /*  allDifferent([Agent, Belief, Time]) ->
       ( holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time)->happens(addPlan(Agent, Belief, p1b), Time)
       ).
 */

 /*  happens(addPlan(Agent, Belief, p1b), Time) :-
       ( holds_at(plan(Agent, Belief, p1a), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1a, Time)
       ),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time), allDifferent([Agent, Belief, Time])] ->
       ta(Time, happens(addPlan(Agent, Belief, p1b), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6150
axiom(happens(addPlan(Agent, Belief, p1b), Time),
   
    [ holds_at(plan(Agent, Belief, p1a), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, p1a), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1a, Time)
       ),
       not(happens(addPlan(Agent, Belief, p1b), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time), not(happens(addPlan(Agent, Belief, p1b), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(plan(Agent, Belief, p1a)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, p1a)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time),
      not(happens(addPlan(Agent, Belief, p1b), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1a, Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(addPlan(Agent, Belief, p1b), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [soundPlan(Agent, Belief, p1a, Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(addPlan(Agent, Belief, p1b), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ soundPlan(Agent, Belief, p1a, Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(addPlan(Agent, Belief, p1b), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(soundPlan(Agent, Belief, p1a, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(addPlan(Agent, Belief, p1b), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(addPlan(Agent, Belief, p1b), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, not(soundPlan(Agent, Belief, p1a, Time))).
 */
axiom(not(soundPlan(Agent, Belief, p1a, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(addPlan(Agent, Belief, p1b), Time)),
      allDifferent([Agent, Belief, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6152
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(AddPlan(agent,belief,P2a),time).

 /*  allDifferent([Agent, Belief, Time]) ->
       ( holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time)->happens(addPlan(Agent, Belief, p2a), Time)
       ).
 */

 /*  happens(addPlan(Agent, Belief, p2a), Time) :-
       ( holds_at(plan(Agent, Belief, p2), Time),
         holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p2, Time)
       ),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time), allDifferent([Agent, Belief, Time])] ->
       ta(Time, happens(addPlan(Agent, Belief, p2a), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6156
axiom(happens(addPlan(Agent, Belief, p2a), Time),
   
    [ holds_at(plan(Agent, Belief, p2), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(plan(Agent, Belief, p2), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p2, Time)
       ),
       not(happens(addPlan(Agent, Belief, p2a), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time), not(happens(addPlan(Agent, Belief, p2a), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, holds_at(neg(plan(Agent, Belief, p2)), Time)).
 */
axiom(holds_at(neg(plan(Agent, Belief, p2)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time),
      not(happens(addPlan(Agent, Belief, p2a), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p2, Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(addPlan(Agent, Belief, p2a), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [soundPlan(Agent, Belief, p2, Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(addPlan(Agent, Belief, p2a), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time,
          holds_at(neg(neg(believe(Agent, Belief))), Time)).
 */
axiom(holds_at(neg(neg(believe(Agent, Belief))), Time),
   
    [ soundPlan(Agent, Belief, p2, Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(addPlan(Agent, Belief, p2a), Time)),
      allDifferent([Agent, Belief, Time])
    ]).

 /*  not(soundPlan(Agent, Belief, p2, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(addPlan(Agent, Belief, p2a), Time)),
       allDifferent([Agent, Belief, Time]).
 */

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(addPlan(Agent, Belief, p2a), Time)), allDifferent([Agent, Belief, Time])] ->
       ta(Time, not(soundPlan(Agent, Belief, p2, Time))).
 */
axiom(not(soundPlan(Agent, Belief, p2, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(addPlan(Agent, Belief, p2a), Time)),
      allDifferent([Agent, Belief, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6158
%; reactive behavior
% [agent,food,surface,time]
% !HoldsAt(Satiated(agent),time) &
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Happens(Eat(agent,food),time).

 /*  allDifferent([Agent, Time, Surface, Food]) ->
       ( holds_at(neg(satiated(Agent)), Time), holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time)->happens(eat(Agent, Food), Time)
       ).
 */

 /*  happens(eat(Agent, Food), Time) :-
       ( holds_at(neg(satiated(Agent)), Time),
         holds_at(on(Agent, Surface), Time),
         holds_at(on(Food, Surface), Time)
       ),
       allDifferent([Agent, Time, Surface, Food]).
 */

 /*  [holds_at(neg(satiated(Agent)), Time), holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time), allDifferent([Agent, Time, Surface, Food])] ->
       ta(Time, happens(eat(Agent, Food), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6163
axiom(happens(eat(Agent, Food), Time),
   
    [ holds_at(neg(satiated(Agent)), Time),
      holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time),
      allDifferent([Agent, Time, Surface, Food])
    ]).

 /*  not(holds_at(neg(satiated(Agent)), Time)) :-
       ( holds_at(on(Agent, Surface), Time),
         holds_at(on(Food, Surface), Time)
       ),
       not(happens(eat(Agent, Food), Time)),
       allDifferent([Agent, Time, Surface, Food]).
 */

 /*  [holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time), not(happens(eat(Agent, Food), Time)), allDifferent([Agent, Time, Surface, Food])] ->
       ta(Time, holds_at(neg(neg(satiated(Agent))), Time)).
 */
axiom(holds_at(neg(neg(satiated(Agent))), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time),
      not(happens(eat(Agent, Food), Time)),
      allDifferent([Agent, Time, Surface, Food])
    ]).

 /*  not(holds_at(on(Agent, Surface), Time)) :-
       holds_at(on(Food, Surface), Time),
       holds_at(neg(satiated(Agent)), Time),
       not(happens(eat(Agent, Food), Time)),
       allDifferent([Agent, Time, Surface, Food]).
 */

 /*  [holds_at(on(Food, Surface), Time), holds_at(neg(satiated(Agent)), Time), not(happens(eat(Agent, Food), Time)), allDifferent([Agent, Time, Surface, Food])] ->
       ta(Time, holds_at(neg(on(Agent, Surface)), Time)).
 */
axiom(holds_at(neg(on(Agent, Surface)), Time),
   
    [ holds_at(on(Food, Surface), Time),
      holds_at(neg(satiated(Agent)), Time),
      not(happens(eat(Agent, Food), Time)),
      allDifferent([Agent, Time, Surface, Food])
    ]).

 /*  not(holds_at(on(Food, Surface), Time)) :-
       holds_at(on(Agent, Surface), Time),
       holds_at(neg(satiated(Agent)), Time),
       not(happens(eat(Agent, Food), Time)),
       allDifferent([Agent, Time, Surface, Food]).
 */

 /*  [holds_at(on(Agent, Surface), Time), holds_at(neg(satiated(Agent)), Time), not(happens(eat(Agent, Food), Time)), allDifferent([Agent, Time, Surface, Food])] ->
       ta(Time, holds_at(neg(on(Food, Surface)), Time)).
 */
axiom(holds_at(neg(on(Food, Surface)), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(neg(satiated(Agent)), Time),
      not(happens(eat(Agent, Food), Time)),
      allDifferent([Agent, Time, Surface, Food])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6165
%; narrative


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6167
% Happens(Move(Chair,Table,Shelf),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(move(chair, table, shelf), t2)).
 */
axiom(happens(move(chair, table, shelf), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6169
%; SelectedPlan - plan library
%;[agent,belief,plan,time]
%;SelectedPlan(agent,belief,plan,time) <->
%;(agent=Cat & belief=BSatiated(Cat) & plan=P1 & time=0) |
%;(agent=Cat & belief=BSatiated(Cat) & plan=P2 & time=4).
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6177
% SelectedPlan(agent,belief,plan,time) <->
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P1 &
%  time=0) |
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P2 &
%  time=4).

 /*  selectedPlan(Agent, Belief, Plan, Time) <->
       (   exists([Surface1, Surface2, Surface3, Food],
                   (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0))
       ;   exists([Surface18, Surface29, Surface310, Food11],
                   (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4))
       ).
 */

 /*  [selectedPlan] <->
       
       [  (;),
         exists,
         holds_at,
         believe,
         bOn,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bOn,
          (=),
         bSatiated,
          (=),
         p1,
          (=),
         exists,
         holds_at,
         believe,
         bOn,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bOn,
          (=),
         bSatiated,
          (=),
         p2,
          (=)
       ].
 */

 /*  allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11]) ->
       ( selectedPlan(Agent, Belief, Plan, Time)->exists([Surface1, Surface2, Surface3, Food],  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0));exists([Surface18, Surface29, Surface310, Food11],  (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4))
       ).
 */

 /*  not(selectedPlan(Agent, Belief, Plan, Time)) :-
       ( (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                          Time))
         ;   not(holds_at(believe(Agent,
                                  bCanJump(Surface1, Surface2)),
                          Time))
         ;   not(holds_at(believe(Agent,
                                  bCanJump(Surface2, Surface3)),
                          Time))
         ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                          Time))
         ;   not(equals(Belief, bSatiated(Agent)))
         ;   not(equals(Plan, p1))
         ;   not(equals(Time, 0))
         ),
         (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                          Time))
         ;   not(holds_at(believe(Agent,
                                  bCanJump(Surface18, Surface29)),
                          Time))
         ;   not(holds_at(believe(Agent,
                                  bCanJump(Surface29, Surface310)),
                          Time))
         ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                          Time))
         ;   not(equals(Belief, bSatiated(Agent)))
         ;   not(equals(Plan, p2))
         ;   not(equals(Time, 4))
         )
       ),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface1, Surface2))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface2, Surface3))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p1))
       ;   not(call(Time=0))
       ).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface18, Surface29))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface29, Surface310))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p2))
       ;   not(call(Time=4))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p1));not(call(Time=0))),  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p2));not(call(Time=4))), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          not(selectedPlan(Agent, Belief, Plan, Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6193
axiom(not(selectedPlan(Agent, Belief, Plan, Time)),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p1));not(call(Time=0))),
       (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p2));not(call(Time=4))),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bOn(Agent, Surface1)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface18, Surface29))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface29, Surface310))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p2))
       ;   not(call(Time=4))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p2));not(call(Time=4))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Agent, Surface1)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Agent, Surface1)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface18, Surface29))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface29, Surface310))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p2))
       ;   not(call(Time=4))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p2));not(call(Time=4))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface18, Surface29))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface29, Surface310))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p2))
       ;   not(call(Time=4))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p2));not(call(Time=4))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bOn(Food, Surface3)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface18, Surface29))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface29, Surface310))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p2))
       ;   not(call(Time=4))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p2));not(call(Time=4))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Food, Surface3)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Food, Surface3)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bOn(Food, Surface3)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p2)), Time);holds_at(neg(call(Time=4)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bOn(Agent, Surface18)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface1, Surface2))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface2, Surface3))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p1))
       ;   not(call(Time=0))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p1));not(call(Time=0))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Agent, Surface18)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Agent, Surface18)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface1, Surface2))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface2, Surface3))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p1))
       ;   not(call(Time=0))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p1));not(call(Time=0))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface1, Surface2))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface2, Surface3))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p1))
       ;   not(call(Time=0))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p1));not(call(Time=0))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent,
                           bCanJump(Surface29, Surface310)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent,
                           bCanJump(Surface29, Surface310)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  holds_at(believe(Agent, bOn(Food11, Surface310)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time),
       allDifferent(
                    [ Agent,
                      Belief,
                      Plan,
                      Time,
                      Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface1, Surface2))),
                    Time)
       ;   holds_at(neg(believe(Agent,
                                bCanJump(Surface2, Surface3))),
                    Time)
       ;   holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                    Time)
       ;   not(call(Belief=bSatiated(Agent)))
       ;   not(call(Plan=p1))
       ;   not(call(Time=0))
       ).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(call(Belief=bSatiated(Agent)));not(call(Plan=p1));not(call(Time=0))), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Food11, Surface310)),
                   Time)).
 */

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)), selectedPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time, Surface1, Surface2, Surface3, Food, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(believe(Agent, bOn(Food11, Surface310)),
                   Time)).
 */
axiom(holds_at(believe(Agent, bOn(Food11, Surface310)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);holds_at(neg(call(Belief=bSatiated(Agent))), Time);holds_at(neg(call(Plan=p1)), Time);holds_at(neg(call(Time=0)), Time)),
      selectedPlan(Agent, Belief, Plan, Time),
      allDifferent(
                   [ Agent,
                     Belief,
                     Plan,
                     Time,
                     Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11]) ->
       ( exists([Surface1, Surface2, Surface3, Food],  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0));exists([Surface18, Surface29, Surface310, Food11],  (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4))->selectedPlan(Agent, Belief, Plan, Time)
       ).
 */

 /*  selectedPlan(Agent, Belief, Plan, Time) :-
       (   holds_at(believe(Agent, bOn(Agent, Surface1)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                    Time),
           holds_at(believe(Agent, bOn(Food, Surface3)),
                    Time),
           equals(Belief, bSatiated(Agent)),
           equals(Plan, p1),
           equals(Time, 0)
       ;   holds_at(believe(Agent, bOn(Agent, Surface18)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface18, Surface29)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface29, Surface310)),
                    Time),
           holds_at(believe(Agent, bOn(Food11, Surface310)),
                    Time),
           equals(Belief, bSatiated(Agent)),
           equals(Plan, p2),
           equals(Time, 4)
       ),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       (   holds_at(believe(Agent, bOn(Agent, Surface1)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                    Time),
           holds_at(believe(Agent, bOn(Food, Surface3)),
                    Time),
           equals(Belief, bSatiated(Agent)),
           equals(Plan, p1),
           equals(Time, 0)
       ;   holds_at(believe(Agent, bOn(Agent, Surface18)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface18, Surface29)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface29, Surface310)),
                    Time),
           holds_at(believe(Agent, bOn(Food11, Surface310)),
                    Time),
           equals(Belief, bSatiated(Agent)),
           equals(Plan, p2),
           equals(Time, 4)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(believe(Agent, bOn(Agent, Surface1)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                    Time),
           holds_at(believe(Agent, bOn(Food, Surface3)),
                    Time),
           call(Belief=bSatiated(Agent)),
           call(Plan=p1),
           call(Time=0)
       ;   holds_at(believe(Agent, bOn(Agent, Surface18)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface18, Surface29)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface29, Surface310)),
                    Time),
           holds_at(believe(Agent, bOn(Food11, Surface310)),
                    Time),
           call(Belief=bSatiated(Agent)),
           call(Plan=p2),
           call(Time=4)
       ).
 */

 /*  [(holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), call(Belief=bSatiated(Agent)), call(Plan=p1), call(Time=0);holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), call(Belief=bSatiated(Agent)), call(Plan=p2), call(Time=4)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          selectedPlan(Agent, Belief, Plan, Time)).
 */
axiom(selectedPlan(Agent, Belief, Plan, Time),
   
    [  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), call(Belief=bSatiated(Agent)), call(Plan=p1), call(Time=0);holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), call(Belief=bSatiated(Agent)), call(Plan=p2), call(Time=4)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bOn(Agent, Surface1)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                  Time),
         holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                  Time),
         holds_at(believe(Agent, bOn(Food, Surface3)), Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p1).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p1).
 */

 /*  axiom_head(Time) ->
       equals(Time, 0).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=0).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), call(Belief=bSatiated(Agent)), call(Plan=p1), call(Time=0), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                   Time)).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p1), Time), holds_at(call(Time=0), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p1), Time),
      holds_at(call(Time=0), Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                  Time),
         holds_at(believe(Agent, bOn(Food, Surface3)), Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p1).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p1).
 */

 /*  axiom_head(Time) ->
       equals(Time, 0).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=0).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), call(Belief=bSatiated(Agent)), call(Plan=p1), call(Time=0), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface1, Surface2))),
                   Time)).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p1), Time), holds_at(call(Time=0), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface1, Surface2))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p1), Time),
      holds_at(call(Time=0), Time),
      holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time)) :-
       ( holds_at(believe(Agent, bOn(Food, Surface3)), Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p1).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p1).
 */

 /*  axiom_head(Time) ->
       equals(Time, 0).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=0).
 */

 /*  [holds_at(believe(Agent, bOn(Food, Surface3)), Time), call(Belief=bSatiated(Agent)), call(Plan=p1), call(Time=0), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface2, Surface3))),
                   Time)).
 */

 /*  [holds_at(believe(Agent, bOn(Food, Surface3)), Time), holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p1), Time), holds_at(call(Time=0), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface2, Surface3))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time),
   
    [ holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p1), Time),
      holds_at(call(Time=0), Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bOn(Food, Surface3)), Time)) :-
       ( equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                Time),
       holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p1).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p1).
 */

 /*  axiom_head(Time) ->
       equals(Time, 0).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=0).
 */

 /*  [call(Belief=bSatiated(Agent)), call(Plan=p1), call(Time=0), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                   Time)).
 */

 /*  [holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p1), Time), holds_at(call(Time=0), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time),
   
    [ holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p1), Time),
      holds_at(call(Time=0), Time),
      holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bOn(Agent, Surface18)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                  Time),
         holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
                  Time),
         holds_at(believe(Agent, bOn(Food11, Surface310)),
                  Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p2).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p2).
 */

 /*  axiom_head(Time) ->
       equals(Time, 4).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=4).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), call(Belief=bSatiated(Agent)), call(Plan=p2), call(Time=4), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                   Time)).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p2), Time), holds_at(call(Time=4), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p2), Time),
      holds_at(call(Time=4), Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
                  Time),
         holds_at(believe(Agent, bOn(Food11, Surface310)),
                  Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p2).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p2).
 */

 /*  axiom_head(Time) ->
       equals(Time, 4).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=4).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), call(Belief=bSatiated(Agent)), call(Plan=p2), call(Time=4), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface18, Surface29))),
                   Time)).
 */

 /*  [holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p2), Time), holds_at(call(Time=4), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface18, Surface29))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p2), Time),
      holds_at(call(Time=4), Time),
      holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time)) :-
       ( holds_at(believe(Agent, bOn(Food11, Surface310)),
                  Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p2).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p2).
 */

 /*  axiom_head(Time) ->
       equals(Time, 4).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=4).
 */

 /*  [holds_at(believe(Agent, bOn(Food11, Surface310)), Time), call(Belief=bSatiated(Agent)), call(Plan=p2), call(Time=4), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface29, Surface310))),
                   Time)).
 */

 /*  [holds_at(believe(Agent, bOn(Food11, Surface310)), Time), holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p2), Time), holds_at(call(Time=4), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent,
                               bCanJump(Surface29, Surface310))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time),
   
    [ holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p2), Time),
      holds_at(call(Time=4), Time),
      holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).

 /*  not(holds_at(believe(Agent, bOn(Food11, Surface310)), Time)) :-
       ( equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
                Time),
       holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)),
       allDifferent(
                    [ Surface1,
                      Surface2,
                      Surface3,
                      Food,
                      Agent,
                      Time,
                      Belief,
                      Plan,
                      Surface18,
                      Surface29,
                      Surface310,
                      Food11
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Belief, bSatiated(Agent)).
 */

 /*  fix_axiom_head(Time) ->
       call(Belief=bSatiated(Agent)).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p2).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p2).
 */

 /*  axiom_head(Time) ->
       equals(Time, 4).
 */

 /*  fix_axiom_head(Time) ->
       call(Time=4).
 */

 /*  [call(Belief=bSatiated(Agent)), call(Plan=p2), call(Time=4), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                   Time)).
 */

 /*  [holds_at(call(Belief=bSatiated(Agent)), Time), holds_at(call(Plan=p2), Time), holds_at(call(Time=4), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time)), allDifferent([Surface1, Surface2, Surface3, Food, Agent, Time, Belief, Plan, Surface18, Surface29, Surface310, Food11])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                   Time)).
 */
axiom(holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time),
   
    [ holds_at(call(Belief=bSatiated(Agent)), Time),
      holds_at(call(Plan=p2), Time),
      holds_at(call(Time=4), Time),
      holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time)),
      allDifferent(
                   [ Surface1,
                     Surface2,
                     Surface3,
                     Food,
                     Agent,
                     Time,
                     Belief,
                     Plan,
                     Surface18,
                     Surface29,
                     Surface310,
                     Food11
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6196
%; SoundPlan
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6199
% SoundPlan(agent,belief,plan,time) <->
% (plan=P1 ->
%  HoldsAt(Believe(agent,BCanJump(Floor,Chair)),time) &
%  HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)) &
% ((plan=P1a | plan=P1b) ->
%   HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)).

 /*  soundPlan(Agent, Belief, Plan, Time) <->
       ( Plan=p1->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ),
       ( Plan=p1a;Plan=p1b->holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ).
 */

 /*  [soundPlan] <->
       
       [  (->),
          (=),
         p1,
         holds_at,
         believe,
         bCanJump,
         floor,
         chair,
         holds_at,
         believe,
         bCanJump,
         chair,
          (table),
          (->),
          (;),
          (=),
         p1a,
          (=),
         p1b,
         holds_at,
         believe,
         bCanJump,
         chair,
          (table)
       ].
 */

 /*  allDifferent([Agent, Belief, Plan, Time]) ->
       ( soundPlan(Agent, Belief, Plan, Time)->(Plan=p1->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)), (Plan=p1a;Plan=p1b->holds_at(believe(Agent, bCanJump(chair, table)), Time))
       ).
 */

 /*  not(soundPlan(Agent, Belief, Plan, Time)) :-
       (   equals(Plan, p1),
           (   not(holds_at(believe(Agent, bCanJump(floor, chair)),
                            Time))
           ;   not(holds_at(believe(Agent, bCanJump(chair, table)),
                            Time))
           )
       ;   not(holds_at(believe(Agent, bCanJump(chair, table)), Time)),
           (   equals(Plan, p1a)
           ;   equals(Plan, p1b)
           )
       ),
       allDifferent([Agent, Belief, Plan, Time]).
 */

 /*  axiom_head(Time) ->
       (   equals(Plan, p1),
           (   not(holds_at(believe(Agent, bCanJump(floor, chair)),
                            Time))
           ;   not(holds_at(believe(Agent, bCanJump(chair, table)),
                            Time))
           )
       ;   not(holds_at(believe(Agent, bCanJump(chair, table)), Time)),
           (   equals(Plan, p1a)
           ;   equals(Plan, p1b)
           )
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Plan=p1),
           (   holds_at(neg(believe(Agent, bCanJump(floor, chair))),
                        Time)
           ;   holds_at(neg(believe(Agent, bCanJump(chair, table))),
                        Time)
           )
       ;   holds_at(neg(believe(Agent, bCanJump(chair, table))), Time),
           (   call(Plan=p1a)
           ;   call(Plan=p1b)
           )
       ).
 */

 /*  [(call(Plan=p1), (holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time);holds_at(neg(believe(Agent, bCanJump(chair, table))), Time));holds_at(neg(believe(Agent, bCanJump(chair, table))), Time), (call(Plan=p1a);call(Plan=p1b))), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          not(soundPlan(Agent, Belief, Plan, Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6204
axiom(not(soundPlan(Agent, Belief, Plan, Time)),
   
    [  (call(Plan=p1), (holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time);holds_at(neg(believe(Agent, bCanJump(chair, table))), Time));holds_at(neg(believe(Agent, bCanJump(chair, table))), Time), (call(Plan=p1a);call(Plan=p1b))),
      allDifferent([Agent, Belief, Plan, Time])
    ]).

 /*  holds_at(believe(Agent, bCanJump(floor, chair)), Time) :-
       equals(Plan, p1),
       soundPlan(Agent, Belief, Plan, Time),
       allDifferent([Agent, Belief, Plan, Time]).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p1).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p1).
 */

 /*  [call(Plan=p1), soundPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(floor, chair)), Time)).
 */

 /*  [holds_at(call(Plan=p1), Time), soundPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(floor, chair)), Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(floor, chair)), Time),
   
    [ holds_at(call(Plan=p1), Time),
      soundPlan(Agent, Belief, Plan, Time),
      allDifferent([Agent, Belief, Plan, Time])
    ]).

 /*  holds_at(believe(Agent, bCanJump(chair, table)), Time) :-
       equals(Plan, p1),
       soundPlan(Agent, Belief, Plan, Time),
       allDifferent([Agent, Belief, Plan, Time]).
 */

 /*  axiom_head(Time) ->
       equals(Plan, p1).
 */

 /*  fix_axiom_head(Time) ->
       call(Plan=p1).
 */

 /*  [call(Plan=p1), soundPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */

 /*  [holds_at(call(Plan=p1), Time), soundPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(chair, table)), Time),
   
    [ holds_at(call(Plan=p1), Time),
      soundPlan(Agent, Belief, Plan, Time),
      allDifferent([Agent, Belief, Plan, Time])
    ]).

 /*  holds_at(believe(Agent, bCanJump(chair, table)), Time) :-
       (   equals(Plan, p1a)
       ;   equals(Plan, p1b)
       ),
       soundPlan(Agent, Belief, Plan, Time),
       allDifferent([Agent, Belief, Plan, Time]).
 */

 /*  axiom_head(Time) ->
       (   equals(Plan, p1a)
       ;   equals(Plan, p1b)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Plan=p1a)
       ;   call(Plan=p1b)
       ).
 */

 /*  [(call(Plan=p1a);call(Plan=p1b)), soundPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */

 /*  [(holds_at(call(Plan=p1a), Time);holds_at(call(Plan=p1b), Time)), soundPlan(Agent, Belief, Plan, Time), allDifferent([Agent, Belief, Plan, Time])] ->
       ta(Time,
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */
axiom(holds_at(believe(Agent, bCanJump(chair, table)), Time),
   
    [  (holds_at(call(Plan=p1a), Time);holds_at(call(Plan=p1b), Time)),
      soundPlan(Agent, Belief, Plan, Time),
      allDifferent([Agent, Belief, Plan, Time])
    ]).

 /*  allDifferent([Plan, Agent, Time, Belief]) ->
       (  (Plan=p1->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)), (Plan=p1a;Plan=p1b->holds_at(believe(Agent, bCanJump(chair, table)), Time))->soundPlan(Agent, Belief, Plan, Time)
       ).
 */

 /*  soundPlan(Agent, Belief, Plan, Time) :-
       ( (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
             holds_at(believe(Agent, bCanJump(chair, table)), Time)
         ;   not(equals(Plan, p1))
         ),
         (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
         ;   not(equals(Plan, p1a)),
             not(equals(Plan, p1b))
         )
       ),
       allDifferent([Plan, Agent, Time, Belief]).
 */

 /*  axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(call(Plan=p1))
       ).
 */

 /*  axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(call(Plan=p1a)),
           not(call(Plan=p1b))
       ).
 */

 /*  [(holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1))),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1a)), not(call(Plan=p1b))), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time, soundPlan(Agent, Belief, Plan, Time)).
 */
axiom(soundPlan(Agent, Belief, Plan, Time),
   
    [  (holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1))),
       (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1a)), not(call(Plan=p1b))),
      allDifferent([Plan, Agent, Time, Belief])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(floor, chair)), Time)) :-
       holds_at(believe(Agent, bCanJump(chair, table)), Time),
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ),
       not(soundPlan(Agent, Belief, Plan, Time)),
       allDifferent([Plan, Agent, Time, Belief]).
 */

 /*  axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(call(Plan=p1a)),
           not(call(Plan=p1b))
       ).
 */

 /*  [holds_at(believe(Agent, bCanJump(chair, table)), Time),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1a)), not(call(Plan=p1b))), not(soundPlan(Agent, Belief, Plan, Time)), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time)).
 */

 /*  [holds_at(believe(Agent, bCanJump(chair, table)), Time),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);holds_at(neg(call(Plan=p1a)), Time), holds_at(neg(call(Plan=p1b)), Time)), not(soundPlan(Agent, Belief, Plan, Time)), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time),
   
    [ holds_at(believe(Agent, bCanJump(chair, table)), Time),
       (holds_at(believe(Agent, bCanJump(chair, table)), Time);holds_at(neg(call(Plan=p1a)), Time), holds_at(neg(call(Plan=p1b)), Time)),
      not(soundPlan(Agent, Belief, Plan, Time)),
      allDifferent([Plan, Agent, Time, Belief])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(chair, table)), Time)) :-
       holds_at(believe(Agent, bCanJump(floor, chair)), Time),
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ),
       not(soundPlan(Agent, Belief, Plan, Time)),
       allDifferent([Plan, Agent, Time, Belief]).
 */

 /*  axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(call(Plan=p1a)),
           not(call(Plan=p1b))
       ).
 */

 /*  [holds_at(believe(Agent, bCanJump(floor, chair)), Time),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1a)), not(call(Plan=p1b))), not(soundPlan(Agent, Belief, Plan, Time)), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bCanJump(chair, table))), Time)).
 */

 /*  [holds_at(believe(Agent, bCanJump(floor, chair)), Time),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);holds_at(neg(call(Plan=p1a)), Time), holds_at(neg(call(Plan=p1b)), Time)), not(soundPlan(Agent, Belief, Plan, Time)), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bCanJump(chair, table))), Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(chair, table))), Time),
   
    [ holds_at(believe(Agent, bCanJump(floor, chair)), Time),
       (holds_at(believe(Agent, bCanJump(chair, table)), Time);holds_at(neg(call(Plan=p1a)), Time), holds_at(neg(call(Plan=p1b)), Time)),
      not(soundPlan(Agent, Belief, Plan, Time)),
      allDifferent([Plan, Agent, Time, Belief])
    ]).

 /*  not(holds_at(believe(Agent, bCanJump(chair, table)), Time)) :-
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1))
       ),
       not(soundPlan(Agent, Belief, Plan, Time)),
       allDifferent([Plan, Agent, Time, Belief]).
 */

 /*  axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(call(Plan=p1))
       ).
 */

 /*  [(holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(call(Plan=p1))), not(soundPlan(Agent, Belief, Plan, Time)), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bCanJump(chair, table))), Time)).
 */

 /*  [(holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);holds_at(neg(call(Plan=p1)), Time)), not(soundPlan(Agent, Belief, Plan, Time)), allDifferent([Plan, Agent, Time, Belief])] ->
       ta(Time,
          holds_at(neg(believe(Agent, bCanJump(chair, table))), Time)).
 */
axiom(holds_at(neg(believe(Agent, bCanJump(chair, table))), Time),
   
    [  (holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);holds_at(neg(call(Plan=p1)), Time)),
      not(soundPlan(Agent, Belief, Plan, Time)),
      allDifferent([Plan, Agent, Time, Belief])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6206
%; Gamma
% [agent,belief]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6209
% HoldsAt(Goal(agent,belief),0) <->
% (agent=Cat & belief=BSatiated(Cat)).

 /*  initially(goal(Agent, Belief)) <->
       Agent=cat,
       Belief=bSatiated(cat).
 */

 /*  [initially, goal] <->
       [=, cat, =, bSatiated, cat].
 */

 /*  allDifferent([Agent, Belief]) ->
       ( initially(goal(Agent, Belief))->Agent=cat, Belief=bSatiated(cat)
       ).
 */

 /*  not(initially(goal(Agent, Belief))) :-
       (   not(equals(Agent, cat))
       ;   not(equals(Belief, bSatiated(cat)))
       ),
       allDifferent([Agent, Belief]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Agent, cat))
       ;   not(equals(Belief, bSatiated(cat)))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Agent=cat))
       ;   not(call(Belief=bSatiated(cat)))
       ).
 */

 /*  [(not(call(Agent=cat));not(call(Belief=bSatiated(cat)))), allDifferent([Agent, Belief])] ->
       ta(Axiom_head_Ret, not(initially(goal(Agent, Belief)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6210
axiom(not(initially(goal(Agent, Belief))),
   
    [  (not(call(Agent=cat));not(call(Belief=bSatiated(cat)))),
      allDifferent([Agent, Belief])
    ]).

 /*  allDifferent([Agent, Belief]) ->
       ( Agent=cat, Belief=bSatiated(cat)->initially(goal(Agent, Belief))
       ).
 */

 /*  initially(goal(Agent, Belief)) :-
       ( equals(Agent, cat),
         equals(Belief, bSatiated(cat))
       ),
       allDifferent([Agent, Belief]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       equals(Agent, cat).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       call(Agent=cat).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       equals(Belief, bSatiated(cat)).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       call(Belief=bSatiated(cat)).
 */

 /*  [call(Agent=cat), call(Belief=bSatiated(cat)), allDifferent([Agent, Belief])] ->
       ta(Axiom_head_Ret3, initially(goal(Agent, Belief))).
 */
axiom(initially(goal(Agent, Belief)),
   
    [ call(Agent=cat),
      call(Belief=bSatiated(cat)),
      allDifferent([Agent, Belief])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6212
% [agent,belief,plan]
 % !HoldsAt(Plan(agent,belief,plan),0).
 %  not(initially(plan(Agent,Belief,Plan))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(plan(Agent, Belief, Plan)))).
 */
axiom(not(initially(plan(Agent, Belief, Plan))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6214
% [object,surface]
 % HoldsAt(On(object,surface),0) <->
% (object=Cat & surface=Floor) |
% (object=Food1 & surface=Table) |
% (object=Food2 & surface=Shelf).

 /*  initially(on(Object, Surface)) <->
       (   Object=cat,
           Surface=floor
       ;   Object=food1,
           Surface=(table)
       ;   Object=food2,
           Surface=shelf
       ).
 */

 /*  [initially, on] <->
       [;, =, cat, =, floor, ;, =, food1, =, table, =, food2, =, shelf].
 */

 /*  allDifferent([Object, Surface]) ->
       ( initially(on(Object, Surface))->Object=cat, Surface=floor;Object=food1, Surface=(table);Object=food2, Surface=shelf
       ).
 */

 /*  not(initially(on(Object, Surface))) :-
       ( (   not(equals(Object, cat))
         ;   not(equals(Surface, floor))
         ),
         (   not(equals(Object, food1))
         ;   not(equals(Surface, table))
         ),
         (   not(equals(Object, food2))
         ;   not(equals(Surface, shelf))
         )
       ),
       allDifferent([Object, Surface]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Object, cat))
       ;   not(equals(Surface, floor))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Object=cat))
       ;   not(call(Surface=floor))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Object, food1))
       ;   not(equals(Surface, table))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Object=food1))
       ;   not(call(Surface=(table)))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Object, food2))
       ;   not(equals(Surface, shelf))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Object=food2))
       ;   not(call(Surface=shelf))
       ).
 */

 /*  [(not(call(Object=cat));not(call(Surface=floor))),  (not(call(Object=food1));not(call(Surface=(table)))),  (not(call(Object=food2));not(call(Surface=shelf))), allDifferent([Object, Surface])] ->
       ta(Axiom_head_Ret, not(initially(on(Object, Surface)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6217
axiom(not(initially(on(Object, Surface))),
   
    [  (not(call(Object=cat));not(call(Surface=floor))),
       (not(call(Object=food1));not(call(Surface=(table)))),
       (not(call(Object=food2));not(call(Surface=shelf))),
      allDifferent([Object, Surface])
    ]).

 /*  allDifferent([Object, Surface]) ->
       ( Object=cat, Surface=floor;Object=food1, Surface=(table);Object=food2, Surface=shelf->initially(on(Object, Surface))
       ).
 */

 /*  initially(on(Object, Surface)) :-
       (   equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Object, food1),
           equals(Surface, table)
       ;   equals(Object, food2),
           equals(Surface, shelf)
       ),
       allDifferent([Object, Surface]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Object, food1),
           equals(Surface, table)
       ;   equals(Object, food2),
           equals(Surface, shelf)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Object=cat),
           call(Surface=floor)
       ;   call(Object=food1),
           call(Surface=(table))
       ;   call(Object=food2),
           call(Surface=shelf)
       ).
 */

 /*  [(call(Object=cat), call(Surface=floor);call(Object=food1), call(Surface=(table));call(Object=food2), call(Surface=shelf)), allDifferent([Object, Surface])] ->
       ta(Axiom_head_Ret3, initially(on(Object, Surface))).
 */
axiom(initially(on(Object, Surface)),
   
    [  (call(Object=cat), call(Surface=floor);call(Object=food1), call(Surface=(table));call(Object=food2), call(Surface=shelf)),
      allDifferent([Object, Surface])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6219
% [surface1,surface2]
 % HoldsAt(CanJump(surface1,surface2),0) <->
% (surface1=Floor & surface2=Chair) |
% (surface1=Chair & surface2=Table) |
% (surface1=Shelf & surface2=Table).

 /*  initially(canJump(Surface1, Surface2)) <->
       (   Surface1=floor,
           Surface2=chair
       ;   Surface1=chair,
           Surface2=(table)
       ;   Surface1=shelf,
           Surface2=(table)
       ).
 */

 /*  [initially, canJump] <->
       [;, =, floor, =, chair, ;, =, chair, =, table, =, shelf, =, table].
 */

 /*  allDifferent([Surface1, Surface2]) ->
       ( initially(canJump(Surface1, Surface2))->Surface1=floor, Surface2=chair;Surface1=chair, Surface2=(table);Surface1=shelf, Surface2=(table)
       ).
 */

 /*  not(initially(canJump(Surface1, Surface2))) :-
       ( (   not(equals(Surface1, floor))
         ;   not(equals(Surface2, chair))
         ),
         (   not(equals(Surface1, chair))
         ;   not(equals(Surface2, table))
         ),
         (   not(equals(Surface1, shelf))
         ;   not(equals(Surface2, table))
         )
       ),
       allDifferent([Surface1, Surface2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Surface1, floor))
       ;   not(equals(Surface2, chair))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Surface1=floor))
       ;   not(call(Surface2=chair))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Surface1, chair))
       ;   not(equals(Surface2, table))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Surface1=chair))
       ;   not(call(Surface2=(table)))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Surface1, shelf))
       ;   not(equals(Surface2, table))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Surface1=shelf))
       ;   not(call(Surface2=(table)))
       ).
 */

 /*  [(not(call(Surface1=floor));not(call(Surface2=chair))),  (not(call(Surface1=chair));not(call(Surface2=(table)))),  (not(call(Surface1=shelf));not(call(Surface2=(table)))), allDifferent([Surface1, Surface2])] ->
       ta(Axiom_head_Ret,
          not(initially(canJump(Surface1, Surface2)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6222
axiom(not(initially(canJump(Surface1, Surface2))),
   
    [  (not(call(Surface1=floor));not(call(Surface2=chair))),
       (not(call(Surface1=chair));not(call(Surface2=(table)))),
       (not(call(Surface1=shelf));not(call(Surface2=(table)))),
      allDifferent([Surface1, Surface2])
    ]).

 /*  allDifferent([Surface1, Surface2]) ->
       ( Surface1=floor, Surface2=chair;Surface1=chair, Surface2=(table);Surface1=shelf, Surface2=(table)->initially(canJump(Surface1, Surface2))
       ).
 */

 /*  initially(canJump(Surface1, Surface2)) :-
       (   equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Surface1, shelf),
           equals(Surface2, table)
       ),
       allDifferent([Surface1, Surface2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Surface1=floor),
           call(Surface2=chair)
       ;   call(Surface1=chair),
           call(Surface2=(table))
       ;   call(Surface1=shelf),
           call(Surface2=(table))
       ).
 */

 /*  [(call(Surface1=floor), call(Surface2=chair);call(Surface1=chair), call(Surface2=(table));call(Surface1=shelf), call(Surface2=(table))), allDifferent([Surface1, Surface2])] ->
       ta(Axiom_head_Ret3,
          initially(canJump(Surface1, Surface2))).
 */
axiom(initially(canJump(Surface1, Surface2)),
   
    [  (call(Surface1=floor), call(Surface2=chair);call(Surface1=chair), call(Surface2=(table));call(Surface1=shelf), call(Surface2=(table))),
      allDifferent([Surface1, Surface2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6224
% [agent,object,surface]
% HoldsAt(Believe(agent,BOn(object,surface)),0) <->
% (agent=Cat & object=Cat & surface=Floor) |
% (agent=Cat & object=Food1 & surface=Table).

 /*  initially(believe(Agent, bOn(Object, Surface))) <->
       (   Agent=cat,
           Object=cat,
           Surface=floor
       ;   Agent=cat,
           Object=food1,
           Surface=(table)
       ).
 */

 /*  [initially, believe, bOn] <->
       [;, =, cat, =, cat, =, floor, =, cat, =, food1, =, table].
 */

 /*  allDifferent([Agent, Object, Surface]) ->
       ( initially(believe(Agent, bOn(Object, Surface)))->Agent=cat, Object=cat, Surface=floor;Agent=cat, Object=food1, Surface=(table)
       ).
 */

 /*  not(initially(believe(Agent, bOn(Object, Surface)))) :-
       ( (   not(equals(Agent, cat))
         ;   not(equals(Object, cat))
         ;   not(equals(Surface, floor))
         ),
         (   not(equals(Agent, cat))
         ;   not(equals(Object, food1))
         ;   not(equals(Surface, table))
         )
       ),
       allDifferent([Agent, Object, Surface]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Agent, cat))
       ;   not(equals(Object, cat))
       ;   not(equals(Surface, floor))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Agent=cat))
       ;   not(call(Object=cat))
       ;   not(call(Surface=floor))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Agent, cat))
       ;   not(equals(Object, food1))
       ;   not(equals(Surface, table))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Agent=cat))
       ;   not(call(Object=food1))
       ;   not(call(Surface=(table)))
       ).
 */

 /*  [(not(call(Agent=cat));not(call(Object=cat));not(call(Surface=floor))),  (not(call(Agent=cat));not(call(Object=food1));not(call(Surface=(table)))), allDifferent([Agent, Object, Surface])] ->
       ta(Axiom_head_Ret,
          not(initially(believe(Agent, bOn(Object, Surface))))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6227
axiom(not(initially(believe(Agent, bOn(Object, Surface)))),
   
    [  (not(call(Agent=cat));not(call(Object=cat));not(call(Surface=floor))),
       (not(call(Agent=cat));not(call(Object=food1));not(call(Surface=(table)))),
      allDifferent([Agent, Object, Surface])
    ]).

 /*  allDifferent([Agent, Object, Surface]) ->
       ( Agent=cat, Object=cat, Surface=floor;Agent=cat, Object=food1, Surface=(table)->initially(believe(Agent, bOn(Object, Surface)))
       ).
 */

 /*  initially(believe(Agent, bOn(Object, Surface))) :-
       (   equals(Agent, cat),
           equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Agent, cat),
           equals(Object, food1),
           equals(Surface, table)
       ),
       allDifferent([Agent, Object, Surface]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       (   equals(Agent, cat),
           equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Agent, cat),
           equals(Object, food1),
           equals(Surface, table)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       (   call(Agent=cat),
           call(Object=cat),
           call(Surface=floor)
       ;   call(Agent=cat),
           call(Object=food1),
           call(Surface=(table))
       ).
 */

 /*  [(call(Agent=cat), call(Object=cat), call(Surface=floor);call(Agent=cat), call(Object=food1), call(Surface=(table))), allDifferent([Agent, Object, Surface])] ->
       ta(Axiom_head_Ret4,
          initially(believe(Agent, bOn(Object, Surface)))).
 */
axiom(initially(believe(Agent, bOn(Object, Surface))),
   
    [  (call(Agent=cat), call(Object=cat), call(Surface=floor);call(Agent=cat), call(Object=food1), call(Surface=(table))),
      allDifferent([Agent, Object, Surface])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6229
% [agent,surface1,surface2]
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),0) <->
% (agent=Cat & surface1=Floor & surface2=Chair) |
% (agent=Cat & surface1=Chair & surface2=Table) |
% (agent=Cat & surface1=Shelf & surface2=Table).

 /*  initially(believe(Agent, bCanJump(Surface1, Surface2))) <->
       (   Agent=cat,
           Surface1=floor,
           Surface2=chair
       ;   Agent=cat,
           Surface1=chair,
           Surface2=(table)
       ;   Agent=cat,
           Surface1=shelf,
           Surface2=(table)
       ).
 */

 /*  [initially, believe, bCanJump] <->
       [;, =, cat, =, floor, =, chair, ;, =, cat, =, chair, =, table, =, cat, =, shelf, =, table].
 */

 /*  allDifferent([Agent, Surface1, Surface2]) ->
       ( initially(believe(Agent, bCanJump(Surface1, Surface2)))->Agent=cat, Surface1=floor, Surface2=chair;Agent=cat, Surface1=chair, Surface2=(table);Agent=cat, Surface1=shelf, Surface2=(table)
       ).
 */

 /*  not(initially(believe(Agent, bCanJump(Surface1, Surface2)))) :-
       ( (   not(equals(Agent, cat))
         ;   not(equals(Surface1, floor))
         ;   not(equals(Surface2, chair))
         ),
         (   not(equals(Agent, cat))
         ;   not(equals(Surface1, chair))
         ;   not(equals(Surface2, table))
         ),
         (   not(equals(Agent, cat))
         ;   not(equals(Surface1, shelf))
         ;   not(equals(Surface2, table))
         )
       ),
       allDifferent([Agent, Surface1, Surface2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Agent, cat))
       ;   not(equals(Surface1, floor))
       ;   not(equals(Surface2, chair))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Agent=cat))
       ;   not(call(Surface1=floor))
       ;   not(call(Surface2=chair))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Agent, cat))
       ;   not(equals(Surface1, chair))
       ;   not(equals(Surface2, table))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Agent=cat))
       ;   not(call(Surface1=chair))
       ;   not(call(Surface2=(table)))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Agent, cat))
       ;   not(equals(Surface1, shelf))
       ;   not(equals(Surface2, table))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Agent=cat))
       ;   not(call(Surface1=shelf))
       ;   not(call(Surface2=(table)))
       ).
 */

 /*  [(not(call(Agent=cat));not(call(Surface1=floor));not(call(Surface2=chair))),  (not(call(Agent=cat));not(call(Surface1=chair));not(call(Surface2=(table)))),  (not(call(Agent=cat));not(call(Surface1=shelf));not(call(Surface2=(table)))), allDifferent([Agent, Surface1, Surface2])] ->
       ta(Axiom_head_Ret,
          not(initially(believe(Agent,
                                bCanJump(Surface1, Surface2))))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6233
axiom(not(initially(believe(Agent, bCanJump(Surface1, Surface2)))),
   
    [  (not(call(Agent=cat));not(call(Surface1=floor));not(call(Surface2=chair))),
       (not(call(Agent=cat));not(call(Surface1=chair));not(call(Surface2=(table)))),
       (not(call(Agent=cat));not(call(Surface1=shelf));not(call(Surface2=(table)))),
      allDifferent([Agent, Surface1, Surface2])
    ]).

 /*  allDifferent([Agent, Surface1, Surface2]) ->
       ( Agent=cat, Surface1=floor, Surface2=chair;Agent=cat, Surface1=chair, Surface2=(table);Agent=cat, Surface1=shelf, Surface2=(table)->initially(believe(Agent, bCanJump(Surface1, Surface2)))
       ).
 */

 /*  initially(believe(Agent, bCanJump(Surface1, Surface2))) :-
       (   equals(Agent, cat),
           equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Agent, cat),
           equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Agent, cat),
           equals(Surface1, shelf),
           equals(Surface2, table)
       ),
       allDifferent([Agent, Surface1, Surface2]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       (   equals(Agent, cat),
           equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Agent, cat),
           equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Agent, cat),
           equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       (   call(Agent=cat),
           call(Surface1=floor),
           call(Surface2=chair)
       ;   call(Agent=cat),
           call(Surface1=chair),
           call(Surface2=(table))
       ;   call(Agent=cat),
           call(Surface1=shelf),
           call(Surface2=(table))
       ).
 */

 /*  [(call(Agent=cat), call(Surface1=floor), call(Surface2=chair);call(Agent=cat), call(Surface1=chair), call(Surface2=(table));call(Agent=cat), call(Surface1=shelf), call(Surface2=(table))), allDifferent([Agent, Surface1, Surface2])] ->
       ta(Axiom_head_Ret4,
          initially(believe(Agent, bCanJump(Surface1, Surface2)))).
 */
axiom(initially(believe(Agent, bCanJump(Surface1, Surface2))),
   
    [  (call(Agent=cat), call(Surface1=floor), call(Surface2=chair);call(Agent=cat), call(Surface1=chair), call(Surface2=(table));call(Agent=cat), call(Surface1=shelf), call(Surface2=(table))),
      allDifferent([Agent, Surface1, Surface2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6235
% !HoldsAt(Believe(Cat,BSatiated(Cat)),0).
 %  not(initially(believe(cat,bSatiated(cat)))).

 /*  [] ->
       ta(Ta_Param, not(initially(believe(cat, bSatiated(cat))))).
 */
axiom(not(initially(believe(cat, bSatiated(cat)))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6237
%; ADDED:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6238
% !HoldsAt(Satiated(Cat),0).
 %  not(initially(satiated(cat))).

 /*  [] ->
       ta(Ta_Param, not(initially(satiated(cat)))).
 */
axiom(not(initially(satiated(cat))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6240
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6241
==> completion(happens).

% range time 0 7
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6243
==> range(time,0,7).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6244
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/Lottery.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{OrtonyCloreCollins:1988,
%;   author = "Andrew Ortony and Gerald L. Clore and Allan M. Collins",
%;   year = "1988",
%;   title = "The Cognitive Structure of Emotions",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6279
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6280
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6282
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6283
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6285
==> sort(agent).

% sort aboutevent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6286
==> sort(aboutevent).

% sort desirability: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6287
==> subsort(desirability,integer).

% agent Kate, Lisa
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6289
==> t(agent,kate).
==> t(agent,lisa).

% aboutevent WinLotteryKate, WinLotteryLisa
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6290
==> t(aboutevent,winLotteryKate).
==> t(aboutevent,winLotteryLisa).

% fluent Joy(agent,aboutevent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6292
fluent(joy(Joy_Param,Joy_Ret)).
==> mpred_prop(joy(agent,aboutevent),fluent).
==> meta_argtypes(joy(agent,aboutevent)).

% fluent Desirability(agent,agent,aboutevent,desirability)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6293
fluent(desirability(Desirability_Param,
		    _,
		    _,
		    Desirability_Ret)).
==> mpred_prop(desirability(agent,agent,aboutevent,desirability),
	       fluent).
==> meta_argtypes(desirability(agent,agent,aboutevent,desirability)).

% fluent Believe(agent,aboutevent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6294
fluent(believe(Believe_Param,Believe_Ret)).
==> mpred_prop(believe(agent,aboutevent),fluent).
==> meta_argtypes(believe(agent,aboutevent)).

% fluent Like(agent,agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6295
fluent(like(Like_Param,Like_Ret)).
==> mpred_prop(like(agent,agent),fluent).
==> meta_argtypes(like(agent,agent)).

% fluent HappyFor(agent,agent,aboutevent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6296
fluent(happyFor(HappyFor_Param,_,HappyFor_Ret)).
==> mpred_prop(happyFor(agent,agent,aboutevent),fluent).
==> meta_argtypes(happyFor(agent,agent,aboutevent)).

% event WinLottery(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6298
event(winLottery(WinLottery_Ret)).
==> mpred_prop(winLottery(agent),event).
==> meta_argtypes(winLottery(agent)).

% event AddJoy(agent,aboutevent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6299
event(addJoy(AddJoy_Param,AddJoy_Ret)).
==> mpred_prop(addJoy(agent,aboutevent),event).
==> meta_argtypes(addJoy(agent,aboutevent)).

% event AddHappyFor(agent,agent,aboutevent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6300
event(addHappyFor(AddHappyFor_Param,
		  _,
		  AddHappyFor_Ret)).
==> mpred_prop(addHappyFor(agent,agent,aboutevent),event).
==> meta_argtypes(addHappyFor(agent,agent,aboutevent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6301
%; Sigma
% [agent,aboutevent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6304
% Initiates(AddJoy(agent,aboutevent),Joy(agent,aboutevent),time).

 /*  [] ->
       ta(Time,
          initiates(addJoy(Agent, Aboutevent),
                    joy(Agent, Aboutevent),
                    Time)).
 */
axiom(initiates(addJoy(Agent, Aboutevent), joy(Agent, Aboutevent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6306
% [agent1,agent2,aboutevent,time]
% Initiates(AddHappyFor(agent1,agent2,aboutevent),
%           HappyFor(agent1,agent2,aboutevent),
%           time).

 /*  [] ->
       ta(Time,
          initiates(addHappyFor(Agent1, Agent2, Aboutevent),
                    happyFor(Agent1, Agent2, Aboutevent),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6309
axiom(initiates(addHappyFor(Agent1, Agent2, Aboutevent), happyFor(Agent1, Agent2, Aboutevent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6311
% [agent1,agent2,aboutevent,time]
% (agent1=Kate & aboutevent=WinLotteryKate) |
% (agent1=Lisa & aboutevent=WinLotteryLisa) ->
% Initiates(WinLottery(agent1),Believe(agent2,aboutevent),time).

 /*  axiom_head(Time) ->
       (   equals(Agent1, kate),
           equals(Aboutevent, winLotteryKate)
       ;   equals(Agent1, lisa),
           equals(Aboutevent, winLotteryLisa)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Agent1=kate),
           call(Aboutevent=winLotteryKate)
       ;   call(Agent1=lisa),
           call(Aboutevent=winLotteryLisa)
       ).
 */

 /*  [(call(Agent1=kate), call(Aboutevent=winLotteryKate);call(Agent1=lisa), call(Aboutevent=winLotteryLisa))] ->
       ta(Time,
          initiates(winLottery(Agent1),
                    believe(Agent2, Aboutevent),
                    Time)).
 */

 /*  [(holds_at(call(Agent1=kate), Time), holds_at(call(Aboutevent=winLotteryKate), Time);holds_at(call(Agent1=lisa), Time), holds_at(call(Aboutevent=winLotteryLisa), Time))] ->
       ta(Time,
          initiates(winLottery(Agent1),
                    believe(Agent2, Aboutevent),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6314
axiom(initiates(winLottery(Agent1), believe(Agent2, Aboutevent), Time),
   
    [  (holds_at(call(Agent1=kate), Time), holds_at(call(Aboutevent=winLotteryKate), Time);holds_at(call(Agent1=lisa), Time), holds_at(call(Aboutevent=winLotteryLisa), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6316
%; Delta
% [agent,aboutevent,desirability,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6319
% !HoldsAt(Joy(agent,aboutevent),time) &
% HoldsAt(Desirability(agent,agent,aboutevent,desirability),time) &
% desirability=1 &
% HoldsAt(Believe(agent,aboutevent),time) ->
% Happens(AddJoy(agent,aboutevent),time).

 /*  allDifferent([Agent, Aboutevent, Time, Desirability]) ->
       ( holds_at(neg(joy(Agent, Aboutevent)), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), Desirability=1, holds_at(believe(Agent, Aboutevent), Time)->happens(addJoy(Agent, Aboutevent), Time)
       ).
 */

 /*  happens(addJoy(Agent, Aboutevent), Time) :-
       ( holds_at(neg(joy(Agent, Aboutevent)), Time),
         holds_at(desirability(Agent,
                               Agent,
                               Aboutevent,
                               Desirability),
                  Time),
         equals(Desirability, 1),
         holds_at(believe(Agent, Aboutevent), Time)
       ),
       allDifferent([Agent, Aboutevent, Time, Desirability]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability=1).
 */

 /*  [holds_at(neg(joy(Agent, Aboutevent)), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), call(Desirability=1), holds_at(believe(Agent, Aboutevent), Time), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time, happens(addJoy(Agent, Aboutevent), Time)).
 */

 /*  [holds_at(neg(joy(Agent, Aboutevent)), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), holds_at(call(Desirability=1), Time), holds_at(believe(Agent, Aboutevent), Time), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time, happens(addJoy(Agent, Aboutevent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6323
axiom(happens(addJoy(Agent, Aboutevent), Time),
   
    [ holds_at(neg(joy(Agent, Aboutevent)), Time),
      holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      holds_at(call(Desirability=1), Time),
      holds_at(believe(Agent, Aboutevent), Time),
      allDifferent(
                   [ Agent,
                     Aboutevent,
                     Time,
                     Desirability
                   ])
    ]).

 /*  not(holds_at(neg(joy(Agent, Aboutevent)), Time)) :-
       ( holds_at(desirability(Agent,
                               Agent,
                               Aboutevent,
                               Desirability),
                  Time),
         equals(Desirability, 1),
         holds_at(believe(Agent, Aboutevent), Time)
       ),
       not(happens(addJoy(Agent, Aboutevent), Time)),
       allDifferent([Agent, Aboutevent, Time, Desirability]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability=1).
 */

 /*  [holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), call(Desirability=1), holds_at(believe(Agent, Aboutevent), Time), not(happens(addJoy(Agent, Aboutevent), Time)), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time,
          holds_at(neg(neg(joy(Agent, Aboutevent))), Time)).
 */

 /*  [holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), holds_at(call(Desirability=1), Time), holds_at(believe(Agent, Aboutevent), Time), not(happens(addJoy(Agent, Aboutevent), Time)), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time,
          holds_at(neg(neg(joy(Agent, Aboutevent))), Time)).
 */
axiom(holds_at(neg(neg(joy(Agent, Aboutevent))), Time),
   
    [ holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      holds_at(call(Desirability=1), Time),
      holds_at(believe(Agent, Aboutevent), Time),
      not(happens(addJoy(Agent, Aboutevent), Time)),
      allDifferent(
                   [ Agent,
                     Aboutevent,
                     Time,
                     Desirability
                   ])
    ]).

 /*  not(holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time)) :-
       ( equals(Desirability, 1),
         holds_at(believe(Agent, Aboutevent), Time)
       ),
       holds_at(neg(joy(Agent, Aboutevent)), Time),
       not(happens(addJoy(Agent, Aboutevent), Time)),
       allDifferent([Agent, Aboutevent, Time, Desirability]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability=1).
 */

 /*  [call(Desirability=1), holds_at(believe(Agent, Aboutevent), Time), holds_at(neg(joy(Agent, Aboutevent)), Time), not(happens(addJoy(Agent, Aboutevent), Time)), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time,
          holds_at(neg(desirability(Agent,
                                    Agent,
                                    Aboutevent,
                                    Desirability)),
                   Time)).
 */

 /*  [holds_at(call(Desirability=1), Time), holds_at(believe(Agent, Aboutevent), Time), holds_at(neg(joy(Agent, Aboutevent)), Time), not(happens(addJoy(Agent, Aboutevent), Time)), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time,
          holds_at(neg(desirability(Agent,
                                    Agent,
                                    Aboutevent,
                                    Desirability)),
                   Time)).
 */
axiom(holds_at(neg(desirability(Agent, Agent, Aboutevent, Desirability)), Time),
   
    [ holds_at(call(Desirability=1), Time),
      holds_at(believe(Agent, Aboutevent), Time),
      holds_at(neg(joy(Agent, Aboutevent)), Time),
      not(happens(addJoy(Agent, Aboutevent), Time)),
      allDifferent(
                   [ Agent,
                     Aboutevent,
                     Time,
                     Desirability
                   ])
    ]).

 /*  not(holds_at(believe(Agent, Aboutevent), Time)) :-
       equals(Desirability, 1),
       holds_at(desirability(Agent,
                             Agent,
                             Aboutevent,
                             Desirability),
                Time),
       holds_at(neg(joy(Agent, Aboutevent)), Time),
       not(happens(addJoy(Agent, Aboutevent), Time)),
       allDifferent([Agent, Aboutevent, Time, Desirability]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability=1).
 */

 /*  [call(Desirability=1), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), holds_at(neg(joy(Agent, Aboutevent)), Time), not(happens(addJoy(Agent, Aboutevent), Time)), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time,
          holds_at(neg(believe(Agent, Aboutevent)), Time)).
 */

 /*  [holds_at(call(Desirability=1), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), holds_at(neg(joy(Agent, Aboutevent)), Time), not(happens(addJoy(Agent, Aboutevent), Time)), allDifferent([Agent, Aboutevent, Time, Desirability])] ->
       ta(Time,
          holds_at(neg(believe(Agent, Aboutevent)), Time)).
 */
axiom(holds_at(neg(believe(Agent, Aboutevent)), Time),
   
    [ holds_at(call(Desirability=1), Time),
      holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      holds_at(neg(joy(Agent, Aboutevent)), Time),
      not(happens(addJoy(Agent, Aboutevent), Time)),
      allDifferent(
                   [ Agent,
                     Aboutevent,
                     Time,
                     Desirability
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6325
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% !HoldsAt(HappyFor(agent1,agent2,aboutevent),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% desirability1=1 &
% HoldsAt(Desirability(agent1,agent1,aboutevent,desirability2),time) &
% desirability2=1 &
% HoldsAt(Like(agent1,agent2),time) &
% HoldsAt(Believe(agent1,aboutevent),time) &
% agent1 != agent2 ->
% Happens(AddHappyFor(agent1,agent2,aboutevent),time).

 /*  allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2]) ->
       ( holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), Desirability1=1, holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), Desirability2=1, holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2)->happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)
       ).
 */

 /*  happens(addHappyFor(Agent1, Agent2, Aboutevent), Time) :-
       ( holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                  Time),
         holds_at(desirability(Agent1,
                               Agent2,
                               Aboutevent,
                               Desirability1),
                  Time),
         equals(Desirability1, 1),
         holds_at(desirability(Agent1,
                               Agent1,
                               Aboutevent,
                               Desirability2),
                  Time),
         equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Time,
                      Desirability1,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability1, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability1=1).
 */

 /*  axiom_head(Time) ->
       equals(Desirability2, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability2=1).
 */

 /*  [holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), call(Desirability1=1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), call(Desirability2=1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)).
 */

 /*  [holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(call(Desirability1=1), Time), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), holds_at(call(Desirability2=1), Time), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6334
axiom(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time),
   
    [ holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(call(Desirability1=1), Time),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      holds_at(call(Desirability2=1), Time),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Time,
                     Desirability1,
                     Desirability2
                   ])
    ]).

 /*  not(holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time)) :-
       ( holds_at(desirability(Agent1,
                               Agent2,
                               Aboutevent,
                               Desirability1),
                  Time),
         equals(Desirability1, 1),
         holds_at(desirability(Agent1,
                               Agent1,
                               Aboutevent,
                               Desirability2),
                  Time),
         equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Time,
                      Desirability1,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability1, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability1=1).
 */

 /*  axiom_head(Time) ->
       equals(Desirability2, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability2=1).
 */

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), call(Desirability1=1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), call(Desirability2=1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(neg(happyFor(Agent1, Agent2, Aboutevent))),
                   Time)).
 */

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(call(Desirability1=1), Time), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), holds_at(call(Desirability2=1), Time), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(neg(happyFor(Agent1, Agent2, Aboutevent))),
                   Time)).
 */
axiom(holds_at(neg(neg(happyFor(Agent1, Agent2, Aboutevent))), Time),
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(call(Desirability1=1), Time),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      holds_at(call(Desirability2=1), Time),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Time,
                     Desirability1,
                     Desirability2
                   ])
    ]).

 /*  not(holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time)) :-
       ( equals(Desirability1, 1),
         holds_at(desirability(Agent1,
                               Agent1,
                               Aboutevent,
                               Desirability2),
                  Time),
         equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Time,
                      Desirability1,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability1, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability1=1).
 */

 /*  axiom_head(Time) ->
       equals(Desirability2, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability2=1).
 */

 /*  [call(Desirability1=1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), call(Desirability2=1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability1)),
                   Time)).
 */

 /*  [holds_at(call(Desirability1=1), Time), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), holds_at(call(Desirability2=1), Time), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability1)),
                   Time)).
 */
axiom(holds_at(neg(desirability(Agent1, Agent2, Aboutevent, Desirability1)), Time),
   
    [ holds_at(call(Desirability1=1), Time),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      holds_at(call(Desirability2=1), Time),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Time,
                     Desirability1,
                     Desirability2
                   ])
    ]).

 /*  not(holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time)) :-
       ( equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Time,
                      Desirability1,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability2, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability2=1).
 */

 /*  axiom_head(Time) ->
       equals(Desirability1, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability1=1).
 */

 /*  [call(Desirability2=1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), call(Desirability1=1), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent1,
                                    Aboutevent,
                                    Desirability2)),
                   Time)).
 */

 /*  [holds_at(call(Desirability2=1), Time), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), holds_at(call(Desirability1=1), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent1,
                                    Aboutevent,
                                    Desirability2)),
                   Time)).
 */
axiom(holds_at(neg(desirability(Agent1, Agent1, Aboutevent, Desirability2)), Time),
   
    [ holds_at(call(Desirability2=1), Time),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      holds_at(call(Desirability1=1), Time),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Time,
                     Desirability1,
                     Desirability2
                   ])
    ]).

 /*  not(holds_at(like(Agent1, Agent2), Time)) :-
       ( holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       equals(Desirability2, 1),
       holds_at(desirability(Agent1,
                             Agent1,
                             Aboutevent,
                             Desirability2),
                Time),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Time,
                      Desirability1,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability2, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability2=1).
 */

 /*  axiom_head(Time) ->
       equals(Desirability1, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability1=1).
 */

 /*  [holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), call(Desirability2=1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), call(Desirability1=1), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time, holds_at(neg(like(Agent1, Agent2)), Time)).
 */

 /*  [holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), holds_at(call(Desirability2=1), Time), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), holds_at(call(Desirability1=1), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time, holds_at(neg(like(Agent1, Agent2)), Time)).
 */
axiom(holds_at(neg(like(Agent1, Agent2)), Time),
   
    [ holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      holds_at(call(Desirability2=1), Time),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      holds_at(call(Desirability1=1), Time),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Time,
                     Desirability1,
                     Desirability2
                   ])
    ]).

 /*  not(holds_at(believe(Agent1, Aboutevent), Time)) :-
       diff(Agent1, Agent2),
       holds_at(like(Agent1, Agent2), Time),
       equals(Desirability2, 1),
       holds_at(desirability(Agent1,
                             Agent1,
                             Aboutevent,
                             Desirability2),
                Time),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Time,
                      Desirability1,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Desirability2, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability2=1).
 */

 /*  axiom_head(Time) ->
       equals(Desirability1, 1).
 */

 /*  fix_axiom_head(Time) ->
       call(Desirability1=1).
 */

 /*  [diff(Agent1, Agent2), holds_at(like(Agent1, Agent2), Time), call(Desirability2=1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), call(Desirability1=1), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(believe(Agent1, Aboutevent)), Time)).
 */

 /*  [diff(Agent1, Agent2), holds_at(like(Agent1, Agent2), Time), holds_at(call(Desirability2=1), Time), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), holds_at(call(Desirability1=1), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time)), allDifferent([Agent1, Agent2, Aboutevent, Time, Desirability1, Desirability2])] ->
       ta(Time,
          holds_at(neg(believe(Agent1, Aboutevent)), Time)).
 */
axiom(holds_at(neg(believe(Agent1, Aboutevent)), Time),
   
    [ diff(Agent1, Agent2),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(call(Desirability2=1), Time),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      holds_at(call(Desirability1=1), Time),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Time,
                     Desirability1,
                     Desirability2
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6336
% Happens(WinLottery(Kate),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(winLottery(kate), t)).
 */
axiom(happens(winLottery(kate), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6338
%; Psi
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6341
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability2),time) ->
% desirability1 = desirability2.

 /*  allDifferent([Agent1, Agent2, Aboutevent, Desirability1, Time, Desirability2]) ->
       ( holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time)->Desirability1=Desirability2
       ).
 */

 /*  not(holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time)) :-
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability2),
                Time),
       not(equals(Desirability1, Desirability2)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Desirability1,
                      Time,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       not(equals(Desirability1, Desirability2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Desirability1=Desirability2)).
 */

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time), not(call(Desirability1=Desirability2)), allDifferent([Agent1, Agent2, Aboutevent, Desirability1, Time, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability1)),
                   Time)).
 */

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time), holds_at(neg(call(Desirability1=Desirability2)), Time), allDifferent([Agent1, Agent2, Aboutevent, Desirability1, Time, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability1)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6343
axiom(holds_at(neg(desirability(Agent1, Agent2, Aboutevent, Desirability1)), Time),
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability2),
               Time),
      holds_at(neg(call(Desirability1=Desirability2)), Time),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Desirability1,
                     Time,
                     Desirability2
                   ])
    ]).

 /*  not(holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time)) :-
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       not(equals(Desirability1, Desirability2)),
       allDifferent(
                    [ Agent1,
                      Agent2,
                      Aboutevent,
                      Desirability1,
                      Time,
                      Desirability2
                    ]).
 */

 /*  axiom_head(Time) ->
       not(equals(Desirability1, Desirability2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Desirability1=Desirability2)).
 */

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), not(call(Desirability1=Desirability2)), allDifferent([Agent1, Agent2, Aboutevent, Desirability1, Time, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability2)),
                   Time)).
 */

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(call(Desirability1=Desirability2)), Time), allDifferent([Agent1, Agent2, Aboutevent, Desirability1, Time, Desirability2])] ->
       ta(Time,
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability2)),
                   Time)).
 */
axiom(holds_at(neg(desirability(Agent1, Agent2, Aboutevent, Desirability2)), Time),
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(call(Desirability1=Desirability2)), Time),
      allDifferent(
                   [ Agent1,
                     Agent2,
                     Aboutevent,
                     Desirability1,
                     Time,
                     Desirability2
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6345
%; Gamma
% [agent,aboutevent]
 % !HoldsAt(Joy(agent,aboutevent),0).
 %  not(initially(joy(Agent,Aboutevent))).

 /*  [] ->
       ta(Ta_Param, not(initially(joy(Agent, Aboutevent)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6347
axiom(not(initially(joy(Agent, Aboutevent))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6348
% [agent1,agent2,aboutevent]
 % !HoldsAt(HappyFor(agent1,agent2,aboutevent),0).
 %  not(initially(happyFor(Agent1,Agent2,Aboutevent))).

 /*  [] ->
       ta(Ta_Param,
          not(initially(happyFor(Agent1, Agent2, Aboutevent)))).
 */
axiom(not(initially(happyFor(Agent1, Agent2, Aboutevent))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6349
% [aboutevent]
 % !HoldsAt(Believe(Kate,aboutevent),0).
 %  not(initially(believe(kate,Aboutevent))).

 /*  [] ->
       ta(Ta_Param, not(initially(believe(kate, Aboutevent)))).
 */
axiom(not(initially(believe(kate, Aboutevent))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6350
% [aboutevent]
 % !HoldsAt(Believe(Lisa,aboutevent),0).
 %  not(initially(believe(lisa,Aboutevent))).

 /*  [] ->
       ta(Ta_Param, not(initially(believe(lisa, Aboutevent)))).
 */
axiom(not(initially(believe(lisa, Aboutevent))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6351
% [agent1,agent2,time]
 % HoldsAt(Like(agent1,agent2),time).
holds_at(like(Agent1,Agent2),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6353
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryKate,1),time).
holds_at(desirability(lisa,kate,winLotteryKate,1),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6354
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryKate,1),time).
holds_at(desirability(kate,kate,winLotteryKate,1),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6355
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryKate,1),time).
holds_at(desirability(lisa,lisa,winLotteryKate,1),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6356
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
holds_at(desirability(kate,kate,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6357
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryLisa,0),time).
holds_at(desirability(kate,lisa,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6358
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
holds_at(desirability(kate,kate,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6359
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryKate,0),time).
holds_at(desirability(kate,lisa,winLotteryKate,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6360
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryLisa,0),time).
holds_at(desirability(lisa,lisa,winLotteryLisa,0),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6361
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryLisa,1),time).
holds_at(desirability(lisa,kate,winLotteryLisa,1),Time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6363
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6364
==> completion(happens).

% range time 0 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6366
==> range(time,0,3).

% range desirability -1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6367
==> range(desirability,-1,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6368
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1a.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6388
% option timediff off
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6389
:- set_ec_option(timediff, off).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6391
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6392
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6394
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6396
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6397
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6398
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6400
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6401
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6401
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6402
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6402
% Happens(WakeUp(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(wakeUp(james), t)).
 */
axiom(happens(wakeUp(james), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6404
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6405
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6407
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6408
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6426
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6427
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6428
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6430
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6432
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6433
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6434
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6436
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6437
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6437
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6438
% Delta: 
next_axiom_uses(delta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(delta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(delta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6438
% Happens(WakeUp(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(wakeUp(james), t)).
 */
axiom(happens(wakeUp(james), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6440
% completion Delta Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6441
==> completion(delta).
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6443
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6444
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6460
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6461
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6462
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6464
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6466
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6467
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6468
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6469
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(wakeUp(Agent), Time)->holds_at(neg(awake(Agent)), Time)
       ).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [happens(wakeUp(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(awake(Agent)), Time)).
 */
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ happens(wakeUp(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(awake(Agent))), Time), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(wakeUp(Agent), Time))).
 */
axiom(not(happens(wakeUp(Agent), Time)),
   
    [ holds_at(neg(neg(awake(Agent))), Time),
      allDifferent([Agent, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6471
% agent James, Jessie
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6472
==> t(agent,james).
==> t(agent,jessie).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6472
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6473
% !HoldsAt(Awake(Jessie),0).
 %  not(initially(awake(jessie))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(jessie)))).
 */
axiom(not(initially(awake(jessie))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6474
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6476
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6477
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6478
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6494
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6495
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6496
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6498
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6500
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6501
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6502
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6504
% agent James, Jessie
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6505
==> t(agent,james).
==> t(agent,jessie).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6505
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6506
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6508
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6509
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6510
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6526
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6527
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6528
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6530
==> sort(agent).

% fluent Awake(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6532
fluent(awake(Awake_Ret)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% event WakeUp(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6533
event(wakeUp(WakeUp_Ret)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6534
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6536
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6537
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6537
% !HoldsAt(Awake(James),0).
 %  not(initially(awake(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(awake(james)))).
 */
axiom(not(initially(awake(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6538
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6540
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6541
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6542
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6570
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6571
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6572
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6574
==> sort(agent).

% fluent Tired(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6576
fluent(tired(Tired_Ret)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% event Move(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6578
event(move(Move_Ret)).
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% event Run(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6579
event(run(Run_Ret)).
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% event Drive(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6580
event(drive(Drive_Ret)).
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6581
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(move(Agent), Time)->happens(run(Agent), Time);happens(drive(Agent), Time)
       ).
 */

 /*  happens(run(Agent), Time) :-
       not(happens(drive(Agent), Time)),
       happens(move(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [not(happens(drive(Agent), Time)), happens(move(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, happens(run(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6583
axiom(happens(run(Agent), Time),
   
    [ not(happens(drive(Agent), Time)),
      happens(move(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  happens(drive(Agent), Time) :-
       not(happens(run(Agent), Time)),
       happens(move(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [not(happens(run(Agent), Time)), happens(move(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, happens(drive(Agent), Time)).
 */
axiom(happens(drive(Agent), Time),
   
    [ not(happens(run(Agent), Time)),
      happens(move(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(move(Agent), Time)) :-
       ( not(happens(run(Agent), Time)),
         not(happens(drive(Agent), Time))
       ),
       allDifferent([Agent, Time]).
 */

 /*  [not(happens(run(Agent), Time)), not(happens(drive(Agent), Time)), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(move(Agent), Time))).
 */
axiom(not(happens(move(Agent), Time)),
   
    [ not(happens(run(Agent), Time)),
      not(happens(drive(Agent), Time)),
      allDifferent([Agent, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6585
% xor Run, Drive
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6586
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6587
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).

 /*  [] ->
       ta(Time, initiates(run(Agent), tired(Agent), Time)).
 */
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6589
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6590
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6591
% !HoldsAt(Tired(James),0).
 %  not(initially(tired(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(tired(james)))).
 */
axiom(not(initially(tired(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6592
% Happens(Move(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(move(james), t)).
 */
axiom(happens(move(james), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6594
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6595
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6596
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/OffOn.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6626
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6627
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6628
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6630
==> sort(agent).

% sort switch
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6631
==> sort(switch).

% fluent On(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6633
fluent(on(On_Ret)).
==> mpred_prop(on(switch),fluent).
==> meta_argtypes(on(switch)).

% fluent Off(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6634
fluent(off(Off_Ret)).
==> mpred_prop(off(switch),fluent).
==> meta_argtypes(off(switch)).

% event TurnOn(agent,switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6635
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% event TurnOff(agent,switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6636
event(turnOff(TurnOff_Param,TurnOff_Ret)).
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).

% noninertial Off
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6638
==> noninertial(off).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6639
% [switch,time]
 % HoldsAt(Off(switch),time) <-> !HoldsAt(On(switch),time).

 /*  holds_at(off(Switch), Time) <->
       holds_at(neg(on(Switch)), Time).
 */

 /*  [holds_at, off] <->
       [holds_at, neg, on].
 */

 /*  allDifferent([Switch, Time]) ->
       ( holds_at(off(Switch), Time)->holds_at(neg(on(Switch)), Time)
       ).
 */

 /*  holds_at(neg(on(Switch)), Time) :-
       holds_at(off(Switch), Time),
       allDifferent([Switch, Time]).
 */

 /*  [holds_at(off(Switch), Time), allDifferent([Switch, Time])] ->
       ta(Time, holds_at(neg(on(Switch)), Time)).
 */
axiom(holds_at(neg(on(Switch)), Time),
   
    [ holds_at(off(Switch), Time),
      allDifferent([Switch, Time])
    ]).

 /*  not(holds_at(off(Switch), Time)) :-
       not(holds_at(neg(on(Switch)), Time)),
       allDifferent([Switch, Time]).
 */

 /*  [holds_at(neg(neg(on(Switch))), Time), allDifferent([Switch, Time])] ->
       ta(Time, holds_at(neg(off(Switch)), Time)).
 */
axiom(holds_at(neg(off(Switch)), Time),
   
    [ holds_at(neg(neg(on(Switch))), Time),
      allDifferent([Switch, Time])
    ]).

 /*  allDifferent([Switch, Time]) ->
       ( holds_at(neg(on(Switch)), Time)->holds_at(off(Switch), Time)
       ).
 */

 /*  holds_at(off(Switch), Time) :-
       holds_at(neg(on(Switch)), Time),
       allDifferent([Switch, Time]).
 */

 /*  [holds_at(neg(on(Switch)), Time), allDifferent([Switch, Time])] ->
       ta(Time, holds_at(off(Switch), Time)).
 */
axiom(holds_at(off(Switch), Time),
   
    [ holds_at(neg(on(Switch)), Time),
      allDifferent([Switch, Time])
    ]).

 /*  not(holds_at(neg(on(Switch)), Time)) :-
       not(holds_at(off(Switch), Time)),
       allDifferent([Switch, Time]).
 */

 /*  [holds_at(neg(off(Switch)), Time), allDifferent([Switch, Time])] ->
       ta(Time, holds_at(neg(neg(on(Switch))), Time)).
 */
axiom(holds_at(neg(neg(on(Switch))), Time),
   
    [ holds_at(neg(off(Switch)), Time),
      allDifferent([Switch, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6641
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),On(switch),time).

 /*  [] ->
       ta(Time,
          initiates(turnOn(Agent, Switch), on(Switch), Time)).
 */
axiom(initiates(turnOn(Agent, Switch), on(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6642
% [agent,switch,time]
 % Terminates(TurnOff(agent,switch),On(switch),time).

 /*  [] ->
       ta(Time,
          terminates(turnOff(Agent, Switch),
                     on(Switch),
                     Time)).
 */
axiom(terminates(turnOff(Agent, Switch), on(Switch), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6644
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6645
==> t(agent,james).

% switch Switch1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6646
==> t(switch,switch1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6647
% !HoldsAt(On(Switch1),0).
 %  not(initially(on(switch1))).

 /*  [] ->
       ta(Ta_Param, not(initially(on(switch1)))).
 */
axiom(not(initially(on(switch1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6648
% Happens(TurnOn(James,Switch1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOn(james, switch1), t)).
 */
axiom(happens(turnOn(james, switch1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6650
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6651
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6652
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6682
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6683
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6684
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6686
==> sort(agent).

% sort switch
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6687
==> sort(switch).

% sort tv
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6688
==> sort(tv).

% function TVOf(switch): tv
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6690
functional_predicate(tVOf(TVOf_Param,TVOf_Ret)).
==> mpred_prop(tVOf(switch,tv),functional_predicate).
==> meta_argtypes(tVOf(switch,tv)).
==> resultIsa(tVOf,tv).

% fluent SwitchOn(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6691
fluent(switchOn(SwitchOn_Ret)).
==> mpred_prop(switchOn(switch),fluent).
==> meta_argtypes(switchOn(switch)).

% fluent TVOn(tv)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6692
fluent(tVOn(TVOn_Ret)).
==> mpred_prop(tVOn(tv),fluent).
==> meta_argtypes(tVOn(tv)).

% fluent PluggedIn(tv)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6693
fluent(pluggedIn(PluggedIn_Ret)).
==> mpred_prop(pluggedIn(tv),fluent).
==> meta_argtypes(pluggedIn(tv)).

% event TurnOn(agent,switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6694
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% event TurnOff(agent,switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6695
event(turnOff(TurnOff_Param,TurnOff_Ret)).
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6696
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).

 /*  [] ->
       ta(Time,
          initiates(turnOn(Agent, Switch),
                    switchOn(Switch),
                    Time)).
 */
axiom(initiates(turnOn(Agent, Switch), switchOn(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6698
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).

 /*  axiom_head(Time) ->
       equals(tVOf(Switch), Tv).
 */

 /*  fix_axiom_head(Time) ->
       call(tVOf(Switch)=Tv).
 */

 /*  [call(tVOf(Switch)=Tv), holds_at(pluggedIn(Tv), Time)] ->
       ta(Time,
          initiates(turnOn(Agent, Switch), tVOn(Tv), Time)).
 */

 /*  [holds_at(call(tVOf(Switch)=Tv), Time), holds_at(pluggedIn(Tv), Time)] ->
       ta(Time,
          initiates(turnOn(Agent, Switch), tVOn(Tv), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6700
axiom(initiates(turnOn(Agent, Switch), tVOn(Tv), Time),
   
    [ holds_at(call(tVOf(Switch)=Tv), Time),
      holds_at(pluggedIn(Tv), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6702
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6703
==> t(agent,james).

% switch Switch1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6704
==> t(switch,switch1).

% tv TV1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6705
==> t(tv,tv1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6706
% TVOf(Switch1)=TV1.
tVOf(switch1,tv1).

 /*  axiom_head(Axiom_head_Ret) ->
       tVOf(switch1, tv1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(tVOf(switch1, tv1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6707
% !HoldsAt(PluggedIn(TV1),0).
 %  not(initially(pluggedIn(tv1))).

 /*  [] ->
       ta(Ta_Param, not(initially(pluggedIn(tv1)))).
 */
axiom(not(initially(pluggedIn(tv1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6708
% !HoldsAt(SwitchOn(Switch1),0).
 %  not(initially(switchOn(switch1))).

 /*  [] ->
       ta(Ta_Param, not(initially(switchOn(switch1)))).
 */
axiom(not(initially(switchOn(switch1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6709
% !HoldsAt(TVOn(TV1),0).
 %  not(initially(tVOn(tv1))).

 /*  [] ->
       ta(Ta_Param, not(initially(tVOn(tv1)))).
 */
axiom(not(initially(tVOn(tv1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6710
% Happens(TurnOn(James,Switch1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOn(james, switch1), t)).
 */
axiom(happens(turnOn(james, switch1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6712
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6713
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6714
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Approve.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; example of concurrent events with cumulative or canceling effects
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6746
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6747
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6748
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6750
==> sort(agent).

% event ApproveOf(agent,agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6752
event(approveOf(ApproveOf_Param,ApproveOf_Ret)).
==> mpred_prop(approveOf(agent,agent),event).
==> meta_argtypes(approveOf(agent,agent)).

% event DisapproveOf(agent,agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6753
event(disapproveOf(DisapproveOf_Param,DisapproveOf_Ret)).
==> mpred_prop(disapproveOf(agent,agent),event).
==> meta_argtypes(disapproveOf(agent,agent)).

% fluent Happy(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6754
fluent(happy(Happy_Ret)).
==> mpred_prop(happy(agent),fluent).
==> meta_argtypes(happy(agent)).

% fluent Confused(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6755
fluent(confused(Confused_Ret)).
==> mpred_prop(confused(agent),fluent).
==> meta_argtypes(confused(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6756
% [agent1,agent2,time]
% !Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Happy(agent2),time).

 /*  [not(happens(disapproveOf(Agent1, Agent2), Time))] ->
       ta(Time,
          initiates(approveOf(Agent1, Agent2),
                    happy(Agent2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6758
axiom(initiates(approveOf(Agent1, Agent2), happy(Agent2), Time),
    [not(happens(disapproveOf(Agent1, Agent2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6760
% [agent1,agent2,time]
% !Happens(ApproveOf(agent1,agent2),time) ->
% Terminates(DisapproveOf(agent1,agent2),Happy(agent2),time).

 /*  [not(happens(approveOf(Agent1, Agent2), Time))] ->
       ta(Time,
          terminates(disapproveOf(Agent1, Agent2),
                     happy(Agent2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6762
axiom(terminates(disapproveOf(Agent1, Agent2), happy(Agent2), Time),
    [not(happens(approveOf(Agent1, Agent2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6764
% [agent1,agent2,time]
% Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Confused(agent2),time).

 /*  axiom_head(Time) ->
       requires(disapproveOf(Agent1, Agent2), Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(disapproveOf(Agent1, Agent2), Time),
                Time).
 */

 /*  [holds_at(metreqs(disapproveOf(Agent1, Agent2)), Time)] ->
       ta(Time,
          holds_at(requires(disapproveOf(Agent1, Agent2), Time),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6766
axiom(holds_at(requires(disapproveOf(Agent1, Agent2), Time), Time),
    [holds_at(metreqs(disapproveOf(Agent1, Agent2)), Time)]).

 /*  [initiates(approveOf(Agent1, Agent2), confused(Agent2), Time)] ->
       ta(Time,
          holds_at(requirements(disapproveOf(Agent1, Agent2)),
                   Time)).
 */
axiom(holds_at(requirements(disapproveOf(Agent1, Agent2)), Time),
   
    [ initiates(approveOf(Agent1, Agent2),
                confused(Agent2),
                Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6768
% agent James, Peter
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6769
==> t(agent,james).
==> t(agent,peter).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6770
% [agent]
 % !HoldsAt(Happy(agent),0) & !HoldsAt(Confused(agent),0).

 /*   not(initially(happy(Agent))),
      not(initially(confused(Agent))).
 */

 /*  [] ->
       ta(Ta_Param, not(initially(happy(Agent)))).
 */
axiom(not(initially(happy(Agent))),
    []).

 /*  [] ->
       ta(Ta_Param2, not(initially(confused(Agent)))).
 */
axiom(not(initially(confused(Agent))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6772
% Happens(ApproveOf(Peter,James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(approveOf(peter, james), t)).
 */
axiom(happens(approveOf(peter, james), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6773
% Happens(DisapproveOf(Peter,James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(disapproveOf(peter, james), t)).
 */
axiom(happens(disapproveOf(peter, james), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6775
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6776
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6778
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6779
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6809
% option trajectory on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6810
:- set_ec_option(trajectory, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6812
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6813
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6815
==> sort(object).

% sort height: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6816
==> subsort(height,integer).

% fluent Height(object,height)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6818
fluent(height(Height_Param,Height_Ret)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% fluent Falling(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6819
fluent(falling(Falling_Ret)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% event StartFalling(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6820
event(startFalling(StartFalling_Ret)).
==> mpred_prop(startFalling(object),event).
==> meta_argtypes(startFalling(object)).

% event HitsGround(object)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6821
event(hitsGround(HitsGround_Ret)).
==> mpred_prop(hitsGround(object),event).
==> meta_argtypes(hitsGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6822
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.

 /*  allDifferent([Object, Height1, Time, Height2]) ->
       ( holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time)->Height1=Height2
       ).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height2), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(height(Object, Height2), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6825
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)),
       allDifferent([Object, Height1, Time, Height2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Height1, Height2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Height1=Height2)).
 */

 /*  [holds_at(height(Object, Height1), Time), not(call(Height1=Height2)), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(neg(call(Height1=Height2)), Time), allDifferent([Object, Height1, Time, Height2])] ->
       ta(Time,
          holds_at(neg(height(Object, Height2)), Time)).
 */
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(neg(call(Height1=Height2)), Time),
      allDifferent([Object, Height1, Time, Height2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6827
% [object,time]
% Initiates(StartFalling(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          initiates(startFalling(Object), falling(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6828
axiom(initiates(startFalling(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6830
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).

 /*  [] ->
       ta(Time,
          releases(startFalling(Object),
                   height(Object, Height),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6831
axiom(releases(startFalling(Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6833
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).

 /*  allDifferent([Object, Height1, Time, Height2, Offset]) ->
       ( holds_at(height(Object, Height1), Time), Height2=Height1-Offset->trajectory(falling(Object), Time, height(Object, Height2), Offset)
       ).
 */

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       ( holds_at(height(Object, Height1), Time),
         equals(Height2, Height1-Offset)
       ),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [holds_at(height(Object, Height1), Time), call(Height2=Height1-Offset), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */

 /*  [holds_at(height(Object, Height1), Time), holds_at(call(Height2=Height1-Offset), Time), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6836
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      holds_at(call(Height2=Height1-Offset), Time),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)),
       allDifferent(
                    [ Object,
                      Height1,
                      Time,
                      Height2,
                      Offset
                    ]).
 */

 /*  axiom_head(Time) ->
       equals(Height2, Height1-Offset).
 */

 /*  fix_axiom_head(Time) ->
       call(Height2=Height1-Offset).
 */

 /*  [call(Height2=Height1-Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */

 /*  [holds_at(call(Height2=Height1-Offset), Time), not(trajectory(falling(Object), Time, height(Object, Height2), Offset)), allDifferent([Object, Height1, Time, Height2, Offset])] ->
       ta(Time,
          holds_at(neg(height(Object, Height1)), Time)).
 */
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(call(Height2=Height1-Offset), Time),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)),
      allDifferent(
                   [ Object,
                     Height1,
                     Time,
                     Height2,
                     Offset
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6838
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).

 /*  allDifferent([Object, Time]) ->
       ( holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)->happens(hitsGround(Object), Time)
       ).
 */

 /*  happens(hitsGround(Object), Time) :-
       ( holds_at(falling(Object), Time),
         holds_at(height(Object, 0), Time)
       ),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time), allDifferent([Object, Time])] ->
       ta(Time, happens(hitsGround(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6841
axiom(happens(hitsGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitsGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(height(Object, 0), Time), not(happens(hitsGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(falling(Object)), Time)).
 */
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitsGround(Object), Time)),
      allDifferent([Object, Time])
    ]).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitsGround(Object), Time)),
       allDifferent([Object, Time]).
 */

 /*  [holds_at(falling(Object), Time), not(happens(hitsGround(Object), Time)), allDifferent([Object, Time])] ->
       ta(Time, holds_at(neg(height(Object, 0)), Time)).
 */
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitsGround(Object), Time)),
      allDifferent([Object, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6843
%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6849
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          initiates(hitsGround(Object),
                    height(Object, Height),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6850
axiom(initiates(hitsGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6852
% [object,time]
% Terminates(HitsGround(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          terminates(hitsGround(Object), falling(Object), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6853
axiom(terminates(hitsGround(Object), falling(Object), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6855
% object Leaf
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6856
==> t(object,leaf).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6857
% !HoldsAt(Falling(Leaf),0).
 %  not(initially(falling(leaf))).

 /*  [] ->
       ta(Ta_Param, not(initially(falling(leaf)))).
 */
axiom(not(initially(falling(leaf))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6858
% HoldsAt(Height(Leaf,4),0).

 /*  [] ->
       ta(Ta_Param, initially(height(leaf, 4))).
 */
axiom(initially(height(leaf, 4)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6859
% Happens(StartFalling(Leaf),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(startFalling(leaf), t2)).
 */
axiom(happens(startFalling(leaf), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6861
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6862
==> completion(happens).

% range time 0 7
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6864
==> range(time,0,7).

% range offset 1 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6865
==> range(offset,1,4).

% range height 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6866
==> range(height,0,4).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6896
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6897
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6898
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6900
==> sort(agent).

% fluent Tired(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6902
fluent(tired(Tired_Ret)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% event Move(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6904
event(move(Move_Ret)).
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% event Run(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6905
event(run(Run_Ret)).
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% event Drive(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6906
event(drive(Drive_Ret)).
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6907
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( happens(move(Agent), Time)->happens(run(Agent), Time);happens(drive(Agent), Time)
       ).
 */

 /*  happens(run(Agent), Time) :-
       not(happens(drive(Agent), Time)),
       happens(move(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [not(happens(drive(Agent), Time)), happens(move(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, happens(run(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6909
axiom(happens(run(Agent), Time),
   
    [ not(happens(drive(Agent), Time)),
      happens(move(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  happens(drive(Agent), Time) :-
       not(happens(run(Agent), Time)),
       happens(move(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [not(happens(run(Agent), Time)), happens(move(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, happens(drive(Agent), Time)).
 */
axiom(happens(drive(Agent), Time),
   
    [ not(happens(run(Agent), Time)),
      happens(move(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(happens(move(Agent), Time)) :-
       ( not(happens(run(Agent), Time)),
         not(happens(drive(Agent), Time))
       ),
       allDifferent([Agent, Time]).
 */

 /*  [not(happens(run(Agent), Time)), not(happens(drive(Agent), Time)), allDifferent([Agent, Time])] ->
       ta(Time, not(happens(move(Agent), Time))).
 */
axiom(not(happens(move(Agent), Time)),
   
    [ not(happens(run(Agent), Time)),
      not(happens(drive(Agent), Time)),
      allDifferent([Agent, Time])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6911
% xor Run, Drive
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6912
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6913
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).

 /*  [] ->
       ta(Time, initiates(run(Agent), tired(Agent), Time)).
 */
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6915
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6916
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6917
% !HoldsAt(Tired(James),0).
 %  not(initially(tired(james))).

 /*  [] ->
       ta(Ta_Param, not(initially(tired(james)))).
 */
axiom(not(initially(tired(james))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6918
% Happens(Move(James),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(move(james), t)).
 */
axiom(happens(move(james), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6919
% HoldsAt(Tired(James),1).
holds_at(tired(james),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6921
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6922
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6923
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6953
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6954
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6955
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6957
==> sort(agent).

% sort switch
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6958
==> sort(switch).

% sort tv
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6959
==> sort(tv).

% function TVOf(switch): tv
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6961
functional_predicate(tVOf(TVOf_Param,TVOf_Ret)).
==> mpred_prop(tVOf(switch,tv),functional_predicate).
==> meta_argtypes(tVOf(switch,tv)).
==> resultIsa(tVOf,tv).

% fluent SwitchOn(switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6962
fluent(switchOn(SwitchOn_Ret)).
==> mpred_prop(switchOn(switch),fluent).
==> meta_argtypes(switchOn(switch)).

% fluent TVOn(tv)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6963
fluent(tVOn(TVOn_Ret)).
==> mpred_prop(tVOn(tv),fluent).
==> meta_argtypes(tVOn(tv)).

% fluent PluggedIn(tv)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6964
fluent(pluggedIn(PluggedIn_Ret)).
==> mpred_prop(pluggedIn(tv),fluent).
==> meta_argtypes(pluggedIn(tv)).

% event TurnOn(agent,switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6965
event(turnOn(TurnOn_Param,TurnOn_Ret)).
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% event TurnOff(agent,switch)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6966
event(turnOff(TurnOff_Param,TurnOff_Ret)).
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6967
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).

 /*  [] ->
       ta(Time,
          initiates(turnOn(Agent, Switch),
                    switchOn(Switch),
                    Time)).
 */
axiom(initiates(turnOn(Agent, Switch), switchOn(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6969
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).

 /*  axiom_head(Time) ->
       equals(tVOf(Switch), Tv).
 */

 /*  fix_axiom_head(Time) ->
       call(tVOf(Switch)=Tv).
 */

 /*  [call(tVOf(Switch)=Tv), holds_at(pluggedIn(Tv), Time)] ->
       ta(Time,
          initiates(turnOn(Agent, Switch), tVOn(Tv), Time)).
 */

 /*  [holds_at(call(tVOf(Switch)=Tv), Time), holds_at(pluggedIn(Tv), Time)] ->
       ta(Time,
          initiates(turnOn(Agent, Switch), tVOn(Tv), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6971
axiom(initiates(turnOn(Agent, Switch), tVOn(Tv), Time),
   
    [ holds_at(call(tVOf(Switch)=Tv), Time),
      holds_at(pluggedIn(Tv), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6973
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6974
==> t(agent,james).

% switch Switch1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6975
==> t(switch,switch1).

% tv TV1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6976
==> t(tv,tv1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6977
% TVOf(Switch1)=TV1.
tVOf(switch1,tv1).

 /*  axiom_head(Axiom_head_Ret) ->
       tVOf(switch1, tv1).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(tVOf(switch1, tv1), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6978
% HoldsAt(PluggedIn(TV1),0).

 /*  [] ->
       ta(Ta_Param, initially(pluggedIn(tv1))).
 */
axiom(initially(pluggedIn(tv1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6979
% !HoldsAt(SwitchOn(Switch1),0).
 %  not(initially(switchOn(switch1))).

 /*  [] ->
       ta(Ta_Param, not(initially(switchOn(switch1)))).
 */
axiom(not(initially(switchOn(switch1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6980
% !HoldsAt(TVOn(TV1),0).
 %  not(initially(tVOn(tv1))).

 /*  [] ->
       ta(Ta_Param, not(initially(tVOn(tv1)))).
 */
axiom(not(initially(tVOn(tv1))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6981
% Happens(TurnOn(James,Switch1),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(turnOn(james, switch1), t)).
 */
axiom(happens(turnOn(james, switch1), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6983
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6984
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6985
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7015
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7016
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7017
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort wheel
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7019
==> sort(wheel).

% sort value: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7020
==> subsort(value,integer).

% fluent WheelValueDeterminingFluent(wheel,value)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7022
fluent(wheelValueDeterminingFluent(WheelValueDeterminingFluent_Param,
				   WheelValueDeterminingFluent_Ret)).
==> mpred_prop(wheelValueDeterminingFluent(wheel,value),fluent).
==> meta_argtypes(wheelValueDeterminingFluent(wheel,value)).

% fluent WheelValue(wheel,value)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7023
fluent(wheelValue(WheelValue_Param,WheelValue_Ret)).
==> mpred_prop(wheelValue(wheel,value),fluent).
==> meta_argtypes(wheelValue(wheel,value)).

% noninertial WheelValueDeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7024
==> noninertial(wheelValueDeterminingFluent).

% event Spin(wheel)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7025
event(spin(Spin_Ret)).
==> mpred_prop(spin(wheel),event).
==> meta_argtypes(spin(wheel)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7026
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValue(wheel,value2),time) ->
% value1=value2.

 /*  allDifferent([Wheel, Value1, Time, Value2]) ->
       ( holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValue(Wheel, Value2), Time)->Value1=Value2
       ).
 */

 /*  not(holds_at(wheelValue(Wheel, Value1), Time)) :-
       holds_at(wheelValue(Wheel, Value2), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelValue(Wheel, Value2), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValue(Wheel, Value1)), Time)).
 */

 /*  [holds_at(wheelValue(Wheel, Value2), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValue(Wheel, Value1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7029
axiom(holds_at(neg(wheelValue(Wheel, Value1)), Time),
   
    [ holds_at(wheelValue(Wheel, Value2), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).

 /*  not(holds_at(wheelValue(Wheel, Value2), Time)) :-
       holds_at(wheelValue(Wheel, Value1), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelValue(Wheel, Value1), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValue(Wheel, Value2)), Time)).
 */

 /*  [holds_at(wheelValue(Wheel, Value1), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValue(Wheel, Value2)), Time)).
 */
axiom(holds_at(neg(wheelValue(Wheel, Value2)), Time),
   
    [ holds_at(wheelValue(Wheel, Value1), Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7031
% [wheel,value1,value2,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) ->
% value1=value2.

 /*  allDifferent([Wheel, Value1, Time, Value2]) ->
       ( holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time)->Value1=Value2
       ).
 */

 /*  not(holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time)) :-
       holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValueDeterminingFluent(Wheel, Value1)),
                   Time)).
 */

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValueDeterminingFluent(Wheel, Value1)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7034
axiom(holds_at(neg(wheelValueDeterminingFluent(Wheel, Value1)), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value2),
               Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).

 /*  not(holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time)) :-
       holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time),
       not(equals(Value1, Value2)),
       allDifferent([Wheel, Value1, Time, Value2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Value1, Value2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Value1=Value2)).
 */

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), not(call(Value1=Value2)), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValueDeterminingFluent(Wheel, Value2)),
                   Time)).
 */

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), holds_at(neg(call(Value1=Value2)), Time), allDifferent([Wheel, Value1, Time, Value2])] ->
       ta(Time,
          holds_at(neg(wheelValueDeterminingFluent(Wheel, Value2)),
                   Time)).
 */
axiom(holds_at(neg(wheelValueDeterminingFluent(Wheel, Value2)), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value1),
               Time),
      holds_at(neg(call(Value1=Value2)), Time),
      allDifferent([Wheel, Value1, Time, Value2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7036
% [wheel,value,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value),time) ->
% Initiates(Spin(wheel),WheelValue(wheel,value),time).

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value), Time)] ->
       ta(Time,
          initiates(spin(Wheel),
                    wheelValue(Wheel, Value),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7038
axiom(initiates(spin(Wheel), wheelValue(Wheel, Value), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7040
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(wheel),WheelValue(wheel,value1),time).

 /*  [holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), diff(Value1, Value2)] ->
       ta(Time,
          terminates(spin(Wheel),
                     wheelValue(Wheel, Value1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7044
axiom(terminates(spin(Wheel), wheelValue(Wheel, Value1), Time),
   
    [ holds_at(wheelValue(Wheel, Value1), Time),
      holds_at(wheelValueDeterminingFluent(Wheel, Value2),
               Time),
      diff(Value1, Value2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7046
% [wheel,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7047
% {value} % HoldsAt(WheelValueDeterminingFluent(wheel,value),time).

 /*  exists([Value],
    holds_at(wheelValueDeterminingFluent(Wheel,Value),
   	 Time)).
 */

 /*  holds_at(wheelValueDeterminingFluent(Wheel, Value), Time) :-
       some(Value, '$kolem_Fn_348'(Wheel, Time)).
 */

 /*  [some(Value, '$kolem_Fn_348'(Wheel, Time))] ->
       ta(Time,
          holds_at(wheelValueDeterminingFluent(Wheel, Value),
                   Time)).
 */
axiom(holds_at(wheelValueDeterminingFluent(Wheel, Value), Time),
    [some(Value, '$kolem_Fn_348'(Wheel, Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7049
% wheel Wheel
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7050
==> t(wheel,wheel).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7051
% HoldsAt(WheelValue(Wheel,7),0).

 /*  [] ->
       ta(Ta_Param, initially(wheelValue(wheel, 7))).
 */
axiom(initially(wheelValue(wheel, 7)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7052
% Happens(Spin(Wheel),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(spin(wheel), t)).
 */
axiom(happens(spin(wheel), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7053
% HoldsAt(WheelValueDeterminingFluent(Wheel,7),1).
holds_at(wheelValueDeterminingFluent(wheel,7),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7055
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7056
==> completion(happens).

% range value 7 10
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7058
==> range(value,7,10).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7059
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7060
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/PickUp.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7090
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7091
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7092
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7094
==> sort(object).

% sort agent: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7095
==> subsort(agent,object).

% sort physobj: object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7096
==> subsort(physobj,object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7097
==> sort(location).

% fluent At(object,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7099
fluent(at(At_Param,Location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% fluent Holding(agent,physobj)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7100
fluent(holding(Holding_Param,Holding_Ret)).
==> mpred_prop(holding(agent,physobj),fluent).
==> meta_argtypes(holding(agent,physobj)).

% event PickUp(agent,physobj)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7101
event(pickUp(PickUp_Param,PickUp_Ret)).
==> mpred_prop(pickUp(agent,physobj),event).
==> meta_argtypes(pickUp(agent,physobj)).

% event SetDown(agent,physobj)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7102
event(setDown(SetDown_Param,SetDown_Ret)).
==> mpred_prop(setDown(agent,physobj),event).
==> meta_argtypes(setDown(agent,physobj)).

% event Move(agent,location,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7103
event(move(Move_Param,_,Move_Ret)).
==> mpred_prop(move(agent,location,location),event).
==> meta_argtypes(move(agent,location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7104
%; state constraints
% [agent,location,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7107
% HoldsAt(At(agent,location),time) &
% HoldsAt(Holding(agent,physobj),time) ->
% HoldsAt(At(physobj,location),time).

 /*  allDifferent([Agent, Location, Time, Physobj]) ->
       ( holds_at(at(Agent, Location), Time), holds_at(holding(Agent, Physobj), Time)->holds_at(at(Physobj, Location), Time)
       ).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       ( holds_at(at(Agent, Location), Time),
         holds_at(holding(Agent, Physobj), Time)
       ),
       allDifferent([Agent, Location, Time, Physobj]).
 */

 /*  [holds_at(at(Agent, Location), Time), holds_at(holding(Agent, Physobj), Time), allDifferent([Agent, Location, Time, Physobj])] ->
       ta(Time, holds_at(at(Physobj, Location), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7109
axiom(holds_at(at(Physobj, Location), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(holding(Agent, Physobj), Time),
      allDifferent([Agent, Location, Time, Physobj])
    ]).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(at(Physobj, Location), Time)),
       allDifferent([Agent, Location, Time, Physobj]).
 */

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(neg(at(Physobj, Location)), Time), allDifferent([Agent, Location, Time, Physobj])] ->
       ta(Time, holds_at(neg(at(Agent, Location)), Time)).
 */
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(neg(at(Physobj, Location)), Time),
      allDifferent([Agent, Location, Time, Physobj])
    ]).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Physobj, Location), Time)),
       allDifferent([Agent, Location, Time, Physobj]).
 */

 /*  [holds_at(at(Agent, Location), Time), holds_at(neg(at(Physobj, Location)), Time), allDifferent([Agent, Location, Time, Physobj])] ->
       ta(Time,
          holds_at(neg(holding(Agent, Physobj)), Time)).
 */
axiom(holds_at(neg(holding(Agent, Physobj)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time),
      allDifferent([Agent, Location, Time, Physobj])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7111
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.

 /*  allDifferent([Object, Location1, Time, Location2]) ->
       ( holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->Location1=Location2
       ).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location2), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */

 /*  [holds_at(at(Object, Location2), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7114
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location1), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */

 /*  [holds_at(at(Object, Location1), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7116
%; effect axioms
% [agent,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7119
% Initiates(Move(agent,location1,location2),At(agent,location2),time).

 /*  [] ->
       ta(Time,
          initiates(move(Agent, Location1, Location2),
                    at(Agent, Location2),
                    Time)).
 */
axiom(initiates(move(Agent, Location1, Location2), at(Agent, Location2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7121
% [agent,location1,location2,time]
% Terminates(Move(agent,location1,location2),At(agent,location1),time).

 /*  [] ->
       ta(Time,
          terminates(move(Agent, Location1, Location2),
                     at(Agent, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7122
axiom(terminates(move(Agent, Location1, Location2), at(Agent, Location1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7124
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).

 /*  [] ->
       ta(Time,
          initiates(pickUp(Agent, Physobj),
                    holding(Agent, Physobj),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7125
axiom(initiates(pickUp(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7127
% [agent,physobj,time]
% Terminates(SetDown(agent,physobj),Holding(agent,physobj),time).

 /*  [] ->
       ta(Time,
          terminates(setDown(Agent, Physobj),
                     holding(Agent, Physobj),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7128
axiom(terminates(setDown(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7130
%; preconditions
% [agent,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7133
% Happens(Move(agent,location1,location2),time) ->
% HoldsAt(At(agent,location1),time).

 /*  allDifferent([Agent, Location1, Location2, Time]) ->
       ( happens(move(Agent, Location1, Location2), Time)->holds_at(at(Agent, Location1), Time)
       ).
 */

 /*  holds_at(at(Agent, Location1), Time) :-
       happens(move(Agent, Location1, Location2), Time),
       allDifferent([Agent, Location1, Location2, Time]).
 */

 /*  [happens(move(Agent, Location1, Location2), Time), allDifferent([Agent, Location1, Location2, Time])] ->
       ta(Time, holds_at(at(Agent, Location1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7134
axiom(holds_at(at(Agent, Location1), Time),
   
    [ happens(move(Agent, Location1, Location2), Time),
      allDifferent([Agent, Location1, Location2, Time])
    ]).

 /*  not(happens(move(Agent, Location1, Location2), Time)) :-
       not(holds_at(at(Agent, Location1), Time)),
       allDifferent([Agent, Location1, Location2, Time]).
 */

 /*  [holds_at(neg(at(Agent, Location1)), Time), allDifferent([Agent, Location1, Location2, Time])] ->
       ta(Time,
          not(happens(move(Agent, Location1, Location2),
                      Time))).
 */
axiom(not(happens(move(Agent, Location1, Location2), Time)),
   
    [ holds_at(neg(at(Agent, Location1)), Time),
      allDifferent([Agent, Location1, Location2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7136
% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7138
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).

 /*  exists([Location],
    happens(pickUp(Agent, Physobj), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */

 /*  not(happens(pickUp(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location, '$kolem_Fn_349'(Agent, Physobj, Time)).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(at(Agent, Location)), Time)
       ;   holds_at(neg(at(Physobj, Location)), Time)
       ).
 */

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_349'(Agent, Physobj, Time))] ->
       ta(Time, not(happens(pickUp(Agent, Physobj), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7139
axiom(not(happens(pickUp(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location, '$kolem_Fn_349'(Agent, Physobj, Time))
    ]).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_349'(Agent, Physobj, Time)).
 */

 /*  [happens(pickUp(Agent, Physobj), Time), some(Location, '$kolem_Fn_349'(Agent, Physobj, Time))] ->
       ta(Time, holds_at(at(Agent, Location), Time)).
 */
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(pickUp(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_349'(Agent, Physobj, Time))
    ]).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_349'(Agent, Physobj, Time)).
 */

 /*  [happens(pickUp(Agent, Physobj), Time), some(Location, '$kolem_Fn_349'(Agent, Physobj, Time))] ->
       ta(Time, holds_at(at(Physobj, Location), Time)).
 */
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(pickUp(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_349'(Agent, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7141
%; releases
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7144
% Releases(PickUp(agent,physobj),At(physobj,location),time).

 /*  [] ->
       ta(Time,
          releases(pickUp(Agent, Physobj),
                   at(Physobj, Location),
                   Time)).
 */
axiom(releases(pickUp(Agent, Physobj), at(Physobj, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7146
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(SetDown(agent,physobj),At(physobj,location),time).

 /*  [holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          initiates(setDown(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7148
axiom(initiates(setDown(Agent, Physobj), at(Physobj, Location), Time),
    [holds_at(at(Agent, Location), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7150
%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(SetDown(agent,physobj),At(physobj,location2),time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7155
% agent James
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7156
==> t(agent,james).

% physobj Coin
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7157
==> t(physobj,coin).

% location L1, L2, L3, L4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7158
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).
==> t(location,l4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7159
% !HoldsAt(Holding(James,Coin),0).
 %  not(initially(holding(james,coin))).

 /*  [] ->
       ta(Ta_Param, not(initially(holding(james, coin)))).
 */
axiom(not(initially(holding(james, coin))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7160
% HoldsAt(At(Coin,L4),0).

 /*  [] ->
       ta(Ta_Param, initially(at(coin, l4))).
 */
axiom(initially(at(coin, l4)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7161
% HoldsAt(At(James,L1),0).

 /*  [] ->
       ta(Ta_Param, initially(at(james, l1))).
 */
axiom(initially(at(james, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7162
% Happens(Move(James,L1,L2),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(move(james, l1, l2), t)).
 */
axiom(happens(move(james, l1, l2), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7163
% Happens(Move(James,L2,L3),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(move(james, l2, l3), start)).
 */
axiom(happens(move(james, l2, l3), start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7164
% Happens(Move(James,L3,L4),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(move(james, l3, l4), t2)).
 */
axiom(happens(move(james, l3, l4), t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7165
% Happens(PickUp(James,Coin),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(pickUp(james, coin), t3)).
 */
axiom(happens(pickUp(james, coin), t3),
    [holds_at(is_time(3), t3), b(t, t3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7166
% Happens(Move(James,L4,L3),4).

 /*  axiom_head(4) ->
       is_time(4).
 */

 /*  fix_axiom_head(4) ->
       holds_at(is_time(4), 4).
 */

 /*  [holds_at(is_time(4), t4), b(t, t4), ignore(t+4==t4)] ->
       ta(4, happens(move(james, l4, l3), t4)).
 */
axiom(happens(move(james, l4, l3), t4),
    [holds_at(is_time(4), t4), b(t, t4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7167
% Happens(Move(James,L3,L2),5).

 /*  axiom_head(5) ->
       is_time(5).
 */

 /*  fix_axiom_head(5) ->
       holds_at(is_time(5), 5).
 */

 /*  [holds_at(is_time(5), t5), b(t, t5), ignore(t+5==t5)] ->
       ta(5, happens(move(james, l3, l2), t5)).
 */
axiom(happens(move(james, l3, l2), t5),
    [holds_at(is_time(5), t5), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7168
% Happens(SetDown(James,Coin),6).

 /*  axiom_head(6) ->
       is_time(6).
 */

 /*  fix_axiom_head(6) ->
       holds_at(is_time(6), 6).
 */

 /*  [holds_at(is_time(6), t6), b(t, t6), ignore(t+6==t6)] ->
       ta(6, happens(setDown(james, coin), t6)).
 */
axiom(happens(setDown(james, coin), t6),
    [holds_at(is_time(6), t6), b(t, t6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7169
% Happens(Move(James,L2,L3),7).

 /*  axiom_head(7) ->
       is_time(7).
 */

 /*  fix_axiom_head(7) ->
       holds_at(is_time(7), 7).
 */

 /*  [holds_at(is_time(7), t7), b(t, t7), ignore(t+7==t7)] ->
       ta(7, happens(move(james, l2, l3), t7)).
 */
axiom(happens(move(james, l2, l3), t7),
    [holds_at(is_time(7), t7), b(t, t7)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7170
% Happens(Move(James,L3,L4),8).

 /*  axiom_head(8) ->
       is_time(8).
 */

 /*  fix_axiom_head(8) ->
       holds_at(is_time(8), 8).
 */

 /*  [holds_at(is_time(8), t8), b(t, t8), ignore(t+8==t8)] ->
       ta(8, happens(move(james, l3, l4), t8)).
 */
axiom(happens(move(james, l3, l4), t8),
    [holds_at(is_time(8), t8), b(t, t8)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7172
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7173
==> completion(happens).

% range time 0 9
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7175
==> range(time,0,9).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7176
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/Story1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7204
% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7205
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7207
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7208
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort agent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7210
==> sort(agent).

% load examples/FrankEtAl2003/FrankEtAl.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
:- load_e('examples/FrankEtAl2003/FrankEtAl.e', changed).
:- if(false).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/FrankEtAl2003/FrankEtAl.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% fluent SunShining()
fluent(sunShining).
==> mpred_prop(sunShining,fluent).

% fluent Raining()
fluent(raining).
==> mpred_prop(raining,fluent).

% fluent Outside(agent)
fluent(outside(Outside_Ret)).
==> mpred_prop(outside(agent),fluent).
==> meta_argtypes(outside(agent)).

% fluent PlaySoccer(agent)
fluent(playSoccer(PlaySoccer_Ret)).
==> mpred_prop(playSoccer(agent),fluent).
==> meta_argtypes(playSoccer(agent)).

% fluent PlayHideAndSeek(agent)
fluent(playHideAndSeek(PlayHideAndSeek_Ret)).
==> mpred_prop(playHideAndSeek(agent),fluent).
==> meta_argtypes(playHideAndSeek(agent)).

% fluent PlayComputerGame(agent)
fluent(playComputerGame(PlayComputerGame_Ret)).
==> mpred_prop(playComputerGame(agent),fluent).
==> meta_argtypes(playComputerGame(agent)).

% fluent PlayWithDog(agent)
fluent(playWithDog(PlayWithDog_Ret)).
==> mpred_prop(playWithDog(agent),fluent).
==> meta_argtypes(playWithDog(agent)).

% fluent Win(agent)
fluent(win(Win_Ret)).
==> mpred_prop(win(agent),fluent).
==> meta_argtypes(win(agent)).

% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
==> noninertial(outside).
==> noninertial(playSoccer).
==> noninertial(playHideAndSeek).
==> noninertial(playComputerGame).

% noninertial PlayWithDog, Win
==> noninertial(playWithDog).
==> noninertial(win).

% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
==> xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playSoccer(Agent), Time)->holds_at(outside(Agent), Time)
       ).
 */

 /*  holds_at(outside(Agent), Time) :-
       holds_at(playSoccer(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(outside(Agent), Time)).
 */
axiom(holds_at(outside(Agent), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       not(holds_at(outside(Agent), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(outside(Agent)), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(neg(outside(Agent)), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(playSoccer(Agent), Time)->exists([Agent1],  (diff(Agent1, Agent), holds_at(playSoccer(Agent1), Time)))
       ).
 */

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playSoccer(Agent1), Time))
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playSoccer(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   holds_at(neg(playSoccer(Agent1)), Time)
       ).
 */

 /*  [(not(diff(Agent1, Agent));holds_at(neg(playSoccer(Agent1)), Time)), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [  (not(diff(Agent1, Agent));holds_at(neg(playSoccer(Agent1)), Time)),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playSoccer(Agent1), Time) :-
       holds_at(playSoccer(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(playSoccer(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playSoccer(Agent1), Time)).
 */
axiom(holds_at(playSoccer(Agent1), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(playHideAndSeek(Agent), Time)->exists([Agent1],  (diff(Agent1, Agent), holds_at(playHideAndSeek(Agent1), Time)))
       ).
 */

 /*  not(holds_at(playHideAndSeek(Agent), Time)) :-
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playHideAndSeek(Agent1), Time))
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playHideAndSeek(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   holds_at(neg(playHideAndSeek(Agent1)), Time)
       ).
 */

 /*  [(not(diff(Agent1, Agent));holds_at(neg(playHideAndSeek(Agent1)), Time)), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent)), Time)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent)), Time),
   
    [  (not(diff(Agent1, Agent));holds_at(neg(playHideAndSeek(Agent1)), Time)),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playHideAndSeek(Agent1), Time) :-
       holds_at(playHideAndSeek(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(playHideAndSeek(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playHideAndSeek(Agent1), Time)).
 */
axiom(holds_at(playHideAndSeek(Agent1), Time),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playComputerGame(Agent), Time)->holds_at(neg(outside(Agent)), Time)
       ).
 */

 /*  holds_at(neg(outside(Agent)), Time) :-
       holds_at(playComputerGame(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playComputerGame(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(outside(Agent)), Time)).
 */
axiom(holds_at(neg(outside(Agent)), Time),
   
    [ holds_at(playComputerGame(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(holds_at(playComputerGame(Agent), Time)) :-
       not(holds_at(neg(outside(Agent)), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(outside(Agent))), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(playComputerGame(Agent)), Time)).
 */
axiom(holds_at(neg(playComputerGame(Agent)), Time),
   
    [ holds_at(neg(neg(outside(Agent))), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(win(Agent), Time)->holds_at(playSoccer(Agent), Time);holds_at(playHideAndSeek(Agent), Time);holds_at(playComputerGame(Agent), Time), exists([Agent1],  (diff(Agent1, Agent), holds_at(playComputerGame(Agent1), Time)))
       ).
 */

 /*  not(holds_at(win(Agent), Time)) :-
       ( not(holds_at(playSoccer(Agent), Time)),
         not(holds_at(playHideAndSeek(Agent), Time)),
         (   not(holds_at(playComputerGame(Agent), Time))
         ;   not(diff(Agent1, Agent))
         ;   not(holds_at(playComputerGame(Agent1), Time))
         )
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(playComputerGame(Agent)), Time)
       ;   not(diff(Agent1, Agent))
       ;   holds_at(neg(playComputerGame(Agent1)), Time)
       ).
 */

 /*  [holds_at(neg(playSoccer(Agent)), Time), holds_at(neg(playHideAndSeek(Agent)), Time),  (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(neg(playSoccer(Agent)), Time),
      holds_at(neg(playHideAndSeek(Agent)), Time),
       (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playSoccer(Agent), Time) :-
       ( not(holds_at(playHideAndSeek(Agent), Time)),
         (   not(holds_at(playComputerGame(Agent), Time))
         ;   not(diff(Agent1, Agent))
         ;   not(holds_at(playComputerGame(Agent1), Time))
         )
       ),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(playComputerGame(Agent)), Time)
       ;   not(diff(Agent1, Agent))
       ;   holds_at(neg(playComputerGame(Agent1)), Time)
       ).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time),  (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playSoccer(Agent), Time)).
 */
axiom(holds_at(playSoccer(Agent), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
       (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playHideAndSeek(Agent), Time) :-
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(playComputerGame(Agent)), Time)
       ;   not(diff(Agent1, Agent))
       ;   holds_at(neg(playComputerGame(Agent1)), Time)
       ).
 */

 /*  [(holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playHideAndSeek(Agent), Time)).
 */
axiom(holds_at(playHideAndSeek(Agent), Time),
   
    [  (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playComputerGame(Agent), Time) :-
       not(holds_at(playHideAndSeek(Agent), Time)),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playComputerGame(Agent), Time)).
 */
axiom(holds_at(playComputerGame(Agent), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playComputerGame(Agent1), Time) :-
       not(holds_at(playHideAndSeek(Agent), Time)),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playComputerGame(Agent1), Time)).
 */
axiom(holds_at(playComputerGame(Agent1), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time)->holds_at(neg(playSoccer(Agent)), Time+1)
       ).
 */

 /*  holds_at(neg(playSoccer(Agent)), Time+1) :-
       ( holds_at(playSoccer(Agent), Time),
         holds_at(win(Agent), Time)
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time2)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time2),
   
    [ holds_at(playSoccer(Agent), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time, Time2)
    ]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playSoccer(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(win(Agent), Time), holds_at(neg(neg(playSoccer(Agent))), Time3), allDifferent([Agent, Time]), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(neg(neg(playSoccer(Agent))), Time3),
      allDifferent([Agent, Time]),
      b(Time, Time3)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playSoccer(Agent), Time),
       not(holds_at(neg(playSoccer(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), holds_at(neg(neg(playSoccer(Agent))), Time4), allDifferent([Agent, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      holds_at(neg(neg(playSoccer(Agent))), Time4),
      allDifferent([Agent, Time]),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time)->holds_at(neg(playHideAndSeek(Agent)), Time+1)
       ).
 */

 /*  holds_at(neg(playHideAndSeek(Agent)), Time+1) :-
       ( holds_at(playHideAndSeek(Agent), Time),
         holds_at(win(Agent), Time)
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent)), Time2)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent)), Time2),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time, Time2)
    ]).

 /*  not(holds_at(playHideAndSeek(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playHideAndSeek(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(win(Agent), Time), holds_at(neg(neg(playHideAndSeek(Agent))), Time3), allDifferent([Agent, Time]), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent)), Time)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(neg(neg(playHideAndSeek(Agent))), Time3),
      allDifferent([Agent, Time]),
      b(Time, Time3)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playHideAndSeek(Agent), Time),
       not(holds_at(neg(playHideAndSeek(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playHideAndSeek(Agent), Time), holds_at(neg(neg(playHideAndSeek(Agent))), Time4), allDifferent([Agent, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      holds_at(neg(neg(playHideAndSeek(Agent))), Time4),
      allDifferent([Agent, Time]),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time)->holds_at(neg(playComputerGame(Agent)), Time+1)
       ).
 */

 /*  holds_at(neg(playComputerGame(Agent)), Time+1) :-
       ( holds_at(playComputerGame(Agent), Time),
         holds_at(win(Agent), Time)
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time, holds_at(neg(playComputerGame(Agent)), Time2)).
 */
axiom(holds_at(neg(playComputerGame(Agent)), Time2),
   
    [ holds_at(playComputerGame(Agent), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time, Time2)
    ]).

 /*  not(holds_at(playComputerGame(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playComputerGame(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(win(Agent), Time), holds_at(neg(neg(playComputerGame(Agent))), Time3), allDifferent([Agent, Time]), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time, holds_at(neg(playComputerGame(Agent)), Time)).
 */
axiom(holds_at(neg(playComputerGame(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(neg(neg(playComputerGame(Agent))), Time3),
      allDifferent([Agent, Time]),
      b(Time, Time3)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playComputerGame(Agent), Time),
       not(holds_at(neg(playComputerGame(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playComputerGame(Agent), Time), holds_at(neg(neg(playComputerGame(Agent))), Time4), allDifferent([Agent, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playComputerGame(Agent), Time),
      holds_at(neg(neg(playComputerGame(Agent))), Time4),
      allDifferent([Agent, Time]),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(win(Agent), Time)->holds_at(playSoccer(Agent), Time-1);holds_at(playHideAndSeek(Agent), Time-1);holds_at(playComputerGame(Agent), Time-1)
       ).
 */

 /*  holds_at(playSoccer(Agent), Time-1) :-
       ( not(holds_at(playHideAndSeek(Agent), Time-1)),
         not(holds_at(playComputerGame(Agent), Time-1))
       ),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time2), holds_at(neg(playComputerGame(Agent)), Time2), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(playSoccer(Agent), Time2)).
 */
axiom(holds_at(playSoccer(Agent), Time2),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time2),
      holds_at(neg(playComputerGame(Agent)), Time2),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time2, Time)
    ]).

 /*  holds_at(playHideAndSeek(Agent), Time-1) :-
       not(holds_at(playComputerGame(Agent), Time-1)),
       not(holds_at(playSoccer(Agent), Time-1)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playComputerGame(Agent)), Time3), holds_at(neg(playSoccer(Agent)), Time3), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(playHideAndSeek(Agent), Time3)).
 */
axiom(holds_at(playHideAndSeek(Agent), Time3),
   
    [ holds_at(neg(playComputerGame(Agent)), Time3),
      holds_at(neg(playSoccer(Agent)), Time3),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time3, Time)
    ]).

 /*  holds_at(playComputerGame(Agent), Time-1) :-
       not(holds_at(playHideAndSeek(Agent), Time-1)),
       not(holds_at(playSoccer(Agent), Time-1)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time4), holds_at(neg(playSoccer(Agent)), Time4), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(playComputerGame(Agent), Time4)).
 */
axiom(holds_at(playComputerGame(Agent), Time4),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time4),
      holds_at(neg(playSoccer(Agent)), Time4),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time4, Time)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       ( not(holds_at(playSoccer(Agent), Time-1)),
         not(holds_at(playHideAndSeek(Agent), Time-1)),
         not(holds_at(playComputerGame(Agent), Time-1))
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playSoccer(Agent)), Time5), holds_at(neg(playHideAndSeek(Agent)), Time5), holds_at(neg(playComputerGame(Agent)), Time5), allDifferent([Agent, Time]), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(neg(playSoccer(Agent)), Time5),
      holds_at(neg(playHideAndSeek(Agent)), Time5),
      holds_at(neg(playComputerGame(Agent)), Time5),
      allDifferent([Agent, Time]),
      b(Time5, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playSoccer(Agent), Time)->holds_at(neg(raining), Time)
       ).
 */

 /*  holds_at(neg(raining), Time) :-
       holds_at(playSoccer(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(raining), Time)).
 */
axiom(holds_at(neg(raining), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       not(holds_at(neg(raining), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(raining)), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(neg(neg(raining)), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(win(Agent), Time)->not(exists([Agent1],  (diff(Agent1, Agent), holds_at(win(Agent1), Time))))
       ).
 */

 /*  not(holds_at(win(Agent1), Time)) :-
       diff(Agent1, Agent),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [diff(Agent1, Agent), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(win(Agent1)), Time)).
 */
axiom(holds_at(neg(win(Agent1)), Time),
   
    [ diff(Agent1, Agent),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       ( diff(Agent1, Agent),
         holds_at(win(Agent1), Time)
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [diff(Agent1, Agent), holds_at(win(Agent1), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ diff(Agent1, Agent),
      holds_at(win(Agent1), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).

 /*  allDifferent([Agent1, Time, Agent2]) ->
       ( holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)->holds_at(outside(Agent1), Time), holds_at(outside(Agent2), Time);holds_at(neg(outside(Agent1)), Time), holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  not(holds_at(playHideAndSeek(Agent1), Time)) :-
       holds_at(playHideAndSeek(Agent2), Time),
       ( (   not(holds_at(outside(Agent1), Time))
         ;   not(holds_at(outside(Agent2), Time))
         ),
         (   not(holds_at(neg(outside(Agent1)), Time))
         ;   not(holds_at(neg(outside(Agent2)), Time))
         )
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [holds_at(playHideAndSeek(Agent2), Time),  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent1)), Time)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent1)), Time),
   
    [ holds_at(playHideAndSeek(Agent2), Time),
       (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
       (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  not(holds_at(playHideAndSeek(Agent2), Time)) :-
       holds_at(playHideAndSeek(Agent1), Time),
       ( (   not(holds_at(outside(Agent1), Time))
         ;   not(holds_at(outside(Agent2), Time))
         ),
         (   not(holds_at(neg(outside(Agent1)), Time))
         ;   not(holds_at(neg(outside(Agent2)), Time))
         )
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [holds_at(playHideAndSeek(Agent1), Time),  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent2)), Time)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent2)), Time),
   
    [ holds_at(playHideAndSeek(Agent1), Time),
       (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
       (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(outside(Agent1), Time) :-
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(outside(Agent1), Time)).
 */
axiom(holds_at(outside(Agent1), Time),
   
    [  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(outside(Agent2), Time) :-
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(outside(Agent2), Time)).
 */
axiom(holds_at(outside(Agent2), Time),
   
    [  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(neg(outside(Agent1)), Time) :-
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  [(holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(outside(Agent1)), Time)).
 */
axiom(holds_at(neg(outside(Agent1)), Time),
   
    [  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(neg(outside(Agent2)), Time) :-
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  [(holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(outside(Agent2)), Time)).
 */
axiom(holds_at(neg(outside(Agent2)), Time),
   
    [  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7212
%; End of file.
:- endif.

% agent Bob, Jilly
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7214
==> t(agent,bob).
==> t(agent,jilly).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7215
% !HoldsAt(Raining(),0).
 %  not(initially(raining)).

 /*  [] ->
       ta(Ta_Param, not(initially(raining))).
 */
axiom(not(initially(raining)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7216
% !HoldsAt(SunShining(),0).
 %  not(initially(sunShining)).

 /*  [] ->
       ta(Ta_Param, not(initially(sunShining))).
 */
axiom(not(initially(sunShining)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7218
% (HoldsAt(PlaySoccer(Bob),1) & HoldsAt(PlaySoccer(Jilly),1)) |
% (HoldsAt(PlayHideAndSeek(Bob),1) & HoldsAt(PlayHideAndSeek(Jilly),1)) |
% (HoldsAt(PlayComputerGame(Bob),1) & HoldsAt(PlayComputerGame(Jilly),1)).

 /*   (   holds_at(playSoccer(bob), 1),
          holds_at(playSoccer(jilly), 1)
      ;   holds_at(playHideAndSeek(bob), 1),
          holds_at(playHideAndSeek(jilly), 1)
      ;   holds_at(playComputerGame(bob), 1),
          holds_at(playComputerGame(jilly), 1)
      ).
 */

 /*  holds_at(playSoccer(bob), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playHideAndSeek(bob)), 1)
       ;   holds_at(neg(playHideAndSeek(jilly)), 1)
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playComputerGame(bob)), 1)
       ;   holds_at(neg(playComputerGame(jilly)), 1)
       ).
 */

 /*  [(holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),  (holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(playSoccer(bob), start)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7220
axiom(holds_at(playSoccer(bob), start),
   
    [  (holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),
       (holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)),
      b(t, start)
    ]).

 /*  holds_at(playSoccer(jilly), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playHideAndSeek(bob)), 1)
       ;   holds_at(neg(playHideAndSeek(jilly)), 1)
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playComputerGame(bob)), 1)
       ;   holds_at(neg(playComputerGame(jilly)), 1)
       ).
 */

 /*  [(holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),  (holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(playSoccer(jilly), start)).
 */
axiom(holds_at(playSoccer(jilly), start),
   
    [  (holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),
       (holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)),
      b(t, start)
    ]).

 /*  holds_at(playHideAndSeek(bob), 1) :-
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playComputerGame(bob)), 1)
       ;   holds_at(neg(playComputerGame(jilly)), 1)
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playSoccer(bob)), 1)
       ;   holds_at(neg(playSoccer(jilly)), 1)
       ).
 */

 /*  [(holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)),  (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(playHideAndSeek(bob), start)).
 */
axiom(holds_at(playHideAndSeek(bob), start),
   
    [  (holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)),
       (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)),
      b(t, start)
    ]).

 /*  holds_at(playHideAndSeek(jilly), 1) :-
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playComputerGame(bob), 1))
       ;   not(holds_at(playComputerGame(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playComputerGame(bob)), 1)
       ;   holds_at(neg(playComputerGame(jilly)), 1)
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playSoccer(bob)), 1)
       ;   holds_at(neg(playSoccer(jilly)), 1)
       ).
 */

 /*  [(holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)),  (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(playHideAndSeek(jilly), start)).
 */
axiom(holds_at(playHideAndSeek(jilly), start),
   
    [  (holds_at(neg(playComputerGame(bob)), 1);holds_at(neg(playComputerGame(jilly)), 1)),
       (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)),
      b(t, start)
    ]).

 /*  holds_at(playComputerGame(bob), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playHideAndSeek(bob)), 1)
       ;   holds_at(neg(playHideAndSeek(jilly)), 1)
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playSoccer(bob)), 1)
       ;   holds_at(neg(playSoccer(jilly)), 1)
       ).
 */

 /*  [(holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),  (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(playComputerGame(bob), start)).
 */
axiom(holds_at(playComputerGame(bob), start),
   
    [  (holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),
       (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)),
      b(t, start)
    ]).

 /*  holds_at(playComputerGame(jilly), 1) :-
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ),
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playHideAndSeek(bob), 1))
       ;   not(holds_at(playHideAndSeek(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playHideAndSeek(bob)), 1)
       ;   holds_at(neg(playHideAndSeek(jilly)), 1)
       ).
 */

 /*  axiom_head(1) ->
       (   not(holds_at(playSoccer(bob), 1))
       ;   not(holds_at(playSoccer(jilly), 1))
       ).
 */

 /*  fix_axiom_head(1) ->
       (   holds_at(neg(playSoccer(bob)), 1)
       ;   holds_at(neg(playSoccer(jilly)), 1)
       ).
 */

 /*  [(holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),  (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(playComputerGame(jilly), start)).
 */
axiom(holds_at(playComputerGame(jilly), start),
   
    [  (holds_at(neg(playHideAndSeek(bob)), 1);holds_at(neg(playHideAndSeek(jilly)), 1)),
       (holds_at(neg(playSoccer(bob)), 1);holds_at(neg(playSoccer(jilly)), 1)),
      b(t, start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7222
% HoldsAt(Win(Bob),1) | HoldsAt(Win(Jilly),1).

 /*   (   holds_at(win(bob), 1)
      ;   holds_at(win(jilly), 1)
      ).
 */

 /*  holds_at(win(bob), 1) :-
       not(holds_at(win(jilly), 1)).
 */

 /*  [holds_at(neg(win(jilly)), start), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(win(bob), start)).
 */
axiom(holds_at(win(bob), start),
    [holds_at(neg(win(jilly)), start), b(t, start)]).

 /*  holds_at(win(jilly), 1) :-
       not(holds_at(win(bob), 1)).
 */

 /*  [holds_at(neg(win(bob)), start), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(win(jilly), start)).
 */
axiom(holds_at(win(jilly), start),
    [holds_at(neg(win(bob)), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7224
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7225
==> range(time,0,1).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7226
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/FrankEtAl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7254
% fluent SunShining()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7255
fluent(sunShining).
==> mpred_prop(sunShining,fluent).

% fluent Raining()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7256
fluent(raining).
==> mpred_prop(raining,fluent).

% fluent Outside(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7257
fluent(outside(Outside_Ret)).
==> mpred_prop(outside(agent),fluent).
==> meta_argtypes(outside(agent)).

% fluent PlaySoccer(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7258
fluent(playSoccer(PlaySoccer_Ret)).
==> mpred_prop(playSoccer(agent),fluent).
==> meta_argtypes(playSoccer(agent)).

% fluent PlayHideAndSeek(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7259
fluent(playHideAndSeek(PlayHideAndSeek_Ret)).
==> mpred_prop(playHideAndSeek(agent),fluent).
==> meta_argtypes(playHideAndSeek(agent)).

% fluent PlayComputerGame(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7260
fluent(playComputerGame(PlayComputerGame_Ret)).
==> mpred_prop(playComputerGame(agent),fluent).
==> meta_argtypes(playComputerGame(agent)).

% fluent PlayWithDog(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7261
fluent(playWithDog(PlayWithDog_Ret)).
==> mpred_prop(playWithDog(agent),fluent).
==> meta_argtypes(playWithDog(agent)).

% fluent Win(agent)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7262
fluent(win(Win_Ret)).
==> mpred_prop(win(agent),fluent).
==> meta_argtypes(win(agent)).

% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7264
==> noninertial(outside).
==> noninertial(playSoccer).
==> noninertial(playHideAndSeek).
==> noninertial(playComputerGame).

% noninertial PlayWithDog, Win
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7265
==> noninertial(playWithDog).
==> noninertial(win).

% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7267
==> xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7268
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playSoccer(Agent), Time)->holds_at(outside(Agent), Time)
       ).
 */

 /*  holds_at(outside(Agent), Time) :-
       holds_at(playSoccer(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(outside(Agent), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7270
axiom(holds_at(outside(Agent), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       not(holds_at(outside(Agent), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(outside(Agent)), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(neg(outside(Agent)), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7272
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(playSoccer(Agent), Time)->exists([Agent1],  (diff(Agent1, Agent), holds_at(playSoccer(Agent1), Time)))
       ).
 */

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playSoccer(Agent1), Time))
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playSoccer(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   holds_at(neg(playSoccer(Agent1)), Time)
       ).
 */

 /*  [(not(diff(Agent1, Agent));holds_at(neg(playSoccer(Agent1)), Time)), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7274
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [  (not(diff(Agent1, Agent));holds_at(neg(playSoccer(Agent1)), Time)),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playSoccer(Agent1), Time) :-
       holds_at(playSoccer(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(playSoccer(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playSoccer(Agent1), Time)).
 */
axiom(holds_at(playSoccer(Agent1), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7276
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(playHideAndSeek(Agent), Time)->exists([Agent1],  (diff(Agent1, Agent), holds_at(playHideAndSeek(Agent1), Time)))
       ).
 */

 /*  not(holds_at(playHideAndSeek(Agent), Time)) :-
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playHideAndSeek(Agent1), Time))
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playHideAndSeek(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Agent1, Agent))
       ;   holds_at(neg(playHideAndSeek(Agent1)), Time)
       ).
 */

 /*  [(not(diff(Agent1, Agent));holds_at(neg(playHideAndSeek(Agent1)), Time)), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7278
axiom(holds_at(neg(playHideAndSeek(Agent)), Time),
   
    [  (not(diff(Agent1, Agent));holds_at(neg(playHideAndSeek(Agent1)), Time)),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playHideAndSeek(Agent1), Time) :-
       holds_at(playHideAndSeek(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(playHideAndSeek(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playHideAndSeek(Agent1), Time)).
 */
axiom(holds_at(playHideAndSeek(Agent1), Time),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7280
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playComputerGame(Agent), Time)->holds_at(neg(outside(Agent)), Time)
       ).
 */

 /*  holds_at(neg(outside(Agent)), Time) :-
       holds_at(playComputerGame(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playComputerGame(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(outside(Agent)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7282
axiom(holds_at(neg(outside(Agent)), Time),
   
    [ holds_at(playComputerGame(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(holds_at(playComputerGame(Agent), Time)) :-
       not(holds_at(neg(outside(Agent)), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(outside(Agent))), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(playComputerGame(Agent)), Time)).
 */
axiom(holds_at(neg(playComputerGame(Agent)), Time),
   
    [ holds_at(neg(neg(outside(Agent))), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7284
% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(win(Agent), Time)->holds_at(playSoccer(Agent), Time);holds_at(playHideAndSeek(Agent), Time);holds_at(playComputerGame(Agent), Time), exists([Agent1],  (diff(Agent1, Agent), holds_at(playComputerGame(Agent1), Time)))
       ).
 */

 /*  not(holds_at(win(Agent), Time)) :-
       ( not(holds_at(playSoccer(Agent), Time)),
         not(holds_at(playHideAndSeek(Agent), Time)),
         (   not(holds_at(playComputerGame(Agent), Time))
         ;   not(diff(Agent1, Agent))
         ;   not(holds_at(playComputerGame(Agent1), Time))
         )
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(playComputerGame(Agent)), Time)
       ;   not(diff(Agent1, Agent))
       ;   holds_at(neg(playComputerGame(Agent1)), Time)
       ).
 */

 /*  [holds_at(neg(playSoccer(Agent)), Time), holds_at(neg(playHideAndSeek(Agent)), Time),  (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7289
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(neg(playSoccer(Agent)), Time),
      holds_at(neg(playHideAndSeek(Agent)), Time),
       (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playSoccer(Agent), Time) :-
       ( not(holds_at(playHideAndSeek(Agent), Time)),
         (   not(holds_at(playComputerGame(Agent), Time))
         ;   not(diff(Agent1, Agent))
         ;   not(holds_at(playComputerGame(Agent1), Time))
         )
       ),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(playComputerGame(Agent)), Time)
       ;   not(diff(Agent1, Agent))
       ;   holds_at(neg(playComputerGame(Agent1)), Time)
       ).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time),  (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playSoccer(Agent), Time)).
 */
axiom(holds_at(playSoccer(Agent), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
       (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playHideAndSeek(Agent), Time) :-
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(playComputerGame(Agent)), Time)
       ;   not(diff(Agent1, Agent))
       ;   holds_at(neg(playComputerGame(Agent1)), Time)
       ).
 */

 /*  [(holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playHideAndSeek(Agent), Time)).
 */
axiom(holds_at(playHideAndSeek(Agent), Time),
   
    [  (holds_at(neg(playComputerGame(Agent)), Time);not(diff(Agent1, Agent));holds_at(neg(playComputerGame(Agent1)), Time)),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playComputerGame(Agent), Time) :-
       not(holds_at(playHideAndSeek(Agent), Time)),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playComputerGame(Agent), Time)).
 */
axiom(holds_at(playComputerGame(Agent), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  holds_at(playComputerGame(Agent1), Time) :-
       not(holds_at(playHideAndSeek(Agent), Time)),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(playComputerGame(Agent1), Time)).
 */
axiom(holds_at(playComputerGame(Agent1), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7291
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time)->holds_at(neg(playSoccer(Agent)), Time+1)
       ).
 */

 /*  holds_at(neg(playSoccer(Agent)), Time+1) :-
       ( holds_at(playSoccer(Agent), Time),
         holds_at(win(Agent), Time)
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7294
axiom(holds_at(neg(playSoccer(Agent)), Time2),
   
    [ holds_at(playSoccer(Agent), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time, Time2)
    ]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playSoccer(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(win(Agent), Time), holds_at(neg(neg(playSoccer(Agent))), Time3), allDifferent([Agent, Time]), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(neg(neg(playSoccer(Agent))), Time3),
      allDifferent([Agent, Time]),
      b(Time, Time3)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playSoccer(Agent), Time),
       not(holds_at(neg(playSoccer(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), holds_at(neg(neg(playSoccer(Agent))), Time4), allDifferent([Agent, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      holds_at(neg(neg(playSoccer(Agent))), Time4),
      allDifferent([Agent, Time]),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7296
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time)->holds_at(neg(playHideAndSeek(Agent)), Time+1)
       ).
 */

 /*  holds_at(neg(playHideAndSeek(Agent)), Time+1) :-
       ( holds_at(playHideAndSeek(Agent), Time),
         holds_at(win(Agent), Time)
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent)), Time2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7299
axiom(holds_at(neg(playHideAndSeek(Agent)), Time2),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time, Time2)
    ]).

 /*  not(holds_at(playHideAndSeek(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playHideAndSeek(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(win(Agent), Time), holds_at(neg(neg(playHideAndSeek(Agent))), Time3), allDifferent([Agent, Time]), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent)), Time)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(neg(neg(playHideAndSeek(Agent))), Time3),
      allDifferent([Agent, Time]),
      b(Time, Time3)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playHideAndSeek(Agent), Time),
       not(holds_at(neg(playHideAndSeek(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playHideAndSeek(Agent), Time), holds_at(neg(neg(playHideAndSeek(Agent))), Time4), allDifferent([Agent, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      holds_at(neg(neg(playHideAndSeek(Agent))), Time4),
      allDifferent([Agent, Time]),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7301
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time)->holds_at(neg(playComputerGame(Agent)), Time+1)
       ).
 */

 /*  holds_at(neg(playComputerGame(Agent)), Time+1) :-
       ( holds_at(playComputerGame(Agent), Time),
         holds_at(win(Agent), Time)
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time, holds_at(neg(playComputerGame(Agent)), Time2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7304
axiom(holds_at(neg(playComputerGame(Agent)), Time2),
   
    [ holds_at(playComputerGame(Agent), Time),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time, Time2)
    ]).

 /*  not(holds_at(playComputerGame(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playComputerGame(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(win(Agent), Time), holds_at(neg(neg(playComputerGame(Agent))), Time3), allDifferent([Agent, Time]), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time, holds_at(neg(playComputerGame(Agent)), Time)).
 */
axiom(holds_at(neg(playComputerGame(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(neg(neg(playComputerGame(Agent))), Time3),
      allDifferent([Agent, Time]),
      b(Time, Time3)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playComputerGame(Agent), Time),
       not(holds_at(neg(playComputerGame(Agent)), Time+1)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playComputerGame(Agent), Time), holds_at(neg(neg(playComputerGame(Agent))), Time4), allDifferent([Agent, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playComputerGame(Agent), Time),
      holds_at(neg(neg(playComputerGame(Agent))), Time4),
      allDifferent([Agent, Time]),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7306
% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(win(Agent), Time)->holds_at(playSoccer(Agent), Time-1);holds_at(playHideAndSeek(Agent), Time-1);holds_at(playComputerGame(Agent), Time-1)
       ).
 */

 /*  holds_at(playSoccer(Agent), Time-1) :-
       ( not(holds_at(playHideAndSeek(Agent), Time-1)),
         not(holds_at(playComputerGame(Agent), Time-1))
       ),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time2), holds_at(neg(playComputerGame(Agent)), Time2), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time, holds_at(playSoccer(Agent), Time2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7310
axiom(holds_at(playSoccer(Agent), Time2),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time2),
      holds_at(neg(playComputerGame(Agent)), Time2),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time2, Time)
    ]).

 /*  holds_at(playHideAndSeek(Agent), Time-1) :-
       not(holds_at(playComputerGame(Agent), Time-1)),
       not(holds_at(playSoccer(Agent), Time-1)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playComputerGame(Agent)), Time3), holds_at(neg(playSoccer(Agent)), Time3), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time, holds_at(playHideAndSeek(Agent), Time3)).
 */
axiom(holds_at(playHideAndSeek(Agent), Time3),
   
    [ holds_at(neg(playComputerGame(Agent)), Time3),
      holds_at(neg(playSoccer(Agent)), Time3),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time3, Time)
    ]).

 /*  holds_at(playComputerGame(Agent), Time-1) :-
       not(holds_at(playHideAndSeek(Agent), Time-1)),
       not(holds_at(playSoccer(Agent), Time-1)),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time4), holds_at(neg(playSoccer(Agent)), Time4), holds_at(win(Agent), Time), allDifferent([Agent, Time]), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time, holds_at(playComputerGame(Agent), Time4)).
 */
axiom(holds_at(playComputerGame(Agent), Time4),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time4),
      holds_at(neg(playSoccer(Agent)), Time4),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time]),
      b(Time4, Time)
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       ( not(holds_at(playSoccer(Agent), Time-1)),
         not(holds_at(playHideAndSeek(Agent), Time-1)),
         not(holds_at(playComputerGame(Agent), Time-1))
       ),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(playSoccer(Agent)), Time5), holds_at(neg(playHideAndSeek(Agent)), Time5), holds_at(neg(playComputerGame(Agent)), Time5), allDifferent([Agent, Time]), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(neg(playSoccer(Agent)), Time5),
      holds_at(neg(playHideAndSeek(Agent)), Time5),
      holds_at(neg(playComputerGame(Agent)), Time5),
      allDifferent([Agent, Time]),
      b(Time5, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7312
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).

 /*  allDifferent([Agent, Time]) ->
       ( holds_at(playSoccer(Agent), Time)->holds_at(neg(raining), Time)
       ).
 */

 /*  holds_at(neg(raining), Time) :-
       holds_at(playSoccer(Agent), Time),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(playSoccer(Agent), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(raining), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7314
axiom(holds_at(neg(raining), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      allDifferent([Agent, Time])
    ]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       not(holds_at(neg(raining), Time)),
       allDifferent([Agent, Time]).
 */

 /*  [holds_at(neg(neg(raining)), Time), allDifferent([Agent, Time])] ->
       ta(Time, holds_at(neg(playSoccer(Agent)), Time)).
 */
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(neg(neg(raining)), Time),
      allDifferent([Agent, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7316
% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).

 /*  allDifferent([Agent, Time, Agent1]) ->
       ( holds_at(win(Agent), Time)->not(exists([Agent1],  (diff(Agent1, Agent), holds_at(win(Agent1), Time))))
       ).
 */

 /*  not(holds_at(win(Agent1), Time)) :-
       diff(Agent1, Agent),
       holds_at(win(Agent), Time),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [diff(Agent1, Agent), holds_at(win(Agent), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(win(Agent1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7318
axiom(holds_at(neg(win(Agent1)), Time),
   
    [ diff(Agent1, Agent),
      holds_at(win(Agent), Time),
      allDifferent([Agent, Time, Agent1])
    ]).

 /*  not(holds_at(win(Agent), Time)) :-
       ( diff(Agent1, Agent),
         holds_at(win(Agent1), Time)
       ),
       allDifferent([Agent, Time, Agent1]).
 */

 /*  [diff(Agent1, Agent), holds_at(win(Agent1), Time), allDifferent([Agent, Time, Agent1])] ->
       ta(Time, holds_at(neg(win(Agent)), Time)).
 */
axiom(holds_at(neg(win(Agent)), Time),
   
    [ diff(Agent1, Agent),
      holds_at(win(Agent1), Time),
      allDifferent([Agent, Time, Agent1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7320
% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).

 /*  allDifferent([Agent1, Time, Agent2]) ->
       ( holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)->holds_at(outside(Agent1), Time), holds_at(outside(Agent2), Time);holds_at(neg(outside(Agent1)), Time), holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  not(holds_at(playHideAndSeek(Agent1), Time)) :-
       holds_at(playHideAndSeek(Agent2), Time),
       ( (   not(holds_at(outside(Agent1), Time))
         ;   not(holds_at(outside(Agent2), Time))
         ),
         (   not(holds_at(neg(outside(Agent1)), Time))
         ;   not(holds_at(neg(outside(Agent2)), Time))
         )
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [holds_at(playHideAndSeek(Agent2), Time),  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7324
axiom(holds_at(neg(playHideAndSeek(Agent1)), Time),
   
    [ holds_at(playHideAndSeek(Agent2), Time),
       (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
       (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  not(holds_at(playHideAndSeek(Agent2), Time)) :-
       holds_at(playHideAndSeek(Agent1), Time),
       ( (   not(holds_at(outside(Agent1), Time))
         ;   not(holds_at(outside(Agent2), Time))
         ),
         (   not(holds_at(neg(outside(Agent1)), Time))
         ;   not(holds_at(neg(outside(Agent2)), Time))
         )
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [holds_at(playHideAndSeek(Agent1), Time),  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(playHideAndSeek(Agent2)), Time)).
 */
axiom(holds_at(neg(playHideAndSeek(Agent2)), Time),
   
    [ holds_at(playHideAndSeek(Agent1), Time),
       (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
       (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(outside(Agent1), Time) :-
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(outside(Agent1), Time)).
 */
axiom(holds_at(outside(Agent1), Time),
   
    [  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(outside(Agent2), Time) :-
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(outside(Agent1))), Time)
       ;   holds_at(neg(neg(outside(Agent2))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(outside(Agent2), Time)).
 */
axiom(holds_at(outside(Agent2), Time),
   
    [  (holds_at(neg(neg(outside(Agent1))), Time);holds_at(neg(neg(outside(Agent2))), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(neg(outside(Agent1)), Time) :-
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  [(holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(outside(Agent1)), Time)).
 */
axiom(holds_at(neg(outside(Agent1)), Time),
   
    [  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).

 /*  holds_at(neg(outside(Agent2)), Time) :-
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       ( holds_at(playHideAndSeek(Agent1), Time),
         holds_at(playHideAndSeek(Agent2), Time)
       ),
       allDifferent([Agent1, Time, Agent2]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(outside(Agent1)), Time)
       ;   holds_at(neg(outside(Agent2)), Time)
       ).
 */

 /*  [(holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time), allDifferent([Agent1, Time, Agent2])] ->
       ta(Time, holds_at(neg(outside(Agent2)), Time)).
 */
axiom(holds_at(neg(outside(Agent2)), Time),
   
    [  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time),
      allDifferent([Agent1, Time, Agent2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7326
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPrediction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7355
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7356
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7357
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7358
:- load_e('examples/GiunchigliaEtAl2004/MonkeyBananas.e', changed).
:- if(false).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:20
% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:21
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:22
==> sort(location).

% object Monkey, Bananas, Box
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:24
==> t(object,monkey).
==> t(object,bananas).
==> t(object,box).

% location L1, L2, L3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:25
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% fluent At(object,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:27
fluent(at(At_Param,Location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% fluent OnBox()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:28
fluent(onBox).
==> mpred_prop(onBox,fluent).

% fluent HasBananas()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:29
fluent(hasBananas).
==> mpred_prop(hasBananas,fluent).

% event Walk(location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:31
event(walk(Walk_Ret)).
==> mpred_prop(walk(location),event).
==> meta_argtypes(walk(location)).

% event PushBox(location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:32
event(pushBox(PushBox_Ret)).
==> mpred_prop(pushBox(location),event).
==> meta_argtypes(pushBox(location)).

% event ClimbOn()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:33
event(climbOn).
==> mpred_prop(climbOn,event).

% event ClimbOff()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:34
event(climbOff).
==> mpred_prop(climbOff,event).

% event GraspBananas()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:35
event(graspBananas).
==> mpred_prop(graspBananas,event).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:36
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.

 /*  allDifferent([Object, Location1, Time, Location2]) ->
       ( holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->Location1=Location2
       ).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location2), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */

 /*  [holds_at(at(Object, Location2), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:39
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location1), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */

 /*  [holds_at(at(Object, Location1), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:41
% [object,location,time]
% object=% Monkey ->
% Initiates(Walk(location),At(object,location),time).

 /*  axiom_head(Time) ->
       equals(Object, monkey).
 */

 /*  fix_axiom_head(Time) ->
       call(Object=monkey).
 */

 /*  [call(Object=monkey)] ->
       ta(Time,
          initiates(walk(Location),
                    at(Object, Location),
                    Time)).
 */

 /*  [holds_at(call(Object=monkey), Time)] ->
       ta(Time,
          initiates(walk(Location),
                    at(Object, Location),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:43
axiom(initiates(walk(Location), at(Object, Location), Time),
    [holds_at(call(Object=monkey), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:45
% [object,location1,location2,time]
% object=% Monkey &
% HoldsAt(At(object,location1),time) ->
% Terminates(Walk(location2),At(object,location1),time).

 /*  axiom_head(Time) ->
       equals(Object, monkey).
 */

 /*  fix_axiom_head(Time) ->
       call(Object=monkey).
 */

 /*  [call(Object=monkey), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(walk(Location2),
                     at(Object, Location1),
                     Time)).
 */

 /*  [holds_at(call(Object=monkey), Time), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(walk(Location2),
                     at(Object, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:48
axiom(terminates(walk(Location2), at(Object, Location1), Time),
   
    [ holds_at(call(Object=monkey), Time),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:50
% [location,time]
% Happens(Walk(location),time) ->
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).

 /*  allDifferent([Location, Time]) ->
       ( happens(walk(Location), Time)->holds_at(neg(at(monkey, Location)), Time), holds_at(neg(onBox), Time)
       ).
 */

 /*  not(happens(walk(Location), Time)) :-
       (   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ),
       allDifferent([Location, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(at(monkey, Location))), Time)
       ;   holds_at(neg(neg(onBox)), Time)
       ).
 */

 /*  [(holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)), allDifferent([Location, Time])] ->
       ta(Time, not(happens(walk(Location), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:53
axiom(not(happens(walk(Location), Time)),
   
    [  (holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)),
      allDifferent([Location, Time])
    ]).

 /*  holds_at(neg(at(monkey, Location)), Time) :-
       happens(walk(Location), Time),
       allDifferent([Location, Time]).
 */

 /*  [happens(walk(Location), Time), allDifferent([Location, Time])] ->
       ta(Time, holds_at(neg(at(monkey, Location)), Time)).
 */
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ happens(walk(Location), Time),
      allDifferent([Location, Time])
    ]).

 /*  holds_at(neg(onBox), Time) :-
       happens(walk(Location), Time),
       allDifferent([Location, Time]).
 */

 /*  [happens(walk(Location), Time), allDifferent([Location, Time])] ->
       ta(Time, holds_at(neg(onBox), Time)).
 */
axiom(holds_at(neg(onBox), Time),
   
    [ happens(walk(Location), Time),
      allDifferent([Location, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:55
% [location,time]
% HoldsAt(HasBananas(),time) &
% HoldsAt(At(Monkey,location),time) ->
% HoldsAt(At(Bananas,location),time).

 /*  allDifferent([Time, Location]) ->
       ( holds_at(hasBananas, Time), holds_at(at(monkey, Location), Time)->holds_at(at(bananas, Location), Time)
       ).
 */

 /*  holds_at(at(bananas, Location), Time) :-
       ( holds_at(hasBananas, Time),
         holds_at(at(monkey, Location), Time)
       ),
       allDifferent([Time, Location]).
 */

 /*  [holds_at(hasBananas, Time), holds_at(at(monkey, Location), Time), allDifferent([Time, Location])] ->
       ta(Time, holds_at(at(bananas, Location), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:58
axiom(holds_at(at(bananas, Location), Time),
   
    [ holds_at(hasBananas, Time),
      holds_at(at(monkey, Location), Time),
      allDifferent([Time, Location])
    ]).

 /*  not(holds_at(hasBananas, Time)) :-
       holds_at(at(monkey, Location), Time),
       not(holds_at(at(bananas, Location), Time)),
       allDifferent([Time, Location]).
 */

 /*  [holds_at(at(monkey, Location), Time), holds_at(neg(at(bananas, Location)), Time), allDifferent([Time, Location])] ->
       ta(Time, holds_at(neg(hasBananas), Time)).
 */
axiom(holds_at(neg(hasBananas), Time),
   
    [ holds_at(at(monkey, Location), Time),
      holds_at(neg(at(bananas, Location)), Time),
      allDifferent([Time, Location])
    ]).

 /*  not(holds_at(at(monkey, Location), Time)) :-
       holds_at(hasBananas, Time),
       not(holds_at(at(bananas, Location), Time)),
       allDifferent([Time, Location]).
 */

 /*  [holds_at(hasBananas, Time), holds_at(neg(at(bananas, Location)), Time), allDifferent([Time, Location])] ->
       ta(Time, holds_at(neg(at(monkey, Location)), Time)).
 */
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ holds_at(hasBananas, Time),
      holds_at(neg(at(bananas, Location)), Time),
      allDifferent([Time, Location])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:60
% [object,location,time]
% object=% Box | object=Monkey ->
% Initiates(PushBox(location),At(object,location),time).

 /*  axiom_head(Time) ->
       (   equals(Object, box)
       ;   equals(Object, monkey)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Object=box)
       ;   call(Object=monkey)
       ).
 */

 /*  [(call(Object=box);call(Object=monkey))] ->
       ta(Time,
          initiates(pushBox(Location),
                    at(Object, Location),
                    Time)).
 */

 /*  [(holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time))] ->
       ta(Time,
          initiates(pushBox(Location),
                    at(Object, Location),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:62
axiom(initiates(pushBox(Location), at(Object, Location), Time),
   
    [  (holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:64
% [object,location1,location2,time]
% (object=Box | object=Monkey) &
% HoldsAt(At(object,location1),time) ->
% Terminates(PushBox(location2),At(object,location1),time).

 /*  axiom_head(Time) ->
       (   equals(Object, box)
       ;   equals(Object, monkey)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Object=box)
       ;   call(Object=monkey)
       ).
 */

 /*  [(call(Object=box);call(Object=monkey)), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(pushBox(Location2),
                     at(Object, Location1),
                     Time)).
 */

 /*  [(holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time)), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(pushBox(Location2),
                     at(Object, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:67
axiom(terminates(pushBox(Location2), at(Object, Location1), Time),
   
    [  (holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time)),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:69
% [location,time]
% Happens(PushBox(location),time) ->
% ({location1}
%   HoldsAt(At(Box,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).

 /*  allDifferent([Location, Time, Location1]) ->
       ( happens(pushBox(Location), Time)->exists([Location1],  (holds_at(at(box, Location1), Time), holds_at(at(monkey, Location1), Time))), holds_at(neg(at(monkey, Location)), Time), holds_at(neg(onBox), Time)
       ).
 */

 /*  not(happens(pushBox(Location), Time)) :-
       (   (   not(holds_at(at(box, Location1), Time))
           ;   not(holds_at(at(monkey, Location1), Time))
           )
       ;   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ),
       allDifferent([Location, Time, Location1]).
 */

 /*  axiom_head(Time) ->
       (   (   not(holds_at(at(box, Location1), Time))
           ;   not(holds_at(at(monkey, Location1), Time))
           )
       ;   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   (   holds_at(neg(at(box, Location1)), Time)
           ;   holds_at(neg(at(monkey, Location1)), Time)
           )
       ;   holds_at(neg(neg(at(monkey, Location))), Time)
       ;   holds_at(neg(neg(onBox)), Time)
       ).
 */

 /*  [((holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time));holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)), allDifferent([Location, Time, Location1])] ->
       ta(Time, not(happens(pushBox(Location), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:75
axiom(not(happens(pushBox(Location), Time)),
   
    [  ((holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time));holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(at(box, Location1), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(at(box, Location1), Time)).
 */
axiom(holds_at(at(box, Location1), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(at(monkey, Location1), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(at(monkey, Location1), Time)).
 */
axiom(holds_at(at(monkey, Location1), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(neg(at(monkey, Location)), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(neg(at(monkey, Location)), Time)).
 */
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(neg(onBox), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(neg(onBox), Time)).
 */
axiom(holds_at(neg(onBox), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:77
% [time]
 % Initiates(ClimbOn(),OnBox(),time).

 /*  [] ->
       ta(Time, initiates(climbOn, onBox, Time)).
 */
axiom(initiates(climbOn, onBox, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:79
% [time]
% Happens(ClimbOn(),time) ->
% !HoldsAt(OnBox(),time).

 /*  happens(climbOn, Time) ->
       holds_at(neg(onBox), Time).
 */

 /*  holds_at(neg(onBox), Time) :-
       happens(climbOn, Time).
 */

 /*  axiom_head(Time) ->
       requires(climbOn, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(climbOn, Time), Time).
 */

 /*  [holds_at(metreqs(climbOn), Time)] ->
       ta(Time, holds_at(requires(climbOn, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:81
axiom(holds_at(requires(climbOn, Time), Time),
    [holds_at(metreqs(climbOn), Time)]).

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time, holds_at(requirements(climbOn), Time)).
 */
axiom(holds_at(requirements(climbOn), Time),
    [holds_at(neg(onBox), Time)]).

 /*  not(happens(climbOn, Time)) :-
       not(holds_at(neg(onBox), Time)).
 */

 /*  [holds_at(neg(neg(onBox)), Time)] ->
       ta(Time, not(happens(climbOn, Time))).
 */
axiom(not(happens(climbOn, Time)),
    [holds_at(neg(neg(onBox)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:83
% [time]
 % Terminates(ClimbOff(),OnBox(),time).

 /*  [] ->
       ta(Time, terminates(climbOff, onBox, Time)).
 */
axiom(terminates(climbOff, onBox, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:85
% [time]
% Happens(ClimbOff(),time) ->
% HoldsAt(OnBox(),time).

 /*  happens(climbOff, Time) ->
       holds_at(onBox, Time).
 */

 /*  holds_at(onBox, Time) :-
       happens(climbOff, Time).
 */

 /*  axiom_head(Time) ->
       requires(climbOff, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(climbOff, Time), Time).
 */

 /*  [holds_at(metreqs(climbOff), Time)] ->
       ta(Time, holds_at(requires(climbOff, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:87
axiom(holds_at(requires(climbOff, Time), Time),
    [holds_at(metreqs(climbOff), Time)]).

 /*  [holds_at(onBox, Time)] ->
       ta(Time, holds_at(requirements(climbOff), Time)).
 */
axiom(holds_at(requirements(climbOff), Time),
    [holds_at(onBox, Time)]).

 /*  not(happens(climbOff, Time)) :-
       not(holds_at(onBox, Time)).
 */

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time, not(happens(climbOff, Time))).
 */
axiom(not(happens(climbOff, Time)),
    [holds_at(neg(onBox), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:89
% [time]
 % Initiates(GraspBananas(),HasBananas(),time).

 /*  [] ->
       ta(Time, initiates(graspBananas, hasBananas, Time)).
 */
axiom(initiates(graspBananas, hasBananas, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:91
% [object,location,time]
% object=% Bananas ->
% Releases(GraspBananas(),At(object,location),time).

 /*  axiom_head(Time) ->
       equals(Object, bananas).
 */

 /*  fix_axiom_head(Time) ->
       call(Object=bananas).
 */

 /*  [call(Object=bananas)] ->
       ta(Time,
          releases(graspBananas, at(Object, Location), Time)).
 */

 /*  [holds_at(call(Object=bananas), Time)] ->
       ta(Time,
          releases(graspBananas, at(Object, Location), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:93
axiom(releases(graspBananas, at(Object, Location), Time),
    [holds_at(call(Object=bananas), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:95
% [time]
% Happens(GraspBananas(),time) ->
% ({location1}
%   HoldsAt(At(Bananas,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% HoldsAt(OnBox(),time).

 /*  allDifferent([Time, Location1]) ->
       ( happens(graspBananas, Time)->exists([Location1],  (holds_at(at(bananas, Location1), Time), holds_at(at(monkey, Location1), Time))), holds_at(onBox, Time)
       ).
 */

 /*  not(happens(graspBananas, Time)) :-
       (   not(holds_at(onBox, Time))
       ;   not(holds_at(at(bananas, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ),
       allDifferent([Time, Location1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(onBox, Time))
       ;   not(holds_at(at(bananas, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(onBox), Time)
       ;   holds_at(neg(at(bananas, Location1)), Time)
       ;   holds_at(neg(at(monkey, Location1)), Time)
       ).
 */

 /*  [(holds_at(neg(onBox), Time);holds_at(neg(at(bananas, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)), allDifferent([Time, Location1])] ->
       ta(Time, not(happens(graspBananas, Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:100
axiom(not(happens(graspBananas, Time)),
   
    [  (holds_at(neg(onBox), Time);holds_at(neg(at(bananas, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)),
      allDifferent([Time, Location1])
    ]).

 /*  holds_at(onBox, Time) :-
       happens(graspBananas, Time),
       allDifferent([Time, Location1]).
 */

 /*  [happens(graspBananas, Time), allDifferent([Time, Location1])] ->
       ta(Time, holds_at(onBox, Time)).
 */
axiom(holds_at(onBox, Time),
   
    [ happens(graspBananas, Time),
      allDifferent([Time, Location1])
    ]).

 /*  holds_at(at(bananas, Location1), Time) :-
       happens(graspBananas, Time),
       allDifferent([Time, Location1]).
 */

 /*  [happens(graspBananas, Time), allDifferent([Time, Location1])] ->
       ta(Time, holds_at(at(bananas, Location1), Time)).
 */
axiom(holds_at(at(bananas, Location1), Time),
   
    [ happens(graspBananas, Time),
      allDifferent([Time, Location1])
    ]).

 /*  holds_at(at(monkey, Location1), Time) :-
       happens(graspBananas, Time),
       allDifferent([Time, Location1]).
 */

 /*  [happens(graspBananas, Time), allDifferent([Time, Location1])] ->
       ta(Time, holds_at(at(monkey, Location1), Time)).
 */
axiom(holds_at(at(monkey, Location1), Time),
   
    [ happens(graspBananas, Time),
      allDifferent([Time, Location1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:102
% [time]
% HoldsAt(OnBox(),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:104
% {location1}%  HoldsAt(At(Box,location1),time) &
%             HoldsAt(At(Monkey,location1),time).

 /*  exists([Location1],
    holds_at(onBox, Time) ->
       holds_at(at(box, Location1), Time),
       holds_at(at(monkey, Location1), Time)).
 */

 /*  not(holds_at(onBox, Time)) :-
       (   not(holds_at(at(box, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ),
       some(Location1, '$kolem_Fn_360'(Time)).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(at(box, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(at(box, Location1)), Time)
       ;   holds_at(neg(at(monkey, Location1)), Time)
       ).
 */

 /*  [(holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)), some(Location1, '$kolem_Fn_360'(Time))] ->
       ta(Time, holds_at(neg(onBox), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:105
axiom(holds_at(neg(onBox), Time),
   
    [  (holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)),
      some(Location1, '$kolem_Fn_360'(Time))
    ]).

 /*  holds_at(at(box, Location1), Time) :-
       holds_at(onBox, Time),
       some(Location1, '$kolem_Fn_360'(Time)).
 */

 /*  [holds_at(onBox, Time), some(Location1, '$kolem_Fn_360'(Time))] ->
       ta(Time, holds_at(at(box, Location1), Time)).
 */
axiom(holds_at(at(box, Location1), Time),
   
    [ holds_at(onBox, Time),
      some(Location1, '$kolem_Fn_360'(Time))
    ]).

 /*  holds_at(at(monkey, Location1), Time) :-
       holds_at(onBox, Time),
       some(Location1, '$kolem_Fn_360'(Time)).
 */

 /*  [holds_at(onBox, Time), some(Location1, '$kolem_Fn_360'(Time))] ->
       ta(Time, holds_at(at(monkey, Location1), Time)).
 */
axiom(holds_at(at(monkey, Location1), Time),
   
    [ holds_at(onBox, Time),
      some(Location1, '$kolem_Fn_360'(Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/GiunchigliaEtAl2004/MonkeyBananas.e:107
%; End of file.
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7359
% HoldsAt(At(Monkey,L1),0).

 /*  [] ->
       ta(Ta_Param, initially(at(monkey, l1))).
 */
axiom(initially(at(monkey, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7360
% HoldsAt(At(Bananas,L2),0).

 /*  [] ->
       ta(Ta_Param, initially(at(bananas, l2))).
 */
axiom(initially(at(bananas, l2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7361
% HoldsAt(At(Box,L3),0).

 /*  [] ->
       ta(Ta_Param, initially(at(box, l3))).
 */
axiom(initially(at(box, l3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7362
% Happens(Walk(L3),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(walk(l3), t)).
 */
axiom(happens(walk(l3), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7363
% Happens(PushBox(L2),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(pushBox(l2), start)).
 */
axiom(happens(pushBox(l2), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7365
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7366
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7368
==> range(time,0,2).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7369
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPlanning.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; planning

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7399
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7400
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7401
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7402
:- load_e('examples/GiunchigliaEtAl2004/MonkeyBananas.e', changed).
:- if(false).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7403
% HoldsAt(At(Monkey,L1),0).

 /*  [] ->
       ta(Ta_Param, initially(at(monkey, l1))).
 */
axiom(initially(at(monkey, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7404
% HoldsAt(At(Bananas,L2),0).

 /*  [] ->
       ta(Ta_Param, initially(at(bananas, l2))).
 */
axiom(initially(at(bananas, l2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7405
% HoldsAt(At(Box,L3),0).

 /*  [] ->
       ta(Ta_Param, initially(at(box, l3))).
 */
axiom(initially(at(box, l3)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7406
% HoldsAt(HasBananas(),4).
holds_at(hasBananas,4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7408
%; PLAN Happens(Walk(L3),0).
%; PLAN Happens(PushBox(L2),1).
%; PLAN Happens(ClimbOn(),2).
%; PLAN Happens(GraspBananas(),3).
%; one event at a time
% [event1,event2,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7414
% Happens(event1,time) & Happens(event2,time) ->
% event1=event2.

 /*  allDifferent([Event1, Time, Event2]) ->
       ( happens(Event1, Time), happens(Event2, Time)->Event1=Event2
       ).
 */

 /*  not(happens(Event1, Time)) :-
       happens(Event2, Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [happens(Event2, Time), not(call(Event1=Event2)), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event1, Time))).
 */

 /*  [happens(Event2, Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event1, Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7415
axiom(not(happens(Event1, Time)),
   
    [ happens(Event2, Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Time, Event2])
    ]).

 /*  not(happens(Event2, Time)) :-
       happens(Event1, Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [happens(Event1, Time), not(call(Event1=Event2)), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event2, Time))).
 */

 /*  [happens(Event1, Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Time, Event2])] ->
       ta(Time, not(happens(Event2, Time))).
 */
axiom(not(happens(Event2, Time)),
   
    [ happens(Event1, Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Time, Event2])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7417
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7418
==> range(time,0,4).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7419
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPostdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; postdiction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7449
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7450
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7451
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7452
:- load_e('examples/GiunchigliaEtAl2004/MonkeyBananas.e', changed).
:- if(false).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7453
% HoldsAt(At(Monkey,L1),0).

 /*  [] ->
       ta(Ta_Param, initially(at(monkey, l1))).
 */
axiom(initially(at(monkey, l1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7454
% HoldsAt(At(Bananas,L2),0).

 /*  [] ->
       ta(Ta_Param, initially(at(bananas, l2))).
 */
axiom(initially(at(bananas, l2)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7455
% Happens(Walk(L3),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(walk(l3), t)).
 */
axiom(happens(walk(l3), t),
    [holds_at(is_time(0), t)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7456
% Happens(PushBox(L2),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(pushBox(l2), start)).
 */
axiom(happens(pushBox(l2), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7458
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7459
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7461
==> range(time,0,2).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7462
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyBananas.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7490
% sort object
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7491
==> sort(object).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7492
==> sort(location).

% object Monkey, Bananas, Box
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7494
==> t(object,monkey).
==> t(object,bananas).
==> t(object,box).

% location L1, L2, L3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7495
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% fluent At(object,location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7497
fluent(at(At_Param,Location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% fluent OnBox()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7498
fluent(onBox).
==> mpred_prop(onBox,fluent).

% fluent HasBananas()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7499
fluent(hasBananas).
==> mpred_prop(hasBananas,fluent).

% event Walk(location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7501
event(walk(Walk_Ret)).
==> mpred_prop(walk(location),event).
==> meta_argtypes(walk(location)).

% event PushBox(location)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7502
event(pushBox(PushBox_Ret)).
==> mpred_prop(pushBox(location),event).
==> meta_argtypes(pushBox(location)).

% event ClimbOn()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7503
event(climbOn).
==> mpred_prop(climbOn,event).

% event ClimbOff()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7504
event(climbOff).
==> mpred_prop(climbOff,event).

% event GraspBananas()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7505
event(graspBananas).
==> mpred_prop(graspBananas,event).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7506
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.

 /*  allDifferent([Object, Location1, Time, Location2]) ->
       ( holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->Location1=Location2
       ).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location2), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */

 /*  [holds_at(at(Object, Location2), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7509
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)),
       allDifferent([Object, Location1, Time, Location2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Location1, Location2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Location1=Location2)).
 */

 /*  [holds_at(at(Object, Location1), Time), not(call(Location1=Location2)), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */

 /*  [holds_at(at(Object, Location1), Time), holds_at(neg(call(Location1=Location2)), Time), allDifferent([Object, Location1, Time, Location2])] ->
       ta(Time, holds_at(neg(at(Object, Location2)), Time)).
 */
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      holds_at(neg(call(Location1=Location2)), Time),
      allDifferent([Object, Location1, Time, Location2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7511
% [object,location,time]
% object=% Monkey ->
% Initiates(Walk(location),At(object,location),time).

 /*  axiom_head(Time) ->
       equals(Object, monkey).
 */

 /*  fix_axiom_head(Time) ->
       call(Object=monkey).
 */

 /*  [call(Object=monkey)] ->
       ta(Time,
          initiates(walk(Location),
                    at(Object, Location),
                    Time)).
 */

 /*  [holds_at(call(Object=monkey), Time)] ->
       ta(Time,
          initiates(walk(Location),
                    at(Object, Location),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7513
axiom(initiates(walk(Location), at(Object, Location), Time),
    [holds_at(call(Object=monkey), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7515
% [object,location1,location2,time]
% object=% Monkey &
% HoldsAt(At(object,location1),time) ->
% Terminates(Walk(location2),At(object,location1),time).

 /*  axiom_head(Time) ->
       equals(Object, monkey).
 */

 /*  fix_axiom_head(Time) ->
       call(Object=monkey).
 */

 /*  [call(Object=monkey), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(walk(Location2),
                     at(Object, Location1),
                     Time)).
 */

 /*  [holds_at(call(Object=monkey), Time), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(walk(Location2),
                     at(Object, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7518
axiom(terminates(walk(Location2), at(Object, Location1), Time),
   
    [ holds_at(call(Object=monkey), Time),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7520
% [location,time]
% Happens(Walk(location),time) ->
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).

 /*  allDifferent([Location, Time]) ->
       ( happens(walk(Location), Time)->holds_at(neg(at(monkey, Location)), Time), holds_at(neg(onBox), Time)
       ).
 */

 /*  not(happens(walk(Location), Time)) :-
       (   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ),
       allDifferent([Location, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(at(monkey, Location))), Time)
       ;   holds_at(neg(neg(onBox)), Time)
       ).
 */

 /*  [(holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)), allDifferent([Location, Time])] ->
       ta(Time, not(happens(walk(Location), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7523
axiom(not(happens(walk(Location), Time)),
   
    [  (holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)),
      allDifferent([Location, Time])
    ]).

 /*  holds_at(neg(at(monkey, Location)), Time) :-
       happens(walk(Location), Time),
       allDifferent([Location, Time]).
 */

 /*  [happens(walk(Location), Time), allDifferent([Location, Time])] ->
       ta(Time, holds_at(neg(at(monkey, Location)), Time)).
 */
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ happens(walk(Location), Time),
      allDifferent([Location, Time])
    ]).

 /*  holds_at(neg(onBox), Time) :-
       happens(walk(Location), Time),
       allDifferent([Location, Time]).
 */

 /*  [happens(walk(Location), Time), allDifferent([Location, Time])] ->
       ta(Time, holds_at(neg(onBox), Time)).
 */
axiom(holds_at(neg(onBox), Time),
   
    [ happens(walk(Location), Time),
      allDifferent([Location, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7525
% [location,time]
% HoldsAt(HasBananas(),time) &
% HoldsAt(At(Monkey,location),time) ->
% HoldsAt(At(Bananas,location),time).

 /*  allDifferent([Time, Location]) ->
       ( holds_at(hasBananas, Time), holds_at(at(monkey, Location), Time)->holds_at(at(bananas, Location), Time)
       ).
 */

 /*  holds_at(at(bananas, Location), Time) :-
       ( holds_at(hasBananas, Time),
         holds_at(at(monkey, Location), Time)
       ),
       allDifferent([Time, Location]).
 */

 /*  [holds_at(hasBananas, Time), holds_at(at(monkey, Location), Time), allDifferent([Time, Location])] ->
       ta(Time, holds_at(at(bananas, Location), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7528
axiom(holds_at(at(bananas, Location), Time),
   
    [ holds_at(hasBananas, Time),
      holds_at(at(monkey, Location), Time),
      allDifferent([Time, Location])
    ]).

 /*  not(holds_at(hasBananas, Time)) :-
       holds_at(at(monkey, Location), Time),
       not(holds_at(at(bananas, Location), Time)),
       allDifferent([Time, Location]).
 */

 /*  [holds_at(at(monkey, Location), Time), holds_at(neg(at(bananas, Location)), Time), allDifferent([Time, Location])] ->
       ta(Time, holds_at(neg(hasBananas), Time)).
 */
axiom(holds_at(neg(hasBananas), Time),
   
    [ holds_at(at(monkey, Location), Time),
      holds_at(neg(at(bananas, Location)), Time),
      allDifferent([Time, Location])
    ]).

 /*  not(holds_at(at(monkey, Location), Time)) :-
       holds_at(hasBananas, Time),
       not(holds_at(at(bananas, Location), Time)),
       allDifferent([Time, Location]).
 */

 /*  [holds_at(hasBananas, Time), holds_at(neg(at(bananas, Location)), Time), allDifferent([Time, Location])] ->
       ta(Time, holds_at(neg(at(monkey, Location)), Time)).
 */
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ holds_at(hasBananas, Time),
      holds_at(neg(at(bananas, Location)), Time),
      allDifferent([Time, Location])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7530
% [object,location,time]
% object=% Box | object=Monkey ->
% Initiates(PushBox(location),At(object,location),time).

 /*  axiom_head(Time) ->
       (   equals(Object, box)
       ;   equals(Object, monkey)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Object=box)
       ;   call(Object=monkey)
       ).
 */

 /*  [(call(Object=box);call(Object=monkey))] ->
       ta(Time,
          initiates(pushBox(Location),
                    at(Object, Location),
                    Time)).
 */

 /*  [(holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time))] ->
       ta(Time,
          initiates(pushBox(Location),
                    at(Object, Location),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7532
axiom(initiates(pushBox(Location), at(Object, Location), Time),
   
    [  (holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7534
% [object,location1,location2,time]
% (object=Box | object=Monkey) &
% HoldsAt(At(object,location1),time) ->
% Terminates(PushBox(location2),At(object,location1),time).

 /*  axiom_head(Time) ->
       (   equals(Object, box)
       ;   equals(Object, monkey)
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Object=box)
       ;   call(Object=monkey)
       ).
 */

 /*  [(call(Object=box);call(Object=monkey)), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(pushBox(Location2),
                     at(Object, Location1),
                     Time)).
 */

 /*  [(holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time)), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          terminates(pushBox(Location2),
                     at(Object, Location1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7537
axiom(terminates(pushBox(Location2), at(Object, Location1), Time),
   
    [  (holds_at(call(Object=box), Time);holds_at(call(Object=monkey), Time)),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7539
% [location,time]
% Happens(PushBox(location),time) ->
% ({location1}
%   HoldsAt(At(Box,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).

 /*  allDifferent([Location, Time, Location1]) ->
       ( happens(pushBox(Location), Time)->exists([Location1],  (holds_at(at(box, Location1), Time), holds_at(at(monkey, Location1), Time))), holds_at(neg(at(monkey, Location)), Time), holds_at(neg(onBox), Time)
       ).
 */

 /*  not(happens(pushBox(Location), Time)) :-
       (   (   not(holds_at(at(box, Location1), Time))
           ;   not(holds_at(at(monkey, Location1), Time))
           )
       ;   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ),
       allDifferent([Location, Time, Location1]).
 */

 /*  axiom_head(Time) ->
       (   (   not(holds_at(at(box, Location1), Time))
           ;   not(holds_at(at(monkey, Location1), Time))
           )
       ;   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   (   holds_at(neg(at(box, Location1)), Time)
           ;   holds_at(neg(at(monkey, Location1)), Time)
           )
       ;   holds_at(neg(neg(at(monkey, Location))), Time)
       ;   holds_at(neg(neg(onBox)), Time)
       ).
 */

 /*  [((holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time));holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)), allDifferent([Location, Time, Location1])] ->
       ta(Time, not(happens(pushBox(Location), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7545
axiom(not(happens(pushBox(Location), Time)),
   
    [  ((holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time));holds_at(neg(neg(at(monkey, Location))), Time);holds_at(neg(neg(onBox)), Time)),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(at(box, Location1), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(at(box, Location1), Time)).
 */
axiom(holds_at(at(box, Location1), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(at(monkey, Location1), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(at(monkey, Location1), Time)).
 */
axiom(holds_at(at(monkey, Location1), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(neg(at(monkey, Location)), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(neg(at(monkey, Location)), Time)).
 */
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).

 /*  holds_at(neg(onBox), Time) :-
       happens(pushBox(Location), Time),
       allDifferent([Location, Time, Location1]).
 */

 /*  [happens(pushBox(Location), Time), allDifferent([Location, Time, Location1])] ->
       ta(Time, holds_at(neg(onBox), Time)).
 */
axiom(holds_at(neg(onBox), Time),
   
    [ happens(pushBox(Location), Time),
      allDifferent([Location, Time, Location1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7547
% [time]
 % Initiates(ClimbOn(),OnBox(),time).

 /*  [] ->
       ta(Time, initiates(climbOn, onBox, Time)).
 */
axiom(initiates(climbOn, onBox, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7549
% [time]
% Happens(ClimbOn(),time) ->
% !HoldsAt(OnBox(),time).

 /*  happens(climbOn, Time) ->
       holds_at(neg(onBox), Time).
 */

 /*  holds_at(neg(onBox), Time) :-
       happens(climbOn, Time).
 */

 /*  axiom_head(Time) ->
       requires(climbOn, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(climbOn, Time), Time).
 */

 /*  [holds_at(metreqs(climbOn), Time)] ->
       ta(Time, holds_at(requires(climbOn, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7551
axiom(holds_at(requires(climbOn, Time), Time),
    [holds_at(metreqs(climbOn), Time)]).

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time, holds_at(requirements(climbOn), Time)).
 */
axiom(holds_at(requirements(climbOn), Time),
    [holds_at(neg(onBox), Time)]).

 /*  not(happens(climbOn, Time)) :-
       not(holds_at(neg(onBox), Time)).
 */

 /*  [holds_at(neg(neg(onBox)), Time)] ->
       ta(Time, not(happens(climbOn, Time))).
 */
axiom(not(happens(climbOn, Time)),
    [holds_at(neg(neg(onBox)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7553
% [time]
 % Terminates(ClimbOff(),OnBox(),time).

 /*  [] ->
       ta(Time, terminates(climbOff, onBox, Time)).
 */
axiom(terminates(climbOff, onBox, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7555
% [time]
% Happens(ClimbOff(),time) ->
% HoldsAt(OnBox(),time).

 /*  happens(climbOff, Time) ->
       holds_at(onBox, Time).
 */

 /*  holds_at(onBox, Time) :-
       happens(climbOff, Time).
 */

 /*  axiom_head(Time) ->
       requires(climbOff, Time).
 */

 /*  fix_axiom_head(Time) ->
       holds_at(requires(climbOff, Time), Time).
 */

 /*  [holds_at(metreqs(climbOff), Time)] ->
       ta(Time, holds_at(requires(climbOff, Time), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7557
axiom(holds_at(requires(climbOff, Time), Time),
    [holds_at(metreqs(climbOff), Time)]).

 /*  [holds_at(onBox, Time)] ->
       ta(Time, holds_at(requirements(climbOff), Time)).
 */
axiom(holds_at(requirements(climbOff), Time),
    [holds_at(onBox, Time)]).

 /*  not(happens(climbOff, Time)) :-
       not(holds_at(onBox, Time)).
 */

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time, not(happens(climbOff, Time))).
 */
axiom(not(happens(climbOff, Time)),
    [holds_at(neg(onBox), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7559
% [time]
 % Initiates(GraspBananas(),HasBananas(),time).

 /*  [] ->
       ta(Time, initiates(graspBananas, hasBananas, Time)).
 */
axiom(initiates(graspBananas, hasBananas, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7561
% [object,location,time]
% object=% Bananas ->
% Releases(GraspBananas(),At(object,location),time).

 /*  axiom_head(Time) ->
       equals(Object, bananas).
 */

 /*  fix_axiom_head(Time) ->
       call(Object=bananas).
 */

 /*  [call(Object=bananas)] ->
       ta(Time,
          releases(graspBananas, at(Object, Location), Time)).
 */

 /*  [holds_at(call(Object=bananas), Time)] ->
       ta(Time,
          releases(graspBananas, at(Object, Location), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7563
axiom(releases(graspBananas, at(Object, Location), Time),
    [holds_at(call(Object=bananas), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7565
% [time]
% Happens(GraspBananas(),time) ->
% ({location1}
%   HoldsAt(At(Bananas,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% HoldsAt(OnBox(),time).

 /*  allDifferent([Time, Location1]) ->
       ( happens(graspBananas, Time)->exists([Location1],  (holds_at(at(bananas, Location1), Time), holds_at(at(monkey, Location1), Time))), holds_at(onBox, Time)
       ).
 */

 /*  not(happens(graspBananas, Time)) :-
       (   not(holds_at(onBox, Time))
       ;   not(holds_at(at(bananas, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ),
       allDifferent([Time, Location1]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(onBox, Time))
       ;   not(holds_at(at(bananas, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(onBox), Time)
       ;   holds_at(neg(at(bananas, Location1)), Time)
       ;   holds_at(neg(at(monkey, Location1)), Time)
       ).
 */

 /*  [(holds_at(neg(onBox), Time);holds_at(neg(at(bananas, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)), allDifferent([Time, Location1])] ->
       ta(Time, not(happens(graspBananas, Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7570
axiom(not(happens(graspBananas, Time)),
   
    [  (holds_at(neg(onBox), Time);holds_at(neg(at(bananas, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)),
      allDifferent([Time, Location1])
    ]).

 /*  holds_at(onBox, Time) :-
       happens(graspBananas, Time),
       allDifferent([Time, Location1]).
 */

 /*  [happens(graspBananas, Time), allDifferent([Time, Location1])] ->
       ta(Time, holds_at(onBox, Time)).
 */
axiom(holds_at(onBox, Time),
   
    [ happens(graspBananas, Time),
      allDifferent([Time, Location1])
    ]).

 /*  holds_at(at(bananas, Location1), Time) :-
       happens(graspBananas, Time),
       allDifferent([Time, Location1]).
 */

 /*  [happens(graspBananas, Time), allDifferent([Time, Location1])] ->
       ta(Time, holds_at(at(bananas, Location1), Time)).
 */
axiom(holds_at(at(bananas, Location1), Time),
   
    [ happens(graspBananas, Time),
      allDifferent([Time, Location1])
    ]).

 /*  holds_at(at(monkey, Location1), Time) :-
       happens(graspBananas, Time),
       allDifferent([Time, Location1]).
 */

 /*  [happens(graspBananas, Time), allDifferent([Time, Location1])] ->
       ta(Time, holds_at(at(monkey, Location1), Time)).
 */
axiom(holds_at(at(monkey, Location1), Time),
   
    [ happens(graspBananas, Time),
      allDifferent([Time, Location1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7572
% [time]
% HoldsAt(OnBox(),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7574
% {location1}%  HoldsAt(At(Box,location1),time) &
%             HoldsAt(At(Monkey,location1),time).

 /*  exists([Location1],
    holds_at(onBox, Time) ->
       holds_at(at(box, Location1), Time),
       holds_at(at(monkey, Location1), Time)).
 */

 /*  not(holds_at(onBox, Time)) :-
       (   not(holds_at(at(box, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ),
       some(Location1, '$kolem_Fn_363'(Time)).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(at(box, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(at(box, Location1)), Time)
       ;   holds_at(neg(at(monkey, Location1)), Time)
       ).
 */

 /*  [(holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)), some(Location1, '$kolem_Fn_363'(Time))] ->
       ta(Time, holds_at(neg(onBox), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7575
axiom(holds_at(neg(onBox), Time),
   
    [  (holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)),
      some(Location1, '$kolem_Fn_363'(Time))
    ]).

 /*  holds_at(at(box, Location1), Time) :-
       holds_at(onBox, Time),
       some(Location1, '$kolem_Fn_363'(Time)).
 */

 /*  [holds_at(onBox, Time), some(Location1, '$kolem_Fn_363'(Time))] ->
       ta(Time, holds_at(at(box, Location1), Time)).
 */
axiom(holds_at(at(box, Location1), Time),
   
    [ holds_at(onBox, Time),
      some(Location1, '$kolem_Fn_363'(Time))
    ]).

 /*  holds_at(at(monkey, Location1), Time) :-
       holds_at(onBox, Time),
       some(Location1, '$kolem_Fn_363'(Time)).
 */

 /*  [holds_at(onBox, Time), some(Location1, '$kolem_Fn_363'(Time))] ->
       ta(Time, holds_at(at(monkey, Location1), Time)).
 */
axiom(holds_at(at(monkey, Location1), Time),
   
    [ holds_at(onBox, Time),
      some(Location1, '$kolem_Fn_363'(Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7577
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Student.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 157]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7606
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7607
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7608
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort x
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7610
==> sort(x).

% predicate Adult(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7612
predicate(adult(Adult_Ret)).
==> mpred_prop(adult(x),predicate).
==> meta_argtypes(adult(x)).

% predicate Student(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7613
predicate(student(Student_Ret)).
==> mpred_prop(student(x),predicate).
==> meta_argtypes(student(x)).

% predicate Employed(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7614
predicate(employed(Employed_Ret)).
==> mpred_prop(employed(x),predicate).
==> meta_argtypes(employed(x)).

% predicate Ab1(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7615
predicate(ab1(Ab1_Ret)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7616
predicate(ab2(Ab2_Ret)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x Mary
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7618
==> t(x,mary).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7619
% Student(Mary).
student(mary).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7621
% [x]
 % Adult(x) & !Ab1(x) -> Employed(x).

 /*  allDifferent([X, CAR]) ->
       ( adult(X), not(ab1(X, CAR))->employed(X)
       ).
 */

 /*  employed(X) :-
       ( adult(X),
         not(ab1(X, CAR))
       ),
       allDifferent([X, CAR]).
 */

 /*  [adult(X), not(ab1(X, CAR)), allDifferent([X, CAR])] ->
       ta(Ta_Param, employed(X)).
 */
axiom(employed(X),
   
    [ adult(X),
      not(ab1(X, CAR)),
      allDifferent([X, CAR])
    ]).

 /*  not(adult(X)) :-
       not(ab1(X, CAR)),
       not(employed(X)),
       allDifferent([X, CAR]).
 */

 /*  [not(ab1(X, CAR)), not(employed(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param3, not(adult(X))).
 */
axiom(not(adult(X)),
   
    [ not(ab1(X, CAR)),
      not(employed(X)),
      allDifferent([X, CAR])
    ]).

 /*  ab1(X, CAR) :-
       adult(X),
       not(employed(X)),
       allDifferent([X, CAR]).
 */

 /*  [adult(X), not(employed(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param4, ab1(X, CAR)).
 */
axiom(ab1(X, CAR),
    [adult(X), not(employed(X)), allDifferent([X, CAR])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7622
% [x]
 % Student(x) & !Ab2(x) -> !Employed(x).

 /*  allDifferent([X, CAR]) ->
       ( student(X), not(ab2(X, CAR))->not(employed(X))
       ).
 */

 /*  not(employed(X)) :-
       ( student(X),
         not(ab2(X, CAR))
       ),
       allDifferent([X, CAR]).
 */

 /*  [student(X), not(ab2(X, CAR)), allDifferent([X, CAR])] ->
       ta(Ta_Param, not(employed(X))).
 */
axiom(not(employed(X)),
   
    [ student(X),
      not(ab2(X, CAR)),
      allDifferent([X, CAR])
    ]).

 /*  not(student(X)) :-
       not(ab2(X, CAR)),
       employed(X),
       allDifferent([X, CAR]).
 */

 /*  [not(ab2(X, CAR)), employed(X), allDifferent([X, CAR])] ->
       ta(Ta_Param3, not(student(X))).
 */
axiom(not(student(X)),
   
    [ not(ab2(X, CAR)),
      employed(X),
      allDifferent([X, CAR])
    ]).

 /*  ab2(X, CAR) :-
       student(X),
       employed(X),
       allDifferent([X, CAR]).
 */

 /*  [student(X), employed(X), allDifferent([X, CAR])] ->
       ta(Ta_Param4, ab2(X, CAR)).
 */
axiom(ab2(X, CAR),
    [student(X), employed(X), allDifferent([X, CAR])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7623
% [x]
 % Student(x) -> Adult(x).

 /*  student(X) ->
       adult(X).
 */

 /*  adult(X) :-
       student(X).
 */

 /*  [student(X)] ->
       ta(Ta_Param, adult(X)).
 */
axiom(adult(X),
    [student(X)]).

 /*  not(student(X)) :-
       not(adult(X)).
 */

 /*  [not(adult(X))] ->
       ta(Ta_Param2, not(student(X))).
 */
axiom(not(student(X)),
    [not(adult(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7624
% Theta: 
next_axiom_uses(theta).

 /*  axiom_head(Axiom_head_Ret) ->
       next_axiom_uses(theta).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(next_axiom_uses(theta), Axiom_head_Ret).
 */
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7624
% [x]
 % Student(x) -> Ab1(x).

 /*  allDifferent([X, CAR]) ->
       ( student(X)->ab1(X, CAR)
       ).
 */

 /*  ab1(X, CAR) :-
       student(X),
       allDifferent([X, CAR]).
 */

 /*  [student(X), allDifferent([X, CAR])] ->
       ta(Ta_Param, ab1(X, CAR)).
 */
axiom(ab1(X, CAR),
    [student(X), allDifferent([X, CAR])]).

 /*  not(student(X)) :-
       not(ab1(X, CAR)),
       allDifferent([X, CAR]).
 */

 /*  [not(ab1(X, CAR)), allDifferent([X, CAR])] ->
       ta(Ta_Param3, not(student(X))).
 */
axiom(not(student(X)),
    [not(ab1(X, CAR)), allDifferent([X, CAR])]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7626
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7627
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7628
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7630
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7631
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Dropout.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; dealing with conflicting defaults by adding conditions
%; to one of the conflicting rules
%; \fullciteA[p. 56]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7662
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7663
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7664
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort x
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7666
==> sort(x).

% predicate Dropout(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7668
predicate(dropout(Dropout_Ret)).
==> mpred_prop(dropout(x),predicate).
==> meta_argtypes(dropout(x)).

% predicate Adult(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7669
predicate(adult(Adult_Ret)).
==> mpred_prop(adult(x),predicate).
==> meta_argtypes(adult(x)).

% predicate Employed(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7670
predicate(employed(Employed_Ret)).
==> mpred_prop(employed(x),predicate).
==> meta_argtypes(employed(x)).

% predicate Ab1(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7671
predicate(ab1(Ab1_Ret)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% predicate Ab2(x)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7672
predicate(ab2(Ab2_Ret)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% x Bill
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7674
==> t(x,bill).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7675
% Dropout(Bill).
dropout(bill).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7677
% [x]
 % Dropout(x) & !Ab1(x) -> Adult(x).

 /*  allDifferent([X, CAR]) ->
       ( dropout(X), not(ab1(X, CAR))->adult(X)
       ).
 */

 /*  adult(X) :-
       ( dropout(X),
         not(ab1(X, CAR))
       ),
       allDifferent([X, CAR]).
 */

 /*  [dropout(X), not(ab1(X, CAR)), allDifferent([X, CAR])] ->
       ta(Ta_Param, adult(X)).
 */
axiom(adult(X),
   
    [ dropout(X),
      not(ab1(X, CAR)),
      allDifferent([X, CAR])
    ]).

 /*  not(dropout(X)) :-
       not(ab1(X, CAR)),
       not(adult(X)),
       allDifferent([X, CAR]).
 */

 /*  [not(ab1(X, CAR)), not(adult(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param3, not(dropout(X))).
 */
axiom(not(dropout(X)),
   
    [ not(ab1(X, CAR)),
      not(adult(X)),
      allDifferent([X, CAR])
    ]).

 /*  ab1(X, CAR) :-
       dropout(X),
       not(adult(X)),
       allDifferent([X, CAR]).
 */

 /*  [dropout(X), not(adult(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param4, ab1(X, CAR)).
 */
axiom(ab1(X, CAR),
    [dropout(X), not(adult(X)), allDifferent([X, CAR])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7678
% [x]
 % Adult(x) & !Dropout(x) & !Ab2(x) -> Employed(x).

 /*  allDifferent([X, CAR]) ->
       ( adult(X), not(dropout(X)), not(ab2(X, CAR))->employed(X)
       ).
 */

 /*  employed(X) :-
       ( adult(X),
         not(dropout(X)),
         not(ab2(X, CAR))
       ),
       allDifferent([X, CAR]).
 */

 /*  [adult(X), not(dropout(X)), not(ab2(X, CAR)), allDifferent([X, CAR])] ->
       ta(Ta_Param, employed(X)).
 */
axiom(employed(X),
   
    [ adult(X),
      not(dropout(X)),
      not(ab2(X, CAR)),
      allDifferent([X, CAR])
    ]).

 /*  not(adult(X)) :-
       ( not(dropout(X)),
         not(ab2(X, CAR))
       ),
       not(employed(X)),
       allDifferent([X, CAR]).
 */

 /*  [not(dropout(X)), not(ab2(X, CAR)), not(employed(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param3, not(adult(X))).
 */
axiom(not(adult(X)),
   
    [ not(dropout(X)),
      not(ab2(X, CAR)),
      not(employed(X)),
      allDifferent([X, CAR])
    ]).

 /*  dropout(X) :-
       not(ab2(X, CAR)),
       adult(X),
       not(employed(X)),
       allDifferent([X, CAR]).
 */

 /*  [not(ab2(X, CAR)), adult(X), not(employed(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param4, dropout(X)).
 */
axiom(dropout(X),
   
    [ not(ab2(X, CAR)),
      adult(X),
      not(employed(X)),
      allDifferent([X, CAR])
    ]).

 /*  ab2(X, CAR) :-
       not(dropout(X)),
       adult(X),
       not(employed(X)),
       allDifferent([X, CAR]).
 */

 /*  [not(dropout(X)), adult(X), not(employed(X)), allDifferent([X, CAR])] ->
       ta(Ta_Param5, ab2(X, CAR)).
 */
axiom(ab2(X, CAR),
   
    [ not(dropout(X)),
      adult(X),
      not(employed(X)),
      allDifferent([X, CAR])
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7680
% range time 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7681
==> range(time,0,0).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7682
==> range(offset,1,1).

% completion Theta Ab1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7684
==> completion(theta).
==> completion(ab1).

% completion Theta Ab2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7685
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/Happy.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; InitiallyP -> HoldsAt
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7724
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7725
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7726
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% sort person
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7728
==> sort(person).

% event Feed(person)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7729
event(feed(Feed_Ret)).
==> mpred_prop(feed(person),event).
==> meta_argtypes(feed(person)).

% event Clothe(person)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7730
event(clothe(Clothe_Ret)).
==> mpred_prop(clothe(person),event).
==> meta_argtypes(clothe(person)).

% fluent Happy(person)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7731
fluent(happy(Happy_Ret)).
==> mpred_prop(happy(person),fluent).
==> meta_argtypes(happy(person)).

% fluent Hungry(person)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7732
fluent(hungry(Hungry_Ret)).
==> mpred_prop(hungry(person),fluent).
==> meta_argtypes(hungry(person)).

% fluent Cold(person)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7733
fluent(cold(Cold_Ret)).
==> mpred_prop(cold(person),fluent).
==> meta_argtypes(cold(person)).

% noninertial Happy
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7734
==> noninertial(happy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7735
% [person,time]
% HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time).

 /*  holds_at(happy(Person), Time) <->
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */

 /*  [holds_at, happy] <->
       [holds_at, neg, hungry, holds_at, neg, cold].
 */

 /*  allDifferent([Person, Time]) ->
       ( holds_at(happy(Person), Time)->holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time)
       ).
 */

 /*  not(holds_at(happy(Person), Time)) :-
       (   not(holds_at(neg(hungry(Person)), Time))
       ;   not(holds_at(neg(cold(Person)), Time))
       ),
       allDifferent([Person, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(hungry(Person)), Time))
       ;   not(holds_at(neg(cold(Person)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(hungry(Person))), Time)
       ;   holds_at(neg(neg(cold(Person))), Time)
       ).
 */

 /*  [(holds_at(neg(neg(hungry(Person))), Time);holds_at(neg(neg(cold(Person))), Time)), allDifferent([Person, Time])] ->
       ta(Time, holds_at(neg(happy(Person)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7738
axiom(holds_at(neg(happy(Person)), Time),
   
    [  (holds_at(neg(neg(hungry(Person))), Time);holds_at(neg(neg(cold(Person))), Time)),
      allDifferent([Person, Time])
    ]).

 /*  holds_at(neg(hungry(Person)), Time) :-
       holds_at(happy(Person), Time),
       allDifferent([Person, Time]).
 */

 /*  [holds_at(happy(Person), Time), allDifferent([Person, Time])] ->
       ta(Time, holds_at(neg(hungry(Person)), Time)).
 */
axiom(holds_at(neg(hungry(Person)), Time),
   
    [ holds_at(happy(Person), Time),
      allDifferent([Person, Time])
    ]).

 /*  holds_at(neg(cold(Person)), Time) :-
       holds_at(happy(Person), Time),
       allDifferent([Person, Time]).
 */

 /*  [holds_at(happy(Person), Time), allDifferent([Person, Time])] ->
       ta(Time, holds_at(neg(cold(Person)), Time)).
 */
axiom(holds_at(neg(cold(Person)), Time),
   
    [ holds_at(happy(Person), Time),
      allDifferent([Person, Time])
    ]).

 /*  allDifferent([Person, Time]) ->
       ( holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time)->holds_at(happy(Person), Time)
       ).
 */

 /*  holds_at(happy(Person), Time) :-
       ( holds_at(neg(hungry(Person)), Time),
         holds_at(neg(cold(Person)), Time)
       ),
       allDifferent([Person, Time]).
 */

 /*  [holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time), allDifferent([Person, Time])] ->
       ta(Time, holds_at(happy(Person), Time)).
 */
axiom(holds_at(happy(Person), Time),
   
    [ holds_at(neg(hungry(Person)), Time),
      holds_at(neg(cold(Person)), Time),
      allDifferent([Person, Time])
    ]).

 /*  not(holds_at(neg(hungry(Person)), Time)) :-
       holds_at(neg(cold(Person)), Time),
       not(holds_at(happy(Person), Time)),
       allDifferent([Person, Time]).
 */

 /*  [holds_at(neg(cold(Person)), Time), holds_at(neg(happy(Person)), Time), allDifferent([Person, Time])] ->
       ta(Time, holds_at(neg(neg(hungry(Person))), Time)).
 */
axiom(holds_at(neg(neg(hungry(Person))), Time),
   
    [ holds_at(neg(cold(Person)), Time),
      holds_at(neg(happy(Person)), Time),
      allDifferent([Person, Time])
    ]).

 /*  not(holds_at(neg(cold(Person)), Time)) :-
       holds_at(neg(hungry(Person)), Time),
       not(holds_at(happy(Person), Time)),
       allDifferent([Person, Time]).
 */

 /*  [holds_at(neg(hungry(Person)), Time), holds_at(neg(happy(Person)), Time), allDifferent([Person, Time])] ->
       ta(Time, holds_at(neg(neg(cold(Person))), Time)).
 */
axiom(holds_at(neg(neg(cold(Person))), Time),
   
    [ holds_at(neg(hungry(Person)), Time),
      holds_at(neg(happy(Person)), Time),
      allDifferent([Person, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7740
% [person,time]
% Terminates(Feed(person),Hungry(person),time).

 /*  [] ->
       ta(Time,
          terminates(feed(Person), hungry(Person), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7741
axiom(terminates(feed(Person), hungry(Person), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7743
% [person,time]
% Terminates(Clothe(person),Cold(person),time).

 /*  [] ->
       ta(Time,
          terminates(clothe(Person), cold(Person), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7744
axiom(terminates(clothe(Person), cold(Person), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7746
% person Fred
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7747
==> t(person,fred).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7748
% HoldsAt(Hungry(Fred),0).

 /*  [] ->
       ta(Ta_Param, initially(hungry(fred))).
 */
axiom(initially(hungry(fred)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7749
% !HoldsAt(Cold(Fred),0).
 %  not(initially(cold(fred))).

 /*  [] ->
       ta(Ta_Param, not(initially(cold(fred)))).
 */
axiom(not(initially(cold(fred))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7750
% Happens(Feed(Fred),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(feed(fred), start)).
 */
axiom(happens(feed(fred), start),
    [holds_at(is_time(1), start), b(t, start)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7752
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7753
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7755
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7756
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ThielscherCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7802
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7803
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7804
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load foundations/ECCausal.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7805
:- load_e('foundations/ECCausal.e', changed).
:- if(false).
:- endif.

% event LightOn()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7807
event(lightOn).
==> mpred_prop(lightOn,event).

% event Close1()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7808
event(close1).
==> mpred_prop(close1,event).

% event Open2()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7809
event(open2).
==> mpred_prop(open2,event).

% event CloseRelay()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7810
event(closeRelay).
==> mpred_prop(closeRelay,event).

% fluent Light()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7812
fluent(light).
==> mpred_prop(light,fluent).

% fluent Switch1()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7813
fluent(switch1).
==> mpred_prop(switch1,fluent).

% fluent Switch2()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7814
fluent(switch2).
==> mpred_prop(switch2,fluent).

% fluent Switch3()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7815
fluent(switch3).
==> mpred_prop(switch3,fluent).

% fluent Relay()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7816
fluent(relay).
==> mpred_prop(relay,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7817
% [time]
% Stopped(Light(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch2(),time) ->
% Happens(LightOn(),time).

 /*  stopped(light, Time), initiated(switch1, Time), initiated(switch2, Time) ->
       happens(lightOn, Time).
 */

 /*  happens(lightOn, Time) :-
       stopped(light, Time),
       initiated(switch1, Time),
       initiated(switch2, Time).
 */

 /*  [stopped(light, Time), initiated(switch1, Time), initiated(switch2, Time)] ->
       ta(Time, happens(lightOn, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7821
axiom(happens(lightOn, Time),
   
    [ stopped(light, Time),
      initiated(switch1, Time),
      initiated(switch2, Time)
    ]).

 /*  not(stopped(light, Time)) :-
       ( initiated(switch1, Time),
         initiated(switch2, Time)
       ),
       not(happens(lightOn, Time)).
 */

 /*  [initiated(switch1, Time), initiated(switch2, Time), not(happens(lightOn, Time))] ->
       ta(Time, not(stopped(light, Time))).
 */
axiom(not(stopped(light, Time)),
   
    [ initiated(switch1, Time),
      initiated(switch2, Time),
      not(happens(lightOn, Time))
    ]).

 /*  not(initiated(switch1, Time)) :-
       initiated(switch2, Time),
       stopped(light, Time),
       not(happens(lightOn, Time)).
 */

 /*  [initiated(switch2, Time), stopped(light, Time), not(happens(lightOn, Time))] ->
       ta(Time, not(initiated(switch1, Time))).
 */
axiom(not(initiated(switch1, Time)),
   
    [ initiated(switch2, Time),
      stopped(light, Time),
      not(happens(lightOn, Time))
    ]).

 /*  not(initiated(switch2, Time)) :-
       initiated(switch1, Time),
       stopped(light, Time),
       not(happens(lightOn, Time)).
 */

 /*  [initiated(switch1, Time), stopped(light, Time), not(happens(lightOn, Time))] ->
       ta(Time, not(initiated(switch2, Time))).
 */
axiom(not(initiated(switch2, Time)),
   
    [ initiated(switch1, Time),
      stopped(light, Time),
      not(happens(lightOn, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7823
% [time]
% Started(Switch2(),time) &
% Initiated(Relay(),time) ->
% Happens(Open2(),time).

 /*  started(switch2, Time), initiated(relay, Time) ->
       happens(open2, Time).
 */

 /*  happens(open2, Time) :-
       started(switch2, Time),
       initiated(relay, Time).
 */

 /*  [started(switch2, Time), initiated(relay, Time)] ->
       ta(Time, happens(open2, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7826
axiom(happens(open2, Time),
    [started(switch2, Time), initiated(relay, Time)]).

 /*  not(started(switch2, Time)) :-
       initiated(relay, Time),
       not(happens(open2, Time)).
 */

 /*  [initiated(relay, Time), not(happens(open2, Time))] ->
       ta(Time, not(started(switch2, Time))).
 */
axiom(not(started(switch2, Time)),
    [initiated(relay, Time), not(happens(open2, Time))]).

 /*  not(initiated(relay, Time)) :-
       started(switch2, Time),
       not(happens(open2, Time)).
 */

 /*  [started(switch2, Time), not(happens(open2, Time))] ->
       ta(Time, not(initiated(relay, Time))).
 */
axiom(not(initiated(relay, Time)),
    [started(switch2, Time), not(happens(open2, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7828
% [time]
% Stopped(Relay(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch3(),time) ->
% Happens(CloseRelay(),time).

 /*  stopped(relay, Time), initiated(switch1, Time), initiated(switch3, Time) ->
       happens(closeRelay, Time).
 */

 /*  happens(closeRelay, Time) :-
       stopped(relay, Time),
       initiated(switch1, Time),
       initiated(switch3, Time).
 */

 /*  [stopped(relay, Time), initiated(switch1, Time), initiated(switch3, Time)] ->
       ta(Time, happens(closeRelay, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7832
axiom(happens(closeRelay, Time),
   
    [ stopped(relay, Time),
      initiated(switch1, Time),
      initiated(switch3, Time)
    ]).

 /*  not(stopped(relay, Time)) :-
       ( initiated(switch1, Time),
         initiated(switch3, Time)
       ),
       not(happens(closeRelay, Time)).
 */

 /*  [initiated(switch1, Time), initiated(switch3, Time), not(happens(closeRelay, Time))] ->
       ta(Time, not(stopped(relay, Time))).
 */
axiom(not(stopped(relay, Time)),
   
    [ initiated(switch1, Time),
      initiated(switch3, Time),
      not(happens(closeRelay, Time))
    ]).

 /*  not(initiated(switch1, Time)) :-
       initiated(switch3, Time),
       stopped(relay, Time),
       not(happens(closeRelay, Time)).
 */

 /*  [initiated(switch3, Time), stopped(relay, Time), not(happens(closeRelay, Time))] ->
       ta(Time, not(initiated(switch1, Time))).
 */
axiom(not(initiated(switch1, Time)),
   
    [ initiated(switch3, Time),
      stopped(relay, Time),
      not(happens(closeRelay, Time))
    ]).

 /*  not(initiated(switch3, Time)) :-
       initiated(switch1, Time),
       stopped(relay, Time),
       not(happens(closeRelay, Time)).
 */

 /*  [initiated(switch1, Time), stopped(relay, Time), not(happens(closeRelay, Time))] ->
       ta(Time, not(initiated(switch3, Time))).
 */
axiom(not(initiated(switch3, Time)),
   
    [ initiated(switch1, Time),
      stopped(relay, Time),
      not(happens(closeRelay, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7834
% [time]
 % Initiates(LightOn(),Light(),time).

 /*  [] ->
       ta(Time, initiates(lightOn, light, Time)).
 */
axiom(initiates(lightOn, light, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7836
% [time]
 % Terminates(Open2(),Switch2(),time).

 /*  [] ->
       ta(Time, terminates(open2, switch2, Time)).
 */
axiom(terminates(open2, switch2, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7838
% [time]
 % Initiates(CloseRelay(),Relay(),time).

 /*  [] ->
       ta(Time, initiates(closeRelay, relay, Time)).
 */
axiom(initiates(closeRelay, relay, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7840
% [time]
 % Initiates(Close1(),Switch1(),time).

 /*  [] ->
       ta(Time, initiates(close1, switch1, Time)).
 */
axiom(initiates(close1, switch1, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7842
% !HoldsAt(Switch1(),0).
 %  not(initially(switch1)).

 /*  [] ->
       ta(Ta_Param, not(initially(switch1))).
 */
axiom(not(initially(switch1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7843
% HoldsAt(Switch2(),0).

 /*  [] ->
       ta(Ta_Param, initially(switch2)).
 */
axiom(initially(switch2),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7844
% HoldsAt(Switch3(),0).

 /*  [] ->
       ta(Ta_Param, initially(switch3)).
 */
axiom(initially(switch3),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7845
% !HoldsAt(Relay(),0).
 %  not(initially(relay)).

 /*  [] ->
       ta(Ta_Param, not(initially(relay))).
 */
axiom(not(initially(relay)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7846
% !HoldsAt(Light(),0).
 %  not(initially(light)).

 /*  [] ->
       ta(Ta_Param, not(initially(light))).
 */
axiom(not(initially(light)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7848
% Happens(Close1(),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(close1, t)).
 */
axiom(happens(close1, t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7850
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7851
==> completion(happens).

% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7853
==> range(time,0,1).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7854
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/CoinToss.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7903
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7904
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7905
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Toss()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7907
event(toss).
==> mpred_prop(toss,event).

% fluent ItsHeads()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7908
fluent(itsHeads).
==> mpred_prop(itsHeads,fluent).

% fluent Heads()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7909
fluent(heads).
==> mpred_prop(heads,fluent).

% noninertial ItsHeads
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7910
==> noninertial(itsHeads).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7911
% [time]
 % HoldsAt(ItsHeads(),time) -> Initiates(Toss(),Heads(),time).

 /*  [holds_at(itsHeads, Time)] ->
       ta(Time, initiates(toss, heads, Time)).
 */
axiom(initiates(toss, heads, Time),
    [holds_at(itsHeads, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7912
% [time]
 % !HoldsAt(ItsHeads(),time) -> Terminates(Toss(),Heads(),time).

 /*  [holds_at(neg(itsHeads), Time)] ->
       ta(Time, terminates(toss, heads, Time)).
 */
axiom(terminates(toss, heads, Time),
    [holds_at(neg(itsHeads), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7914
% HoldsAt(Heads(),0).

 /*  [] ->
       ta(Ta_Param, initially(heads)).
 */
axiom(initially(heads),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7915
% Happens(Toss(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(toss, start)).
 */
axiom(happens(toss, start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7916
% Happens(Toss(),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(toss, t2)).
 */
axiom(happens(toss, t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7917
% Happens(Toss(),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(toss, t3)).
 */
axiom(happens(toss, t3),
    [holds_at(is_time(3), t3), b(t, t3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7919
%; prune models irrelevant to example:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7920
% HoldsAt(ItsHeads(),0).

 /*  [] ->
       ta(Ta_Param, initially(itsHeads)).
 */
axiom(initially(itsHeads),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7921
% HoldsAt(ItsHeads(),4).
holds_at(itsHeads,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7923
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7924
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7926
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7927
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ChessBoard.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; due to Raymond Reiter
%;
%; @inproceedings{KarthaLifschitz:1994,
%;   author = "G. Neelakantan Kartha and Vladimir Lifschitz",
%;   year = "1994",
%;   title = "Actions with indirect effects (preliminary report)",
%;   editor = "Jon Doyle and Erik Sandewall and Pietro Torasso",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ourth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "341--350",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7979
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7980
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7981
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Throw()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7983
event(throw).
==> mpred_prop(throw,event).

% fluent ItsBlack()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7984
fluent(itsBlack).
==> mpred_prop(itsBlack,fluent).

% fluent ItsWhite()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7985
fluent(itsWhite).
==> mpred_prop(itsWhite,fluent).

% fluent OnBlack()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7986
fluent(onBlack).
==> mpred_prop(onBlack,fluent).

% fluent OnWhite()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7987
fluent(onWhite).
==> mpred_prop(onWhite,fluent).

% noninertial ItsBlack, ItsWhite
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7988
==> noninertial(itsBlack).
==> noninertial(itsWhite).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7989
% [time]
% HoldsAt(ItsWhite(),time) ->
% Initiates(Throw(),OnWhite(),time).

 /*  [holds_at(itsWhite, Time)] ->
       ta(Time, initiates(throw, onWhite, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7991
axiom(initiates(throw, onWhite, Time),
    [holds_at(itsWhite, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7993
% [time]
% HoldsAt(ItsBlack(),time) ->
% Initiates(Throw(),OnBlack(),time).

 /*  [holds_at(itsBlack, Time)] ->
       ta(Time, initiates(throw, onBlack, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7995
axiom(initiates(throw, onBlack, Time),
    [holds_at(itsBlack, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7997
% [time]
 % HoldsAt(ItsWhite(),time) | HoldsAt(ItsBlack(),time).

 /*   (   holds_at(itsWhite, Time)
      ;   holds_at(itsBlack, Time)
      ).
 */

 /*  holds_at(itsWhite, Time) :-
       not(holds_at(itsBlack, Time)).
 */

 /*  [holds_at(neg(itsBlack), Time)] ->
       ta(Time, holds_at(itsWhite, Time)).
 */
axiom(holds_at(itsWhite, Time),
    [holds_at(neg(itsBlack), Time)]).

 /*  holds_at(itsBlack, Time) :-
       not(holds_at(itsWhite, Time)).
 */

 /*  [holds_at(neg(itsWhite), Time)] ->
       ta(Time, holds_at(itsBlack, Time)).
 */
axiom(holds_at(itsBlack, Time),
    [holds_at(neg(itsWhite), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7999
% !HoldsAt(OnWhite(),0).
 %  not(initially(onWhite)).

 /*  [] ->
       ta(Ta_Param, not(initially(onWhite))).
 */
axiom(not(initially(onWhite)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8000
% !HoldsAt(OnBlack(),0).
 %  not(initially(onBlack)).

 /*  [] ->
       ta(Ta_Param, not(initially(onBlack))).
 */
axiom(not(initially(onBlack)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8001
% Happens(Throw(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(throw, start)).
 */
axiom(happens(throw, start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8003
%; prune models irrelevant to example:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8004
% HoldsAt(ItsWhite(),0).

 /*  [] ->
       ta(Ta_Param, initially(itsWhite)).
 */
axiom(initially(itsWhite),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8005
% HoldsAt(ItsBlack(),0).

 /*  [] ->
       ta(Ta_Param, initially(itsBlack)).
 */
axiom(initially(itsBlack),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8006
% HoldsAt(ItsWhite(),2).
holds_at(itsWhite,2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8007
% HoldsAt(ItsBlack(),2).
holds_at(itsBlack,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8009
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8010
==> completion(happens).

% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8012
==> range(time,0,2).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8013
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/RussianTurkey.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Sandewall:1994,
%;   author = "Sandewall, Erik",
%;   year = "1994",
%;   title = "Features and Fluents: The Representation of Knowledge about Dynamical Systems",
%;   volume = "I",
%;   address = "Oxford",
%;   publisher = "Oxford University Press",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; added [time] Terminates(Shoot(),Loaded(),time).
%; added !HoldsAt(Loaded(),0) to prune models
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8062
% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8063
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8064
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% event Load()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8066
event(load).
==> mpred_prop(load,event).

% event Shoot()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8067
event(shoot).
==> mpred_prop(shoot,event).

% event Spin()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8068
event(spin).
==> mpred_prop(spin,event).

% fluent Loaded()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8069
fluent(loaded).
==> mpred_prop(loaded,fluent).

% fluent Alive()
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8070
fluent(alive).
==> mpred_prop(alive,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8071
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time, initiates(load, loaded, Time)).
 */
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8072
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).

 /*  [holds_at(loaded, Time)] ->
       ta(Time, terminates(shoot, alive, Time)).
 */
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8073
% [time]
 % Releases(Spin(),Loaded(),time).

 /*  [] ->
       ta(Time, releases(spin, loaded, Time)).
 */
axiom(releases(spin, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8074
% [time]
 % Terminates(Shoot(),Loaded(),time).

 /*  [] ->
       ta(Time, terminates(shoot, loaded, Time)).
 */
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8076
% HoldsAt(Alive(),0).

 /*  [] ->
       ta(Ta_Param, initially(alive)).
 */
axiom(initially(alive),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8077
% !HoldsAt(Loaded(),0).
 %  not(initially(loaded)).

 /*  [] ->
       ta(Ta_Param, not(initially(loaded))).
 */
axiom(not(initially(loaded)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8078
% Happens(Load(),1).

 /*  axiom_head(1) ->
       is_time(1).
 */

 /*  fix_axiom_head(1) ->
       holds_at(is_time(1), 1).
 */

 /*  [holds_at(is_time(1), start), b(t, start), ignore(t+1==start)] ->
       ta(1, happens(load, start)).
 */
axiom(happens(load, start),
    [holds_at(is_time(1), start), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8079
% Happens(Spin(),2).

 /*  axiom_head(2) ->
       is_time(2).
 */

 /*  fix_axiom_head(2) ->
       holds_at(is_time(2), 2).
 */

 /*  [holds_at(is_time(2), t2), b(t, t2), ignore(t+2==t2)] ->
       ta(2, happens(spin, t2)).
 */
axiom(happens(spin, t2),
    [holds_at(is_time(2), t2), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8080
% Happens(Shoot(),3).

 /*  axiom_head(3) ->
       is_time(3).
 */

 /*  fix_axiom_head(3) ->
       holds_at(is_time(3), 3).
 */

 /*  [holds_at(is_time(3), t3), b(t, t3), ignore(t+3==t3)] ->
       ta(3, happens(shoot, t3)).
 */
axiom(happens(shoot, t3),
    [holds_at(is_time(3), t3), b(t, t3)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8082
% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8083
==> completion(happens).

% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8085
==> range(time,0,4).

% range offset 1 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8086
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8114
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8115
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8117
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8118
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8119
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:20
% sort position: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:21
==> subsort(position,integer).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:22
==> sort(location).

% sort cage: location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:23
==> subsort(cage,location).

% sort gate
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:24
==> sort(gate).

% sort animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:25
==> sort(animal).

% sort elephant: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:26
==> subsort(elephant,animal).

% sort horse: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:27
==> subsort(horse,animal).

% sort dog: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:28
==> subsort(dog,animal).

% sort human: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:29
==> subsort(human,animal).

% sort species
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:30
==> sort(species).

% function Loc(position): location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:32
functional_predicate(loc(Loc_Param,Loc_Ret)).
==> mpred_prop(loc(position,location),functional_predicate).
==> meta_argtypes(loc(position,location)).
==> resultIsa(loc,location).

% function Side1(gate): position
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:33
functional_predicate(side1(Side1_Param,Side1_Ret)).
==> mpred_prop(side1(gate,position),functional_predicate).
==> meta_argtypes(side1(gate,position)).
==> resultIsa(side1,position).

% function Side2(gate): position
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:34
functional_predicate(side2(Side2_Param,Side2_Ret)).
==> mpred_prop(side2(gate,position),functional_predicate).
==> meta_argtypes(side2(gate,position)).
==> resultIsa(side2,position).

% function Species(animal): species
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:35
functional_predicate(species(Species_Param,Species_Ret)).
==> mpred_prop(species(animal,species),functional_predicate).
==> meta_argtypes(species(animal,species)).
==> resultIsa(species,species).

% predicate Accessible(position,position,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:37
predicate(accessible(Accessible_Param,
		     _,
		     Accessible_Ret)).
==> mpred_prop(accessible(position,position,time),predicate).
==> meta_argtypes(accessible(position,position,time)).

% predicate Adult(animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:38
predicate(adult(Adult_Ret)).
==> mpred_prop(adult(animal),predicate).
==> meta_argtypes(adult(animal)).

% predicate Large(animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:39
predicate(large(Large_Ret)).
==> mpred_prop(large(animal),predicate).
==> meta_argtypes(large(animal)).

% predicate LargeSpecies(species)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:40
predicate(largeSpecies(LargeSpecies_Ret)).
==> mpred_prop(largeSpecies(species),predicate).
==> meta_argtypes(largeSpecies(species)).

% predicate Neighbor(position,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:41
predicate(neighbor(Neighbor_Param,Neighbor_Ret)).
==> mpred_prop(neighbor(position,position),predicate).
==> meta_argtypes(neighbor(position,position)).

% predicate Sides(position,position,gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:42
predicate(sides(Sides_Param,_,Sides_Ret)).
==> mpred_prop(sides(position,position,gate),predicate).
==> meta_argtypes(sides(position,position,gate)).

% event Close(human,gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:44
event(close(Close_Param,Close_Ret)).
==> mpred_prop(close(human,gate),event).
==> meta_argtypes(close(human,gate)).

% event GetOff(human,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:45
event(getOff(GetOff_Param,GetOff_Ret)).
==> mpred_prop(getOff(human,animal),event).
==> meta_argtypes(getOff(human,animal)).

% event Mount(human,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:46
event(mount(Mount_Param,Mount_Ret)).
==> mpred_prop(mount(human,animal),event).
==> meta_argtypes(mount(human,animal)).

% event Move(animal,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:47
event(move(Move_Param,Move_Ret)).
==> mpred_prop(move(animal,position),event).
==> meta_argtypes(move(animal,position)).

% event Open(human,gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:48
event(open(Open_Param,Open_Ret)).
==> mpred_prop(open(human,gate),event).
==> meta_argtypes(open(human,gate)).

% event ThrowOff(animal,human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:49
event(throwOff(ThrowOff_Param,ThrowOff_Ret)).
==> mpred_prop(throwOff(animal,human),event).
==> meta_argtypes(throwOff(animal,human)).

% fluent AbnormalEncroachment(human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:51
fluent(abnormalEncroachment(AbnormalEncroachment_Ret)).
==> mpred_prop(abnormalEncroachment(human),fluent).
==> meta_argtypes(abnormalEncroachment(human)).

% noninertial AbnormalEncroachment
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:52
==> noninertial(abnormalEncroachment).

% fluent DoneBy(event,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:53
fluent(doneBy(DoneBy_Param,DoneBy_Ret)).
==> mpred_prop(doneBy(event,animal),fluent).
==> meta_argtypes(doneBy(event,animal)).

% noninertial DoneBy
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:54
==> noninertial(doneBy).

% fluent Mounted(human,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:55
fluent(mounted(Mounted_Param,Mounted_Ret)).
==> mpred_prop(mounted(human,animal),fluent).
==> meta_argtypes(mounted(human,animal)).

% fluent MountFails(human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:56
fluent(mountFails(MountFails_Ret)).
==> mpred_prop(mountFails(human),fluent).
==> meta_argtypes(mountFails(human)).

% noninertial MountFails
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:57
==> noninertial(mountFails).

% fluent Moves(animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:58
fluent(moves(Moves_Ret)).
==> mpred_prop(moves(animal),fluent).
==> meta_argtypes(moves(animal)).

% noninertial Moves
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:59
==> noninertial(moves).

% fluent Opened(gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:60
fluent(opened(Opened_Ret)).
==> mpred_prop(opened(gate),fluent).
==> meta_argtypes(opened(gate)).

% fluent Pos(animal,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:61
fluent(pos(Pos_Param,Pos_Ret)).
==> mpred_prop(pos(animal,position),fluent).
==> meta_argtypes(pos(animal,position)).

% fluent PosDeterminingFluent(human,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:62
fluent(posDeterminingFluent(PosDeterminingFluent_Param,
			    PosDeterminingFluent_Ret)).
==> mpred_prop(posDeterminingFluent(human,position),fluent).
==> meta_argtypes(posDeterminingFluent(human,position)).

% noninertial PosDeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:63
==> noninertial(posDeterminingFluent).

% fluent ThrowOffFails(animal,human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:64
fluent(throwOffFails(ThrowOffFails_Param,ThrowOffFails_Ret)).
==> mpred_prop(throwOffFails(animal,human),fluent).
==> meta_argtypes(throwOffFails(animal,human)).

% noninertial ThrowOffFails
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:65
==> noninertial(throwOffFails).

% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:67
==> t(species,humanSpecies).
==> t(species,elephantSpecies).
==> t(species,horseSpecies).
==> t(species,dogSpecies).

% location Outside
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:68
==> t(location,outside).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:69
% LargeSpecies(HumanSpecies).
largeSpecies(humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:70
% LargeSpecies(ElephantSpecies).
largeSpecies(elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:71
% LargeSpecies(HorseSpecies).
largeSpecies(horseSpecies).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:72
% !LargeSpecies(DogSpecies).
 %  not(largeSpecies(dogSpecies)).

 /*  [] ->
       ta(Ta_Param, not(largeSpecies(dogSpecies))).
 */
axiom(not(largeSpecies(dogSpecies)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:74
% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).

 /*  holds_at(doneBy(Event, Animal), Time) <->
       happens(Event, Time),
       (   exists([Gate], Event=close(Animal, Gate))
       ;   exists([Animal1], Event=getOff(Animal, Animal1))
       ;   exists([Animal15],
                  Event=mount(Animal, Animal15))
       ;   exists([Position], Event=move(Animal, Position))
       ;   exists([Gate7], Event=open(Animal, Gate7))
       ;   exists([Human1], Event=throwOff(Animal, Human1))
       ).
 */

 /*  [holds_at, doneBy] <->
       
       [ happens,
          (;),
         exists,
          (=),
         close,
          (;),
         exists,
          (=),
         getOff,
          (;),
         exists,
          (=),
         mount,
          (;),
         exists,
          (=),
         move,
          (;),
         exists,
          (=),
         open,
         exists,
          (=),
         throwOff
       ].
 */

 /*  allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1]) ->
       ( holds_at(doneBy(Event, Animal), Time)->happens(Event, Time), (exists([Gate], Event=close(Animal, Gate));exists([Animal1], Event=getOff(Animal, Animal1));exists([Animal15], Event=mount(Animal, Animal15));exists([Position], Event=move(Animal, Position));exists([Gate7], Event=open(Animal, Gate7));exists([Human1], Event=throwOff(Animal, Human1)))
       ).
 */

 /*  not(holds_at(doneBy(Event, Animal), Time)) :-
       (   not(happens(Event, Time))
       ;   not(equals(Event, close(Animal, Gate))),
           not(equals(Event, getOff(Animal, Animal1))),
           not(equals(Event, mount(Animal, Animal15))),
           not(equals(Event, move(Animal, Position))),
           not(equals(Event, open(Animal, Gate7))),
           not(equals(Event, throwOff(Animal, Human1)))
       ),
       allDifferent(
                    [ Event,
                      Animal,
                      Time,
                      Gate,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(happens(Event, Time))
       ;   not(equals(Event, close(Animal, Gate))),
           not(equals(Event, getOff(Animal, Animal1))),
           not(equals(Event, mount(Animal, Animal15))),
           not(equals(Event, move(Animal, Position))),
           not(equals(Event, open(Animal, Gate7))),
           not(equals(Event, throwOff(Animal, Human1)))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(happens(Event, Time))
       ;   not(call(Event=close(Animal, Gate))),
           not(call(Event=getOff(Animal, Animal1))),
           not(call(Event=mount(Animal, Animal15))),
           not(call(Event=move(Animal, Position))),
           not(call(Event=open(Animal, Gate7))),
           not(call(Event=throwOff(Animal, Human1)))
       ).
 */

 /*  [(not(happens(Event, Time));not(call(Event=close(Animal, Gate))), not(call(Event=getOff(Animal, Animal1))), not(call(Event=mount(Animal, Animal15))), not(call(Event=move(Animal, Position))), not(call(Event=open(Animal, Gate7))), not(call(Event=throwOff(Animal, Human1)))), allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(neg(doneBy(Event, Animal)), Time)).
 */

 /*  [(not(happens(Event, Time));holds_at(neg(call(Event=close(Animal, Gate))), Time), holds_at(neg(call(Event=getOff(Animal, Animal1))), Time), holds_at(neg(call(Event=mount(Animal, Animal15))), Time), holds_at(neg(call(Event=move(Animal, Position))), Time), holds_at(neg(call(Event=open(Animal, Gate7))), Time), holds_at(neg(call(Event=throwOff(Animal, Human1))), Time)), allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(neg(doneBy(Event, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:82
axiom(holds_at(neg(doneBy(Event, Animal)), Time),
   
    [  (not(happens(Event, Time));holds_at(neg(call(Event=close(Animal, Gate))), Time), holds_at(neg(call(Event=getOff(Animal, Animal1))), Time), holds_at(neg(call(Event=mount(Animal, Animal15))), Time), holds_at(neg(call(Event=move(Animal, Position))), Time), holds_at(neg(call(Event=open(Animal, Gate7))), Time), holds_at(neg(call(Event=throwOff(Animal, Human1))), Time)),
      allDifferent(
                   [ Event,
                     Animal,
                     Time,
                     Gate,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).

 /*  happens(Event, Time) :-
       holds_at(doneBy(Event, Animal), Time),
       allDifferent(
                    [ Event,
                      Animal,
                      Time,
                      Gate,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  [holds_at(doneBy(Event, Animal), Time), allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, happens(Event, Time)).
 */
axiom(happens(Event, Time),
   
    [ holds_at(doneBy(Event, Animal), Time),
      allDifferent(
                   [ Event,
                     Animal,
                     Time,
                     Gate,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).

 /*  allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1]) ->
       ( happens(Event, Time), (exists([Gate], Event=close(Animal, Gate));exists([Animal1], Event=getOff(Animal, Animal1));exists([Animal15], Event=mount(Animal, Animal15));exists([Position], Event=move(Animal, Position));exists([Gate7], Event=open(Animal, Gate7));exists([Human1], Event=throwOff(Animal, Human1)))->holds_at(doneBy(Event, Animal), Time)
       ).
 */

 /*  holds_at(doneBy(Event, Animal), Time) :-
       ( happens(Event, Time),
         (   equals(Event, close(Animal, Gate))
         ;   equals(Event, getOff(Animal, Animal1))
         ;   equals(Event, mount(Animal, Animal15))
         ;   equals(Event, move(Animal, Position))
         ;   equals(Event, open(Animal, Gate7))
         ;   equals(Event, throwOff(Animal, Human1))
         )
       ),
       allDifferent(
                    [ Event,
                      Time,
                      Gate,
                      Animal,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  axiom_head(Time) ->
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Event=close(Animal, Gate))
       ;   call(Event=getOff(Animal, Animal1))
       ;   call(Event=mount(Animal, Animal15))
       ;   call(Event=move(Animal, Position))
       ;   call(Event=open(Animal, Gate7))
       ;   call(Event=throwOff(Animal, Human1))
       ).
 */

 /*  [happens(Event, Time),  (call(Event=close(Animal, Gate));call(Event=getOff(Animal, Animal1));call(Event=mount(Animal, Animal15));call(Event=move(Animal, Position));call(Event=open(Animal, Gate7));call(Event=throwOff(Animal, Human1))), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(doneBy(Event, Animal), Time)).
 */

 /*  [happens(Event, Time),  (holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(doneBy(Event, Animal), Time)).
 */
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ happens(Event, Time),
       (holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)),
      allDifferent(
                   [ Event,
                     Time,
                     Gate,
                     Animal,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).

 /*  not(happens(Event, Time)) :-
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ),
       not(holds_at(doneBy(Event, Animal), Time)),
       allDifferent(
                    [ Event,
                      Time,
                      Gate,
                      Animal,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  axiom_head(Time) ->
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Event=close(Animal, Gate))
       ;   call(Event=getOff(Animal, Animal1))
       ;   call(Event=mount(Animal, Animal15))
       ;   call(Event=move(Animal, Position))
       ;   call(Event=open(Animal, Gate7))
       ;   call(Event=throwOff(Animal, Human1))
       ).
 */

 /*  [(call(Event=close(Animal, Gate));call(Event=getOff(Animal, Animal1));call(Event=mount(Animal, Animal15));call(Event=move(Animal, Position));call(Event=open(Animal, Gate7));call(Event=throwOff(Animal, Human1))), holds_at(neg(doneBy(Event, Animal)), Time), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, not(happens(Event, Time))).
 */

 /*  [(holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)), holds_at(neg(doneBy(Event, Animal)), Time), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, not(happens(Event, Time))).
 */
axiom(not(happens(Event, Time)),
   
    [  (holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)),
      holds_at(neg(doneBy(Event, Animal)), Time),
      allDifferent(
                   [ Event,
                     Time,
                     Gate,
                     Animal,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:84
% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.

 /*  allDifferent([Event1, Animal, Time, Event2]) ->
       ( holds_at(doneBy(Event1, Animal), Time), holds_at(doneBy(Event2, Animal), Time)->Event1=Event2
       ).
 */

 /*  not(holds_at(doneBy(Event1, Animal), Time)) :-
       holds_at(doneBy(Event2, Animal), Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Animal, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [holds_at(doneBy(Event2, Animal), Time), not(call(Event1=Event2)), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event1, Animal)), Time)).
 */

 /*  [holds_at(doneBy(Event2, Animal), Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event1, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:87
axiom(holds_at(neg(doneBy(Event1, Animal)), Time),
   
    [ holds_at(doneBy(Event2, Animal), Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Animal, Time, Event2])
    ]).

 /*  not(holds_at(doneBy(Event2, Animal), Time)) :-
       holds_at(doneBy(Event1, Animal), Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Animal, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [holds_at(doneBy(Event1, Animal), Time), not(call(Event1=Event2)), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event2, Animal)), Time)).
 */

 /*  [holds_at(doneBy(Event1, Animal), Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event2, Animal)), Time)).
 */
axiom(holds_at(neg(doneBy(Event2, Animal)), Time),
   
    [ holds_at(doneBy(Event1, Animal), Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Animal, Time, Event2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:89
% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).

 /*  large(Animal) <->
       adult(Animal),
       largeSpecies(species(Animal)).
 */

 /*  [large] <->
       [adult, largeSpecies, species].
 */

 /*  large(Animal) ->
       adult(Animal),
       largeSpecies(species(Animal)).
 */

 /*  not(large(Animal)) :-
       (   not(adult(Animal))
       ;   not(largeSpecies(species(Animal)))
       ).
 */

 /*  [(not(adult(Animal));not(largeSpecies(species(Animal))))] ->
       ta(Ta_Param, not(large(Animal))).
 */
axiom(not(large(Animal)),
    [(not(adult(Animal));not(largeSpecies(species(Animal))))]).

 /*  adult(Animal) :-
       large(Animal).
 */

 /*  [large(Animal)] ->
       ta(Ta_Param2, adult(Animal)).
 */
axiom(adult(Animal),
    [large(Animal)]).

 /*  largeSpecies(species(Animal)) :-
       large(Animal).
 */

 /*  [large(Animal)] ->
       ta(Ta_Param3, largeSpecies(species(Animal))).
 */
axiom(largeSpecies(species(Animal)),
    [large(Animal)]).

 /*  adult(Animal), largeSpecies(species(Animal)) ->
       large(Animal).
 */

 /*  large(Animal) :-
       adult(Animal),
       largeSpecies(species(Animal)).
 */

 /*  [adult(Animal), largeSpecies(species(Animal))] ->
       ta(Ta_Param4, large(Animal)).
 */
axiom(large(Animal),
    [adult(Animal), largeSpecies(species(Animal))]).

 /*  not(adult(Animal)) :-
       largeSpecies(species(Animal)),
       not(large(Animal)).
 */

 /*  [largeSpecies(species(Animal)), not(large(Animal))] ->
       ta(Ta_Param5, not(adult(Animal))).
 */
axiom(not(adult(Animal)),
    [largeSpecies(species(Animal)), not(large(Animal))]).

 /*  not(largeSpecies(species(Animal))) :-
       adult(Animal),
       not(large(Animal)).
 */

 /*  [adult(Animal), not(large(Animal))] ->
       ta(Ta_Param6, not(largeSpecies(species(Animal)))).
 */
axiom(not(largeSpecies(species(Animal))),
    [adult(Animal), not(large(Animal))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:91
% [position]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:91
% {position1} % position1!=% position & Neighbor(position,position1).

 /*  exists([Position1],
     diff(Position1, Position),
      neighbor(Position, Position1)).
 */

 /*  neighbor(Position, Position1) :-
       some(Position1, '$kolem_Fn_376'(Position)).
 */

 /*  [some(Position1, '$kolem_Fn_376'(Position))] ->
       ta(Ta_Param, neighbor(Position, Position1)).
 */
axiom(neighbor(Position, Position1),
    [some(Position1, '$kolem_Fn_376'(Position))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:93
% [position]
 % !Neighbor(position,position).
 %  not(neighbor(Position,Position)).

 /*  [] ->
       ta(Ta_Param, not(neighbor(Position, Position))).
 */
axiom(not(neighbor(Position, Position)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:95
% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).

 /*  allDifferent([Position1, Position2]) ->
       ( neighbor(Position1, Position2)->neighbor(Position2, Position1)
       ).
 */

 /*  neighbor(Position2, Position1) :-
       neighbor(Position1, Position2),
       allDifferent([Position1, Position2]).
 */

 /*  [neighbor(Position1, Position2), allDifferent([Position1, Position2])] ->
       ta(Ta_Param, neighbor(Position2, Position1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:97
axiom(neighbor(Position2, Position1),
   
    [ neighbor(Position1, Position2),
      allDifferent([Position1, Position2])
    ]).

 /*  not(neighbor(Position1, Position2)) :-
       not(neighbor(Position2, Position1)),
       allDifferent([Position1, Position2]).
 */

 /*  [not(neighbor(Position2, Position1)), allDifferent([Position1, Position2])] ->
       ta(Ta_Param3, not(neighbor(Position1, Position2))).
 */
axiom(not(neighbor(Position1, Position2)),
   
    [ not(neighbor(Position2, Position1)),
      allDifferent([Position1, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:99
% [cage]
 % cage!=% Outside.
diff(Cage,outside).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:101
% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).

 /*  sides(Position1, Position2, Gate) <->
       (   side1(Gate)=Position1,
           side2(Gate)=Position2
       ;   side2(Gate)=Position1,
           side1(Gate)=Position2
       ).
 */

 /*  [sides] <->
       [;, =, side1, =, side2, =, side2, =, side1].
 */

 /*  allDifferent([Position1, Position2, Gate]) ->
       ( sides(Position1, Position2, Gate)->side1(Gate)=Position1, side2(Gate)=Position2;side2(Gate)=Position1, side1(Gate)=Position2
       ).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       ( (   not(equals(side1(Gate), Position1))
         ;   not(equals(side2(Gate), Position2))
         ),
         (   not(equals(side2(Gate), Position1))
         ;   not(equals(side1(Gate), Position2))
         )
       ),
       allDifferent([Position1, Position2, Gate]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(side1(Gate), Position1))
       ;   not(equals(side2(Gate), Position2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(side1(Gate)=Position1))
       ;   not(call(side2(Gate)=Position2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(side2(Gate), Position1))
       ;   not(equals(side1(Gate), Position2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(side2(Gate)=Position1))
       ;   not(call(side1(Gate)=Position2))
       ).
 */

 /*  [(not(call(side1(Gate)=Position1));not(call(side2(Gate)=Position2))),  (not(call(side2(Gate)=Position1));not(call(side1(Gate)=Position2))), allDifferent([Position1, Position2, Gate])] ->
       ta(Axiom_head_Ret,
          not(sides(Position1, Position2, Gate))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:106
axiom(not(sides(Position1, Position2, Gate)),
   
    [  (not(call(side1(Gate)=Position1));not(call(side2(Gate)=Position2))),
       (not(call(side2(Gate)=Position1));not(call(side1(Gate)=Position2))),
      allDifferent([Position1, Position2, Gate])
    ]).

 /*  allDifferent([Gate, Position1, Position2]) ->
       ( side1(Gate)=Position1, side2(Gate)=Position2;side2(Gate)=Position1, side1(Gate)=Position2->sides(Position1, Position2, Gate)
       ).
 */

 /*  sides(Position1, Position2, Gate) :-
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ),
       allDifferent([Gate, Position1, Position2]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       (   call(side1(Gate)=Position1),
           call(side2(Gate)=Position2)
       ;   call(side2(Gate)=Position1),
           call(side1(Gate)=Position2)
       ).
 */

 /*  [(call(side1(Gate)=Position1), call(side2(Gate)=Position2);call(side2(Gate)=Position1), call(side1(Gate)=Position2)), allDifferent([Gate, Position1, Position2])] ->
       ta(Axiom_head_Ret4,
          sides(Position1, Position2, Gate)).
 */
axiom(sides(Position1, Position2, Gate),
   
    [  (call(side1(Gate)=Position1), call(side2(Gate)=Position2);call(side2(Gate)=Position1), call(side1(Gate)=Position2)),
      allDifferent([Gate, Position1, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:108
% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
diff(loc(side1(Gate)),loc(side2(Gate))).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:110
% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.

 /*  allDifferent([Position1, Position2, Gate1, Gate2]) ->
       ( sides(Position1, Position2, Gate1), sides(Position1, Position2, Gate2)->Gate1=Gate2
       ).
 */

 /*  not(sides(Position1, Position2, Gate1)) :-
       sides(Position1, Position2, Gate2),
       not(equals(Gate1, Gate2)),
       allDifferent([Position1, Position2, Gate1, Gate2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       not(equals(Gate1, Gate2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       not(call(Gate1=Gate2)).
 */

 /*  [sides(Position1, Position2, Gate2), not(call(Gate1=Gate2)), allDifferent([Position1, Position2, Gate1, Gate2])] ->
       ta(Axiom_head_Ret,
          not(sides(Position1, Position2, Gate1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:113
axiom(not(sides(Position1, Position2, Gate1)),
   
    [ sides(Position1, Position2, Gate2),
      not(call(Gate1=Gate2)),
      allDifferent([Position1, Position2, Gate1, Gate2])
    ]).

 /*  not(sides(Position1, Position2, Gate2)) :-
       sides(Position1, Position2, Gate1),
       not(equals(Gate1, Gate2)),
       allDifferent([Position1, Position2, Gate1, Gate2]).
 */

 /*  axiom_head(Axiom_head_Ret5) ->
       not(equals(Gate1, Gate2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret5) ->
       not(call(Gate1=Gate2)).
 */

 /*  [sides(Position1, Position2, Gate1), not(call(Gate1=Gate2)), allDifferent([Position1, Position2, Gate1, Gate2])] ->
       ta(Axiom_head_Ret5,
          not(sides(Position1, Position2, Gate2))).
 */
axiom(not(sides(Position1, Position2, Gate2)),
   
    [ sides(Position1, Position2, Gate1),
      not(call(Gate1=Gate2)),
      allDifferent([Position1, Position2, Gate1, Gate2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:115
% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).

 /*  allDifferent([Position1, Position2, Gate]) ->
       ( sides(Position1, Position2, Gate)->neighbor(Position1, Position2)
       ).
 */

 /*  neighbor(Position1, Position2) :-
       sides(Position1, Position2, Gate),
       allDifferent([Position1, Position2, Gate]).
 */

 /*  [sides(Position1, Position2, Gate), allDifferent([Position1, Position2, Gate])] ->
       ta(Ta_Param, neighbor(Position1, Position2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:117
axiom(neighbor(Position1, Position2),
   
    [ sides(Position1, Position2, Gate),
      allDifferent([Position1, Position2, Gate])
    ]).

 /*  not(sides(Position1, Position2, Gate)) :-
       not(neighbor(Position1, Position2)),
       allDifferent([Position1, Position2, Gate]).
 */

 /*  [not(neighbor(Position1, Position2)), allDifferent([Position1, Position2, Gate])] ->
       ta(Ta_Param4, not(sides(Position1, Position2, Gate))).
 */
axiom(not(sides(Position1, Position2, Gate)),
   
    [ not(neighbor(Position1, Position2)),
      allDifferent([Position1, Position2, Gate])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:119
% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:122
% {gate}%  Sides(position1,position2,gate).

 /*  exists([Gate],
    diff(loc(Position1), loc(Position2)), neighbor(Position1, Position2) ->
       sides(Position1, Position2, Gate)).
 */

 /*  sides(Position1, Position2, Gate) :-
       ( diff(loc(Position1), loc(Position2)),
         neighbor(Position1, Position2)
       ),
       some(Gate, '$kolem_Fn_377'(Position1, Position2)).
 */

 /*  [diff(loc(Position1), loc(Position2)), neighbor(Position1, Position2), some(Gate, '$kolem_Fn_377'(Position1, Position2))] ->
       ta(Ta_Param, sides(Position1, Position2, Gate)).
 */
axiom(sides(Position1, Position2, Gate),
   
    [ diff(loc(Position1), loc(Position2)),
      neighbor(Position1, Position2),
      some(Gate, '$kolem_Fn_377'(Position1, Position2))
    ]).

 /*  not(neighbor(Position1, Position2)) :-
       diff(loc(Position1), loc(Position2)),
       not(sides(Position1, Position2, Gate)),
       some(Gate, '$kolem_Fn_377'(Position1, Position2)).
 */

 /*  [diff(loc(Position1), loc(Position2)), not(sides(Position1, Position2, Gate)), some(Gate, '$kolem_Fn_377'(Position1, Position2))] ->
       ta(Ta_Param5, not(neighbor(Position1, Position2))).
 */
axiom(not(neighbor(Position1, Position2)),
   
    [ diff(loc(Position1), loc(Position2)),
      not(sides(Position1, Position2, Gate)),
      some(Gate, '$kolem_Fn_377'(Position1, Position2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:124
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.

 /*  allDifferent([Animal, Position1, Time, Position2]) ->
       ( holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time)->Position1=Position2
       ).
 */

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time),
       not(equals(Position1, Position2)),
       allDifferent([Animal, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(pos(Animal, Position2), Time), not(call(Position1=Position2)), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */

 /*  [holds_at(pos(Animal, Position2), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:127
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Animal, Position1, Time, Position2])
    ]).

 /*  not(holds_at(pos(Animal, Position2), Time)) :-
       holds_at(pos(Animal, Position1), Time),
       not(equals(Position1, Position2)),
       allDifferent([Animal, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(pos(Animal, Position1), Time), not(call(Position1=Position2)), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position2)), Time)).
 */

 /*  [holds_at(pos(Animal, Position1), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position2)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position2)), Time),
   
    [ holds_at(pos(Animal, Position1), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Animal, Position1, Time, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:129
% [animal,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:130
% {position} % HoldsAt(Pos(animal,position),time).

 /*  exists([Position],
    holds_at(pos(Animal,Position),Time)).
 */

 /*  holds_at(pos(Animal, Position), Time) :-
       some(Position, '$kolem_Fn_378'(Animal, Time)).
 */

 /*  [some(Position, '$kolem_Fn_378'(Animal, Time))] ->
       ta(Time, holds_at(pos(Animal, Position), Time)).
 */
axiom(holds_at(pos(Animal, Position), Time),
    [some(Position, '$kolem_Fn_378'(Animal, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:132
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).

 /*  allDifferent([Animal1, Animal2, Position, Time, Human, Human5]) ->
       ( diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time)->exists([Human],  (Human=Animal1, holds_at(mounted(Human, Animal2), Time)));exists([Human5],  (Human5=Animal2, holds_at(mounted(Human5, Animal1), Time)))
       ).
 */

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, not(large(Animal1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:139
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      diff(Animal1, Animal2),
       (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), large(Animal1), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      large(Animal1),
      diff(Animal1, Animal2),
       (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       holds_at(pos(Animal2, Position), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [holds_at(pos(Animal2, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */

 /*  [holds_at(pos(Animal2, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),  (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(pos(Animal2, Position), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
       (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),
       (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  not(holds_at(pos(Animal2, Position), Time)) :-
       holds_at(pos(Animal1, Position), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal2, Position)), Time)).
 */

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),  (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal2, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal2, Position)), Time),
   
    [ holds_at(pos(Animal1, Position), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
       (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),
       (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  holds_at(mounted(Human, Animal2), Time) :-
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ),
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [(not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human, Animal2), Time)).
 */

 /*  [(holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human, Animal2), Time)).
 */
axiom(holds_at(mounted(Human, Animal2), Time),
   
    [  (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)),
      diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  holds_at(mounted(Human5, Animal1), Time) :-
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  [(not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human5, Animal1), Time)).
 */

 /*  [(holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human5, Animal1), Time)).
 */
axiom(holds_at(mounted(Human5, Animal1), Time),
   
    [  (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),
      diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:141
% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.

 /*  allDifferent([Human, Position1, Time, Position2]) ->
       ( holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(posDeterminingFluent(Human, Position2), Time)->Position1=Position2
       ).
 */

 /*  not(holds_at(posDeterminingFluent(Human, Position1), Time)) :-
       holds_at(posDeterminingFluent(Human, Position2), Time),
       not(equals(Position1, Position2)),
       allDifferent([Human, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position2), Time), not(call(Position1=Position2)), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position1)),
                   Time)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position2), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position1)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:144
axiom(holds_at(neg(posDeterminingFluent(Human, Position1)), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position2), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Human, Position1, Time, Position2])
    ]).

 /*  not(holds_at(posDeterminingFluent(Human, Position2), Time)) :-
       holds_at(posDeterminingFluent(Human, Position1), Time),
       not(equals(Position1, Position2)),
       allDifferent([Human, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position1), Time), not(call(Position1=Position2)), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position2)),
                   Time)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position2)),
                   Time)).
 */
axiom(holds_at(neg(posDeterminingFluent(Human, Position2)), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position1), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Human, Position1, Time, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:146
% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).

 /*  [] ->
       ta(Time,
          initiates(move(Animal, Position),
                    pos(Animal, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:147
axiom(initiates(move(Animal, Position), pos(Animal, Position), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:149
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).

 /*  [holds_at(pos(Animal, Position1), Time)] ->
       ta(Time,
          terminates(move(Animal, Position2),
                     pos(Animal, Position1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:151
axiom(terminates(move(Animal, Position2), pos(Animal, Position1), Time),
    [holds_at(pos(Animal, Position1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:153
% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).

 /*  allDifferent([Animal, Position, Time]) ->
       ( happens(move(Animal, Position), Time)->holds_at(neg(pos(Animal, Position)), Time)
       ).
 */

 /*  holds_at(neg(pos(Animal, Position)), Time) :-
       happens(move(Animal, Position), Time),
       allDifferent([Animal, Position, Time]).
 */

 /*  [happens(move(Animal, Position), Time), allDifferent([Animal, Position, Time])] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:155
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ happens(move(Animal, Position), Time),
      allDifferent([Animal, Position, Time])
    ]).

 /*  not(happens(move(Animal, Position), Time)) :-
       not(holds_at(neg(pos(Animal, Position)), Time)),
       allDifferent([Animal, Position, Time]).
 */

 /*  [holds_at(neg(neg(pos(Animal, Position))), Time), allDifferent([Animal, Position, Time])] ->
       ta(Time, not(happens(move(Animal, Position), Time))).
 */
axiom(not(happens(move(Animal, Position), Time)),
   
    [ holds_at(neg(neg(pos(Animal, Position))), Time),
      allDifferent([Animal, Position, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:157
% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).

 /*  allDifferent([Human, Position, Time, Animal]) ->
       ( happens(move(Human, Position), Time)->not(exists([Animal], holds_at(mounted(Human, Animal), Time)))
       ).
 */

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(move(Human, Position), Time),
       allDifferent([Human, Position, Time, Animal]).
 */

 /*  [happens(move(Human, Position), Time), allDifferent([Human, Position, Time, Animal])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:159
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(move(Human, Position), Time),
      allDifferent([Human, Position, Time, Animal])
    ]).

 /*  not(happens(move(Human, Position), Time)) :-
       holds_at(mounted(Human, Animal), Time),
       allDifferent([Human, Position, Time, Animal]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), allDifferent([Human, Position, Time, Animal])] ->
       ta(Time, not(happens(move(Human, Position), Time))).
 */
axiom(not(happens(move(Human, Position), Time)),
   
    [ holds_at(mounted(Human, Animal), Time),
      allDifferent([Human, Position, Time, Animal])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:161
% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).

 /*  [] ->
       ta(Time,
          initiates(open(Human, Gate), opened(Gate), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:162
axiom(initiates(open(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:164
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).

 /*  allDifferent([Human, Gate, Time, Animal, Position]) ->
       ( happens(open(Human, Gate), Time)->holds_at(neg(opened(Gate)), Time), not(exists([Animal], holds_at(mounted(Human, Animal), Time))), exists([Position],  ((side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time)))
       ).
 */

 /*  not(happens(open(Human, Gate), Time)) :-
       (   not(holds_at(neg(opened(Gate)), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(opened(Gate)), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(opened(Gate))), Time)
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(call(side1(Gate)=Position)),
           not(call(side2(Gate)=Position))
       ;   holds_at(neg(pos(Human, Position)), Time)
       ).
 */

 /*  [(holds_at(neg(neg(opened(Gate))), Time);holds_at(mounted(Human, Animal), Time);not(call(side1(Gate)=Position)), not(call(side2(Gate)=Position));holds_at(neg(pos(Human, Position)), Time)), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, not(happens(open(Human, Gate), Time))).
 */

 /*  [(holds_at(neg(neg(opened(Gate))), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, not(happens(open(Human, Gate), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:170
axiom(not(happens(open(Human, Gate), Time)),
   
    [  (holds_at(neg(neg(opened(Gate))), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).

 /*  holds_at(neg(opened(Gate)), Time) :-
       happens(open(Human, Gate), Time),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  [happens(open(Human, Gate), Time), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, holds_at(neg(opened(Gate)), Time)).
 */
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ happens(open(Human, Gate), Time),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(open(Human, Gate), Time),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  [happens(open(Human, Gate), Time), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(open(Human, Gate), Time),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).

 /*  holds_at(pos(Human, Position), Time) :-
       happens(open(Human, Gate), Time),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  [happens(open(Human, Gate), Time), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, holds_at(pos(Human, Position), Time)).
 */
axiom(holds_at(pos(Human, Position), Time),
   
    [ happens(open(Human, Gate), Time),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:172
% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).

 /*  [] ->
       ta(Time,
          terminates(close(Human, Gate), opened(Gate), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:173
axiom(terminates(close(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:175
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:179
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).

 /*  exists([Position],
    happens(close(Human, Gate), Time) ->
       holds_at(opened(Gate), Time),
       not(exists([Animal],
                  holds_at(mounted(Human, Animal), Time))),
       (   side1(Gate)=Position
       ;   side2(Gate)=Position
       ),
       holds_at(pos(Human, Position), Time)).
 */

 /*  not(happens(close(Human, Gate), Time)) :-
       (   not(holds_at(opened(Gate), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ),
       some(Position,
            '$kolem_Fn_384'(Human, Gate, Time, Animal)).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(opened(Gate), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(opened(Gate)), Time)
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(call(side1(Gate)=Position)),
           not(call(side2(Gate)=Position))
       ;   holds_at(neg(pos(Human, Position)), Time)
       ).
 */

 /*  [(holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);not(call(side1(Gate)=Position)), not(call(side2(Gate)=Position));holds_at(neg(pos(Human, Position)), Time)), some(Position, '$kolem_Fn_384'(Human, Gate, Time, Animal))] ->
       ta(Time, not(happens(close(Human, Gate), Time))).
 */

 /*  [(holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)), some(Position, '$kolem_Fn_384'(Human, Gate, Time, Animal))] ->
       ta(Time, not(happens(close(Human, Gate), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:181
axiom(not(happens(close(Human, Gate), Time)),
   
    [  (holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)),
      some(Position,
           '$kolem_Fn_384'(Human, Gate, Time, Animal))
    ]).

 /*  holds_at(opened(Gate), Time) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_384'(Human, Gate, Time, Animal)).
 */

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_384'(Human, Gate, Time, Animal))] ->
       ta(Time, holds_at(opened(Gate), Time)).
 */
axiom(holds_at(opened(Gate), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_384'(Human, Gate, Time, Animal))
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_384'(Human, Gate, Time, Animal)).
 */

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_384'(Human, Gate, Time, Animal))] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_384'(Human, Gate, Time, Animal))
    ]).

 /*  holds_at(pos(Human, Position), Time) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_384'(Human, Gate, Time, Animal)).
 */

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_384'(Human, Gate, Time, Animal))] ->
       ta(Time, holds_at(pos(Human, Position), Time)).
 */
axiom(holds_at(pos(Human, Position), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_384'(Human, Gate, Time, Animal))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:183
% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).

 /*  allDifferent([Human, Animal, Time, Position]) ->
       ( holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time)->holds_at(pos(Human, Position), Time)
       ).
 */

 /*  holds_at(pos(Human, Position), Time) :-
       ( holds_at(mounted(Human, Animal), Time),
         holds_at(pos(Animal, Position), Time)
       ),
       allDifferent([Human, Animal, Time, Position]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time), allDifferent([Human, Animal, Time, Position])] ->
       ta(Time, holds_at(pos(Human, Position), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:186
axiom(holds_at(pos(Human, Position), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(pos(Animal, Position), Time),
      allDifferent([Human, Animal, Time, Position])
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       holds_at(pos(Animal, Position), Time),
       not(holds_at(pos(Human, Position), Time)),
       allDifferent([Human, Animal, Time, Position]).
 */

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Human, Position)), Time), allDifferent([Human, Animal, Time, Position])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(pos(Human, Position)), Time),
      allDifferent([Human, Animal, Time, Position])
    ]).

 /*  not(holds_at(pos(Animal, Position), Time)) :-
       holds_at(mounted(Human, Animal), Time),
       not(holds_at(pos(Human, Position), Time)),
       allDifferent([Human, Animal, Time, Position]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), holds_at(neg(pos(Human, Position)), Time), allDifferent([Human, Animal, Time, Position])] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(neg(pos(Human, Position)), Time),
      allDifferent([Human, Animal, Time, Position])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:188
% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).

 /*  holds_at(moves(Animal), Time) <->
       exists([Position],
               (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1))).
 */

 /*  [holds_at, moves] <->
       [exists, holds_at, pos, holds_at, neg, pos, +].
 */

 /*  allDifferent([Animal, Time, Position]) ->
       ( holds_at(moves(Animal), Time)->exists([Position],  (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1)))
       ).
 */

 /*  not(holds_at(moves(Animal), Time)) :-
       (   not(holds_at(pos(Animal, Position), Time))
       ;   not(holds_at(neg(pos(Animal, Position)), Time+1))
       ),
       allDifferent([Animal, Time, Position]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(pos(Animal, Position), Time))
       ;   not(holds_at(neg(pos(Animal, Position)), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(pos(Animal, Position)), Time)
       ;   holds_at(neg(neg(pos(Animal, Position))), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time3), b(Time, Time3),  (holds_at(neg(pos(Animal, Position)), Time);holds_at(neg(neg(pos(Animal, Position))), Time3)), allDifferent([Animal, Time, Position])] ->
       ta(Time, holds_at(neg(moves(Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:192
axiom(holds_at(neg(moves(Animal)), Time),
   
    [ b(Time, Time3),
       (holds_at(neg(pos(Animal, Position)), Time);holds_at(neg(neg(pos(Animal, Position))), Time3)),
      allDifferent([Animal, Time, Position])
    ]).

 /*  holds_at(pos(Animal, Position), Time) :-
       holds_at(moves(Animal), Time),
       allDifferent([Animal, Time, Position]).
 */

 /*  [holds_at(moves(Animal), Time), allDifferent([Animal, Time, Position])] ->
       ta(Time, holds_at(pos(Animal, Position), Time)).
 */
axiom(holds_at(pos(Animal, Position), Time),
   
    [ holds_at(moves(Animal), Time),
      allDifferent([Animal, Time, Position])
    ]).

 /*  holds_at(neg(pos(Animal, Position)), Time+1) :-
       holds_at(moves(Animal), Time),
       allDifferent([Animal, Time, Position]).
 */

 /*  [holds_at(moves(Animal), Time), allDifferent([Animal, Time, Position]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time4)).
 */
axiom(holds_at(neg(pos(Animal, Position)), Time4),
   
    [ holds_at(moves(Animal), Time),
      allDifferent([Animal, Time, Position]),
      b(Time, Time4)
    ]).

 /*  allDifferent([Position, Animal, Time]) ->
       ( exists([Position],  (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1)))->holds_at(moves(Animal), Time)
       ).
 */

 /*  holds_at(moves(Animal), Time) :-
       ( holds_at(pos(Animal, Position), Time),
         holds_at(neg(pos(Animal, Position)), Time+1)
       ),
       allDifferent([Position, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time5), allDifferent([Position, Animal, Time]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(moves(Animal), Time)).
 */
axiom(holds_at(moves(Animal), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(pos(Animal, Position)), Time5),
      allDifferent([Position, Animal, Time]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(pos(Animal, Position), Time)) :-
       holds_at(neg(pos(Animal, Position)), Time+1),
       not(holds_at(moves(Animal), Time)),
       allDifferent([Position, Animal, Time]).
 */

 /*  [holds_at(neg(pos(Animal, Position)), Time6), holds_at(neg(moves(Animal)), Time), allDifferent([Position, Animal, Time]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ holds_at(neg(pos(Animal, Position)), Time6),
      holds_at(neg(moves(Animal)), Time),
      allDifferent([Position, Animal, Time]),
      b(Time, Time6)
    ]).

 /*  not(holds_at(neg(pos(Animal, Position)), Time+1)) :-
       holds_at(pos(Animal, Position), Time),
       not(holds_at(moves(Animal), Time)),
       allDifferent([Position, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(moves(Animal)), Time), allDifferent([Position, Animal, Time]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal, Position))), Time7)).
 */
axiom(holds_at(neg(neg(pos(Animal, Position))), Time7),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(moves(Animal)), Time),
      allDifferent([Position, Animal, Time]),
      b(Time, Time7)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:194
% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).

 /*  holds_at(mountFails(Human), Time) <->
       exists([Animal],
               (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).
 */

 /*  [holds_at, mountFails] <->
       [exists, happens, mount, holds_at, moves].
 */

 /*  allDifferent([Human, Time, Animal]) ->
       ( holds_at(mountFails(Human), Time)->exists([Animal],  (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time)))
       ).
 */

 /*  not(holds_at(mountFails(Human), Time)) :-
       (   not(happens(mount(Human, Animal), Time))
       ;   not(holds_at(moves(Animal), Time))
       ),
       allDifferent([Human, Time, Animal]).
 */

 /*  axiom_head(Time) ->
       (   not(happens(mount(Human, Animal), Time))
       ;   not(holds_at(moves(Animal), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(happens(mount(Human, Animal), Time))
       ;   holds_at(neg(moves(Animal)), Time)
       ).
 */

 /*  [(not(happens(mount(Human, Animal), Time));holds_at(neg(moves(Animal)), Time)), allDifferent([Human, Time, Animal])] ->
       ta(Time, holds_at(neg(mountFails(Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:198
axiom(holds_at(neg(mountFails(Human)), Time),
   
    [  (not(happens(mount(Human, Animal), Time));holds_at(neg(moves(Animal)), Time)),
      allDifferent([Human, Time, Animal])
    ]).

 /*  happens(mount(Human, Animal), Time) :-
       holds_at(mountFails(Human), Time),
       allDifferent([Human, Time, Animal]).
 */

 /*  [holds_at(mountFails(Human), Time), allDifferent([Human, Time, Animal])] ->
       ta(Time, happens(mount(Human, Animal), Time)).
 */
axiom(happens(mount(Human, Animal), Time),
   
    [ holds_at(mountFails(Human), Time),
      allDifferent([Human, Time, Animal])
    ]).

 /*  holds_at(moves(Animal), Time) :-
       holds_at(mountFails(Human), Time),
       allDifferent([Human, Time, Animal]).
 */

 /*  [holds_at(mountFails(Human), Time), allDifferent([Human, Time, Animal])] ->
       ta(Time, holds_at(moves(Animal), Time)).
 */
axiom(holds_at(moves(Animal), Time),
   
    [ holds_at(mountFails(Human), Time),
      allDifferent([Human, Time, Animal])
    ]).

 /*  allDifferent([Animal, Human, Time]) ->
       ( exists([Animal],  (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time)))->holds_at(mountFails(Human), Time)
       ).
 */

 /*  holds_at(mountFails(Human), Time) :-
       ( happens(mount(Human, Animal), Time),
         holds_at(moves(Animal), Time)
       ),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(mountFails(Human), Time)).
 */
axiom(holds_at(mountFails(Human), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(moves(Animal), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       holds_at(moves(Animal), Time),
       not(holds_at(mountFails(Human), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [holds_at(moves(Animal), Time), holds_at(neg(mountFails(Human)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ holds_at(moves(Animal), Time),
      holds_at(neg(mountFails(Human)), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(holds_at(moves(Animal), Time)) :-
       happens(mount(Human, Animal), Time),
       not(holds_at(mountFails(Human), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(mount(Human, Animal), Time), holds_at(neg(mountFails(Human)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(neg(moves(Animal)), Time)).
 */
axiom(holds_at(neg(moves(Animal)), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(neg(mountFails(Human)), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:200
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          releases(mount(Human, Animal),
                   pos(Human, Position),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:202
axiom(releases(mount(Human, Animal), pos(Human, Position), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:204
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          initiates(mount(Human, Animal),
                    mounted(Human, Animal),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:206
axiom(initiates(mount(Human, Animal), mounted(Human, Animal), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:208
% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).

 /*  [holds_at(pos(Animal, Position), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          initiates(mount(Human, Animal),
                    pos(Human, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:211
axiom(initiates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:213
% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).

 /*  [holds_at(pos(Human, Position), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          terminates(mount(Human, Animal),
                     pos(Human, Position),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:216
axiom(terminates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:218
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).

 /*  allDifferent([Human, Animal, Time]) ->
       ( happens(mount(Human, Animal), Time)->large(Animal)
       ).
 */

 /*  large(Animal) :-
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, large(Animal)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:220
axiom(large(Animal),
   
    [ happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       not(large(Animal)),
       allDifferent([Human, Animal, Time]).
 */

 /*  [not(large(Animal)), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ not(large(Animal)),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:222
% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).

 /*  allDifferent([Human, Animal, Time]) ->
       ( holds_at(mounted(Human, Animal), Time)->large(Animal)
       ).
 */

 /*  large(Animal) :-
       holds_at(mounted(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, large(Animal)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:224
axiom(large(Animal),
   
    [ holds_at(mounted(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       not(large(Animal)),
       allDifferent([Human, Animal, Time]).
 */

 /*  [not(large(Animal)), allDifferent([Human, Animal, Time])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ not(large(Animal)),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:226
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).

 /*  allDifferent([Human1, Human2, Time]) ->
       ( happens(mount(Human1, Human2), Time)->not(large(Human1))
       ).
 */

 /*  not(large(Human1)) :-
       happens(mount(Human1, Human2), Time),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [happens(mount(Human1, Human2), Time), allDifferent([Human1, Human2, Time])] ->
       ta(Time, not(large(Human1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:228
axiom(not(large(Human1)),
   
    [ happens(mount(Human1, Human2), Time),
      allDifferent([Human1, Human2, Time])
    ]).

 /*  not(happens(mount(Human1, Human2), Time)) :-
       large(Human1),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [large(Human1), allDifferent([Human1, Human2, Time])] ->
       ta(Time, not(happens(mount(Human1, Human2), Time))).
 */
axiom(not(happens(mount(Human1, Human2), Time)),
    [large(Human1), allDifferent([Human1, Human2, Time])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:230
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).

 /*  allDifferent([Human1, Human2, Time]) ->
       ( holds_at(mounted(Human1, Human2), Time)->not(large(Human1))
       ).
 */

 /*  not(large(Human1)) :-
       holds_at(mounted(Human1, Human2), Time),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [holds_at(mounted(Human1, Human2), Time), allDifferent([Human1, Human2, Time])] ->
       ta(Time, not(large(Human1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:232
axiom(not(large(Human1)),
   
    [ holds_at(mounted(Human1, Human2), Time),
      allDifferent([Human1, Human2, Time])
    ]).

 /*  not(holds_at(mounted(Human1, Human2), Time)) :-
       large(Human1),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [large(Human1), allDifferent([Human1, Human2, Time])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Human2)), Time)).
 */
axiom(holds_at(neg(mounted(Human1, Human2)), Time),
    [large(Human1), allDifferent([Human1, Human2, Time])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:234
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).

 /*  allDifferent([Human, Animal, Time, Human1]) ->
       ( happens(mount(Human, Animal), Time)->not(exists([Human1],  (diff(Human1, Human), holds_at(mounted(Human1, Animal), Time))))
       ).
 */

 /*  not(holds_at(mounted(Human1, Animal), Time)) :-
       diff(Human1, Human),
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:236
axiom(holds_at(neg(mounted(Human1, Animal)), Time),
   
    [ diff(Human1, Human),
      happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       ( diff(Human1, Human),
         holds_at(mounted(Human1, Animal), Time)
       ),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), holds_at(mounted(Human1, Animal), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ diff(Human1, Human),
      holds_at(mounted(Human1, Animal), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:238
% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.

 /*  allDifferent([Human1, Animal, Time, Human2]) ->
       ( holds_at(mounted(Human1, Animal), Time), holds_at(mounted(Human2, Animal), Time)->Human1=Human2
       ).
 */

 /*  not(holds_at(mounted(Human1, Animal), Time)) :-
       holds_at(mounted(Human2, Animal), Time),
       not(equals(Human1, Human2)),
       allDifferent([Human1, Animal, Time, Human2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Human1, Human2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Human1=Human2)).
 */

 /*  [holds_at(mounted(Human2, Animal), Time), not(call(Human1=Human2)), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */

 /*  [holds_at(mounted(Human2, Animal), Time), holds_at(neg(call(Human1=Human2)), Time), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:241
axiom(holds_at(neg(mounted(Human1, Animal)), Time),
   
    [ holds_at(mounted(Human2, Animal), Time),
      holds_at(neg(call(Human1=Human2)), Time),
      allDifferent([Human1, Animal, Time, Human2])
    ]).

 /*  not(holds_at(mounted(Human2, Animal), Time)) :-
       holds_at(mounted(Human1, Animal), Time),
       not(equals(Human1, Human2)),
       allDifferent([Human1, Animal, Time, Human2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Human1, Human2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Human1=Human2)).
 */

 /*  [holds_at(mounted(Human1, Animal), Time), not(call(Human1=Human2)), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */

 /*  [holds_at(mounted(Human1, Animal), Time), holds_at(neg(call(Human1=Human2)), Time), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human2, Animal)), Time),
   
    [ holds_at(mounted(Human1, Animal), Time),
      holds_at(neg(call(Human1=Human2)), Time),
      allDifferent([Human1, Animal, Time, Human2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:243
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).

 /*  allDifferent([Human, Animal, Time, Human1]) ->
       ( happens(mount(Human, Animal), Time)->not(exists([Human1],  (diff(Human1, Human), holds_at(mounted(Human1, Human), Time))))
       ).
 */

 /*  not(holds_at(mounted(Human1, Human), Time)) :-
       diff(Human1, Human),
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time, holds_at(neg(mounted(Human1, Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:245
axiom(holds_at(neg(mounted(Human1, Human)), Time),
   
    [ diff(Human1, Human),
      happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       ( diff(Human1, Human),
         holds_at(mounted(Human1, Human), Time)
       ),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), holds_at(mounted(Human1, Human), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ diff(Human1, Human),
      holds_at(mounted(Human1, Human), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:247
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:249
% {animal}%  HoldsAt(Mounted(human2,animal),time).

 /*  exists([Animal],
    happens(mount(Human1, Human2), Time) ->
       holds_at(mounted(Human2, Animal), Time)).
 */

 /*  holds_at(mounted(Human2, Animal), Time) :-
       happens(mount(Human1, Human2), Time),
       some(Animal, '$kolem_Fn_392'(Human1, Human2, Time)).
 */

 /*  [happens(mount(Human1, Human2), Time), some(Animal, '$kolem_Fn_392'(Human1, Human2, Time))] ->
       ta(Time, holds_at(mounted(Human2, Animal), Time)).
 */
axiom(holds_at(mounted(Human2, Animal), Time),
   
    [ happens(mount(Human1, Human2), Time),
      some(Animal, '$kolem_Fn_392'(Human1, Human2, Time))
    ]).

 /*  not(happens(mount(Human1, Human2), Time)) :-
       not(holds_at(mounted(Human2, Animal), Time)),
       some(Animal, '$kolem_Fn_392'(Human1, Human2, Time)).
 */

 /*  [holds_at(neg(mounted(Human2, Animal)), Time), some(Animal, '$kolem_Fn_392'(Human1, Human2, Time))] ->
       ta(Time, not(happens(mount(Human1, Human2), Time))).
 */
axiom(not(happens(mount(Human1, Human2), Time)),
   
    [ holds_at(neg(mounted(Human2, Animal)), Time),
      some(Animal, '$kolem_Fn_392'(Human1, Human2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:251
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).

 /*  allDifferent([Human1, Human2, Time, Animal]) ->
       ( holds_at(mounted(Human1, Human2), Time)->not(exists([Animal], holds_at(mounted(Human2, Animal), Time)))
       ).
 */

 /*  not(holds_at(mounted(Human2, Animal), Time)) :-
       holds_at(mounted(Human1, Human2), Time),
       allDifferent([Human1, Human2, Time, Animal]).
 */

 /*  [holds_at(mounted(Human1, Human2), Time), allDifferent([Human1, Human2, Time, Animal])] ->
       ta(Time,
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:253
axiom(holds_at(neg(mounted(Human2, Animal)), Time),
   
    [ holds_at(mounted(Human1, Human2), Time),
      allDifferent([Human1, Human2, Time, Animal])
    ]).

 /*  not(holds_at(mounted(Human1, Human2), Time)) :-
       holds_at(mounted(Human2, Animal), Time),
       allDifferent([Human1, Human2, Time, Animal]).
 */

 /*  [holds_at(mounted(Human2, Animal), Time), allDifferent([Human1, Human2, Time, Animal])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Human2)), Time)).
 */
axiom(holds_at(neg(mounted(Human1, Human2)), Time),
   
    [ holds_at(mounted(Human2, Animal), Time),
      allDifferent([Human1, Human2, Time, Animal])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:255
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).

 /*  allDifferent([Human, Animal, Time, Animal1]) ->
       ( happens(mount(Human, Animal), Time)->not(exists([Animal1], holds_at(mounted(Human, Animal1), Time)))
       ).
 */

 /*  not(holds_at(mounted(Human, Animal1), Time)) :-
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time, Animal1]).
 */

 /*  [happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time, Animal1])] ->
       ta(Time,
          holds_at(neg(mounted(Human, Animal1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:257
axiom(holds_at(neg(mounted(Human, Animal1)), Time),
   
    [ happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time, Animal1])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       holds_at(mounted(Human, Animal1), Time),
       allDifferent([Human, Animal, Time, Animal1]).
 */

 /*  [holds_at(mounted(Human, Animal1), Time), allDifferent([Human, Animal, Time, Animal1])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ holds_at(mounted(Human, Animal1), Time),
      allDifferent([Human, Animal, Time, Animal1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:259
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          terminates(getOff(Human, Animal),
                     mounted(Human, Animal),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:261
axiom(terminates(getOff(Human, Animal), mounted(Human, Animal), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:263
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(posDeterminingFluent(Human, Position), Time)] ->
       ta(Time,
          initiates(getOff(Human, Animal),
                    pos(Human, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:266
axiom(initiates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:268
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(pos(Human, Position), Time)] ->
       ta(Time,
          terminates(getOff(Human, Animal),
                     pos(Human, Position),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:271
axiom(terminates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(pos(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:273
% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(pos(Human, Position1), Time), diff(Position1, Position2)] ->
       ta(Time,
          terminates(getOff(Human, Animal),
                     pos(Human, Position2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:277
axiom(terminates(getOff(Human, Animal), pos(Human, Position2), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(pos(Human, Position1), Time),
      diff(Position1, Position2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:279
% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).

 /*  allDifferent([Human, Animal, Time]) ->
       ( happens(getOff(Human, Animal), Time)->holds_at(mounted(Human, Animal), Time)
       ).
 */

 /*  holds_at(mounted(Human, Animal), Time) :-
       happens(getOff(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(getOff(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, holds_at(mounted(Human, Animal), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:281
axiom(holds_at(mounted(Human, Animal), Time),
   
    [ happens(getOff(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       not(holds_at(mounted(Human, Animal), Time)),
       allDifferent([Human, Animal, Time]).
 */

 /*  [holds_at(neg(mounted(Human, Animal)), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(getOff(Human, Animal), Time))).
 */
axiom(not(happens(getOff(Human, Animal), Time)),
   
    [ holds_at(neg(mounted(Human, Animal)), Time),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:283
% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).

 /*  holds_at(throwOffFails(Animal1, Human), Time) <->
       exists([Position, Animal2],
               (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).
 */

 /*  [holds_at, throwOffFails] <->
       [exists, diff, holds_at, posDeterminingFluent, large, holds_at, pos, +].
 */

 /*  allDifferent([Animal1, Human, Time, Position, Animal2]) ->
       ( holds_at(throwOffFails(Animal1, Human), Time)->exists([Position, Animal2],  (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1)))
       ).
 */

 /*  not(holds_at(throwOffFails(Animal1, Human), Time)) :-
       (   not(diff(Animal2, Human))
       ;   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(large(Animal2))
       ;   not(holds_at(pos(Animal2, Position), Time+1))
       ),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Animal2, Human))
       ;   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(large(Animal2))
       ;   not(holds_at(pos(Animal2, Position), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Animal2, Human))
       ;   holds_at(neg(posDeterminingFluent(Human, Position)),
                    Time)
       ;   not(large(Animal2))
       ;   holds_at(neg(pos(Animal2, Position)), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time5), b(Time, Time5),  (not(diff(Animal2, Human));holds_at(neg(posDeterminingFluent(Human, Position)), Time);not(large(Animal2));holds_at(neg(pos(Animal2, Position)), Time5)), allDifferent([Animal1, Human, Time, Position, Animal2])] ->
       ta(Time,
          holds_at(neg(throwOffFails(Animal1, Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:289
axiom(holds_at(neg(throwOffFails(Animal1, Human)), Time),
   
    [ b(Time, Time5),
       (not(diff(Animal2, Human));holds_at(neg(posDeterminingFluent(Human, Position)), Time);not(large(Animal2));holds_at(neg(pos(Animal2, Position)), Time5)),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ])
    ]).

 /*  holds_at(posDeterminingFluent(Human, Position), Time) :-
       holds_at(throwOffFails(Animal1, Human), Time),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), allDifferent([Animal1, Human, Time, Position, Animal2])] ->
       ta(Time,
          holds_at(posDeterminingFluent(Human, Position), Time)).
 */
axiom(holds_at(posDeterminingFluent(Human, Position), Time),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ])
    ]).

 /*  large(Animal2) :-
       holds_at(throwOffFails(Animal1, Human), Time),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), allDifferent([Animal1, Human, Time, Position, Animal2])] ->
       ta(Time, large(Animal2)).
 */
axiom(large(Animal2),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ])
    ]).

 /*  holds_at(pos(Animal2, Position), Time+1) :-
       holds_at(throwOffFails(Animal1, Human), Time),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), allDifferent([Animal1, Human, Time, Position, Animal2]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, holds_at(pos(Animal2, Position), Time6)).
 */
axiom(holds_at(pos(Animal2, Position), Time6),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ]),
      b(Time, Time6)
    ]).

 /*  allDifferent([Position, Animal2, Human, Time, Animal1]) ->
       ( exists([Position, Animal2],  (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1)))->holds_at(throwOffFails(Animal1, Human), Time)
       ).
 */

 /*  holds_at(throwOffFails(Animal1, Human), Time) :-
       ( diff(Animal2, Human),
         holds_at(posDeterminingFluent(Human, Position), Time),
         large(Animal2),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time7), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(throwOffFails(Animal1, Human), Time)).
 */
axiom(holds_at(throwOffFails(Animal1, Human), Time),
   
    [ diff(Animal2, Human),
      holds_at(posDeterminingFluent(Human, Position), Time),
      large(Animal2),
      holds_at(pos(Animal2, Position), Time7),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time7)
    ]).

 /*  not(holds_at(posDeterminingFluent(Human, Position), Time)) :-
       ( large(Animal2),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [large(Animal2), holds_at(pos(Animal2, Position), Time8), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position)),
                   Time)).
 */
axiom(holds_at(neg(posDeterminingFluent(Human, Position)), Time),
   
    [ large(Animal2),
      holds_at(pos(Animal2, Position), Time8),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time8)
    ]).

 /*  not(large(Animal2)) :-
       holds_at(pos(Animal2, Position), Time+1),
       holds_at(posDeterminingFluent(Human, Position), Time),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position), Time9), holds_at(posDeterminingFluent(Human, Position), Time), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal2, Position), Time9),
      holds_at(posDeterminingFluent(Human, Position), Time),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(pos(Animal2, Position), Time+1)) :-
       large(Animal2),
       holds_at(posDeterminingFluent(Human, Position), Time),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [large(Animal2), holds_at(posDeterminingFluent(Human, Position), Time), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position)), Time10)).
 */
axiom(holds_at(neg(pos(Animal2, Position)), Time10),
   
    [ large(Animal2),
      holds_at(posDeterminingFluent(Human, Position), Time),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time10)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:291
% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).

 /*  [holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          initiates(throwOff(Animal, Human),
                    pos(Human, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:294
axiom(initiates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(throwOffFails(Animal, Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:296
% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).

 /*  [holds_at(pos(Human, Position), Time), holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          terminates(throwOff(Animal, Human),
                     pos(Human, Position),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:299
axiom(terminates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(neg(throwOffFails(Animal, Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:301
% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).

 /*  [holds_at(neg(throwOffFails(Animal, Human)), Time), holds_at(pos(Human, Position1), Time), holds_at(neg(posDeterminingFluent(Human, Position2)), Time), diff(Position1, Position2)] ->
       ta(Time,
          terminates(throwOff(Animal, Human),
                     pos(Human, Position2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:306
axiom(terminates(throwOff(Animal, Human), pos(Human, Position2), Time),
   
    [ holds_at(neg(throwOffFails(Animal, Human)), Time),
      holds_at(pos(Human, Position1), Time),
      holds_at(neg(posDeterminingFluent(Human, Position2)),
               Time),
      diff(Position1, Position2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:308
% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).

 /*  allDifferent([Animal, Human, Time]) ->
       ( not(exists([Animal],  (happens(throwOff(Animal, Human), Time);happens(getOff(Human, Animal), Time))))->holds_at(posDeterminingFluent(Human, 1), Time)
       ).
 */

 /*  holds_at(posDeterminingFluent(Human, 1), Time) :-
       ( not(happens(throwOff(Animal, Human), Time)),
         not(happens(getOff(Human, Animal), Time))
       ),
       allDifferent([Animal, Human, Time]).
 */

 /*  [not(happens(throwOff(Animal, Human), Time)), not(happens(getOff(Human, Animal), Time)), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(posDeterminingFluent(Human, 1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:311
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      not(happens(getOff(Human, Animal), Time)),
      allDifferent([Animal, Human, Time])
    ]).

 /*  happens(throwOff(Animal, Human), Time) :-
       not(happens(getOff(Human, Animal), Time)),
       not(holds_at(posDeterminingFluent(Human, 1), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [not(happens(getOff(Human, Animal), Time)), holds_at(neg(posDeterminingFluent(Human, 1)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, happens(throwOff(Animal, Human), Time)).
 */
axiom(happens(throwOff(Animal, Human), Time),
   
    [ not(happens(getOff(Human, Animal), Time)),
      holds_at(neg(posDeterminingFluent(Human, 1)), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  happens(getOff(Human, Animal), Time) :-
       not(happens(throwOff(Animal, Human), Time)),
       not(holds_at(posDeterminingFluent(Human, 1), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [not(happens(throwOff(Animal, Human), Time)), holds_at(neg(posDeterminingFluent(Human, 1)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, happens(getOff(Human, Animal), Time)).
 */
axiom(happens(getOff(Human, Animal), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      holds_at(neg(posDeterminingFluent(Human, 1)), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:313
% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).

 /*  [holds_at(posDeterminingFluent(Human, Position), Time), holds_at(throwOffFails(Animal1, Human), Time), holds_at(pos(Animal2, Position), Time)] ->
       ta(Time,
          initiates(throwOff(Animal1, Human),
                    mounted(Human, Animal2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:317
axiom(initiates(throwOff(Animal1, Human), mounted(Human, Animal2), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(throwOffFails(Animal1, Human), Time),
      holds_at(pos(Animal2, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:319
% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).

 /*  [holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          terminates(throwOff(Animal, Human),
                     mounted(Human, Animal),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:321
axiom(terminates(throwOff(Animal, Human), mounted(Human, Animal), Time),
    [holds_at(neg(throwOffFails(Animal, Human)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:323
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).

 /*  allDifferent([Animal, Human, Time]) ->
       ( happens(throwOff(Animal, Human), Time)->holds_at(mounted(Human, Animal), Time)
       ).
 */

 /*  holds_at(mounted(Human, Animal), Time) :-
       happens(throwOff(Animal, Human), Time),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(throwOff(Animal, Human), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(mounted(Human, Animal), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:325
axiom(holds_at(mounted(Human, Animal), Time),
   
    [ happens(throwOff(Animal, Human), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       not(holds_at(mounted(Human, Animal), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [holds_at(neg(mounted(Human, Animal)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(throwOff(Animal, Human), Time))).
 */
axiom(not(happens(throwOff(Animal, Human), Time)),
   
    [ holds_at(neg(mounted(Human, Animal)), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:327
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).

 /*  allDifferent([Animal, Human, Time]) ->
       ( happens(throwOff(Animal, Human), Time)->not(happens(getOff(Human, Animal), Time))
       ).
 */

 /*  not(happens(getOff(Human, Animal), Time)) :-
       happens(throwOff(Animal, Human), Time),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(throwOff(Animal, Human), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(getOff(Human, Animal), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:329
axiom(not(happens(getOff(Human, Animal), Time)),
   
    [ happens(throwOff(Animal, Human), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       happens(getOff(Human, Animal), Time),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(getOff(Human, Animal), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(throwOff(Animal, Human), Time))).
 */
axiom(not(happens(throwOff(Animal, Human), Time)),
   
    [ happens(getOff(Human, Animal), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:331
% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).

 /*  allDifferent([Human, Animal, Time]) ->
       ( happens(getOff(Human, Animal), Time)->not(happens(throwOff(Animal, Human), Time))
       ).
 */

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       happens(getOff(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(getOff(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(throwOff(Animal, Human), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:333
axiom(not(happens(throwOff(Animal, Human), Time)),
   
    [ happens(getOff(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       happens(throwOff(Animal, Human), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(throwOff(Animal, Human), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(getOff(Human, Animal), Time))).
 */
axiom(not(happens(getOff(Human, Animal), Time)),
   
    [ happens(throwOff(Animal, Human), Time),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:335
% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).

 /*  accessible(Position1, Position2, Time) <->
       not(exists([Gate],
                   (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time)))).
 */

 /*  [accessible] <->
       [not, exists, neighbor, sides, holds_at, neg, opened].
 */

 /*  allDifferent([Position1, Position2, Time, Gate]) ->
       ( accessible(Position1, Position2, Time)->not(exists([Gate],  (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time))))
       ).
 */

 /*  not(neighbor(Position1, Position2)) :-
       ( sides(Position1, Position2, Gate),
         holds_at(neg(opened(Gate)), Time)
       ),
       accessible(Position1, Position2, Time),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time), accessible(Position1, Position2, Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, not(neighbor(Position1, Position2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:339
axiom(not(neighbor(Position1, Position2)),
   
    [ sides(Position1, Position2, Gate),
      holds_at(neg(opened(Gate)), Time),
      accessible(Position1, Position2, Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  not(sides(Position1, Position2, Gate)) :-
       holds_at(neg(opened(Gate)), Time),
       neighbor(Position1, Position2),
       accessible(Position1, Position2, Time),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [holds_at(neg(opened(Gate)), Time), neighbor(Position1, Position2), accessible(Position1, Position2, Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
axiom(not(sides(Position1, Position2, Gate)),
   
    [ holds_at(neg(opened(Gate)), Time),
      neighbor(Position1, Position2),
      accessible(Position1, Position2, Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  not(holds_at(neg(opened(Gate)), Time)) :-
       sides(Position1, Position2, Gate),
       neighbor(Position1, Position2),
       accessible(Position1, Position2, Time),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [sides(Position1, Position2, Gate), neighbor(Position1, Position2), accessible(Position1, Position2, Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, holds_at(neg(neg(opened(Gate))), Time)).
 */
axiom(holds_at(neg(neg(opened(Gate))), Time),
   
    [ sides(Position1, Position2, Gate),
      neighbor(Position1, Position2),
      accessible(Position1, Position2, Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  not(accessible(Position1, Position2, Time)) :-
       ( neighbor(Position1, Position2),
         sides(Position1, Position2, Gate),
         holds_at(neg(opened(Gate)), Time)
       ),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, not(accessible(Position1, Position2, Time))).
 */
axiom(not(accessible(Position1, Position2, Time)),
   
    [ neighbor(Position1, Position2),
      sides(Position1, Position2, Gate),
      holds_at(neg(opened(Gate)), Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  allDifferent([Gate, Position1, Position2, Time]) ->
       ( not(exists([Gate],  (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time))))->accessible(Position1, Position2, Time)
       ).
 */

 /*  accessible(Position1, Position2, Time) :-
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   not(holds_at(neg(opened(Gate)), Time))
       ),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   not(holds_at(neg(opened(Gate)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   holds_at(neg(neg(opened(Gate))), Time)
       ).
 */

 /*  [(not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(neg(neg(opened(Gate))), Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Time, accessible(Position1, Position2, Time)).
 */
axiom(accessible(Position1, Position2, Time),
   
    [  (not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(neg(neg(opened(Gate))), Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).

 /*  neighbor(Position1, Position2) :-
       not(accessible(Position1, Position2, Time)),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  [not(accessible(Position1, Position2, Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Ta_Param, neighbor(Position1, Position2)).
 */
axiom(neighbor(Position1, Position2),
   
    [ not(accessible(Position1, Position2, Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).

 /*  sides(Position1, Position2, Gate) :-
       not(accessible(Position1, Position2, Time)),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  [not(accessible(Position1, Position2, Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Ta_Param5, sides(Position1, Position2, Gate)).
 */
axiom(sides(Position1, Position2, Gate),
   
    [ not(accessible(Position1, Position2, Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).

 /*  holds_at(neg(opened(Gate)), Time) :-
       not(accessible(Position1, Position2, Time)),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  [not(accessible(Position1, Position2, Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Time, holds_at(neg(opened(Gate)), Time)).
 */
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ not(accessible(Position1, Position2, Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:341
% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).

 /*  allDifferent([Position1, Position2, Animal, Time]) ->
       ( diff(Position1, Position2), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1)->accessible(Position1, Position2, Time)
       ).
 */

 /*  accessible(Position1, Position2, Time) :-
       ( diff(Position1, Position2),
         holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent([Position1, Position2, Animal, Time]).
 */

 /*  [diff(Position1, Position2), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time4), allDifferent([Position1, Position2, Animal, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, accessible(Position1, Position2, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:345
axiom(accessible(Position1, Position2, Time),
   
    [ diff(Position1, Position2),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time4),
      allDifferent([Position1, Position2, Animal, Time]),
      b(Time, Time4)
    ]).

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time+1),
       diff(Position1, Position2),
       not(accessible(Position1, Position2, Time)),
       allDifferent([Position1, Position2, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position2), Time5), diff(Position1, Position2), not(accessible(Position1, Position2, Time)), allDifferent([Position1, Position2, Animal, Time]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time5),
      diff(Position1, Position2),
      not(accessible(Position1, Position2, Time)),
      allDifferent([Position1, Position2, Animal, Time]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(pos(Animal, Position2), Time+1)) :-
       holds_at(pos(Animal, Position1), Time),
       diff(Position1, Position2),
       not(accessible(Position1, Position2, Time)),
       allDifferent([Position1, Position2, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position1), Time), diff(Position1, Position2), not(accessible(Position1, Position2, Time)), allDifferent([Position1, Position2, Animal, Time]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          holds_at(neg(pos(Animal, Position2)), Time6)).
 */
axiom(holds_at(neg(pos(Animal, Position2)), Time6),
   
    [ holds_at(pos(Animal, Position1), Time),
      diff(Position1, Position2),
      not(accessible(Position1, Position2, Time)),
      allDifferent([Position1, Position2, Animal, Time]),
      b(Time, Time6)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:347
% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).

 /*  holds_at(abnormalEncroachment(Human), Time) <->
       (   holds_at(mountFails(Human), Time)
       ;   exists([Position, Animal1, Animal2],
                   (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))
       ).
 */

 /*  [holds_at, abnormalEncroachment] <->
       
       [  (;),
         holds_at,
         mountFails,
         exists,
         holds_at,
         posDeterminingFluent,
         holds_at,
         neg,
         throwOffFails,
         happens,
         throwOff,
         diff,
         large,
         holds_at,
         pos,
         holds_at,
         neg,
         pos,
          (+)
       ].
 */

 /*  allDifferent([Human, Time, Position, Animal1, Animal2]) ->
       ( holds_at(abnormalEncroachment(Human), Time)->holds_at(mountFails(Human), Time);exists([Position, Animal1, Animal2],  (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))
       ).
 */

 /*  not(holds_at(abnormalEncroachment(Human), Time)) :-
       ( not(holds_at(mountFails(Human), Time)),
         (   not(holds_at(posDeterminingFluent(Human, Position),
                          Time))
         ;   not(holds_at(neg(throwOffFails(Animal2, Human)),
                          Time))
         ;   not(happens(throwOff(Animal2, Human), Time))
         ;   not(diff(Animal1, Human))
         ;   not(large(Animal1))
         ;   not(holds_at(pos(Animal1, Position), Time))
         ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
         )
       ),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(posDeterminingFluent(Human, Position)),
                    Time)
       ;   holds_at(neg(neg(throwOffFails(Animal2, Human))),
                    Time)
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   holds_at(neg(pos(Animal1, Position)), Time)
       ;   holds_at(neg(neg(pos(Animal1, Position))), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time5), b(Time, Time5), holds_at(neg(mountFails(Human)), Time),  (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time5)), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(neg(abnormalEncroachment(Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:357
axiom(holds_at(neg(abnormalEncroachment(Human)), Time),
   
    [ b(Time, Time5),
      holds_at(neg(mountFails(Human)), Time),
       (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time5)),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(mountFails(Human), Time) :-
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(posDeterminingFluent(Human, Position)),
                    Time)
       ;   holds_at(neg(neg(throwOffFails(Animal2, Human))),
                    Time)
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   holds_at(neg(pos(Animal1, Position)), Time)
       ;   holds_at(neg(neg(pos(Animal1, Position))), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time6), b(Time, Time6),  (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time6)), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(mountFails(Human), Time)).
 */
axiom(holds_at(mountFails(Human), Time),
   
    [ b(Time, Time6),
       (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time6)),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(posDeterminingFluent(Human, Position), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time,
          holds_at(posDeterminingFluent(Human, Position), Time)).
 */
axiom(holds_at(posDeterminingFluent(Human, Position), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(neg(throwOffFails(Animal2, Human)), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time,
          holds_at(neg(throwOffFails(Animal2, Human)), Time)).
 */
axiom(holds_at(neg(throwOffFails(Animal2, Human)), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  happens(throwOff(Animal2, Human), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, happens(throwOff(Animal2, Human), Time)).
 */
axiom(happens(throwOff(Animal2, Human), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  large(Animal1) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, large(Animal1)).
 */
axiom(large(Animal1),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(pos(Animal1, Position), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(pos(Animal1, Position), Time)).
 */
axiom(holds_at(pos(Animal1, Position), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(neg(pos(Animal1, Position)), Time+1) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position)), Time7)).
 */
axiom(holds_at(neg(pos(Animal1, Position)), Time7),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time7)
    ]).

 /*  allDifferent([Human, Time, Position, Animal1, Animal2]) ->
       ( holds_at(mountFails(Human), Time);exists([Position, Animal1, Animal2],  (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))->holds_at(abnormalEncroachment(Human), Time)
       ).
 */

 /*  holds_at(abnormalEncroachment(Human), Time) :-
       (   holds_at(mountFails(Human), Time)
       ;   holds_at(posDeterminingFluent(Human, Position), Time),
           holds_at(neg(throwOffFails(Animal2, Human)), Time),
           happens(throwOff(Animal2, Human), Time),
           diff(Animal1, Human),
           large(Animal1),
           holds_at(pos(Animal1, Position), Time),
           holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [ignore(Time+1==Time8), b(Time, Time8),  (holds_at(mountFails(Human), Time);holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time8)), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(abnormalEncroachment(Human), Time)).
 */
axiom(holds_at(abnormalEncroachment(Human), Time),
   
    [ b(Time, Time8),
       (holds_at(mountFails(Human), Time);holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time8)),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  not(holds_at(mountFails(Human), Time)) :-
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(neg(mountFails(Human)), Time)).
 */
axiom(holds_at(neg(mountFails(Human)), Time),
   
    [ holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  not(holds_at(posDeterminingFluent(Human, Position), Time)) :-
       ( holds_at(neg(throwOffFails(Animal2, Human)), Time),
         happens(throwOff(Animal2, Human), Time),
         diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time9), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position)),
                   Time)).
 */
axiom(holds_at(neg(posDeterminingFluent(Human, Position)), Time),
   
    [ holds_at(neg(throwOffFails(Animal2, Human)), Time),
      happens(throwOff(Animal2, Human), Time),
      diff(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time9),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(neg(throwOffFails(Animal2, Human)), Time)) :-
       ( happens(throwOff(Animal2, Human), Time),
         diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time10), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(neg(throwOffFails(Animal2, Human))), Time)).
 */
axiom(holds_at(neg(neg(throwOffFails(Animal2, Human))), Time),
   
    [ happens(throwOff(Animal2, Human), Time),
      diff(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time10),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time10)
    ]).

 /*  not(happens(throwOff(Animal2, Human), Time)) :-
       ( diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time11), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          not(happens(throwOff(Animal2, Human), Time))).
 */
axiom(not(happens(throwOff(Animal2, Human), Time)),
   
    [ diff(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time11),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time11)
    ]).

 /*  not(large(Animal1)) :-
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time12), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time12),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time12)
    ]).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       holds_at(neg(pos(Animal1, Position)), Time+1),
       large(Animal1),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(pos(Animal1, Position)), Time13), large(Animal1), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time13), ignore(Time+1==Time13)] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(neg(pos(Animal1, Position)), Time13),
      large(Animal1),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time13)
    ]).

 /*  not(holds_at(neg(pos(Animal1, Position)), Time+1)) :-
       holds_at(pos(Animal1, Position), Time),
       large(Animal1),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal1), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time14), ignore(Time+1==Time14)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal1, Position))), Time14)).
 */
axiom(holds_at(neg(neg(pos(Animal1, Position))), Time14),
   
    [ holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time14)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:359
% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).

 /*  allDifferent([Animal1, Position, Time, Animal2, Human]) ->
       ( holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time+1)->not(large(Animal1));not(large(Animal2));exists([Human],  (Human=Animal2, holds_at(abnormalEncroachment(Human), Time)))
       ).
 */

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       ( holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(neg(pos(Animal1, Position)), Time5), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time5), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */

 /*  [holds_at(neg(pos(Animal1, Position)), Time5), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time5), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:366
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(neg(pos(Animal1, Position)), Time5),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time5),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(neg(pos(Animal1, Position)), Time+1)) :-
       ( holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       holds_at(pos(Animal1, Position), Time),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time6), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal1, Position))), Time6)).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time6), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time6);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time6,
          holds_at(neg(neg(pos(Animal1, Position))), Time6)).
 */
axiom(holds_at(neg(neg(pos(Animal1, Position))), Time6),
   
    [ holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time6),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time6);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time6)
    ]).

 /*  not(holds_at(neg(pos(Animal2, Position)), Time)) :-
       holds_at(pos(Animal2, Position), Time+1),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(pos(Animal1, Position), Time),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(pos(Animal2, Position), Time7), holds_at(neg(pos(Animal1, Position)), Time7), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal2, Position))), Time)).
 */

 /*  [holds_at(pos(Animal2, Position), Time7), holds_at(neg(pos(Animal1, Position)), Time7), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal2, Position))), Time)).
 */
axiom(holds_at(neg(neg(pos(Animal2, Position))), Time),
   
    [ holds_at(pos(Animal2, Position), Time7),
      holds_at(neg(pos(Animal1, Position)), Time7),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time7)
    ]).

 /*  not(holds_at(pos(Animal2, Position), Time+1)) :-
       holds_at(neg(pos(Animal2, Position)), Time),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(pos(Animal1, Position), Time),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(neg(pos(Animal1, Position)), Time8), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position)), Time8)).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(neg(pos(Animal1, Position)), Time8), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time8);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time8,
          holds_at(neg(pos(Animal2, Position)), Time8)).
 */
axiom(holds_at(neg(pos(Animal2, Position)), Time8),
   
    [ holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(neg(pos(Animal1, Position)), Time8),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time8);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time8)
    ]).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time9), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time9), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ large(Animal2),
       (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time9),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time9),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time9)
    ]).

 /*  not(large(Animal2)) :-
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ),
       large(Animal1),
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [(not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time10), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time10), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time10),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time10),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time10)
    ]).

 /*  holds_at(abnormalEncroachment(Human), Time) :-
       large(Animal2),
       large(Animal1),
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  [large(Animal2), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time11), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time11), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time, holds_at(abnormalEncroachment(Human), Time)).
 */
axiom(holds_at(abnormalEncroachment(Human), Time),
   
    [ large(Animal2),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time11),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time11),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time11)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:368
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).

 /*  allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]) ->
       ( diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time+1)->not(exists([Gate], sides(Position1, Position2, Gate)))
       ).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time6), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time6), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:375
axiom(not(sides(Position1, Position2, Gate)),
   
    [ diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time6),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time6),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time6)
    ]).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time7), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time7), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time7),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time7),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time7)
    ]).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time8), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time8), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time8),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time8),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time8)
    ]).

 /*  not(holds_at(pos(Animal1, Position1), Time)) :-
       ( holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position2), Time9), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time9), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position1)), Time),
   
    [ holds_at(pos(Animal1, Position2), Time9),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time9),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(pos(Animal1, Position2), Time+1)) :-
       ( holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time10), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position2)), Time10)).
 */
axiom(holds_at(neg(pos(Animal1, Position2)), Time10),
   
    [ holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time10),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time10)
    ]).

 /*  not(holds_at(pos(Animal2, Position1), Time)) :-
       holds_at(pos(Animal2, Position2), Time+1),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position2), Time11), holds_at(pos(Animal1, Position2), Time11), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal2, Position1)), Time),
   
    [ holds_at(pos(Animal2, Position2), Time11),
      holds_at(pos(Animal1, Position2), Time11),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time11)
    ]).

 /*  not(holds_at(pos(Animal2, Position2), Time+1)) :-
       holds_at(pos(Animal2, Position1), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal1, Position2), Time12), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position2)), Time12)).
 */
axiom(holds_at(neg(pos(Animal2, Position2)), Time12),
   
    [ holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal1, Position2), Time12),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time12)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:377
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).

 /*  allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]) ->
       ( diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time+1)->not(exists([Gate], sides(Position1, Position2, Gate)))
       ).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time6), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time6), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:384
axiom(not(sides(Position1, Position2, Gate)),
   
    [ diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time6),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time6),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time6)
    ]).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time7), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time7), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time7),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time7),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time7)
    ]).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time8), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time8), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time8),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time8),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time8)
    ]).

 /*  not(holds_at(pos(Animal1, Position1), Time)) :-
       ( holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position2), Time9), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time9), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position1)), Time),
   
    [ holds_at(pos(Animal1, Position2), Time9),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time9),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(pos(Animal1, Position2), Time+1)) :-
       ( holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time10), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position2)), Time10)).
 */
axiom(holds_at(neg(pos(Animal1, Position2)), Time10),
   
    [ holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time10),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time10)
    ]).

 /*  not(holds_at(pos(Animal2, Position2), Time)) :-
       holds_at(pos(Animal2, Position1), Time+1),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position1), Time11), holds_at(pos(Animal1, Position2), Time11), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position2)), Time)).
 */
axiom(holds_at(neg(pos(Animal2, Position2)), Time),
   
    [ holds_at(pos(Animal2, Position1), Time11),
      holds_at(pos(Animal1, Position2), Time11),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time11)
    ]).

 /*  not(holds_at(pos(Animal2, Position1), Time+1)) :-
       holds_at(pos(Animal2, Position2), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal1, Position2), Time12), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position1)), Time12)).
 */
axiom(holds_at(neg(pos(Animal2, Position1)), Time12),
   
    [ holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal1, Position2), Time12),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time12)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:386
% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).

 /*  allDifferent([Gate, Time, Position1, Position2, Animal]) ->
       ( holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time+1), sides(Position1, Position2, Gate)->not(exists([Animal],  (holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1))))
       ).
 */

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time+1),
       ( holds_at(opened(Gate), Time),
         holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(pos(Animal, Position2), Time5), holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time5), sides(Position1, Position2, Gate), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:392
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time5),
      holds_at(opened(Gate), Time),
      holds_at(neg(opened(Gate)), Time5),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(pos(Animal, Position2), Time+1)) :-
       holds_at(pos(Animal, Position1), Time),
       ( holds_at(opened(Gate), Time),
         holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(pos(Animal, Position1), Time), holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time6), sides(Position1, Position2, Gate), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          holds_at(neg(pos(Animal, Position2)), Time6)).
 */
axiom(holds_at(neg(pos(Animal, Position2)), Time6),
   
    [ holds_at(pos(Animal, Position1), Time),
      holds_at(opened(Gate), Time),
      holds_at(neg(opened(Gate)), Time6),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time6)
    ]).

 /*  not(holds_at(opened(Gate), Time)) :-
       ( holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       ( holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(neg(opened(Gate)), Time7), sides(Position1, Position2, Gate), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time7), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time, holds_at(neg(opened(Gate)), Time)).
 */
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ holds_at(neg(opened(Gate)), Time7),
      sides(Position1, Position2, Gate),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time7),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time7)
    ]).

 /*  not(holds_at(neg(opened(Gate)), Time+1)) :-
       sides(Position1, Position2, Gate),
       holds_at(opened(Gate), Time),
       ( holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [sides(Position1, Position2, Gate), holds_at(opened(Gate), Time), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time8), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time, holds_at(neg(neg(opened(Gate))), Time8)).
 */
axiom(holds_at(neg(neg(opened(Gate))), Time8),
   
    [ sides(Position1, Position2, Gate),
      holds_at(opened(Gate), Time),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time8),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time8)
    ]).

 /*  not(sides(Position1, Position2, Gate)) :-
       holds_at(neg(opened(Gate)), Time+1),
       holds_at(opened(Gate), Time),
       ( holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(neg(opened(Gate)), Time9), holds_at(opened(Gate), Time), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time9), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
axiom(not(sides(Position1, Position2, Gate)),
   
    [ holds_at(neg(opened(Gate)), Time9),
      holds_at(opened(Gate), Time),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time9),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time9)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:394
% gate GateAO
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:395
==> t(gate,gateAO).

% cage CageA
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:396
==> t(cage,cageA).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:397
% Loc(1)=CageA.
loc(1,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(1, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(1, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:398
% Loc(2)=CageA.
loc(2,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(2, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(2, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:399
% Loc(3)=CageA.
loc(3,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(3, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(3, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:400
% Loc(4)=CageA.
loc(4,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(4, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(4, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:401
% Loc(5)=Outside.
loc(5,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(5, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(5, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:402
% Loc(6)=Outside.
loc(6,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(6, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(6, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:403
% Loc(7)=Outside.
loc(7,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(7, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(7, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:404
% Loc(8)=Outside.
loc(8,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(8, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(8, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:406
% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).

 /*  neighbor(Position1, Position2) <->
       (   Position1=1,
           Position2=2
       ;   Position1=1,
           Position2=3
       ;   Position1=1,
           Position2=4
       ;   Position1=2,
           Position2=3
       ;   Position1=2,
           Position2=4
       ;   Position1=3,
           Position2=4
       ;   Position1=5,
           Position2=6
       ;   Position1=5,
           Position2=7
       ;   Position1=5,
           Position2=8
       ;   Position1=6,
           Position2=7
       ;   Position1=6,
           Position2=8
       ;   Position1=7,
           Position2=8
       ;   Position2=1,
           Position1=2
       ;   Position2=1,
           Position1=3
       ;   Position2=1,
           Position1=4
       ;   Position2=2,
           Position1=3
       ;   Position2=2,
           Position1=4
       ;   Position2=3,
           Position1=4
       ;   Position2=5,
           Position1=6
       ;   Position2=5,
           Position1=7
       ;   Position2=5,
           Position1=8
       ;   Position2=6,
           Position1=7
       ;   Position2=6,
           Position1=8
       ;   Position2=7,
           Position1=8
       ;   Position1=4,
           Position2=7
       ;   Position2=4,
           Position1=7
       ).
 */

 /*  [neighbor] <->
       
       [  (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (=),
          (=)
       ].
 */

 /*  allDifferent([Position1, Position2]) ->
       ( neighbor(Position1, Position2)->Position1=1, Position2=2;Position1=1, Position2=3;Position1=1, Position2=4;Position1=2, Position2=3;Position1=2, Position2=4;Position1=3, Position2=4;Position1=5, Position2=6;Position1=5, Position2=7;Position1=5, Position2=8;Position1=6, Position2=7;Position1=6, Position2=8;Position1=7, Position2=8;Position2=1, Position1=2;Position2=1, Position1=3;Position2=1, Position1=4;Position2=2, Position1=3;Position2=2, Position1=4;Position2=3, Position1=4;Position2=5, Position1=6;Position2=5, Position1=7;Position2=5, Position1=8;Position2=6, Position1=7;Position2=6, Position1=8;Position2=7, Position1=8;Position1=4, Position2=7;Position2=4, Position1=7
       ).
 */

 /*  not(neighbor(Position1, Position2)) :-
       ( (   not(equals(Position1, 1))
         ;   not(equals(Position2, 2))
         ),
         (   not(equals(Position1, 1))
         ;   not(equals(Position2, 3))
         ),
         (   not(equals(Position1, 1))
         ;   not(equals(Position2, 4))
         ),
         (   not(equals(Position1, 2))
         ;   not(equals(Position2, 3))
         ),
         (   not(equals(Position1, 2))
         ;   not(equals(Position2, 4))
         ),
         (   not(equals(Position1, 3))
         ;   not(equals(Position2, 4))
         ),
         (   not(equals(Position1, 5))
         ;   not(equals(Position2, 6))
         ),
         (   not(equals(Position1, 5))
         ;   not(equals(Position2, 7))
         ),
         (   not(equals(Position1, 5))
         ;   not(equals(Position2, 8))
         ),
         (   not(equals(Position1, 6))
         ;   not(equals(Position2, 7))
         ),
         (   not(equals(Position1, 6))
         ;   not(equals(Position2, 8))
         ),
         (   not(equals(Position1, 7))
         ;   not(equals(Position2, 8))
         ),
         (   not(equals(Position2, 1))
         ;   not(equals(Position1, 2))
         ),
         (   not(equals(Position2, 1))
         ;   not(equals(Position1, 3))
         ),
         (   not(equals(Position2, 1))
         ;   not(equals(Position1, 4))
         ),
         (   not(equals(Position2, 2))
         ;   not(equals(Position1, 3))
         ),
         (   not(equals(Position2, 2))
         ;   not(equals(Position1, 4))
         ),
         (   not(equals(Position2, 3))
         ;   not(equals(Position1, 4))
         ),
         (   not(equals(Position2, 5))
         ;   not(equals(Position1, 6))
         ),
         (   not(equals(Position2, 5))
         ;   not(equals(Position1, 7))
         ),
         (   not(equals(Position2, 5))
         ;   not(equals(Position1, 8))
         ),
         (   not(equals(Position2, 6))
         ;   not(equals(Position1, 7))
         ),
         (   not(equals(Position2, 6))
         ;   not(equals(Position1, 8))
         ),
         (   not(equals(Position2, 7))
         ;   not(equals(Position1, 8))
         ),
         (   not(equals(Position1, 4))
         ;   not(equals(Position2, 7))
         ),
         (   not(equals(Position2, 4))
         ;   not(equals(Position1, 7))
         )
       ),
       allDifferent([Position1, Position2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=1))
       ;   not(call(Position2=2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=1))
       ;   not(call(Position2=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=1))
       ;   not(call(Position2=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 2))
       ;   not(equals(Position2, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=2))
       ;   not(call(Position2=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 2))
       ;   not(equals(Position2, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=2))
       ;   not(call(Position2=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 3))
       ;   not(equals(Position2, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=3))
       ;   not(call(Position2=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 6))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=5))
       ;   not(call(Position2=6))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=5))
       ;   not(call(Position2=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=5))
       ;   not(call(Position2=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 6))
       ;   not(equals(Position2, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=6))
       ;   not(call(Position2=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 6))
       ;   not(equals(Position2, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=6))
       ;   not(call(Position2=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 7))
       ;   not(equals(Position2, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=7))
       ;   not(call(Position2=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=1))
       ;   not(call(Position1=2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=1))
       ;   not(call(Position1=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=1))
       ;   not(call(Position1=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 2))
       ;   not(equals(Position1, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=2))
       ;   not(call(Position1=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 2))
       ;   not(equals(Position1, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=2))
       ;   not(call(Position1=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 3))
       ;   not(equals(Position1, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=3))
       ;   not(call(Position1=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 6))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=5))
       ;   not(call(Position1=6))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=5))
       ;   not(call(Position1=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=5))
       ;   not(call(Position1=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 6))
       ;   not(equals(Position1, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=6))
       ;   not(call(Position1=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 6))
       ;   not(equals(Position1, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=6))
       ;   not(call(Position1=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 7))
       ;   not(equals(Position1, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=7))
       ;   not(call(Position1=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 4))
       ;   not(equals(Position2, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=4))
       ;   not(call(Position2=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 4))
       ;   not(equals(Position1, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=4))
       ;   not(call(Position1=7))
       ).
 */

 /*  [(not(call(Position1=1));not(call(Position2=2))),  (not(call(Position1=1));not(call(Position2=3))),  (not(call(Position1=1));not(call(Position2=4))),  (not(call(Position1=2));not(call(Position2=3))),  (not(call(Position1=2));not(call(Position2=4))),  (not(call(Position1=3));not(call(Position2=4))),  (not(call(Position1=5));not(call(Position2=6))),  (not(call(Position1=5));not(call(Position2=7))),  (not(call(Position1=5));not(call(Position2=8))),  (not(call(Position1=6));not(call(Position2=7))),  (not(call(Position1=6));not(call(Position2=8))),  (not(call(Position1=7));not(call(Position2=8))),  (not(call(Position2=1));not(call(Position1=2))),  (not(call(Position2=1));not(call(Position1=3))),  (not(call(Position2=1));not(call(Position1=4))),  (not(call(Position2=2));not(call(Position1=3))),  (not(call(Position2=2));not(call(Position1=4))),  (not(call(Position2=3));not(call(Position1=4))),  (not(call(Position2=5));not(call(Position1=6))),  (not(call(Position2=5));not(call(Position1=7))),  (not(call(Position2=5));not(call(Position1=8))),  (not(call(Position2=6));not(call(Position1=7))),  (not(call(Position2=6));not(call(Position1=8))),  (not(call(Position2=7));not(call(Position1=8))),  (not(call(Position1=4));not(call(Position2=7))),  (not(call(Position2=4));not(call(Position1=7))), allDifferent([Position1, Position2])] ->
       ta(Axiom_head_Ret, not(neighbor(Position1, Position2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:433
axiom(not(neighbor(Position1, Position2)),
   
    [  (not(call(Position1=1));not(call(Position2=2))),
       (not(call(Position1=1));not(call(Position2=3))),
       (not(call(Position1=1));not(call(Position2=4))),
       (not(call(Position1=2));not(call(Position2=3))),
       (not(call(Position1=2));not(call(Position2=4))),
       (not(call(Position1=3));not(call(Position2=4))),
       (not(call(Position1=5));not(call(Position2=6))),
       (not(call(Position1=5));not(call(Position2=7))),
       (not(call(Position1=5));not(call(Position2=8))),
       (not(call(Position1=6));not(call(Position2=7))),
       (not(call(Position1=6));not(call(Position2=8))),
       (not(call(Position1=7));not(call(Position2=8))),
       (not(call(Position2=1));not(call(Position1=2))),
       (not(call(Position2=1));not(call(Position1=3))),
       (not(call(Position2=1));not(call(Position1=4))),
       (not(call(Position2=2));not(call(Position1=3))),
       (not(call(Position2=2));not(call(Position1=4))),
       (not(call(Position2=3));not(call(Position1=4))),
       (not(call(Position2=5));not(call(Position1=6))),
       (not(call(Position2=5));not(call(Position1=7))),
       (not(call(Position2=5));not(call(Position1=8))),
       (not(call(Position2=6));not(call(Position1=7))),
       (not(call(Position2=6));not(call(Position1=8))),
       (not(call(Position2=7));not(call(Position1=8))),
       (not(call(Position1=4));not(call(Position2=7))),
       (not(call(Position2=4));not(call(Position1=7))),
      allDifferent([Position1, Position2])
    ]).

 /*  allDifferent([Position1, Position2]) ->
       ( Position1=1, Position2=2;Position1=1, Position2=3;Position1=1, Position2=4;Position1=2, Position2=3;Position1=2, Position2=4;Position1=3, Position2=4;Position1=5, Position2=6;Position1=5, Position2=7;Position1=5, Position2=8;Position1=6, Position2=7;Position1=6, Position2=8;Position1=7, Position2=8;Position2=1, Position1=2;Position2=1, Position1=3;Position2=1, Position1=4;Position2=2, Position1=3;Position2=2, Position1=4;Position2=3, Position1=4;Position2=5, Position1=6;Position2=5, Position1=7;Position2=5, Position1=8;Position2=6, Position1=7;Position2=6, Position1=8;Position2=7, Position1=8;Position1=4, Position2=7;Position2=4, Position1=7->neighbor(Position1, Position2)
       ).
 */

 /*  neighbor(Position1, Position2) :-
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ),
       allDifferent([Position1, Position2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Position1=1),
           call(Position2=2)
       ;   call(Position1=1),
           call(Position2=3)
       ;   call(Position1=1),
           call(Position2=4)
       ;   call(Position1=2),
           call(Position2=3)
       ;   call(Position1=2),
           call(Position2=4)
       ;   call(Position1=3),
           call(Position2=4)
       ;   call(Position1=5),
           call(Position2=6)
       ;   call(Position1=5),
           call(Position2=7)
       ;   call(Position1=5),
           call(Position2=8)
       ;   call(Position1=6),
           call(Position2=7)
       ;   call(Position1=6),
           call(Position2=8)
       ;   call(Position1=7),
           call(Position2=8)
       ;   call(Position2=1),
           call(Position1=2)
       ;   call(Position2=1),
           call(Position1=3)
       ;   call(Position2=1),
           call(Position1=4)
       ;   call(Position2=2),
           call(Position1=3)
       ;   call(Position2=2),
           call(Position1=4)
       ;   call(Position2=3),
           call(Position1=4)
       ;   call(Position2=5),
           call(Position1=6)
       ;   call(Position2=5),
           call(Position1=7)
       ;   call(Position2=5),
           call(Position1=8)
       ;   call(Position2=6),
           call(Position1=7)
       ;   call(Position2=6),
           call(Position1=8)
       ;   call(Position2=7),
           call(Position1=8)
       ;   call(Position1=4),
           call(Position2=7)
       ;   call(Position2=4),
           call(Position1=7)
       ).
 */

 /*  [(call(Position1=1), call(Position2=2);call(Position1=1), call(Position2=3);call(Position1=1), call(Position2=4);call(Position1=2), call(Position2=3);call(Position1=2), call(Position2=4);call(Position1=3), call(Position2=4);call(Position1=5), call(Position2=6);call(Position1=5), call(Position2=7);call(Position1=5), call(Position2=8);call(Position1=6), call(Position2=7);call(Position1=6), call(Position2=8);call(Position1=7), call(Position2=8);call(Position2=1), call(Position1=2);call(Position2=1), call(Position1=3);call(Position2=1), call(Position1=4);call(Position2=2), call(Position1=3);call(Position2=2), call(Position1=4);call(Position2=3), call(Position1=4);call(Position2=5), call(Position1=6);call(Position2=5), call(Position1=7);call(Position2=5), call(Position1=8);call(Position2=6), call(Position1=7);call(Position2=6), call(Position1=8);call(Position2=7), call(Position1=8);call(Position1=4), call(Position2=7);call(Position2=4), call(Position1=7)), allDifferent([Position1, Position2])] ->
       ta(Axiom_head_Ret3, neighbor(Position1, Position2)).
 */
axiom(neighbor(Position1, Position2),
   
    [  (call(Position1=1), call(Position2=2);call(Position1=1), call(Position2=3);call(Position1=1), call(Position2=4);call(Position1=2), call(Position2=3);call(Position1=2), call(Position2=4);call(Position1=3), call(Position2=4);call(Position1=5), call(Position2=6);call(Position1=5), call(Position2=7);call(Position1=5), call(Position2=8);call(Position1=6), call(Position2=7);call(Position1=6), call(Position2=8);call(Position1=7), call(Position2=8);call(Position2=1), call(Position1=2);call(Position2=1), call(Position1=3);call(Position2=1), call(Position1=4);call(Position2=2), call(Position1=3);call(Position2=2), call(Position1=4);call(Position2=3), call(Position1=4);call(Position2=5), call(Position1=6);call(Position2=5), call(Position1=7);call(Position2=5), call(Position1=8);call(Position2=6), call(Position1=7);call(Position2=6), call(Position1=8);call(Position2=7), call(Position1=8);call(Position1=4), call(Position2=7);call(Position2=4), call(Position1=7)),
      allDifferent([Position1, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:435
% Side1(GateAO)=4.
side1(gateAO,4).

 /*  axiom_head(Axiom_head_Ret) ->
       side1(gateAO, 4).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(side1(gateAO, 4), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:436
% Side2(GateAO)=7.
side2(gateAO,7).

 /*  axiom_head(Axiom_head_Ret) ->
       side2(gateAO, 7).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(side2(gateAO, 7), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e:438
%; End of file.
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8121
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8122
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8123
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8124
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8125
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(jumbo, elephantSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(jumbo, elephantSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8126
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8128
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).

 /*  [] ->
       ta(Ta_Param, not(initially(opened(gateAO)))).
 */
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8129
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8129
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*  exists([Position],
     initially(pos(homer, Position)),
      outside=loc(Position)).
 */

 /*  initially(pos(homer, Position)) :-
       some(Position, '$kolem_Fn_406').
 */

 /*  [some(Position, '$kolem_Fn_406')] ->
       ta(Ta_Param, initially(pos(homer, Position))).
 */
axiom(initially(pos(homer, Position)),
    [some(Position, '$kolem_Fn_406')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8130
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8130
% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).

 /*  exists([Position],
     initially(pos(jumbo, Position)),
      cageA=loc(Position)).
 */

 /*  initially(pos(jumbo, Position)) :-
       some(Position, '$kolem_Fn_407').
 */

 /*  [some(Position, '$kolem_Fn_407')] ->
       ta(Ta_Param, initially(pos(jumbo, Position))).
 */
axiom(initially(pos(jumbo, Position)),
    [some(Position, '$kolem_Fn_407')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8132
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8132
% HoldsAt(Pos(Homer,position),5) & CageA=Loc(position).

 /*  exists([Position],
     holds_at(pos(homer, Position), 5),
      cageA=loc(Position)).
 */

 /*  holds_at(pos(homer, Position), 5) :-
       some(Position, '$kolem_Fn_408').
 */

 /*  [some(Position, '$kolem_Fn_408'), b(t, t5), ignore(t+5==t5)] ->
       ta(5, holds_at(pos(homer, Position), t5)).
 */
axiom(holds_at(pos(homer, Position), t5),
    [some(Position, '$kolem_Fn_408'), b(t, t5)]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8133
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8133
% HoldsAt(Pos(Jumbo,position),5) & Outside=Loc(position).

 /*  exists([Position],
     holds_at(pos(jumbo, Position), 5),
      outside=loc(Position)).
 */

 /*  holds_at(pos(jumbo, Position), 5) :-
       some(Position, '$kolem_Fn_409').
 */

 /*  [some(Position, '$kolem_Fn_409'), b(t, t5), ignore(t+5==t5)] ->
       ta(5, holds_at(pos(jumbo, Position), t5)).
 */
axiom(holds_at(pos(jumbo, Position), t5),
    [some(Position, '$kolem_Fn_409'), b(t, t5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8135
% [animal,time]
 % !HoldsAt(Mounted(Homer,animal),time).
holds_at(neg(mounted(homer,Animal)),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8137
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),5).
holds_at(posDeterminingFluent(Human,1),5).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8138
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),5).
holds_at(neg(doneBy(Event,Animal)),5).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8140
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,4),0).
%;Happens(Move(Jumbo,3),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Move(Homer,4),1).
%;Happens(Move(Jumbo,1),1).
%;Happens(Move(Jumbo,3),2).
%;Happens(Mount(Homer,Jumbo),2).
%;Happens(Move(Jumbo,4),3).
%;!Happens(Move(Homer,2),3).
%;Happens(Move(Jumbo,7),4).
%;!Happens(Mount(Homer,Jumbo),3).
%;!Happens(Mount(Homer,Jumbo),4).
%;[position] !Happens(Move(Homer,position),4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8155
% range time 0 5
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8156
==> range(time,0,5).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8157
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8158
==> range(offset,0,0).

% completion Happens
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8160
==> completion(happens).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8188
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8189
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8191
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8192
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8193
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8195
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8196
==> t(elephant,jumbo).

% horse Silver
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8197
==> t(horse,silver).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8198
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8199
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8200
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(jumbo, elephantSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(jumbo, elephantSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8201
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8202
% Species(Silver)=HorseSpecies.
species(silver,horseSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(silver, horseSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(silver, horseSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8203
% Adult(Silver).
adult(silver).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8205
% {position}


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8206
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).

 /*  exists([Position],
     not(initially(pos(homer, Position))),
      initially(pos(jumbo, Position)),
      holds_at(pos(homer, Position), 1),
      holds_at(neg(pos(jumbo, Position)), 1)).
 */

 /*  not(initially(pos(homer, Position))) :-
       some(Position, '$kolem_Fn_410').
 */

 /*  [some(Position, '$kolem_Fn_410')] ->
       ta(Ta_Param, not(initially(pos(homer, Position)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8209
axiom(not(initially(pos(homer, Position))),
    [some(Position, '$kolem_Fn_410')]).

 /*  initially(pos(jumbo, Position)) :-
       some(Position, '$kolem_Fn_410').
 */

 /*  [some(Position, '$kolem_Fn_410')] ->
       ta(Ta_Param3, initially(pos(jumbo, Position))).
 */
axiom(initially(pos(jumbo, Position)),
    [some(Position, '$kolem_Fn_410')]).

 /*  holds_at(pos(homer, Position), 1) :-
       some(Position, '$kolem_Fn_410').
 */

 /*  [some(Position, '$kolem_Fn_410'), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(pos(homer, Position), start)).
 */
axiom(holds_at(pos(homer, Position), start),
    [some(Position, '$kolem_Fn_410'), b(t, start)]).

 /*  holds_at(neg(pos(jumbo, Position)), 1) :-
       some(Position, '$kolem_Fn_410').
 */

 /*  [some(Position, '$kolem_Fn_410'), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(neg(pos(jumbo, Position)), start)).
 */
axiom(holds_at(neg(pos(jumbo, Position)), start),
    [some(Position, '$kolem_Fn_410'), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8210
% HoldsAt(Mounted(Homer,Silver),0).

 /*  [] ->
       ta(Ta_Param, initially(mounted(homer, silver))).
 */
axiom(initially(mounted(homer, silver)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8212
% option manualrelease on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8213
:- set_ec_option(manualrelease, on).
:- if(false).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8213
% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
 %  not(releasedAt(mounted(Human,Animal),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(mounted(Human, Animal), 0))).
 */
axiom(not(releasedAt(mounted(Human, Animal), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8214
% [gate]
 % !ReleasedAt(Opened(gate),0).
 %  not(releasedAt(opened(Gate),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(opened(Gate), 0))).
 */
axiom(not(releasedAt(opened(Gate), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8215
% [position]
 % ReleasedAt(Pos(Homer,position),0).
releasedAt(pos(homer,Position),0).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8216
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
 %  not(releasedAt(pos(jumbo,Position),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(pos(jumbo, Position), 0))).
 */
axiom(not(releasedAt(pos(jumbo, Position), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8217
% [position]
 % !ReleasedAt(Pos(Silver,position),0).
 %  not(releasedAt(pos(silver,Position),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(pos(silver, Position), 0))).
 */
axiom(not(releasedAt(pos(silver, Position), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8219
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8220
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
holds_at(neg(doneBy(Event,Animal)),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8222
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,3),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(ThrowOff(Silver,Homer),0).
%;HoldsAt(PosDeterminingFluent(Homer,2),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8230
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8231
==> range(time,0,1).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8232
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8233
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8261
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8262
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8264
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8265
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8266
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8268
==> t(human,homer).

% dog Snoopy
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8269
==> t(dog,snoopy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8270
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8271
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8272
% Species(Snoopy)=DogSpecies.
species(snoopy,dogSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(snoopy, dogSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(snoopy, dogSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8273
% Adult(Snoopy).
adult(snoopy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8275
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).

 /*  [] ->
       ta(Ta_Param, not(initially(opened(gateAO)))).
 */
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8276
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8276
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*  exists([Position],
     initially(pos(homer, Position)),
      outside=loc(Position)).
 */

 /*  initially(pos(homer, Position)) :-
       some(Position, '$kolem_Fn_411').
 */

 /*  [some(Position, '$kolem_Fn_411')] ->
       ta(Ta_Param, initially(pos(homer, Position))).
 */
axiom(initially(pos(homer, Position)),
    [some(Position, '$kolem_Fn_411')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8277
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8277
% HoldsAt(Pos(Snoopy,position),0) & CageA=Loc(position).

 /*  exists([Position],
     initially(pos(snoopy, Position)),
      cageA=loc(Position)).
 */

 /*  initially(pos(snoopy, Position)) :-
       some(Position, '$kolem_Fn_412').
 */

 /*  [some(Position, '$kolem_Fn_412')] ->
       ta(Ta_Param, initially(pos(snoopy, Position))).
 */
axiom(initially(pos(snoopy, Position)),
    [some(Position, '$kolem_Fn_412')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8279
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8279
% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).

 /*  exists([Position],
     holds_at(pos(homer, Position), 2),
      cageA=loc(Position)).
 */

 /*  holds_at(pos(homer, Position), 2) :-
       some(Position, '$kolem_Fn_413').
 */

 /*  [some(Position, '$kolem_Fn_413'), b(t, t2), ignore(t+2==t2)] ->
       ta(2, holds_at(pos(homer, Position), t2)).
 */
axiom(holds_at(pos(homer, Position), t2),
    [some(Position, '$kolem_Fn_413'), b(t, t2)]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8280
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8280
% HoldsAt(Pos(Snoopy,position),2) & Outside=Loc(position).

 /*  exists([Position],
     holds_at(pos(snoopy, Position), 2),
      outside=loc(Position)).
 */

 /*  holds_at(pos(snoopy, Position), 2) :-
       some(Position, '$kolem_Fn_414').
 */

 /*  [some(Position, '$kolem_Fn_414'), b(t, t2), ignore(t+2==t2)] ->
       ta(2, holds_at(pos(snoopy, Position), t2)).
 */
axiom(holds_at(pos(snoopy, Position), t2),
    [some(Position, '$kolem_Fn_414'), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8282
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
holds_at(posDeterminingFluent(Human,1),2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8283
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
holds_at(neg(doneBy(Event,Animal)),2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8285
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8286
==> range(time,0,2).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8287
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8288
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooWorld.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8316
% sort position: integer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8317
==> subsort(position,integer).

% sort location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8318
==> sort(location).

% sort cage: location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8319
==> subsort(cage,location).

% sort gate
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8320
==> sort(gate).

% sort animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8321
==> sort(animal).

% sort elephant: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8322
==> subsort(elephant,animal).

% sort horse: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8323
==> subsort(horse,animal).

% sort dog: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8324
==> subsort(dog,animal).

% sort human: animal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8325
==> subsort(human,animal).

% sort species
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8326
==> sort(species).

% function Loc(position): location
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8328
functional_predicate(loc(Loc_Param,Loc_Ret)).
==> mpred_prop(loc(position,location),functional_predicate).
==> meta_argtypes(loc(position,location)).
==> resultIsa(loc,location).

% function Side1(gate): position
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8329
functional_predicate(side1(Side1_Param,Side1_Ret)).
==> mpred_prop(side1(gate,position),functional_predicate).
==> meta_argtypes(side1(gate,position)).
==> resultIsa(side1,position).

% function Side2(gate): position
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8330
functional_predicate(side2(Side2_Param,Side2_Ret)).
==> mpred_prop(side2(gate,position),functional_predicate).
==> meta_argtypes(side2(gate,position)).
==> resultIsa(side2,position).

% function Species(animal): species
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8331
functional_predicate(species(Species_Param,Species_Ret)).
==> mpred_prop(species(animal,species),functional_predicate).
==> meta_argtypes(species(animal,species)).
==> resultIsa(species,species).

% predicate Accessible(position,position,time)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8333
predicate(accessible(Accessible_Param,
		     _,
		     Accessible_Ret)).
==> mpred_prop(accessible(position,position,time),predicate).
==> meta_argtypes(accessible(position,position,time)).

% predicate Adult(animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8334
predicate(adult(Adult_Ret)).
==> mpred_prop(adult(animal),predicate).
==> meta_argtypes(adult(animal)).

% predicate Large(animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8335
predicate(large(Large_Ret)).
==> mpred_prop(large(animal),predicate).
==> meta_argtypes(large(animal)).

% predicate LargeSpecies(species)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8336
predicate(largeSpecies(LargeSpecies_Ret)).
==> mpred_prop(largeSpecies(species),predicate).
==> meta_argtypes(largeSpecies(species)).

% predicate Neighbor(position,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8337
predicate(neighbor(Neighbor_Param,Neighbor_Ret)).
==> mpred_prop(neighbor(position,position),predicate).
==> meta_argtypes(neighbor(position,position)).

% predicate Sides(position,position,gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8338
predicate(sides(Sides_Param,_,Sides_Ret)).
==> mpred_prop(sides(position,position,gate),predicate).
==> meta_argtypes(sides(position,position,gate)).

% event Close(human,gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8340
event(close(Close_Param,Close_Ret)).
==> mpred_prop(close(human,gate),event).
==> meta_argtypes(close(human,gate)).

% event GetOff(human,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8341
event(getOff(GetOff_Param,GetOff_Ret)).
==> mpred_prop(getOff(human,animal),event).
==> meta_argtypes(getOff(human,animal)).

% event Mount(human,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8342
event(mount(Mount_Param,Mount_Ret)).
==> mpred_prop(mount(human,animal),event).
==> meta_argtypes(mount(human,animal)).

% event Move(animal,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8343
event(move(Move_Param,Move_Ret)).
==> mpred_prop(move(animal,position),event).
==> meta_argtypes(move(animal,position)).

% event Open(human,gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8344
event(open(Open_Param,Open_Ret)).
==> mpred_prop(open(human,gate),event).
==> meta_argtypes(open(human,gate)).

% event ThrowOff(animal,human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8345
event(throwOff(ThrowOff_Param,ThrowOff_Ret)).
==> mpred_prop(throwOff(animal,human),event).
==> meta_argtypes(throwOff(animal,human)).

% fluent AbnormalEncroachment(human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8347
fluent(abnormalEncroachment(AbnormalEncroachment_Ret)).
==> mpred_prop(abnormalEncroachment(human),fluent).
==> meta_argtypes(abnormalEncroachment(human)).

% noninertial AbnormalEncroachment
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8348
==> noninertial(abnormalEncroachment).

% fluent DoneBy(event,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8349
fluent(doneBy(DoneBy_Param,DoneBy_Ret)).
==> mpred_prop(doneBy(event,animal),fluent).
==> meta_argtypes(doneBy(event,animal)).

% noninertial DoneBy
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8350
==> noninertial(doneBy).

% fluent Mounted(human,animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8351
fluent(mounted(Mounted_Param,Mounted_Ret)).
==> mpred_prop(mounted(human,animal),fluent).
==> meta_argtypes(mounted(human,animal)).

% fluent MountFails(human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8352
fluent(mountFails(MountFails_Ret)).
==> mpred_prop(mountFails(human),fluent).
==> meta_argtypes(mountFails(human)).

% noninertial MountFails
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8353
==> noninertial(mountFails).

% fluent Moves(animal)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8354
fluent(moves(Moves_Ret)).
==> mpred_prop(moves(animal),fluent).
==> meta_argtypes(moves(animal)).

% noninertial Moves
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8355
==> noninertial(moves).

% fluent Opened(gate)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8356
fluent(opened(Opened_Ret)).
==> mpred_prop(opened(gate),fluent).
==> meta_argtypes(opened(gate)).

% fluent Pos(animal,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8357
fluent(pos(Pos_Param,Pos_Ret)).
==> mpred_prop(pos(animal,position),fluent).
==> meta_argtypes(pos(animal,position)).

% fluent PosDeterminingFluent(human,position)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8358
fluent(posDeterminingFluent(PosDeterminingFluent_Param,
			    PosDeterminingFluent_Ret)).
==> mpred_prop(posDeterminingFluent(human,position),fluent).
==> meta_argtypes(posDeterminingFluent(human,position)).

% noninertial PosDeterminingFluent
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8359
==> noninertial(posDeterminingFluent).

% fluent ThrowOffFails(animal,human)
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8360
fluent(throwOffFails(ThrowOffFails_Param,ThrowOffFails_Ret)).
==> mpred_prop(throwOffFails(animal,human),fluent).
==> meta_argtypes(throwOffFails(animal,human)).

% noninertial ThrowOffFails
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8361
==> noninertial(throwOffFails).

% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8363
==> t(species,humanSpecies).
==> t(species,elephantSpecies).
==> t(species,horseSpecies).
==> t(species,dogSpecies).

% location Outside
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8364
==> t(location,outside).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8365
% LargeSpecies(HumanSpecies).
largeSpecies(humanSpecies).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8366
% LargeSpecies(ElephantSpecies).
largeSpecies(elephantSpecies).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8367
% LargeSpecies(HorseSpecies).
largeSpecies(horseSpecies).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8368
% !LargeSpecies(DogSpecies).
 %  not(largeSpecies(dogSpecies)).

 /*  [] ->
       ta(Ta_Param, not(largeSpecies(dogSpecies))).
 */
axiom(not(largeSpecies(dogSpecies)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8370
% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).

 /*  holds_at(doneBy(Event, Animal), Time) <->
       happens(Event, Time),
       (   exists([Gate], Event=close(Animal, Gate))
       ;   exists([Animal1], Event=getOff(Animal, Animal1))
       ;   exists([Animal15],
                  Event=mount(Animal, Animal15))
       ;   exists([Position], Event=move(Animal, Position))
       ;   exists([Gate7], Event=open(Animal, Gate7))
       ;   exists([Human1], Event=throwOff(Animal, Human1))
       ).
 */

 /*  [holds_at, doneBy] <->
       
       [ happens,
          (;),
         exists,
          (=),
         close,
          (;),
         exists,
          (=),
         getOff,
          (;),
         exists,
          (=),
         mount,
          (;),
         exists,
          (=),
         move,
          (;),
         exists,
          (=),
         open,
         exists,
          (=),
         throwOff
       ].
 */

 /*  allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1]) ->
       ( holds_at(doneBy(Event, Animal), Time)->happens(Event, Time), (exists([Gate], Event=close(Animal, Gate));exists([Animal1], Event=getOff(Animal, Animal1));exists([Animal15], Event=mount(Animal, Animal15));exists([Position], Event=move(Animal, Position));exists([Gate7], Event=open(Animal, Gate7));exists([Human1], Event=throwOff(Animal, Human1)))
       ).
 */

 /*  not(holds_at(doneBy(Event, Animal), Time)) :-
       (   not(happens(Event, Time))
       ;   not(equals(Event, close(Animal, Gate))),
           not(equals(Event, getOff(Animal, Animal1))),
           not(equals(Event, mount(Animal, Animal15))),
           not(equals(Event, move(Animal, Position))),
           not(equals(Event, open(Animal, Gate7))),
           not(equals(Event, throwOff(Animal, Human1)))
       ),
       allDifferent(
                    [ Event,
                      Animal,
                      Time,
                      Gate,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(happens(Event, Time))
       ;   not(equals(Event, close(Animal, Gate))),
           not(equals(Event, getOff(Animal, Animal1))),
           not(equals(Event, mount(Animal, Animal15))),
           not(equals(Event, move(Animal, Position))),
           not(equals(Event, open(Animal, Gate7))),
           not(equals(Event, throwOff(Animal, Human1)))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(happens(Event, Time))
       ;   not(call(Event=close(Animal, Gate))),
           not(call(Event=getOff(Animal, Animal1))),
           not(call(Event=mount(Animal, Animal15))),
           not(call(Event=move(Animal, Position))),
           not(call(Event=open(Animal, Gate7))),
           not(call(Event=throwOff(Animal, Human1)))
       ).
 */

 /*  [(not(happens(Event, Time));not(call(Event=close(Animal, Gate))), not(call(Event=getOff(Animal, Animal1))), not(call(Event=mount(Animal, Animal15))), not(call(Event=move(Animal, Position))), not(call(Event=open(Animal, Gate7))), not(call(Event=throwOff(Animal, Human1)))), allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(neg(doneBy(Event, Animal)), Time)).
 */

 /*  [(not(happens(Event, Time));holds_at(neg(call(Event=close(Animal, Gate))), Time), holds_at(neg(call(Event=getOff(Animal, Animal1))), Time), holds_at(neg(call(Event=mount(Animal, Animal15))), Time), holds_at(neg(call(Event=move(Animal, Position))), Time), holds_at(neg(call(Event=open(Animal, Gate7))), Time), holds_at(neg(call(Event=throwOff(Animal, Human1))), Time)), allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(neg(doneBy(Event, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8378
axiom(holds_at(neg(doneBy(Event, Animal)), Time),
   
    [  (not(happens(Event, Time));holds_at(neg(call(Event=close(Animal, Gate))), Time), holds_at(neg(call(Event=getOff(Animal, Animal1))), Time), holds_at(neg(call(Event=mount(Animal, Animal15))), Time), holds_at(neg(call(Event=move(Animal, Position))), Time), holds_at(neg(call(Event=open(Animal, Gate7))), Time), holds_at(neg(call(Event=throwOff(Animal, Human1))), Time)),
      allDifferent(
                   [ Event,
                     Animal,
                     Time,
                     Gate,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).

 /*  happens(Event, Time) :-
       holds_at(doneBy(Event, Animal), Time),
       allDifferent(
                    [ Event,
                      Animal,
                      Time,
                      Gate,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  [holds_at(doneBy(Event, Animal), Time), allDifferent([Event, Animal, Time, Gate, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, happens(Event, Time)).
 */
axiom(happens(Event, Time),
   
    [ holds_at(doneBy(Event, Animal), Time),
      allDifferent(
                   [ Event,
                     Animal,
                     Time,
                     Gate,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).

 /*  allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1]) ->
       ( happens(Event, Time), (exists([Gate], Event=close(Animal, Gate));exists([Animal1], Event=getOff(Animal, Animal1));exists([Animal15], Event=mount(Animal, Animal15));exists([Position], Event=move(Animal, Position));exists([Gate7], Event=open(Animal, Gate7));exists([Human1], Event=throwOff(Animal, Human1)))->holds_at(doneBy(Event, Animal), Time)
       ).
 */

 /*  holds_at(doneBy(Event, Animal), Time) :-
       ( happens(Event, Time),
         (   equals(Event, close(Animal, Gate))
         ;   equals(Event, getOff(Animal, Animal1))
         ;   equals(Event, mount(Animal, Animal15))
         ;   equals(Event, move(Animal, Position))
         ;   equals(Event, open(Animal, Gate7))
         ;   equals(Event, throwOff(Animal, Human1))
         )
       ),
       allDifferent(
                    [ Event,
                      Time,
                      Gate,
                      Animal,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  axiom_head(Time) ->
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Event=close(Animal, Gate))
       ;   call(Event=getOff(Animal, Animal1))
       ;   call(Event=mount(Animal, Animal15))
       ;   call(Event=move(Animal, Position))
       ;   call(Event=open(Animal, Gate7))
       ;   call(Event=throwOff(Animal, Human1))
       ).
 */

 /*  [happens(Event, Time),  (call(Event=close(Animal, Gate));call(Event=getOff(Animal, Animal1));call(Event=mount(Animal, Animal15));call(Event=move(Animal, Position));call(Event=open(Animal, Gate7));call(Event=throwOff(Animal, Human1))), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(doneBy(Event, Animal), Time)).
 */

 /*  [happens(Event, Time),  (holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, holds_at(doneBy(Event, Animal), Time)).
 */
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ happens(Event, Time),
       (holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)),
      allDifferent(
                   [ Event,
                     Time,
                     Gate,
                     Animal,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).

 /*  not(happens(Event, Time)) :-
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ),
       not(holds_at(doneBy(Event, Animal), Time)),
       allDifferent(
                    [ Event,
                      Time,
                      Gate,
                      Animal,
                      Animal1,
                      Animal15,
                      Position,
                      Gate7,
                      Human1
                    ]).
 */

 /*  axiom_head(Time) ->
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   call(Event=close(Animal, Gate))
       ;   call(Event=getOff(Animal, Animal1))
       ;   call(Event=mount(Animal, Animal15))
       ;   call(Event=move(Animal, Position))
       ;   call(Event=open(Animal, Gate7))
       ;   call(Event=throwOff(Animal, Human1))
       ).
 */

 /*  [(call(Event=close(Animal, Gate));call(Event=getOff(Animal, Animal1));call(Event=mount(Animal, Animal15));call(Event=move(Animal, Position));call(Event=open(Animal, Gate7));call(Event=throwOff(Animal, Human1))), holds_at(neg(doneBy(Event, Animal)), Time), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, not(happens(Event, Time))).
 */

 /*  [(holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)), holds_at(neg(doneBy(Event, Animal)), Time), allDifferent([Event, Time, Gate, Animal, Animal1, Animal15, Position, Gate7, Human1])] ->
       ta(Time, not(happens(Event, Time))).
 */
axiom(not(happens(Event, Time)),
   
    [  (holds_at(call(Event=close(Animal, Gate)), Time);holds_at(call(Event=getOff(Animal, Animal1)), Time);holds_at(call(Event=mount(Animal, Animal15)), Time);holds_at(call(Event=move(Animal, Position)), Time);holds_at(call(Event=open(Animal, Gate7)), Time);holds_at(call(Event=throwOff(Animal, Human1)), Time)),
      holds_at(neg(doneBy(Event, Animal)), Time),
      allDifferent(
                   [ Event,
                     Time,
                     Gate,
                     Animal,
                     Animal1,
                     Animal15,
                     Position,
                     Gate7,
                     Human1
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8380
% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.

 /*  allDifferent([Event1, Animal, Time, Event2]) ->
       ( holds_at(doneBy(Event1, Animal), Time), holds_at(doneBy(Event2, Animal), Time)->Event1=Event2
       ).
 */

 /*  not(holds_at(doneBy(Event1, Animal), Time)) :-
       holds_at(doneBy(Event2, Animal), Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Animal, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [holds_at(doneBy(Event2, Animal), Time), not(call(Event1=Event2)), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event1, Animal)), Time)).
 */

 /*  [holds_at(doneBy(Event2, Animal), Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event1, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8383
axiom(holds_at(neg(doneBy(Event1, Animal)), Time),
   
    [ holds_at(doneBy(Event2, Animal), Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Animal, Time, Event2])
    ]).

 /*  not(holds_at(doneBy(Event2, Animal), Time)) :-
       holds_at(doneBy(Event1, Animal), Time),
       not(equals(Event1, Event2)),
       allDifferent([Event1, Animal, Time, Event2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Event1, Event2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Event1=Event2)).
 */

 /*  [holds_at(doneBy(Event1, Animal), Time), not(call(Event1=Event2)), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event2, Animal)), Time)).
 */

 /*  [holds_at(doneBy(Event1, Animal), Time), holds_at(neg(call(Event1=Event2)), Time), allDifferent([Event1, Animal, Time, Event2])] ->
       ta(Time, holds_at(neg(doneBy(Event2, Animal)), Time)).
 */
axiom(holds_at(neg(doneBy(Event2, Animal)), Time),
   
    [ holds_at(doneBy(Event1, Animal), Time),
      holds_at(neg(call(Event1=Event2)), Time),
      allDifferent([Event1, Animal, Time, Event2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8385
% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).

 /*  large(Animal) <->
       adult(Animal),
       largeSpecies(species(Animal)).
 */

 /*  [large] <->
       [adult, largeSpecies, species].
 */

 /*  large(Animal) ->
       adult(Animal),
       largeSpecies(species(Animal)).
 */

 /*  not(large(Animal)) :-
       (   not(adult(Animal))
       ;   not(largeSpecies(species(Animal)))
       ).
 */

 /*  [(not(adult(Animal));not(largeSpecies(species(Animal))))] ->
       ta(Ta_Param, not(large(Animal))).
 */
axiom(not(large(Animal)),
    [(not(adult(Animal));not(largeSpecies(species(Animal))))]).

 /*  adult(Animal) :-
       large(Animal).
 */

 /*  [large(Animal)] ->
       ta(Ta_Param2, adult(Animal)).
 */
axiom(adult(Animal),
    [large(Animal)]).

 /*  largeSpecies(species(Animal)) :-
       large(Animal).
 */

 /*  [large(Animal)] ->
       ta(Ta_Param3, largeSpecies(species(Animal))).
 */
axiom(largeSpecies(species(Animal)),
    [large(Animal)]).

 /*  adult(Animal), largeSpecies(species(Animal)) ->
       large(Animal).
 */

 /*  large(Animal) :-
       adult(Animal),
       largeSpecies(species(Animal)).
 */

 /*  [adult(Animal), largeSpecies(species(Animal))] ->
       ta(Ta_Param4, large(Animal)).
 */
axiom(large(Animal),
    [adult(Animal), largeSpecies(species(Animal))]).

 /*  not(adult(Animal)) :-
       largeSpecies(species(Animal)),
       not(large(Animal)).
 */

 /*  [largeSpecies(species(Animal)), not(large(Animal))] ->
       ta(Ta_Param5, not(adult(Animal))).
 */
axiom(not(adult(Animal)),
    [largeSpecies(species(Animal)), not(large(Animal))]).

 /*  not(largeSpecies(species(Animal))) :-
       adult(Animal),
       not(large(Animal)).
 */

 /*  [adult(Animal), not(large(Animal))] ->
       ta(Ta_Param6, not(largeSpecies(species(Animal)))).
 */
axiom(not(largeSpecies(species(Animal))),
    [adult(Animal), not(large(Animal))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8387
% [position]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8387
% {position1} % position1!=% position & Neighbor(position,position1).

 /*  exists([Position1],
     diff(Position1, Position),
      neighbor(Position, Position1)).
 */

 /*  neighbor(Position, Position1) :-
       some(Position1, '$kolem_Fn_427'(Position)).
 */

 /*  [some(Position1, '$kolem_Fn_427'(Position))] ->
       ta(Ta_Param, neighbor(Position, Position1)).
 */
axiom(neighbor(Position, Position1),
    [some(Position1, '$kolem_Fn_427'(Position))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8389
% [position]
 % !Neighbor(position,position).
 %  not(neighbor(Position,Position)).

 /*  [] ->
       ta(Ta_Param, not(neighbor(Position, Position))).
 */
axiom(not(neighbor(Position, Position)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8391
% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).

 /*  allDifferent([Position1, Position2]) ->
       ( neighbor(Position1, Position2)->neighbor(Position2, Position1)
       ).
 */

 /*  neighbor(Position2, Position1) :-
       neighbor(Position1, Position2),
       allDifferent([Position1, Position2]).
 */

 /*  [neighbor(Position1, Position2), allDifferent([Position1, Position2])] ->
       ta(Ta_Param, neighbor(Position2, Position1)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8393
axiom(neighbor(Position2, Position1),
   
    [ neighbor(Position1, Position2),
      allDifferent([Position1, Position2])
    ]).

 /*  not(neighbor(Position1, Position2)) :-
       not(neighbor(Position2, Position1)),
       allDifferent([Position1, Position2]).
 */

 /*  [not(neighbor(Position2, Position1)), allDifferent([Position1, Position2])] ->
       ta(Ta_Param3, not(neighbor(Position1, Position2))).
 */
axiom(not(neighbor(Position1, Position2)),
   
    [ not(neighbor(Position2, Position1)),
      allDifferent([Position1, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8395
% [cage]
 % cage!=% Outside.
diff(Cage,outside).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8397
% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).

 /*  sides(Position1, Position2, Gate) <->
       (   side1(Gate)=Position1,
           side2(Gate)=Position2
       ;   side2(Gate)=Position1,
           side1(Gate)=Position2
       ).
 */

 /*  [sides] <->
       [;, =, side1, =, side2, =, side2, =, side1].
 */

 /*  allDifferent([Position1, Position2, Gate]) ->
       ( sides(Position1, Position2, Gate)->side1(Gate)=Position1, side2(Gate)=Position2;side2(Gate)=Position1, side1(Gate)=Position2
       ).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       ( (   not(equals(side1(Gate), Position1))
         ;   not(equals(side2(Gate), Position2))
         ),
         (   not(equals(side2(Gate), Position1))
         ;   not(equals(side1(Gate), Position2))
         )
       ),
       allDifferent([Position1, Position2, Gate]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(side1(Gate), Position1))
       ;   not(equals(side2(Gate), Position2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(side1(Gate)=Position1))
       ;   not(call(side2(Gate)=Position2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(side2(Gate), Position1))
       ;   not(equals(side1(Gate), Position2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(side2(Gate)=Position1))
       ;   not(call(side1(Gate)=Position2))
       ).
 */

 /*  [(not(call(side1(Gate)=Position1));not(call(side2(Gate)=Position2))),  (not(call(side2(Gate)=Position1));not(call(side1(Gate)=Position2))), allDifferent([Position1, Position2, Gate])] ->
       ta(Axiom_head_Ret,
          not(sides(Position1, Position2, Gate))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8402
axiom(not(sides(Position1, Position2, Gate)),
   
    [  (not(call(side1(Gate)=Position1));not(call(side2(Gate)=Position2))),
       (not(call(side2(Gate)=Position1));not(call(side1(Gate)=Position2))),
      allDifferent([Position1, Position2, Gate])
    ]).

 /*  allDifferent([Gate, Position1, Position2]) ->
       ( side1(Gate)=Position1, side2(Gate)=Position2;side2(Gate)=Position1, side1(Gate)=Position2->sides(Position1, Position2, Gate)
       ).
 */

 /*  sides(Position1, Position2, Gate) :-
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ),
       allDifferent([Gate, Position1, Position2]).
 */

 /*  axiom_head(Axiom_head_Ret4) ->
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       (   call(side1(Gate)=Position1),
           call(side2(Gate)=Position2)
       ;   call(side2(Gate)=Position1),
           call(side1(Gate)=Position2)
       ).
 */

 /*  [(call(side1(Gate)=Position1), call(side2(Gate)=Position2);call(side2(Gate)=Position1), call(side1(Gate)=Position2)), allDifferent([Gate, Position1, Position2])] ->
       ta(Axiom_head_Ret4,
          sides(Position1, Position2, Gate)).
 */
axiom(sides(Position1, Position2, Gate),
   
    [  (call(side1(Gate)=Position1), call(side2(Gate)=Position2);call(side2(Gate)=Position1), call(side1(Gate)=Position2)),
      allDifferent([Gate, Position1, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8404
% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
diff(loc(side1(Gate)),loc(side2(Gate))).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8406
% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.

 /*  allDifferent([Position1, Position2, Gate1, Gate2]) ->
       ( sides(Position1, Position2, Gate1), sides(Position1, Position2, Gate2)->Gate1=Gate2
       ).
 */

 /*  not(sides(Position1, Position2, Gate1)) :-
       sides(Position1, Position2, Gate2),
       not(equals(Gate1, Gate2)),
       allDifferent([Position1, Position2, Gate1, Gate2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       not(equals(Gate1, Gate2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       not(call(Gate1=Gate2)).
 */

 /*  [sides(Position1, Position2, Gate2), not(call(Gate1=Gate2)), allDifferent([Position1, Position2, Gate1, Gate2])] ->
       ta(Axiom_head_Ret,
          not(sides(Position1, Position2, Gate1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8409
axiom(not(sides(Position1, Position2, Gate1)),
   
    [ sides(Position1, Position2, Gate2),
      not(call(Gate1=Gate2)),
      allDifferent([Position1, Position2, Gate1, Gate2])
    ]).

 /*  not(sides(Position1, Position2, Gate2)) :-
       sides(Position1, Position2, Gate1),
       not(equals(Gate1, Gate2)),
       allDifferent([Position1, Position2, Gate1, Gate2]).
 */

 /*  axiom_head(Axiom_head_Ret5) ->
       not(equals(Gate1, Gate2)).
 */

 /*  fix_axiom_head(Axiom_head_Ret5) ->
       not(call(Gate1=Gate2)).
 */

 /*  [sides(Position1, Position2, Gate1), not(call(Gate1=Gate2)), allDifferent([Position1, Position2, Gate1, Gate2])] ->
       ta(Axiom_head_Ret5,
          not(sides(Position1, Position2, Gate2))).
 */
axiom(not(sides(Position1, Position2, Gate2)),
   
    [ sides(Position1, Position2, Gate1),
      not(call(Gate1=Gate2)),
      allDifferent([Position1, Position2, Gate1, Gate2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8411
% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).

 /*  allDifferent([Position1, Position2, Gate]) ->
       ( sides(Position1, Position2, Gate)->neighbor(Position1, Position2)
       ).
 */

 /*  neighbor(Position1, Position2) :-
       sides(Position1, Position2, Gate),
       allDifferent([Position1, Position2, Gate]).
 */

 /*  [sides(Position1, Position2, Gate), allDifferent([Position1, Position2, Gate])] ->
       ta(Ta_Param, neighbor(Position1, Position2)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8413
axiom(neighbor(Position1, Position2),
   
    [ sides(Position1, Position2, Gate),
      allDifferent([Position1, Position2, Gate])
    ]).

 /*  not(sides(Position1, Position2, Gate)) :-
       not(neighbor(Position1, Position2)),
       allDifferent([Position1, Position2, Gate]).
 */

 /*  [not(neighbor(Position1, Position2)), allDifferent([Position1, Position2, Gate])] ->
       ta(Ta_Param4, not(sides(Position1, Position2, Gate))).
 */
axiom(not(sides(Position1, Position2, Gate)),
   
    [ not(neighbor(Position1, Position2)),
      allDifferent([Position1, Position2, Gate])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8415
% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8418
% {gate}%  Sides(position1,position2,gate).

 /*  exists([Gate],
    diff(loc(Position1), loc(Position2)), neighbor(Position1, Position2) ->
       sides(Position1, Position2, Gate)).
 */

 /*  sides(Position1, Position2, Gate) :-
       ( diff(loc(Position1), loc(Position2)),
         neighbor(Position1, Position2)
       ),
       some(Gate, '$kolem_Fn_428'(Position1, Position2)).
 */

 /*  [diff(loc(Position1), loc(Position2)), neighbor(Position1, Position2), some(Gate, '$kolem_Fn_428'(Position1, Position2))] ->
       ta(Ta_Param, sides(Position1, Position2, Gate)).
 */
axiom(sides(Position1, Position2, Gate),
   
    [ diff(loc(Position1), loc(Position2)),
      neighbor(Position1, Position2),
      some(Gate, '$kolem_Fn_428'(Position1, Position2))
    ]).

 /*  not(neighbor(Position1, Position2)) :-
       diff(loc(Position1), loc(Position2)),
       not(sides(Position1, Position2, Gate)),
       some(Gate, '$kolem_Fn_428'(Position1, Position2)).
 */

 /*  [diff(loc(Position1), loc(Position2)), not(sides(Position1, Position2, Gate)), some(Gate, '$kolem_Fn_428'(Position1, Position2))] ->
       ta(Ta_Param5, not(neighbor(Position1, Position2))).
 */
axiom(not(neighbor(Position1, Position2)),
   
    [ diff(loc(Position1), loc(Position2)),
      not(sides(Position1, Position2, Gate)),
      some(Gate, '$kolem_Fn_428'(Position1, Position2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8420
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.

 /*  allDifferent([Animal, Position1, Time, Position2]) ->
       ( holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time)->Position1=Position2
       ).
 */

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time),
       not(equals(Position1, Position2)),
       allDifferent([Animal, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(pos(Animal, Position2), Time), not(call(Position1=Position2)), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */

 /*  [holds_at(pos(Animal, Position2), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8423
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Animal, Position1, Time, Position2])
    ]).

 /*  not(holds_at(pos(Animal, Position2), Time)) :-
       holds_at(pos(Animal, Position1), Time),
       not(equals(Position1, Position2)),
       allDifferent([Animal, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(pos(Animal, Position1), Time), not(call(Position1=Position2)), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position2)), Time)).
 */

 /*  [holds_at(pos(Animal, Position1), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Animal, Position1, Time, Position2])] ->
       ta(Time, holds_at(neg(pos(Animal, Position2)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position2)), Time),
   
    [ holds_at(pos(Animal, Position1), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Animal, Position1, Time, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8425
% [animal,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8426
% {position} % HoldsAt(Pos(animal,position),time).

 /*  exists([Position],
    holds_at(pos(Animal,Position),Time)).
 */

 /*  holds_at(pos(Animal, Position), Time) :-
       some(Position, '$kolem_Fn_429'(Animal, Time)).
 */

 /*  [some(Position, '$kolem_Fn_429'(Animal, Time))] ->
       ta(Time, holds_at(pos(Animal, Position), Time)).
 */
axiom(holds_at(pos(Animal, Position), Time),
    [some(Position, '$kolem_Fn_429'(Animal, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8428
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).

 /*  allDifferent([Animal1, Animal2, Position, Time, Human, Human5]) ->
       ( diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time)->exists([Human],  (Human=Animal1, holds_at(mounted(Human, Animal2), Time)));exists([Human5],  (Human5=Animal2, holds_at(mounted(Human5, Animal1), Time)))
       ).
 */

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, not(large(Animal1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8435
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      diff(Animal1, Animal2),
       (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), large(Animal1), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      large(Animal1),
      diff(Animal1, Animal2),
       (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       holds_at(pos(Animal2, Position), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [holds_at(pos(Animal2, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */

 /*  [holds_at(pos(Animal2, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),  (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(pos(Animal2, Position), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
       (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),
       (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  not(holds_at(pos(Animal2, Position), Time)) :-
       holds_at(pos(Animal1, Position), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       ( (   not(equals(Human, Animal1))
         ;   not(holds_at(mounted(Human, Animal2), Time))
         ),
         (   not(equals(Human5, Animal2))
         ;   not(holds_at(mounted(Human5, Animal1), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal2, Position)), Time)).
 */

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),  (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(neg(pos(Animal2, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal2, Position)), Time),
   
    [ holds_at(pos(Animal1, Position), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
       (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),
       (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  holds_at(mounted(Human, Animal2), Time) :-
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ),
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human5=Animal2))
       ;   holds_at(neg(mounted(Human5, Animal1)), Time)
       ).
 */

 /*  [(not(call(Human5=Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human, Animal2), Time)).
 */

 /*  [(holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human, Animal2), Time)).
 */
axiom(holds_at(mounted(Human, Animal2), Time),
   
    [  (holds_at(neg(call(Human5=Animal2)), Time);holds_at(neg(mounted(Human5, Animal1)), Time)),
      diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).

 /*  holds_at(mounted(Human5, Animal1), Time) :-
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position,
                      Time,
                      Human,
                      Human5
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal1))
       ;   holds_at(neg(mounted(Human, Animal2)), Time)
       ).
 */

 /*  [(not(call(Human=Animal1));holds_at(neg(mounted(Human, Animal2)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human5, Animal1), Time)).
 */

 /*  [(holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), allDifferent([Animal1, Animal2, Position, Time, Human, Human5])] ->
       ta(Time, holds_at(mounted(Human5, Animal1), Time)).
 */
axiom(holds_at(mounted(Human5, Animal1), Time),
   
    [  (holds_at(neg(call(Human=Animal1)), Time);holds_at(neg(mounted(Human, Animal2)), Time)),
      diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position,
                     Time,
                     Human,
                     Human5
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8437
% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.

 /*  allDifferent([Human, Position1, Time, Position2]) ->
       ( holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(posDeterminingFluent(Human, Position2), Time)->Position1=Position2
       ).
 */

 /*  not(holds_at(posDeterminingFluent(Human, Position1), Time)) :-
       holds_at(posDeterminingFluent(Human, Position2), Time),
       not(equals(Position1, Position2)),
       allDifferent([Human, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position2), Time), not(call(Position1=Position2)), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position1)),
                   Time)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position2), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position1)),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8440
axiom(holds_at(neg(posDeterminingFluent(Human, Position1)), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position2), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Human, Position1, Time, Position2])
    ]).

 /*  not(holds_at(posDeterminingFluent(Human, Position2), Time)) :-
       holds_at(posDeterminingFluent(Human, Position1), Time),
       not(equals(Position1, Position2)),
       allDifferent([Human, Position1, Time, Position2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Position1, Position2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Position1=Position2)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position1), Time), not(call(Position1=Position2)), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position2)),
                   Time)).
 */

 /*  [holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(neg(call(Position1=Position2)), Time), allDifferent([Human, Position1, Time, Position2])] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position2)),
                   Time)).
 */
axiom(holds_at(neg(posDeterminingFluent(Human, Position2)), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position1), Time),
      holds_at(neg(call(Position1=Position2)), Time),
      allDifferent([Human, Position1, Time, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8442
% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).

 /*  [] ->
       ta(Time,
          initiates(move(Animal, Position),
                    pos(Animal, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8443
axiom(initiates(move(Animal, Position), pos(Animal, Position), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8445
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).

 /*  [holds_at(pos(Animal, Position1), Time)] ->
       ta(Time,
          terminates(move(Animal, Position2),
                     pos(Animal, Position1),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8447
axiom(terminates(move(Animal, Position2), pos(Animal, Position1), Time),
    [holds_at(pos(Animal, Position1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8449
% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).

 /*  allDifferent([Animal, Position, Time]) ->
       ( happens(move(Animal, Position), Time)->holds_at(neg(pos(Animal, Position)), Time)
       ).
 */

 /*  holds_at(neg(pos(Animal, Position)), Time) :-
       happens(move(Animal, Position), Time),
       allDifferent([Animal, Position, Time]).
 */

 /*  [happens(move(Animal, Position), Time), allDifferent([Animal, Position, Time])] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8451
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ happens(move(Animal, Position), Time),
      allDifferent([Animal, Position, Time])
    ]).

 /*  not(happens(move(Animal, Position), Time)) :-
       not(holds_at(neg(pos(Animal, Position)), Time)),
       allDifferent([Animal, Position, Time]).
 */

 /*  [holds_at(neg(neg(pos(Animal, Position))), Time), allDifferent([Animal, Position, Time])] ->
       ta(Time, not(happens(move(Animal, Position), Time))).
 */
axiom(not(happens(move(Animal, Position), Time)),
   
    [ holds_at(neg(neg(pos(Animal, Position))), Time),
      allDifferent([Animal, Position, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8453
% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).

 /*  allDifferent([Human, Position, Time, Animal]) ->
       ( happens(move(Human, Position), Time)->not(exists([Animal], holds_at(mounted(Human, Animal), Time)))
       ).
 */

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(move(Human, Position), Time),
       allDifferent([Human, Position, Time, Animal]).
 */

 /*  [happens(move(Human, Position), Time), allDifferent([Human, Position, Time, Animal])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8455
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(move(Human, Position), Time),
      allDifferent([Human, Position, Time, Animal])
    ]).

 /*  not(happens(move(Human, Position), Time)) :-
       holds_at(mounted(Human, Animal), Time),
       allDifferent([Human, Position, Time, Animal]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), allDifferent([Human, Position, Time, Animal])] ->
       ta(Time, not(happens(move(Human, Position), Time))).
 */
axiom(not(happens(move(Human, Position), Time)),
   
    [ holds_at(mounted(Human, Animal), Time),
      allDifferent([Human, Position, Time, Animal])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8457
% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).

 /*  [] ->
       ta(Time,
          initiates(open(Human, Gate), opened(Gate), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8458
axiom(initiates(open(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8460
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).

 /*  allDifferent([Human, Gate, Time, Animal, Position]) ->
       ( happens(open(Human, Gate), Time)->holds_at(neg(opened(Gate)), Time), not(exists([Animal], holds_at(mounted(Human, Animal), Time))), exists([Position],  ((side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time)))
       ).
 */

 /*  not(happens(open(Human, Gate), Time)) :-
       (   not(holds_at(neg(opened(Gate)), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(neg(opened(Gate)), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(neg(opened(Gate))), Time)
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(call(side1(Gate)=Position)),
           not(call(side2(Gate)=Position))
       ;   holds_at(neg(pos(Human, Position)), Time)
       ).
 */

 /*  [(holds_at(neg(neg(opened(Gate))), Time);holds_at(mounted(Human, Animal), Time);not(call(side1(Gate)=Position)), not(call(side2(Gate)=Position));holds_at(neg(pos(Human, Position)), Time)), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, not(happens(open(Human, Gate), Time))).
 */

 /*  [(holds_at(neg(neg(opened(Gate))), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, not(happens(open(Human, Gate), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8466
axiom(not(happens(open(Human, Gate), Time)),
   
    [  (holds_at(neg(neg(opened(Gate))), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).

 /*  holds_at(neg(opened(Gate)), Time) :-
       happens(open(Human, Gate), Time),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  [happens(open(Human, Gate), Time), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, holds_at(neg(opened(Gate)), Time)).
 */
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ happens(open(Human, Gate), Time),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(open(Human, Gate), Time),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  [happens(open(Human, Gate), Time), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(open(Human, Gate), Time),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).

 /*  holds_at(pos(Human, Position), Time) :-
       happens(open(Human, Gate), Time),
       allDifferent(
                    [ Human,
                      Gate,
                      Time,
                      Animal,
                      Position
                    ]).
 */

 /*  [happens(open(Human, Gate), Time), allDifferent([Human, Gate, Time, Animal, Position])] ->
       ta(Time, holds_at(pos(Human, Position), Time)).
 */
axiom(holds_at(pos(Human, Position), Time),
   
    [ happens(open(Human, Gate), Time),
      allDifferent(
                   [ Human,
                     Gate,
                     Time,
                     Animal,
                     Position
                   ])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8468
% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).

 /*  [] ->
       ta(Time,
          terminates(close(Human, Gate), opened(Gate), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8469
axiom(terminates(close(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8471
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8475
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).

 /*  exists([Position],
    happens(close(Human, Gate), Time) ->
       holds_at(opened(Gate), Time),
       not(exists([Animal],
                  holds_at(mounted(Human, Animal), Time))),
       (   side1(Gate)=Position
       ;   side2(Gate)=Position
       ),
       holds_at(pos(Human, Position), Time)).
 */

 /*  not(happens(close(Human, Gate), Time)) :-
       (   not(holds_at(opened(Gate), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ),
       some(Position,
            '$kolem_Fn_435'(Human, Gate, Time, Animal)).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(opened(Gate), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(opened(Gate)), Time)
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(call(side1(Gate)=Position)),
           not(call(side2(Gate)=Position))
       ;   holds_at(neg(pos(Human, Position)), Time)
       ).
 */

 /*  [(holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);not(call(side1(Gate)=Position)), not(call(side2(Gate)=Position));holds_at(neg(pos(Human, Position)), Time)), some(Position, '$kolem_Fn_435'(Human, Gate, Time, Animal))] ->
       ta(Time, not(happens(close(Human, Gate), Time))).
 */

 /*  [(holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)), some(Position, '$kolem_Fn_435'(Human, Gate, Time, Animal))] ->
       ta(Time, not(happens(close(Human, Gate), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8477
axiom(not(happens(close(Human, Gate), Time)),
   
    [  (holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);holds_at(neg(call(side1(Gate)=Position)), Time), holds_at(neg(call(side2(Gate)=Position)), Time);holds_at(neg(pos(Human, Position)), Time)),
      some(Position,
           '$kolem_Fn_435'(Human, Gate, Time, Animal))
    ]).

 /*  holds_at(opened(Gate), Time) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_435'(Human, Gate, Time, Animal)).
 */

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_435'(Human, Gate, Time, Animal))] ->
       ta(Time, holds_at(opened(Gate), Time)).
 */
axiom(holds_at(opened(Gate), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_435'(Human, Gate, Time, Animal))
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_435'(Human, Gate, Time, Animal)).
 */

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_435'(Human, Gate, Time, Animal))] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_435'(Human, Gate, Time, Animal))
    ]).

 /*  holds_at(pos(Human, Position), Time) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_435'(Human, Gate, Time, Animal)).
 */

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_435'(Human, Gate, Time, Animal))] ->
       ta(Time, holds_at(pos(Human, Position), Time)).
 */
axiom(holds_at(pos(Human, Position), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_435'(Human, Gate, Time, Animal))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8479
% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).

 /*  allDifferent([Human, Animal, Time, Position]) ->
       ( holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time)->holds_at(pos(Human, Position), Time)
       ).
 */

 /*  holds_at(pos(Human, Position), Time) :-
       ( holds_at(mounted(Human, Animal), Time),
         holds_at(pos(Animal, Position), Time)
       ),
       allDifferent([Human, Animal, Time, Position]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time), allDifferent([Human, Animal, Time, Position])] ->
       ta(Time, holds_at(pos(Human, Position), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8482
axiom(holds_at(pos(Human, Position), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(pos(Animal, Position), Time),
      allDifferent([Human, Animal, Time, Position])
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       holds_at(pos(Animal, Position), Time),
       not(holds_at(pos(Human, Position), Time)),
       allDifferent([Human, Animal, Time, Position]).
 */

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Human, Position)), Time), allDifferent([Human, Animal, Time, Position])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(pos(Human, Position)), Time),
      allDifferent([Human, Animal, Time, Position])
    ]).

 /*  not(holds_at(pos(Animal, Position), Time)) :-
       holds_at(mounted(Human, Animal), Time),
       not(holds_at(pos(Human, Position), Time)),
       allDifferent([Human, Animal, Time, Position]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), holds_at(neg(pos(Human, Position)), Time), allDifferent([Human, Animal, Time, Position])] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(neg(pos(Human, Position)), Time),
      allDifferent([Human, Animal, Time, Position])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8484
% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).

 /*  holds_at(moves(Animal), Time) <->
       exists([Position],
               (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1))).
 */

 /*  [holds_at, moves] <->
       [exists, holds_at, pos, holds_at, neg, pos, +].
 */

 /*  allDifferent([Animal, Time, Position]) ->
       ( holds_at(moves(Animal), Time)->exists([Position],  (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1)))
       ).
 */

 /*  not(holds_at(moves(Animal), Time)) :-
       (   not(holds_at(pos(Animal, Position), Time))
       ;   not(holds_at(neg(pos(Animal, Position)), Time+1))
       ),
       allDifferent([Animal, Time, Position]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(pos(Animal, Position), Time))
       ;   not(holds_at(neg(pos(Animal, Position)), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(pos(Animal, Position)), Time)
       ;   holds_at(neg(neg(pos(Animal, Position))), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time3), b(Time, Time3),  (holds_at(neg(pos(Animal, Position)), Time);holds_at(neg(neg(pos(Animal, Position))), Time3)), allDifferent([Animal, Time, Position])] ->
       ta(Time, holds_at(neg(moves(Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8488
axiom(holds_at(neg(moves(Animal)), Time),
   
    [ b(Time, Time3),
       (holds_at(neg(pos(Animal, Position)), Time);holds_at(neg(neg(pos(Animal, Position))), Time3)),
      allDifferent([Animal, Time, Position])
    ]).

 /*  holds_at(pos(Animal, Position), Time) :-
       holds_at(moves(Animal), Time),
       allDifferent([Animal, Time, Position]).
 */

 /*  [holds_at(moves(Animal), Time), allDifferent([Animal, Time, Position])] ->
       ta(Time, holds_at(pos(Animal, Position), Time)).
 */
axiom(holds_at(pos(Animal, Position), Time),
   
    [ holds_at(moves(Animal), Time),
      allDifferent([Animal, Time, Position])
    ]).

 /*  holds_at(neg(pos(Animal, Position)), Time+1) :-
       holds_at(moves(Animal), Time),
       allDifferent([Animal, Time, Position]).
 */

 /*  [holds_at(moves(Animal), Time), allDifferent([Animal, Time, Position]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time4)).
 */
axiom(holds_at(neg(pos(Animal, Position)), Time4),
   
    [ holds_at(moves(Animal), Time),
      allDifferent([Animal, Time, Position]),
      b(Time, Time4)
    ]).

 /*  allDifferent([Position, Animal, Time]) ->
       ( exists([Position],  (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1)))->holds_at(moves(Animal), Time)
       ).
 */

 /*  holds_at(moves(Animal), Time) :-
       ( holds_at(pos(Animal, Position), Time),
         holds_at(neg(pos(Animal, Position)), Time+1)
       ),
       allDifferent([Position, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time5), allDifferent([Position, Animal, Time]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(moves(Animal), Time)).
 */
axiom(holds_at(moves(Animal), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(pos(Animal, Position)), Time5),
      allDifferent([Position, Animal, Time]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(pos(Animal, Position), Time)) :-
       holds_at(neg(pos(Animal, Position)), Time+1),
       not(holds_at(moves(Animal), Time)),
       allDifferent([Position, Animal, Time]).
 */

 /*  [holds_at(neg(pos(Animal, Position)), Time6), holds_at(neg(moves(Animal)), Time), allDifferent([Position, Animal, Time]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, holds_at(neg(pos(Animal, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ holds_at(neg(pos(Animal, Position)), Time6),
      holds_at(neg(moves(Animal)), Time),
      allDifferent([Position, Animal, Time]),
      b(Time, Time6)
    ]).

 /*  not(holds_at(neg(pos(Animal, Position)), Time+1)) :-
       holds_at(pos(Animal, Position), Time),
       not(holds_at(moves(Animal), Time)),
       allDifferent([Position, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(moves(Animal)), Time), allDifferent([Position, Animal, Time]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal, Position))), Time7)).
 */
axiom(holds_at(neg(neg(pos(Animal, Position))), Time7),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(moves(Animal)), Time),
      allDifferent([Position, Animal, Time]),
      b(Time, Time7)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8490
% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).

 /*  holds_at(mountFails(Human), Time) <->
       exists([Animal],
               (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).
 */

 /*  [holds_at, mountFails] <->
       [exists, happens, mount, holds_at, moves].
 */

 /*  allDifferent([Human, Time, Animal]) ->
       ( holds_at(mountFails(Human), Time)->exists([Animal],  (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time)))
       ).
 */

 /*  not(holds_at(mountFails(Human), Time)) :-
       (   not(happens(mount(Human, Animal), Time))
       ;   not(holds_at(moves(Animal), Time))
       ),
       allDifferent([Human, Time, Animal]).
 */

 /*  axiom_head(Time) ->
       (   not(happens(mount(Human, Animal), Time))
       ;   not(holds_at(moves(Animal), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(happens(mount(Human, Animal), Time))
       ;   holds_at(neg(moves(Animal)), Time)
       ).
 */

 /*  [(not(happens(mount(Human, Animal), Time));holds_at(neg(moves(Animal)), Time)), allDifferent([Human, Time, Animal])] ->
       ta(Time, holds_at(neg(mountFails(Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8494
axiom(holds_at(neg(mountFails(Human)), Time),
   
    [  (not(happens(mount(Human, Animal), Time));holds_at(neg(moves(Animal)), Time)),
      allDifferent([Human, Time, Animal])
    ]).

 /*  happens(mount(Human, Animal), Time) :-
       holds_at(mountFails(Human), Time),
       allDifferent([Human, Time, Animal]).
 */

 /*  [holds_at(mountFails(Human), Time), allDifferent([Human, Time, Animal])] ->
       ta(Time, happens(mount(Human, Animal), Time)).
 */
axiom(happens(mount(Human, Animal), Time),
   
    [ holds_at(mountFails(Human), Time),
      allDifferent([Human, Time, Animal])
    ]).

 /*  holds_at(moves(Animal), Time) :-
       holds_at(mountFails(Human), Time),
       allDifferent([Human, Time, Animal]).
 */

 /*  [holds_at(mountFails(Human), Time), allDifferent([Human, Time, Animal])] ->
       ta(Time, holds_at(moves(Animal), Time)).
 */
axiom(holds_at(moves(Animal), Time),
   
    [ holds_at(mountFails(Human), Time),
      allDifferent([Human, Time, Animal])
    ]).

 /*  allDifferent([Animal, Human, Time]) ->
       ( exists([Animal],  (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time)))->holds_at(mountFails(Human), Time)
       ).
 */

 /*  holds_at(mountFails(Human), Time) :-
       ( happens(mount(Human, Animal), Time),
         holds_at(moves(Animal), Time)
       ),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(mountFails(Human), Time)).
 */
axiom(holds_at(mountFails(Human), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(moves(Animal), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       holds_at(moves(Animal), Time),
       not(holds_at(mountFails(Human), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [holds_at(moves(Animal), Time), holds_at(neg(mountFails(Human)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ holds_at(moves(Animal), Time),
      holds_at(neg(mountFails(Human)), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(holds_at(moves(Animal), Time)) :-
       happens(mount(Human, Animal), Time),
       not(holds_at(mountFails(Human), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(mount(Human, Animal), Time), holds_at(neg(mountFails(Human)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(neg(moves(Animal)), Time)).
 */
axiom(holds_at(neg(moves(Animal)), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(neg(mountFails(Human)), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8496
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          releases(mount(Human, Animal),
                   pos(Human, Position),
                   Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8498
axiom(releases(mount(Human, Animal), pos(Human, Position), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8500
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          initiates(mount(Human, Animal),
                    mounted(Human, Animal),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8502
axiom(initiates(mount(Human, Animal), mounted(Human, Animal), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8504
% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).

 /*  [holds_at(pos(Animal, Position), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          initiates(mount(Human, Animal),
                    pos(Human, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8507
axiom(initiates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8509
% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).

 /*  [holds_at(pos(Human, Position), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          terminates(mount(Human, Animal),
                     pos(Human, Position),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8512
axiom(terminates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8514
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).

 /*  allDifferent([Human, Animal, Time]) ->
       ( happens(mount(Human, Animal), Time)->large(Animal)
       ).
 */

 /*  large(Animal) :-
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, large(Animal)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8516
axiom(large(Animal),
   
    [ happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       not(large(Animal)),
       allDifferent([Human, Animal, Time]).
 */

 /*  [not(large(Animal)), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ not(large(Animal)),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8518
% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).

 /*  allDifferent([Human, Animal, Time]) ->
       ( holds_at(mounted(Human, Animal), Time)->large(Animal)
       ).
 */

 /*  large(Animal) :-
       holds_at(mounted(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [holds_at(mounted(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, large(Animal)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8520
axiom(large(Animal),
   
    [ holds_at(mounted(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       not(large(Animal)),
       allDifferent([Human, Animal, Time]).
 */

 /*  [not(large(Animal)), allDifferent([Human, Animal, Time])] ->
       ta(Time, holds_at(neg(mounted(Human, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ not(large(Animal)),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8522
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).

 /*  allDifferent([Human1, Human2, Time]) ->
       ( happens(mount(Human1, Human2), Time)->not(large(Human1))
       ).
 */

 /*  not(large(Human1)) :-
       happens(mount(Human1, Human2), Time),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [happens(mount(Human1, Human2), Time), allDifferent([Human1, Human2, Time])] ->
       ta(Time, not(large(Human1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8524
axiom(not(large(Human1)),
   
    [ happens(mount(Human1, Human2), Time),
      allDifferent([Human1, Human2, Time])
    ]).

 /*  not(happens(mount(Human1, Human2), Time)) :-
       large(Human1),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [large(Human1), allDifferent([Human1, Human2, Time])] ->
       ta(Time, not(happens(mount(Human1, Human2), Time))).
 */
axiom(not(happens(mount(Human1, Human2), Time)),
    [large(Human1), allDifferent([Human1, Human2, Time])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8526
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).

 /*  allDifferent([Human1, Human2, Time]) ->
       ( holds_at(mounted(Human1, Human2), Time)->not(large(Human1))
       ).
 */

 /*  not(large(Human1)) :-
       holds_at(mounted(Human1, Human2), Time),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [holds_at(mounted(Human1, Human2), Time), allDifferent([Human1, Human2, Time])] ->
       ta(Time, not(large(Human1))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8528
axiom(not(large(Human1)),
   
    [ holds_at(mounted(Human1, Human2), Time),
      allDifferent([Human1, Human2, Time])
    ]).

 /*  not(holds_at(mounted(Human1, Human2), Time)) :-
       large(Human1),
       allDifferent([Human1, Human2, Time]).
 */

 /*  [large(Human1), allDifferent([Human1, Human2, Time])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Human2)), Time)).
 */
axiom(holds_at(neg(mounted(Human1, Human2)), Time),
    [large(Human1), allDifferent([Human1, Human2, Time])]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8530
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).

 /*  allDifferent([Human, Animal, Time, Human1]) ->
       ( happens(mount(Human, Animal), Time)->not(exists([Human1],  (diff(Human1, Human), holds_at(mounted(Human1, Animal), Time))))
       ).
 */

 /*  not(holds_at(mounted(Human1, Animal), Time)) :-
       diff(Human1, Human),
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8532
axiom(holds_at(neg(mounted(Human1, Animal)), Time),
   
    [ diff(Human1, Human),
      happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       ( diff(Human1, Human),
         holds_at(mounted(Human1, Animal), Time)
       ),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), holds_at(mounted(Human1, Animal), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ diff(Human1, Human),
      holds_at(mounted(Human1, Animal), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8534
% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.

 /*  allDifferent([Human1, Animal, Time, Human2]) ->
       ( holds_at(mounted(Human1, Animal), Time), holds_at(mounted(Human2, Animal), Time)->Human1=Human2
       ).
 */

 /*  not(holds_at(mounted(Human1, Animal), Time)) :-
       holds_at(mounted(Human2, Animal), Time),
       not(equals(Human1, Human2)),
       allDifferent([Human1, Animal, Time, Human2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Human1, Human2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Human1=Human2)).
 */

 /*  [holds_at(mounted(Human2, Animal), Time), not(call(Human1=Human2)), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */

 /*  [holds_at(mounted(Human2, Animal), Time), holds_at(neg(call(Human1=Human2)), Time), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8537
axiom(holds_at(neg(mounted(Human1, Animal)), Time),
   
    [ holds_at(mounted(Human2, Animal), Time),
      holds_at(neg(call(Human1=Human2)), Time),
      allDifferent([Human1, Animal, Time, Human2])
    ]).

 /*  not(holds_at(mounted(Human2, Animal), Time)) :-
       holds_at(mounted(Human1, Animal), Time),
       not(equals(Human1, Human2)),
       allDifferent([Human1, Animal, Time, Human2]).
 */

 /*  axiom_head(Time) ->
       not(equals(Human1, Human2)).
 */

 /*  fix_axiom_head(Time) ->
       not(call(Human1=Human2)).
 */

 /*  [holds_at(mounted(Human1, Animal), Time), not(call(Human1=Human2)), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */

 /*  [holds_at(mounted(Human1, Animal), Time), holds_at(neg(call(Human1=Human2)), Time), allDifferent([Human1, Animal, Time, Human2])] ->
       ta(Time,
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */
axiom(holds_at(neg(mounted(Human2, Animal)), Time),
   
    [ holds_at(mounted(Human1, Animal), Time),
      holds_at(neg(call(Human1=Human2)), Time),
      allDifferent([Human1, Animal, Time, Human2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8539
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).

 /*  allDifferent([Human, Animal, Time, Human1]) ->
       ( happens(mount(Human, Animal), Time)->not(exists([Human1],  (diff(Human1, Human), holds_at(mounted(Human1, Human), Time))))
       ).
 */

 /*  not(holds_at(mounted(Human1, Human), Time)) :-
       diff(Human1, Human),
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time, holds_at(neg(mounted(Human1, Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8541
axiom(holds_at(neg(mounted(Human1, Human)), Time),
   
    [ diff(Human1, Human),
      happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       ( diff(Human1, Human),
         holds_at(mounted(Human1, Human), Time)
       ),
       allDifferent([Human, Animal, Time, Human1]).
 */

 /*  [diff(Human1, Human), holds_at(mounted(Human1, Human), Time), allDifferent([Human, Animal, Time, Human1])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ diff(Human1, Human),
      holds_at(mounted(Human1, Human), Time),
      allDifferent([Human, Animal, Time, Human1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8543
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8545
% {animal}%  HoldsAt(Mounted(human2,animal),time).

 /*  exists([Animal],
    happens(mount(Human1, Human2), Time) ->
       holds_at(mounted(Human2, Animal), Time)).
 */

 /*  holds_at(mounted(Human2, Animal), Time) :-
       happens(mount(Human1, Human2), Time),
       some(Animal, '$kolem_Fn_443'(Human1, Human2, Time)).
 */

 /*  [happens(mount(Human1, Human2), Time), some(Animal, '$kolem_Fn_443'(Human1, Human2, Time))] ->
       ta(Time, holds_at(mounted(Human2, Animal), Time)).
 */
axiom(holds_at(mounted(Human2, Animal), Time),
   
    [ happens(mount(Human1, Human2), Time),
      some(Animal, '$kolem_Fn_443'(Human1, Human2, Time))
    ]).

 /*  not(happens(mount(Human1, Human2), Time)) :-
       not(holds_at(mounted(Human2, Animal), Time)),
       some(Animal, '$kolem_Fn_443'(Human1, Human2, Time)).
 */

 /*  [holds_at(neg(mounted(Human2, Animal)), Time), some(Animal, '$kolem_Fn_443'(Human1, Human2, Time))] ->
       ta(Time, not(happens(mount(Human1, Human2), Time))).
 */
axiom(not(happens(mount(Human1, Human2), Time)),
   
    [ holds_at(neg(mounted(Human2, Animal)), Time),
      some(Animal, '$kolem_Fn_443'(Human1, Human2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8547
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).

 /*  allDifferent([Human1, Human2, Time, Animal]) ->
       ( holds_at(mounted(Human1, Human2), Time)->not(exists([Animal], holds_at(mounted(Human2, Animal), Time)))
       ).
 */

 /*  not(holds_at(mounted(Human2, Animal), Time)) :-
       holds_at(mounted(Human1, Human2), Time),
       allDifferent([Human1, Human2, Time, Animal]).
 */

 /*  [holds_at(mounted(Human1, Human2), Time), allDifferent([Human1, Human2, Time, Animal])] ->
       ta(Time,
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8549
axiom(holds_at(neg(mounted(Human2, Animal)), Time),
   
    [ holds_at(mounted(Human1, Human2), Time),
      allDifferent([Human1, Human2, Time, Animal])
    ]).

 /*  not(holds_at(mounted(Human1, Human2), Time)) :-
       holds_at(mounted(Human2, Animal), Time),
       allDifferent([Human1, Human2, Time, Animal]).
 */

 /*  [holds_at(mounted(Human2, Animal), Time), allDifferent([Human1, Human2, Time, Animal])] ->
       ta(Time,
          holds_at(neg(mounted(Human1, Human2)), Time)).
 */
axiom(holds_at(neg(mounted(Human1, Human2)), Time),
   
    [ holds_at(mounted(Human2, Animal), Time),
      allDifferent([Human1, Human2, Time, Animal])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8551
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).

 /*  allDifferent([Human, Animal, Time, Animal1]) ->
       ( happens(mount(Human, Animal), Time)->not(exists([Animal1], holds_at(mounted(Human, Animal1), Time)))
       ).
 */

 /*  not(holds_at(mounted(Human, Animal1), Time)) :-
       happens(mount(Human, Animal), Time),
       allDifferent([Human, Animal, Time, Animal1]).
 */

 /*  [happens(mount(Human, Animal), Time), allDifferent([Human, Animal, Time, Animal1])] ->
       ta(Time,
          holds_at(neg(mounted(Human, Animal1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8553
axiom(holds_at(neg(mounted(Human, Animal1)), Time),
   
    [ happens(mount(Human, Animal), Time),
      allDifferent([Human, Animal, Time, Animal1])
    ]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       holds_at(mounted(Human, Animal1), Time),
       allDifferent([Human, Animal, Time, Animal1]).
 */

 /*  [holds_at(mounted(Human, Animal1), Time), allDifferent([Human, Animal, Time, Animal1])] ->
       ta(Time, not(happens(mount(Human, Animal), Time))).
 */
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ holds_at(mounted(Human, Animal1), Time),
      allDifferent([Human, Animal, Time, Animal1])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8555
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          terminates(getOff(Human, Animal),
                     mounted(Human, Animal),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8557
axiom(terminates(getOff(Human, Animal), mounted(Human, Animal), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8559
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(posDeterminingFluent(Human, Position), Time)] ->
       ta(Time,
          initiates(getOff(Human, Animal),
                    pos(Human, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8562
axiom(initiates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8564
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(pos(Human, Position), Time)] ->
       ta(Time,
          terminates(getOff(Human, Animal),
                     pos(Human, Position),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8567
axiom(terminates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(pos(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8569
% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(pos(Human, Position1), Time), diff(Position1, Position2)] ->
       ta(Time,
          terminates(getOff(Human, Animal),
                     pos(Human, Position2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8573
axiom(terminates(getOff(Human, Animal), pos(Human, Position2), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(pos(Human, Position1), Time),
      diff(Position1, Position2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8575
% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).

 /*  allDifferent([Human, Animal, Time]) ->
       ( happens(getOff(Human, Animal), Time)->holds_at(mounted(Human, Animal), Time)
       ).
 */

 /*  holds_at(mounted(Human, Animal), Time) :-
       happens(getOff(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(getOff(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, holds_at(mounted(Human, Animal), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8577
axiom(holds_at(mounted(Human, Animal), Time),
   
    [ happens(getOff(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       not(holds_at(mounted(Human, Animal), Time)),
       allDifferent([Human, Animal, Time]).
 */

 /*  [holds_at(neg(mounted(Human, Animal)), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(getOff(Human, Animal), Time))).
 */
axiom(not(happens(getOff(Human, Animal), Time)),
   
    [ holds_at(neg(mounted(Human, Animal)), Time),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8579
% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).

 /*  holds_at(throwOffFails(Animal1, Human), Time) <->
       exists([Position, Animal2],
               (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).
 */

 /*  [holds_at, throwOffFails] <->
       [exists, diff, holds_at, posDeterminingFluent, large, holds_at, pos, +].
 */

 /*  allDifferent([Animal1, Human, Time, Position, Animal2]) ->
       ( holds_at(throwOffFails(Animal1, Human), Time)->exists([Position, Animal2],  (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1)))
       ).
 */

 /*  not(holds_at(throwOffFails(Animal1, Human), Time)) :-
       (   not(diff(Animal2, Human))
       ;   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(large(Animal2))
       ;   not(holds_at(pos(Animal2, Position), Time+1))
       ),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(diff(Animal2, Human))
       ;   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(large(Animal2))
       ;   not(holds_at(pos(Animal2, Position), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(diff(Animal2, Human))
       ;   holds_at(neg(posDeterminingFluent(Human, Position)),
                    Time)
       ;   not(large(Animal2))
       ;   holds_at(neg(pos(Animal2, Position)), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time5), b(Time, Time5),  (not(diff(Animal2, Human));holds_at(neg(posDeterminingFluent(Human, Position)), Time);not(large(Animal2));holds_at(neg(pos(Animal2, Position)), Time5)), allDifferent([Animal1, Human, Time, Position, Animal2])] ->
       ta(Time,
          holds_at(neg(throwOffFails(Animal1, Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8585
axiom(holds_at(neg(throwOffFails(Animal1, Human)), Time),
   
    [ b(Time, Time5),
       (not(diff(Animal2, Human));holds_at(neg(posDeterminingFluent(Human, Position)), Time);not(large(Animal2));holds_at(neg(pos(Animal2, Position)), Time5)),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ])
    ]).

 /*  holds_at(posDeterminingFluent(Human, Position), Time) :-
       holds_at(throwOffFails(Animal1, Human), Time),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), allDifferent([Animal1, Human, Time, Position, Animal2])] ->
       ta(Time,
          holds_at(posDeterminingFluent(Human, Position), Time)).
 */
axiom(holds_at(posDeterminingFluent(Human, Position), Time),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ])
    ]).

 /*  large(Animal2) :-
       holds_at(throwOffFails(Animal1, Human), Time),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), allDifferent([Animal1, Human, Time, Position, Animal2])] ->
       ta(Time, large(Animal2)).
 */
axiom(large(Animal2),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ])
    ]).

 /*  holds_at(pos(Animal2, Position), Time+1) :-
       holds_at(throwOffFails(Animal1, Human), Time),
       allDifferent(
                    [ Animal1,
                      Human,
                      Time,
                      Position,
                      Animal2
                    ]).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), allDifferent([Animal1, Human, Time, Position, Animal2]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, holds_at(pos(Animal2, Position), Time6)).
 */
axiom(holds_at(pos(Animal2, Position), Time6),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      allDifferent(
                   [ Animal1,
                     Human,
                     Time,
                     Position,
                     Animal2
                   ]),
      b(Time, Time6)
    ]).

 /*  allDifferent([Position, Animal2, Human, Time, Animal1]) ->
       ( exists([Position, Animal2],  (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1)))->holds_at(throwOffFails(Animal1, Human), Time)
       ).
 */

 /*  holds_at(throwOffFails(Animal1, Human), Time) :-
       ( diff(Animal2, Human),
         holds_at(posDeterminingFluent(Human, Position), Time),
         large(Animal2),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time7), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(throwOffFails(Animal1, Human), Time)).
 */
axiom(holds_at(throwOffFails(Animal1, Human), Time),
   
    [ diff(Animal2, Human),
      holds_at(posDeterminingFluent(Human, Position), Time),
      large(Animal2),
      holds_at(pos(Animal2, Position), Time7),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time7)
    ]).

 /*  not(holds_at(posDeterminingFluent(Human, Position), Time)) :-
       ( large(Animal2),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [large(Animal2), holds_at(pos(Animal2, Position), Time8), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position)),
                   Time)).
 */
axiom(holds_at(neg(posDeterminingFluent(Human, Position)), Time),
   
    [ large(Animal2),
      holds_at(pos(Animal2, Position), Time8),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time8)
    ]).

 /*  not(large(Animal2)) :-
       holds_at(pos(Animal2, Position), Time+1),
       holds_at(posDeterminingFluent(Human, Position), Time),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position), Time9), holds_at(posDeterminingFluent(Human, Position), Time), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal2, Position), Time9),
      holds_at(posDeterminingFluent(Human, Position), Time),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(pos(Animal2, Position), Time+1)) :-
       large(Animal2),
       holds_at(posDeterminingFluent(Human, Position), Time),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)),
       allDifferent(
                    [ Position,
                      Animal2,
                      Human,
                      Time,
                      Animal1
                    ]).
 */

 /*  [large(Animal2), holds_at(posDeterminingFluent(Human, Position), Time), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), allDifferent([Position, Animal2, Human, Time, Animal1]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position)), Time10)).
 */
axiom(holds_at(neg(pos(Animal2, Position)), Time10),
   
    [ large(Animal2),
      holds_at(posDeterminingFluent(Human, Position), Time),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      allDifferent(
                   [ Position,
                     Animal2,
                     Human,
                     Time,
                     Animal1
                   ]),
      b(Time, Time10)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8587
% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).

 /*  [holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          initiates(throwOff(Animal, Human),
                    pos(Human, Position),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8590
axiom(initiates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(throwOffFails(Animal, Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8592
% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).

 /*  [holds_at(pos(Human, Position), Time), holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          terminates(throwOff(Animal, Human),
                     pos(Human, Position),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8595
axiom(terminates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(neg(throwOffFails(Animal, Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8597
% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).

 /*  [holds_at(neg(throwOffFails(Animal, Human)), Time), holds_at(pos(Human, Position1), Time), holds_at(neg(posDeterminingFluent(Human, Position2)), Time), diff(Position1, Position2)] ->
       ta(Time,
          terminates(throwOff(Animal, Human),
                     pos(Human, Position2),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8602
axiom(terminates(throwOff(Animal, Human), pos(Human, Position2), Time),
   
    [ holds_at(neg(throwOffFails(Animal, Human)), Time),
      holds_at(pos(Human, Position1), Time),
      holds_at(neg(posDeterminingFluent(Human, Position2)),
               Time),
      diff(Position1, Position2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8604
% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).

 /*  allDifferent([Animal, Human, Time]) ->
       ( not(exists([Animal],  (happens(throwOff(Animal, Human), Time);happens(getOff(Human, Animal), Time))))->holds_at(posDeterminingFluent(Human, 1), Time)
       ).
 */

 /*  holds_at(posDeterminingFluent(Human, 1), Time) :-
       ( not(happens(throwOff(Animal, Human), Time)),
         not(happens(getOff(Human, Animal), Time))
       ),
       allDifferent([Animal, Human, Time]).
 */

 /*  [not(happens(throwOff(Animal, Human), Time)), not(happens(getOff(Human, Animal), Time)), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(posDeterminingFluent(Human, 1), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8607
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      not(happens(getOff(Human, Animal), Time)),
      allDifferent([Animal, Human, Time])
    ]).

 /*  happens(throwOff(Animal, Human), Time) :-
       not(happens(getOff(Human, Animal), Time)),
       not(holds_at(posDeterminingFluent(Human, 1), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [not(happens(getOff(Human, Animal), Time)), holds_at(neg(posDeterminingFluent(Human, 1)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, happens(throwOff(Animal, Human), Time)).
 */
axiom(happens(throwOff(Animal, Human), Time),
   
    [ not(happens(getOff(Human, Animal), Time)),
      holds_at(neg(posDeterminingFluent(Human, 1)), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  happens(getOff(Human, Animal), Time) :-
       not(happens(throwOff(Animal, Human), Time)),
       not(holds_at(posDeterminingFluent(Human, 1), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [not(happens(throwOff(Animal, Human), Time)), holds_at(neg(posDeterminingFluent(Human, 1)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, happens(getOff(Human, Animal), Time)).
 */
axiom(happens(getOff(Human, Animal), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      holds_at(neg(posDeterminingFluent(Human, 1)), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8609
% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).

 /*  [holds_at(posDeterminingFluent(Human, Position), Time), holds_at(throwOffFails(Animal1, Human), Time), holds_at(pos(Animal2, Position), Time)] ->
       ta(Time,
          initiates(throwOff(Animal1, Human),
                    mounted(Human, Animal2),
                    Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8613
axiom(initiates(throwOff(Animal1, Human), mounted(Human, Animal2), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(throwOffFails(Animal1, Human), Time),
      holds_at(pos(Animal2, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8615
% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).

 /*  [holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          terminates(throwOff(Animal, Human),
                     mounted(Human, Animal),
                     Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8617
axiom(terminates(throwOff(Animal, Human), mounted(Human, Animal), Time),
    [holds_at(neg(throwOffFails(Animal, Human)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8619
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).

 /*  allDifferent([Animal, Human, Time]) ->
       ( happens(throwOff(Animal, Human), Time)->holds_at(mounted(Human, Animal), Time)
       ).
 */

 /*  holds_at(mounted(Human, Animal), Time) :-
       happens(throwOff(Animal, Human), Time),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(throwOff(Animal, Human), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, holds_at(mounted(Human, Animal), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8621
axiom(holds_at(mounted(Human, Animal), Time),
   
    [ happens(throwOff(Animal, Human), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       not(holds_at(mounted(Human, Animal), Time)),
       allDifferent([Animal, Human, Time]).
 */

 /*  [holds_at(neg(mounted(Human, Animal)), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(throwOff(Animal, Human), Time))).
 */
axiom(not(happens(throwOff(Animal, Human), Time)),
   
    [ holds_at(neg(mounted(Human, Animal)), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8623
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).

 /*  allDifferent([Animal, Human, Time]) ->
       ( happens(throwOff(Animal, Human), Time)->not(happens(getOff(Human, Animal), Time))
       ).
 */

 /*  not(happens(getOff(Human, Animal), Time)) :-
       happens(throwOff(Animal, Human), Time),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(throwOff(Animal, Human), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(getOff(Human, Animal), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8625
axiom(not(happens(getOff(Human, Animal), Time)),
   
    [ happens(throwOff(Animal, Human), Time),
      allDifferent([Animal, Human, Time])
    ]).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       happens(getOff(Human, Animal), Time),
       allDifferent([Animal, Human, Time]).
 */

 /*  [happens(getOff(Human, Animal), Time), allDifferent([Animal, Human, Time])] ->
       ta(Time, not(happens(throwOff(Animal, Human), Time))).
 */
axiom(not(happens(throwOff(Animal, Human), Time)),
   
    [ happens(getOff(Human, Animal), Time),
      allDifferent([Animal, Human, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8627
% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).

 /*  allDifferent([Human, Animal, Time]) ->
       ( happens(getOff(Human, Animal), Time)->not(happens(throwOff(Animal, Human), Time))
       ).
 */

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       happens(getOff(Human, Animal), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(getOff(Human, Animal), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(throwOff(Animal, Human), Time))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8629
axiom(not(happens(throwOff(Animal, Human), Time)),
   
    [ happens(getOff(Human, Animal), Time),
      allDifferent([Human, Animal, Time])
    ]).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       happens(throwOff(Animal, Human), Time),
       allDifferent([Human, Animal, Time]).
 */

 /*  [happens(throwOff(Animal, Human), Time), allDifferent([Human, Animal, Time])] ->
       ta(Time, not(happens(getOff(Human, Animal), Time))).
 */
axiom(not(happens(getOff(Human, Animal), Time)),
   
    [ happens(throwOff(Animal, Human), Time),
      allDifferent([Human, Animal, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8631
% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).

 /*  accessible(Position1, Position2, Time) <->
       not(exists([Gate],
                   (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time)))).
 */

 /*  [accessible] <->
       [not, exists, neighbor, sides, holds_at, neg, opened].
 */

 /*  allDifferent([Position1, Position2, Time, Gate]) ->
       ( accessible(Position1, Position2, Time)->not(exists([Gate],  (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time))))
       ).
 */

 /*  not(neighbor(Position1, Position2)) :-
       ( sides(Position1, Position2, Gate),
         holds_at(neg(opened(Gate)), Time)
       ),
       accessible(Position1, Position2, Time),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time), accessible(Position1, Position2, Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, not(neighbor(Position1, Position2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8635
axiom(not(neighbor(Position1, Position2)),
   
    [ sides(Position1, Position2, Gate),
      holds_at(neg(opened(Gate)), Time),
      accessible(Position1, Position2, Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  not(sides(Position1, Position2, Gate)) :-
       holds_at(neg(opened(Gate)), Time),
       neighbor(Position1, Position2),
       accessible(Position1, Position2, Time),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [holds_at(neg(opened(Gate)), Time), neighbor(Position1, Position2), accessible(Position1, Position2, Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
axiom(not(sides(Position1, Position2, Gate)),
   
    [ holds_at(neg(opened(Gate)), Time),
      neighbor(Position1, Position2),
      accessible(Position1, Position2, Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  not(holds_at(neg(opened(Gate)), Time)) :-
       sides(Position1, Position2, Gate),
       neighbor(Position1, Position2),
       accessible(Position1, Position2, Time),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [sides(Position1, Position2, Gate), neighbor(Position1, Position2), accessible(Position1, Position2, Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, holds_at(neg(neg(opened(Gate))), Time)).
 */
axiom(holds_at(neg(neg(opened(Gate))), Time),
   
    [ sides(Position1, Position2, Gate),
      neighbor(Position1, Position2),
      accessible(Position1, Position2, Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  not(accessible(Position1, Position2, Time)) :-
       ( neighbor(Position1, Position2),
         sides(Position1, Position2, Gate),
         holds_at(neg(opened(Gate)), Time)
       ),
       allDifferent([Position1, Position2, Time, Gate]).
 */

 /*  [neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time), allDifferent([Position1, Position2, Time, Gate])] ->
       ta(Time, not(accessible(Position1, Position2, Time))).
 */
axiom(not(accessible(Position1, Position2, Time)),
   
    [ neighbor(Position1, Position2),
      sides(Position1, Position2, Gate),
      holds_at(neg(opened(Gate)), Time),
      allDifferent([Position1, Position2, Time, Gate])
    ]).

 /*  allDifferent([Gate, Position1, Position2, Time]) ->
       ( not(exists([Gate],  (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time))))->accessible(Position1, Position2, Time)
       ).
 */

 /*  accessible(Position1, Position2, Time) :-
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   not(holds_at(neg(opened(Gate)), Time))
       ),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  axiom_head(Time) ->
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   not(holds_at(neg(opened(Gate)), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   holds_at(neg(neg(opened(Gate))), Time)
       ).
 */

 /*  [(not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(neg(neg(opened(Gate))), Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Time, accessible(Position1, Position2, Time)).
 */
axiom(accessible(Position1, Position2, Time),
   
    [  (not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(neg(neg(opened(Gate))), Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).

 /*  neighbor(Position1, Position2) :-
       not(accessible(Position1, Position2, Time)),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  [not(accessible(Position1, Position2, Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Ta_Param, neighbor(Position1, Position2)).
 */
axiom(neighbor(Position1, Position2),
   
    [ not(accessible(Position1, Position2, Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).

 /*  sides(Position1, Position2, Gate) :-
       not(accessible(Position1, Position2, Time)),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  [not(accessible(Position1, Position2, Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Ta_Param5, sides(Position1, Position2, Gate)).
 */
axiom(sides(Position1, Position2, Gate),
   
    [ not(accessible(Position1, Position2, Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).

 /*  holds_at(neg(opened(Gate)), Time) :-
       not(accessible(Position1, Position2, Time)),
       allDifferent([Gate, Position1, Position2, Time]).
 */

 /*  [not(accessible(Position1, Position2, Time)), allDifferent([Gate, Position1, Position2, Time])] ->
       ta(Time, holds_at(neg(opened(Gate)), Time)).
 */
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ not(accessible(Position1, Position2, Time)),
      allDifferent([Gate, Position1, Position2, Time])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8637
% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).

 /*  allDifferent([Position1, Position2, Animal, Time]) ->
       ( diff(Position1, Position2), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1)->accessible(Position1, Position2, Time)
       ).
 */

 /*  accessible(Position1, Position2, Time) :-
       ( diff(Position1, Position2),
         holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent([Position1, Position2, Animal, Time]).
 */

 /*  [diff(Position1, Position2), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time4), allDifferent([Position1, Position2, Animal, Time]), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time, accessible(Position1, Position2, Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8641
axiom(accessible(Position1, Position2, Time),
   
    [ diff(Position1, Position2),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time4),
      allDifferent([Position1, Position2, Animal, Time]),
      b(Time, Time4)
    ]).

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time+1),
       diff(Position1, Position2),
       not(accessible(Position1, Position2, Time)),
       allDifferent([Position1, Position2, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position2), Time5), diff(Position1, Position2), not(accessible(Position1, Position2, Time)), allDifferent([Position1, Position2, Animal, Time]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time5),
      diff(Position1, Position2),
      not(accessible(Position1, Position2, Time)),
      allDifferent([Position1, Position2, Animal, Time]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(pos(Animal, Position2), Time+1)) :-
       holds_at(pos(Animal, Position1), Time),
       diff(Position1, Position2),
       not(accessible(Position1, Position2, Time)),
       allDifferent([Position1, Position2, Animal, Time]).
 */

 /*  [holds_at(pos(Animal, Position1), Time), diff(Position1, Position2), not(accessible(Position1, Position2, Time)), allDifferent([Position1, Position2, Animal, Time]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          holds_at(neg(pos(Animal, Position2)), Time6)).
 */
axiom(holds_at(neg(pos(Animal, Position2)), Time6),
   
    [ holds_at(pos(Animal, Position1), Time),
      diff(Position1, Position2),
      not(accessible(Position1, Position2, Time)),
      allDifferent([Position1, Position2, Animal, Time]),
      b(Time, Time6)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8643
% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).

 /*  holds_at(abnormalEncroachment(Human), Time) <->
       (   holds_at(mountFails(Human), Time)
       ;   exists([Position, Animal1, Animal2],
                   (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))
       ).
 */

 /*  [holds_at, abnormalEncroachment] <->
       
       [  (;),
         holds_at,
         mountFails,
         exists,
         holds_at,
         posDeterminingFluent,
         holds_at,
         neg,
         throwOffFails,
         happens,
         throwOff,
         diff,
         large,
         holds_at,
         pos,
         holds_at,
         neg,
         pos,
          (+)
       ].
 */

 /*  allDifferent([Human, Time, Position, Animal1, Animal2]) ->
       ( holds_at(abnormalEncroachment(Human), Time)->holds_at(mountFails(Human), Time);exists([Position, Animal1, Animal2],  (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))
       ).
 */

 /*  not(holds_at(abnormalEncroachment(Human), Time)) :-
       ( not(holds_at(mountFails(Human), Time)),
         (   not(holds_at(posDeterminingFluent(Human, Position),
                          Time))
         ;   not(holds_at(neg(throwOffFails(Animal2, Human)),
                          Time))
         ;   not(happens(throwOff(Animal2, Human), Time))
         ;   not(diff(Animal1, Human))
         ;   not(large(Animal1))
         ;   not(holds_at(pos(Animal1, Position), Time))
         ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
         )
       ),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(posDeterminingFluent(Human, Position)),
                    Time)
       ;   holds_at(neg(neg(throwOffFails(Animal2, Human))),
                    Time)
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   holds_at(neg(pos(Animal1, Position)), Time)
       ;   holds_at(neg(neg(pos(Animal1, Position))), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time5), b(Time, Time5), holds_at(neg(mountFails(Human)), Time),  (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time5)), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(neg(abnormalEncroachment(Human)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8653
axiom(holds_at(neg(abnormalEncroachment(Human)), Time),
   
    [ b(Time, Time5),
      holds_at(neg(mountFails(Human)), Time),
       (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time5)),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(mountFails(Human), Time) :-
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   holds_at(neg(posDeterminingFluent(Human, Position)),
                    Time)
       ;   holds_at(neg(neg(throwOffFails(Animal2, Human))),
                    Time)
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   holds_at(neg(pos(Animal1, Position)), Time)
       ;   holds_at(neg(neg(pos(Animal1, Position))), Time+1)
       ).
 */

 /*  [ignore(Time+1==Time6), b(Time, Time6),  (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time6)), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(mountFails(Human), Time)).
 */
axiom(holds_at(mountFails(Human), Time),
   
    [ b(Time, Time6),
       (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(neg(neg(throwOffFails(Animal2, Human))), Time);not(happens(throwOff(Animal2, Human), Time));not(diff(Animal1, Human));not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(neg(neg(pos(Animal1, Position))), Time6)),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(posDeterminingFluent(Human, Position), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time,
          holds_at(posDeterminingFluent(Human, Position), Time)).
 */
axiom(holds_at(posDeterminingFluent(Human, Position), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(neg(throwOffFails(Animal2, Human)), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time,
          holds_at(neg(throwOffFails(Animal2, Human)), Time)).
 */
axiom(holds_at(neg(throwOffFails(Animal2, Human)), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  happens(throwOff(Animal2, Human), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, happens(throwOff(Animal2, Human), Time)).
 */
axiom(happens(throwOff(Animal2, Human), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  large(Animal1) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, large(Animal1)).
 */
axiom(large(Animal1),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(pos(Animal1, Position), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(pos(Animal1, Position), Time)).
 */
axiom(holds_at(pos(Animal1, Position), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  holds_at(neg(pos(Animal1, Position)), Time+1) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position)), Time7)).
 */
axiom(holds_at(neg(pos(Animal1, Position)), Time7),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time7)
    ]).

 /*  allDifferent([Human, Time, Position, Animal1, Animal2]) ->
       ( holds_at(mountFails(Human), Time);exists([Position, Animal1, Animal2],  (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))->holds_at(abnormalEncroachment(Human), Time)
       ).
 */

 /*  holds_at(abnormalEncroachment(Human), Time) :-
       (   holds_at(mountFails(Human), Time)
       ;   holds_at(posDeterminingFluent(Human, Position), Time),
           holds_at(neg(throwOffFails(Animal2, Human)), Time),
           happens(throwOff(Animal2, Human), Time),
           diff(Animal1, Human),
           large(Animal1),
           holds_at(pos(Animal1, Position), Time),
           holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [ignore(Time+1==Time8), b(Time, Time8),  (holds_at(mountFails(Human), Time);holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time8)), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(abnormalEncroachment(Human), Time)).
 */
axiom(holds_at(abnormalEncroachment(Human), Time),
   
    [ b(Time, Time8),
       (holds_at(mountFails(Human), Time);holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time8)),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  not(holds_at(mountFails(Human), Time)) :-
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2])] ->
       ta(Time, holds_at(neg(mountFails(Human)), Time)).
 */
axiom(holds_at(neg(mountFails(Human)), Time),
   
    [ holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ])
    ]).

 /*  not(holds_at(posDeterminingFluent(Human, Position), Time)) :-
       ( holds_at(neg(throwOffFails(Animal2, Human)), Time),
         happens(throwOff(Animal2, Human), Time),
         diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time9), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          holds_at(neg(posDeterminingFluent(Human, Position)),
                   Time)).
 */
axiom(holds_at(neg(posDeterminingFluent(Human, Position)), Time),
   
    [ holds_at(neg(throwOffFails(Animal2, Human)), Time),
      happens(throwOff(Animal2, Human), Time),
      diff(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time9),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(neg(throwOffFails(Animal2, Human)), Time)) :-
       ( happens(throwOff(Animal2, Human), Time),
         diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time10), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(neg(throwOffFails(Animal2, Human))), Time)).
 */
axiom(holds_at(neg(neg(throwOffFails(Animal2, Human))), Time),
   
    [ happens(throwOff(Animal2, Human), Time),
      diff(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time10),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time10)
    ]).

 /*  not(happens(throwOff(Animal2, Human), Time)) :-
       ( diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time11), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          not(happens(throwOff(Animal2, Human), Time))).
 */
axiom(not(happens(throwOff(Animal2, Human), Time)),
   
    [ diff(Animal1, Human),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time11),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time11)
    ]).

 /*  not(large(Animal1)) :-
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time12), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time12),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time12)
    ]).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       holds_at(neg(pos(Animal1, Position)), Time+1),
       large(Animal1),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(neg(pos(Animal1, Position)), Time13), large(Animal1), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time13), ignore(Time+1==Time13)] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(neg(pos(Animal1, Position)), Time13),
      large(Animal1),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time13)
    ]).

 /*  not(holds_at(neg(pos(Animal1, Position)), Time+1)) :-
       holds_at(pos(Animal1, Position), Time),
       large(Animal1),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)),
       allDifferent(
                    [ Human,
                      Time,
                      Position,
                      Animal1,
                      Animal2
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal1), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), allDifferent([Human, Time, Position, Animal1, Animal2]), b(Time, Time14), ignore(Time+1==Time14)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal1, Position))), Time14)).
 */
axiom(holds_at(neg(neg(pos(Animal1, Position))), Time14),
   
    [ holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      allDifferent(
                   [ Human,
                     Time,
                     Position,
                     Animal1,
                     Animal2
                   ]),
      b(Time, Time14)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8655
% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).

 /*  allDifferent([Animal1, Position, Time, Animal2, Human]) ->
       ( holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time+1)->not(large(Animal1));not(large(Animal2));exists([Human],  (Human=Animal2, holds_at(abnormalEncroachment(Human), Time)))
       ).
 */

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       ( holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(neg(pos(Animal1, Position)), Time5), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time5), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */

 /*  [holds_at(neg(pos(Animal1, Position)), Time5), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time5), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal1, Position)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8662
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(neg(pos(Animal1, Position)), Time5),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time5),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(neg(pos(Animal1, Position)), Time+1)) :-
       ( holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       holds_at(pos(Animal1, Position), Time),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time6), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal1, Position))), Time6)).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time6), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time6);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time6,
          holds_at(neg(neg(pos(Animal1, Position))), Time6)).
 */
axiom(holds_at(neg(neg(pos(Animal1, Position))), Time6),
   
    [ holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time6),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time6);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time6)
    ]).

 /*  not(holds_at(neg(pos(Animal2, Position)), Time)) :-
       holds_at(pos(Animal2, Position), Time+1),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(pos(Animal1, Position), Time),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(pos(Animal2, Position), Time7), holds_at(neg(pos(Animal1, Position)), Time7), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal2, Position))), Time)).
 */

 /*  [holds_at(pos(Animal2, Position), Time7), holds_at(neg(pos(Animal1, Position)), Time7), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          holds_at(neg(neg(pos(Animal2, Position))), Time)).
 */
axiom(holds_at(neg(neg(pos(Animal2, Position))), Time),
   
    [ holds_at(pos(Animal2, Position), Time7),
      holds_at(neg(pos(Animal1, Position)), Time7),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time7)
    ]).

 /*  not(holds_at(pos(Animal2, Position), Time+1)) :-
       holds_at(neg(pos(Animal2, Position)), Time),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(pos(Animal1, Position), Time),
       ( large(Animal1),
         large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(neg(pos(Animal1, Position)), Time8), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position)), Time8)).
 */

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(neg(pos(Animal1, Position)), Time8), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (holds_at(neg(call(Human=Animal2)), Time8);holds_at(neg(abnormalEncroachment(Human)), Time)), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time8,
          holds_at(neg(pos(Animal2, Position)), Time8)).
 */
axiom(holds_at(neg(pos(Animal2, Position)), Time8),
   
    [ holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(neg(pos(Animal1, Position)), Time8),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (holds_at(neg(call(Human=Animal2)), Time8);holds_at(neg(abnormalEncroachment(Human)), Time)),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time8)
    ]).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [large(Animal2),  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time9), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time9), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ large(Animal2),
       (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time9),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time9),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time9)
    ]).

 /*  not(large(Animal2)) :-
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ),
       large(Animal1),
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  axiom_head(Time) ->
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */

 /*  fix_axiom_head(Time) ->
       (   not(call(Human=Animal2))
       ;   holds_at(neg(abnormalEncroachment(Human)), Time)
       ).
 */

 /*  [(not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time10), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time10), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [  (not(call(Human=Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time10),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time10),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time10)
    ]).

 /*  holds_at(abnormalEncroachment(Human), Time) :-
       large(Animal2),
       large(Animal1),
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Position,
                      Time,
                      Animal2,
                      Human
                    ]).
 */

 /*  [large(Animal2), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time11), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time11), allDifferent([Animal1, Position, Time, Animal2, Human]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time, holds_at(abnormalEncroachment(Human), Time)).
 */
axiom(holds_at(abnormalEncroachment(Human), Time),
   
    [ large(Animal2),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time11),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time11),
      allDifferent(
                   [ Animal1,
                     Position,
                     Time,
                     Animal2,
                     Human
                   ]),
      b(Time, Time11)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8664
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).

 /*  allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]) ->
       ( diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time+1)->not(exists([Gate], sides(Position1, Position2, Gate)))
       ).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time6), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time6), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8671
axiom(not(sides(Position1, Position2, Gate)),
   
    [ diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time6),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time6),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time6)
    ]).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time7), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time7), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time7),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time7),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time7)
    ]).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time8), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time8), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time8),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time8),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time8)
    ]).

 /*  not(holds_at(pos(Animal1, Position1), Time)) :-
       ( holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position2), Time9), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time9), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position1)), Time),
   
    [ holds_at(pos(Animal1, Position2), Time9),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time9),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(pos(Animal1, Position2), Time+1)) :-
       ( holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time10), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position2)), Time10)).
 */
axiom(holds_at(neg(pos(Animal1, Position2)), Time10),
   
    [ holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time10),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time10)
    ]).

 /*  not(holds_at(pos(Animal2, Position1), Time)) :-
       holds_at(pos(Animal2, Position2), Time+1),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position2), Time11), holds_at(pos(Animal1, Position2), Time11), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal2, Position1)), Time),
   
    [ holds_at(pos(Animal2, Position2), Time11),
      holds_at(pos(Animal1, Position2), Time11),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time11)
    ]).

 /*  not(holds_at(pos(Animal2, Position2), Time+1)) :-
       holds_at(pos(Animal2, Position1), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal1, Position2), Time12), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position2)), Time12)).
 */
axiom(holds_at(neg(pos(Animal2, Position2)), Time12),
   
    [ holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal1, Position2), Time12),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time12)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8673
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).

 /*  allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]) ->
       ( diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time+1)->not(exists([Gate], sides(Position1, Position2, Gate)))
       ).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       ( diff(Animal1, Animal2),
         large(Animal1),
         large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time6), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time6), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8680
axiom(not(sides(Position1, Position2, Gate)),
   
    [ diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time6),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time6),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time6)
    ]).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time7), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time7), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time, not(large(Animal1))).
 */
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time7),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time7),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time7)
    ]).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time8), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time8), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time, not(large(Animal2))).
 */
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time8),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time8),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time8)
    ]).

 /*  not(holds_at(pos(Animal1, Position1), Time)) :-
       ( holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal1, Position2), Time9), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time9), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position1)), Time)).
 */
axiom(holds_at(neg(pos(Animal1, Position1)), Time),
   
    [ holds_at(pos(Animal1, Position2), Time9),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time9),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time9)
    ]).

 /*  not(holds_at(pos(Animal1, Position2), Time+1)) :-
       ( holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time10), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          holds_at(neg(pos(Animal1, Position2)), Time10)).
 */
axiom(holds_at(neg(pos(Animal1, Position2)), Time10),
   
    [ holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time10),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time10)
    ]).

 /*  not(holds_at(pos(Animal2, Position2), Time)) :-
       holds_at(pos(Animal2, Position1), Time+1),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position1), Time11), holds_at(pos(Animal1, Position2), Time11), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position2)), Time)).
 */
axiom(holds_at(neg(pos(Animal2, Position2)), Time),
   
    [ holds_at(pos(Animal2, Position1), Time11),
      holds_at(pos(Animal1, Position2), Time11),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time11)
    ]).

 /*  not(holds_at(pos(Animal2, Position1), Time+1)) :-
       holds_at(pos(Animal2, Position2), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate),
       allDifferent(
                    [ Animal1,
                      Animal2,
                      Position1,
                      Time,
                      Position2,
                      Gate
                    ]).
 */

 /*  [holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal1, Position2), Time12), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), allDifferent([Animal1, Animal2, Position1, Time, Position2, Gate]), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          holds_at(neg(pos(Animal2, Position1)), Time12)).
 */
axiom(holds_at(neg(pos(Animal2, Position1)), Time12),
   
    [ holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal1, Position2), Time12),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Animal1,
                     Animal2,
                     Position1,
                     Time,
                     Position2,
                     Gate
                   ]),
      b(Time, Time12)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8682
% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).

 /*  allDifferent([Gate, Time, Position1, Position2, Animal]) ->
       ( holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time+1), sides(Position1, Position2, Gate)->not(exists([Animal],  (holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1))))
       ).
 */

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time+1),
       ( holds_at(opened(Gate), Time),
         holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(pos(Animal, Position2), Time5), holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time5), sides(Position1, Position2, Gate), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time, holds_at(neg(pos(Animal, Position1)), Time)).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8688
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time5),
      holds_at(opened(Gate), Time),
      holds_at(neg(opened(Gate)), Time5),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time5)
    ]).

 /*  not(holds_at(pos(Animal, Position2), Time+1)) :-
       holds_at(pos(Animal, Position1), Time),
       ( holds_at(opened(Gate), Time),
         holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(pos(Animal, Position1), Time), holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time6), sides(Position1, Position2, Gate), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          holds_at(neg(pos(Animal, Position2)), Time6)).
 */
axiom(holds_at(neg(pos(Animal, Position2)), Time6),
   
    [ holds_at(pos(Animal, Position1), Time),
      holds_at(opened(Gate), Time),
      holds_at(neg(opened(Gate)), Time6),
      sides(Position1, Position2, Gate),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time6)
    ]).

 /*  not(holds_at(opened(Gate), Time)) :-
       ( holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       ( holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(neg(opened(Gate)), Time7), sides(Position1, Position2, Gate), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time7), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time, holds_at(neg(opened(Gate)), Time)).
 */
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ holds_at(neg(opened(Gate)), Time7),
      sides(Position1, Position2, Gate),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time7),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time7)
    ]).

 /*  not(holds_at(neg(opened(Gate)), Time+1)) :-
       sides(Position1, Position2, Gate),
       holds_at(opened(Gate), Time),
       ( holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [sides(Position1, Position2, Gate), holds_at(opened(Gate), Time), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time8), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time, holds_at(neg(neg(opened(Gate))), Time8)).
 */
axiom(holds_at(neg(neg(opened(Gate))), Time8),
   
    [ sides(Position1, Position2, Gate),
      holds_at(opened(Gate), Time),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time8),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time8)
    ]).

 /*  not(sides(Position1, Position2, Gate)) :-
       holds_at(neg(opened(Gate)), Time+1),
       holds_at(opened(Gate), Time),
       ( holds_at(pos(Animal, Position1), Time),
         holds_at(pos(Animal, Position2), Time+1)
       ),
       allDifferent(
                    [ Gate,
                      Time,
                      Position1,
                      Position2,
                      Animal
                    ]).
 */

 /*  [holds_at(neg(opened(Gate)), Time9), holds_at(opened(Gate), Time), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time9), allDifferent([Gate, Time, Position1, Position2, Animal]), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time, not(sides(Position1, Position2, Gate))).
 */
axiom(not(sides(Position1, Position2, Gate)),
   
    [ holds_at(neg(opened(Gate)), Time9),
      holds_at(opened(Gate), Time),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time9),
      allDifferent(
                   [ Gate,
                     Time,
                     Position1,
                     Position2,
                     Animal
                   ]),
      b(Time, Time9)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8690
% gate GateAO
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8691
==> t(gate,gateAO).

% cage CageA
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8692
==> t(cage,cageA).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8693
% Loc(1)=CageA.
loc(1,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(1, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(1, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8694
% Loc(2)=CageA.
loc(2,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(2, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(2, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8695
% Loc(3)=CageA.
loc(3,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(3, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(3, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8696
% Loc(4)=CageA.
loc(4,cageA).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(4, cageA).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(4, cageA), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8697
% Loc(5)=Outside.
loc(5,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(5, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(5, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8698
% Loc(6)=Outside.
loc(6,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(6, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(6, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8699
% Loc(7)=Outside.
loc(7,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(7, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(7, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8700
% Loc(8)=Outside.
loc(8,outside).

 /*  axiom_head(Axiom_head_Ret) ->
       loc(8, outside).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(loc(8, outside), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8702
% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).

 /*  neighbor(Position1, Position2) <->
       (   Position1=1,
           Position2=2
       ;   Position1=1,
           Position2=3
       ;   Position1=1,
           Position2=4
       ;   Position1=2,
           Position2=3
       ;   Position1=2,
           Position2=4
       ;   Position1=3,
           Position2=4
       ;   Position1=5,
           Position2=6
       ;   Position1=5,
           Position2=7
       ;   Position1=5,
           Position2=8
       ;   Position1=6,
           Position2=7
       ;   Position1=6,
           Position2=8
       ;   Position1=7,
           Position2=8
       ;   Position2=1,
           Position1=2
       ;   Position2=1,
           Position1=3
       ;   Position2=1,
           Position1=4
       ;   Position2=2,
           Position1=3
       ;   Position2=2,
           Position1=4
       ;   Position2=3,
           Position1=4
       ;   Position2=5,
           Position1=6
       ;   Position2=5,
           Position1=7
       ;   Position2=5,
           Position1=8
       ;   Position2=6,
           Position1=7
       ;   Position2=6,
           Position1=8
       ;   Position2=7,
           Position1=8
       ;   Position1=4,
           Position2=7
       ;   Position2=4,
           Position1=7
       ).
 */

 /*  [neighbor] <->
       
       [  (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (;),
          (=),
          (=),
          (=),
          (=)
       ].
 */

 /*  allDifferent([Position1, Position2]) ->
       ( neighbor(Position1, Position2)->Position1=1, Position2=2;Position1=1, Position2=3;Position1=1, Position2=4;Position1=2, Position2=3;Position1=2, Position2=4;Position1=3, Position2=4;Position1=5, Position2=6;Position1=5, Position2=7;Position1=5, Position2=8;Position1=6, Position2=7;Position1=6, Position2=8;Position1=7, Position2=8;Position2=1, Position1=2;Position2=1, Position1=3;Position2=1, Position1=4;Position2=2, Position1=3;Position2=2, Position1=4;Position2=3, Position1=4;Position2=5, Position1=6;Position2=5, Position1=7;Position2=5, Position1=8;Position2=6, Position1=7;Position2=6, Position1=8;Position2=7, Position1=8;Position1=4, Position2=7;Position2=4, Position1=7
       ).
 */

 /*  not(neighbor(Position1, Position2)) :-
       ( (   not(equals(Position1, 1))
         ;   not(equals(Position2, 2))
         ),
         (   not(equals(Position1, 1))
         ;   not(equals(Position2, 3))
         ),
         (   not(equals(Position1, 1))
         ;   not(equals(Position2, 4))
         ),
         (   not(equals(Position1, 2))
         ;   not(equals(Position2, 3))
         ),
         (   not(equals(Position1, 2))
         ;   not(equals(Position2, 4))
         ),
         (   not(equals(Position1, 3))
         ;   not(equals(Position2, 4))
         ),
         (   not(equals(Position1, 5))
         ;   not(equals(Position2, 6))
         ),
         (   not(equals(Position1, 5))
         ;   not(equals(Position2, 7))
         ),
         (   not(equals(Position1, 5))
         ;   not(equals(Position2, 8))
         ),
         (   not(equals(Position1, 6))
         ;   not(equals(Position2, 7))
         ),
         (   not(equals(Position1, 6))
         ;   not(equals(Position2, 8))
         ),
         (   not(equals(Position1, 7))
         ;   not(equals(Position2, 8))
         ),
         (   not(equals(Position2, 1))
         ;   not(equals(Position1, 2))
         ),
         (   not(equals(Position2, 1))
         ;   not(equals(Position1, 3))
         ),
         (   not(equals(Position2, 1))
         ;   not(equals(Position1, 4))
         ),
         (   not(equals(Position2, 2))
         ;   not(equals(Position1, 3))
         ),
         (   not(equals(Position2, 2))
         ;   not(equals(Position1, 4))
         ),
         (   not(equals(Position2, 3))
         ;   not(equals(Position1, 4))
         ),
         (   not(equals(Position2, 5))
         ;   not(equals(Position1, 6))
         ),
         (   not(equals(Position2, 5))
         ;   not(equals(Position1, 7))
         ),
         (   not(equals(Position2, 5))
         ;   not(equals(Position1, 8))
         ),
         (   not(equals(Position2, 6))
         ;   not(equals(Position1, 7))
         ),
         (   not(equals(Position2, 6))
         ;   not(equals(Position1, 8))
         ),
         (   not(equals(Position2, 7))
         ;   not(equals(Position1, 8))
         ),
         (   not(equals(Position1, 4))
         ;   not(equals(Position2, 7))
         ),
         (   not(equals(Position2, 4))
         ;   not(equals(Position1, 7))
         )
       ),
       allDifferent([Position1, Position2]).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=1))
       ;   not(call(Position2=2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=1))
       ;   not(call(Position2=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=1))
       ;   not(call(Position2=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 2))
       ;   not(equals(Position2, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=2))
       ;   not(call(Position2=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 2))
       ;   not(equals(Position2, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=2))
       ;   not(call(Position2=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 3))
       ;   not(equals(Position2, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=3))
       ;   not(call(Position2=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 6))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=5))
       ;   not(call(Position2=6))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=5))
       ;   not(call(Position2=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=5))
       ;   not(call(Position2=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 6))
       ;   not(equals(Position2, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=6))
       ;   not(call(Position2=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 6))
       ;   not(equals(Position2, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=6))
       ;   not(call(Position2=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 7))
       ;   not(equals(Position2, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=7))
       ;   not(call(Position2=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 2))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=1))
       ;   not(call(Position1=2))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=1))
       ;   not(call(Position1=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=1))
       ;   not(call(Position1=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 2))
       ;   not(equals(Position1, 3))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=2))
       ;   not(call(Position1=3))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 2))
       ;   not(equals(Position1, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=2))
       ;   not(call(Position1=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 3))
       ;   not(equals(Position1, 4))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=3))
       ;   not(call(Position1=4))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 6))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=5))
       ;   not(call(Position1=6))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=5))
       ;   not(call(Position1=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=5))
       ;   not(call(Position1=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 6))
       ;   not(equals(Position1, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=6))
       ;   not(call(Position1=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 6))
       ;   not(equals(Position1, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=6))
       ;   not(call(Position1=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 7))
       ;   not(equals(Position1, 8))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=7))
       ;   not(call(Position1=8))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position1, 4))
       ;   not(equals(Position2, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position1=4))
       ;   not(call(Position2=7))
       ).
 */

 /*  axiom_head(Axiom_head_Ret) ->
       (   not(equals(Position2, 4))
       ;   not(equals(Position1, 7))
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       (   not(call(Position2=4))
       ;   not(call(Position1=7))
       ).
 */

 /*  [(not(call(Position1=1));not(call(Position2=2))),  (not(call(Position1=1));not(call(Position2=3))),  (not(call(Position1=1));not(call(Position2=4))),  (not(call(Position1=2));not(call(Position2=3))),  (not(call(Position1=2));not(call(Position2=4))),  (not(call(Position1=3));not(call(Position2=4))),  (not(call(Position1=5));not(call(Position2=6))),  (not(call(Position1=5));not(call(Position2=7))),  (not(call(Position1=5));not(call(Position2=8))),  (not(call(Position1=6));not(call(Position2=7))),  (not(call(Position1=6));not(call(Position2=8))),  (not(call(Position1=7));not(call(Position2=8))),  (not(call(Position2=1));not(call(Position1=2))),  (not(call(Position2=1));not(call(Position1=3))),  (not(call(Position2=1));not(call(Position1=4))),  (not(call(Position2=2));not(call(Position1=3))),  (not(call(Position2=2));not(call(Position1=4))),  (not(call(Position2=3));not(call(Position1=4))),  (not(call(Position2=5));not(call(Position1=6))),  (not(call(Position2=5));not(call(Position1=7))),  (not(call(Position2=5));not(call(Position1=8))),  (not(call(Position2=6));not(call(Position1=7))),  (not(call(Position2=6));not(call(Position1=8))),  (not(call(Position2=7));not(call(Position1=8))),  (not(call(Position1=4));not(call(Position2=7))),  (not(call(Position2=4));not(call(Position1=7))), allDifferent([Position1, Position2])] ->
       ta(Axiom_head_Ret, not(neighbor(Position1, Position2))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8729
axiom(not(neighbor(Position1, Position2)),
   
    [  (not(call(Position1=1));not(call(Position2=2))),
       (not(call(Position1=1));not(call(Position2=3))),
       (not(call(Position1=1));not(call(Position2=4))),
       (not(call(Position1=2));not(call(Position2=3))),
       (not(call(Position1=2));not(call(Position2=4))),
       (not(call(Position1=3));not(call(Position2=4))),
       (not(call(Position1=5));not(call(Position2=6))),
       (not(call(Position1=5));not(call(Position2=7))),
       (not(call(Position1=5));not(call(Position2=8))),
       (not(call(Position1=6));not(call(Position2=7))),
       (not(call(Position1=6));not(call(Position2=8))),
       (not(call(Position1=7));not(call(Position2=8))),
       (not(call(Position2=1));not(call(Position1=2))),
       (not(call(Position2=1));not(call(Position1=3))),
       (not(call(Position2=1));not(call(Position1=4))),
       (not(call(Position2=2));not(call(Position1=3))),
       (not(call(Position2=2));not(call(Position1=4))),
       (not(call(Position2=3));not(call(Position1=4))),
       (not(call(Position2=5));not(call(Position1=6))),
       (not(call(Position2=5));not(call(Position1=7))),
       (not(call(Position2=5));not(call(Position1=8))),
       (not(call(Position2=6));not(call(Position1=7))),
       (not(call(Position2=6));not(call(Position1=8))),
       (not(call(Position2=7));not(call(Position1=8))),
       (not(call(Position1=4));not(call(Position2=7))),
       (not(call(Position2=4));not(call(Position1=7))),
      allDifferent([Position1, Position2])
    ]).

 /*  allDifferent([Position1, Position2]) ->
       ( Position1=1, Position2=2;Position1=1, Position2=3;Position1=1, Position2=4;Position1=2, Position2=3;Position1=2, Position2=4;Position1=3, Position2=4;Position1=5, Position2=6;Position1=5, Position2=7;Position1=5, Position2=8;Position1=6, Position2=7;Position1=6, Position2=8;Position1=7, Position2=8;Position2=1, Position1=2;Position2=1, Position1=3;Position2=1, Position1=4;Position2=2, Position1=3;Position2=2, Position1=4;Position2=3, Position1=4;Position2=5, Position1=6;Position2=5, Position1=7;Position2=5, Position1=8;Position2=6, Position1=7;Position2=6, Position1=8;Position2=7, Position1=8;Position1=4, Position2=7;Position2=4, Position1=7->neighbor(Position1, Position2)
       ).
 */

 /*  neighbor(Position1, Position2) :-
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ),
       allDifferent([Position1, Position2]).
 */

 /*  axiom_head(Axiom_head_Ret3) ->
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ).
 */

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       (   call(Position1=1),
           call(Position2=2)
       ;   call(Position1=1),
           call(Position2=3)
       ;   call(Position1=1),
           call(Position2=4)
       ;   call(Position1=2),
           call(Position2=3)
       ;   call(Position1=2),
           call(Position2=4)
       ;   call(Position1=3),
           call(Position2=4)
       ;   call(Position1=5),
           call(Position2=6)
       ;   call(Position1=5),
           call(Position2=7)
       ;   call(Position1=5),
           call(Position2=8)
       ;   call(Position1=6),
           call(Position2=7)
       ;   call(Position1=6),
           call(Position2=8)
       ;   call(Position1=7),
           call(Position2=8)
       ;   call(Position2=1),
           call(Position1=2)
       ;   call(Position2=1),
           call(Position1=3)
       ;   call(Position2=1),
           call(Position1=4)
       ;   call(Position2=2),
           call(Position1=3)
       ;   call(Position2=2),
           call(Position1=4)
       ;   call(Position2=3),
           call(Position1=4)
       ;   call(Position2=5),
           call(Position1=6)
       ;   call(Position2=5),
           call(Position1=7)
       ;   call(Position2=5),
           call(Position1=8)
       ;   call(Position2=6),
           call(Position1=7)
       ;   call(Position2=6),
           call(Position1=8)
       ;   call(Position2=7),
           call(Position1=8)
       ;   call(Position1=4),
           call(Position2=7)
       ;   call(Position2=4),
           call(Position1=7)
       ).
 */

 /*  [(call(Position1=1), call(Position2=2);call(Position1=1), call(Position2=3);call(Position1=1), call(Position2=4);call(Position1=2), call(Position2=3);call(Position1=2), call(Position2=4);call(Position1=3), call(Position2=4);call(Position1=5), call(Position2=6);call(Position1=5), call(Position2=7);call(Position1=5), call(Position2=8);call(Position1=6), call(Position2=7);call(Position1=6), call(Position2=8);call(Position1=7), call(Position2=8);call(Position2=1), call(Position1=2);call(Position2=1), call(Position1=3);call(Position2=1), call(Position1=4);call(Position2=2), call(Position1=3);call(Position2=2), call(Position1=4);call(Position2=3), call(Position1=4);call(Position2=5), call(Position1=6);call(Position2=5), call(Position1=7);call(Position2=5), call(Position1=8);call(Position2=6), call(Position1=7);call(Position2=6), call(Position1=8);call(Position2=7), call(Position1=8);call(Position1=4), call(Position2=7);call(Position2=4), call(Position1=7)), allDifferent([Position1, Position2])] ->
       ta(Axiom_head_Ret3, neighbor(Position1, Position2)).
 */
axiom(neighbor(Position1, Position2),
   
    [  (call(Position1=1), call(Position2=2);call(Position1=1), call(Position2=3);call(Position1=1), call(Position2=4);call(Position1=2), call(Position2=3);call(Position1=2), call(Position2=4);call(Position1=3), call(Position2=4);call(Position1=5), call(Position2=6);call(Position1=5), call(Position2=7);call(Position1=5), call(Position2=8);call(Position1=6), call(Position2=7);call(Position1=6), call(Position2=8);call(Position1=7), call(Position2=8);call(Position2=1), call(Position1=2);call(Position2=1), call(Position1=3);call(Position2=1), call(Position1=4);call(Position2=2), call(Position1=3);call(Position2=2), call(Position1=4);call(Position2=3), call(Position1=4);call(Position2=5), call(Position1=6);call(Position2=5), call(Position1=7);call(Position2=5), call(Position1=8);call(Position2=6), call(Position1=7);call(Position2=6), call(Position1=8);call(Position2=7), call(Position1=8);call(Position1=4), call(Position2=7);call(Position2=4), call(Position1=7)),
      allDifferent([Position1, Position2])
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8731
% Side1(GateAO)=4.
side1(gateAO,4).

 /*  axiom_head(Axiom_head_Ret) ->
       side1(gateAO, 4).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(side1(gateAO, 4), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8732
% Side2(GateAO)=7.
side2(gateAO,7).

 /*  axiom_head(Axiom_head_Ret) ->
       side2(gateAO, 7).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(side2(gateAO, 7), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8734
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8761
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8762
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8764
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8765
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8766
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8768
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8769
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8770
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8771
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8772
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(jumbo, elephantSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(jumbo, elephantSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8773
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8775
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).

 /*  [] ->
       ta(Ta_Param, not(initially(opened(gateAO)))).
 */
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8776
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8776
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*  exists([Position],
     initially(pos(homer, Position)),
      outside=loc(Position)).
 */

 /*  initially(pos(homer, Position)) :-
       some(Position, '$kolem_Fn_457').
 */

 /*  [some(Position, '$kolem_Fn_457')] ->
       ta(Ta_Param, initially(pos(homer, Position))).
 */
axiom(initially(pos(homer, Position)),
    [some(Position, '$kolem_Fn_457')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8777
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8777
% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).

 /*  exists([Position],
     initially(pos(jumbo, Position)),
      cageA=loc(Position)).
 */

 /*  initially(pos(jumbo, Position)) :-
       some(Position, '$kolem_Fn_458').
 */

 /*  [some(Position, '$kolem_Fn_458')] ->
       ta(Ta_Param, initially(pos(jumbo, Position))).
 */
axiom(initially(pos(jumbo, Position)),
    [some(Position, '$kolem_Fn_458')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8779
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8779
% HoldsAt(Pos(Homer,position),4) & CageA=Loc(position).

 /*  exists([Position],
     holds_at(pos(homer, Position), 4),
      cageA=loc(Position)).
 */

 /*  holds_at(pos(homer, Position), 4) :-
       some(Position, '$kolem_Fn_459').
 */

 /*  [some(Position, '$kolem_Fn_459'), b(t, t4), ignore(t+4==t4)] ->
       ta(4, holds_at(pos(homer, Position), t4)).
 */
axiom(holds_at(pos(homer, Position), t4),
    [some(Position, '$kolem_Fn_459'), b(t, t4)]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8780
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8780
% HoldsAt(Pos(Jumbo,position),4) & Outside=Loc(position).

 /*  exists([Position],
     holds_at(pos(jumbo, Position), 4),
      outside=loc(Position)).
 */

 /*  holds_at(pos(jumbo, Position), 4) :-
       some(Position, '$kolem_Fn_460').
 */

 /*  [some(Position, '$kolem_Fn_460'), b(t, t4), ignore(t+4==t4)] ->
       ta(4, holds_at(pos(jumbo, Position), t4)).
 */
axiom(holds_at(pos(jumbo, Position), t4),
    [some(Position, '$kolem_Fn_460'), b(t, t4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8782
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),4).
holds_at(posDeterminingFluent(Human,1),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8783
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
holds_at(neg(doneBy(Event,Animal)),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8785
%; ccalc.2.0b.8.3 single model
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Mount(Homer,Jumbo),1).
%;Happens(ThrowOff(Jumbo,Homer),2).
%;HoldsAt(PosDeterminingFluent(Homer,1),2).
%;Happens(Move(Jumbo,7),3).
%;Happens(Mount(Homer,Jumbo),3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8796
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8797
==> range(time,0,4).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8798
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8799
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8827
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8828
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8830
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8831
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8832
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8834
==> t(human,homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8835
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8836
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8838
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).

 /*  [] ->
       ta(Ta_Param, not(initially(opened(gateAO)))).
 */
axiom(not(initially(opened(gateAO))),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8839
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8839
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).

 /*  exists([Position],
     initially(pos(homer, Position)),
      outside=loc(Position)).
 */

 /*  initially(pos(homer, Position)) :-
       some(Position, '$kolem_Fn_461').
 */

 /*  [some(Position, '$kolem_Fn_461')] ->
       ta(Ta_Param, initially(pos(homer, Position))).
 */
axiom(initially(pos(homer, Position)),
    [some(Position, '$kolem_Fn_461')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8840
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8840
% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).

 /*  exists([Position],
     holds_at(pos(homer, Position), 2),
      cageA=loc(Position)).
 */

 /*  holds_at(pos(homer, Position), 2) :-
       some(Position, '$kolem_Fn_462').
 */

 /*  [some(Position, '$kolem_Fn_462'), b(t, t2), ignore(t+2==t2)] ->
       ta(2, holds_at(pos(homer, Position), t2)).
 */
axiom(holds_at(pos(homer, Position), t2),
    [some(Position, '$kolem_Fn_462'), b(t, t2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8842
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
holds_at(posDeterminingFluent(Human,1),2).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8843
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
holds_at(neg(doneBy(Event,Animal)),2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8845
% range time 0 2
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8846
==> range(time,0,2).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8847
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8848
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest6.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8876
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8877
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8879
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8880
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8881
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8883
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8884
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8885
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8886
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8887
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(jumbo, elephantSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(jumbo, elephantSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8888
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8890
% HoldsAt(Mounted(Homer,Jumbo),0).

 /*  [] ->
       ta(Ta_Param, initially(mounted(homer, jumbo))).
 */
axiom(initially(mounted(homer, jumbo)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8891
% HoldsAt(Pos(Jumbo,1),0).

 /*  [] ->
       ta(Ta_Param, initially(pos(jumbo, 1))).
 */
axiom(initially(pos(jumbo, 1)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8892
% Happens(ThrowOff(Jumbo,Homer),0).

 /*  axiom_head(0) ->
       is_time(0).
 */

 /*  fix_axiom_head(0) ->
       holds_at(is_time(0), 0).
 */

 /*  [holds_at(is_time(0), t)] ->
       ta(0, happens(throwOff(jumbo, homer), t)).
 */
axiom(happens(throwOff(jumbo, homer), t),
    [holds_at(is_time(0), t)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8894
% option manualrelease on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8895
:- set_ec_option(manualrelease, on).
:- if(false).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8895
% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
 %  not(releasedAt(mounted(Human,Animal),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(mounted(Human, Animal), 0))).
 */
axiom(not(releasedAt(mounted(Human, Animal), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8896
% [gate]
 % !ReleasedAt(Opened(gate),0).
 %  not(releasedAt(opened(Gate),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(opened(Gate), 0))).
 */
axiom(not(releasedAt(opened(Gate), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8897
% [position]
 % ReleasedAt(Pos(Homer,position),0).
releasedAt(pos(homer,Position),0).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8898
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
 %  not(releasedAt(pos(jumbo,Position),0)).

 /*  [] ->
       ta(Ta_Param, not(releasedAt(pos(jumbo, Position), 0))).
 */
axiom(not(releasedAt(pos(jumbo, Position), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8900
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8901
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
holds_at(neg(doneBy(Event,Animal)),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8903
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8904
==> range(time,0,1).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8905
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8906
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors: 
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8934
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8935
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8937
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8938
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8939
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8941
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8942
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8943
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8944
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8945
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(jumbo, elephantSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(jumbo, elephantSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8946
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8948
% !HoldsAt(Opened(GateAO),0).
 %  not(initially(opened(gateAO))).

 /*  [] ->
       ta(Ta_Param, not(initially(opened(gateAO)))).
 */
axiom(not(initially(opened(gateAO))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8949
% HoldsAt(Pos(Homer,6),0).

 /*  [] ->
       ta(Ta_Param, initially(pos(homer, 6))).
 */
axiom(initially(pos(homer, 6)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8950
% [time]
 % HoldsAt(Pos(Jumbo,1),time).
holds_at(pos(jumbo,1),Time).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8952
%; goal


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8953
% HoldsAt(Mounted(Homer,Jumbo),4).
holds_at(mounted(homer,jumbo),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8955
%;ABDUCE
%;Happens(Move(Homer,7),0).
%;Happens(Open(Homer,GateAO),1).
%;Happens(Move(Homer,4),2).
%;Happens(Mount(Homer,Jumbo),3).
% [human]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8961
% HoldsAt(PosDeterminingFluent(human,1),4).
holds_at(posDeterminingFluent(Human,1),4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8962
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
holds_at(neg(doneBy(Event,Animal)),4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8964
% range time 0 4
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8965
==> range(time,0,4).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8966
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8967
==> range(offset,0,0).

% option timediff off
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8969
:- set_ec_option(timediff, off).
:- if(false).
:- endif.

% option modeldiff on
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8970
:- set_ec_option(modeldiff, on).
:- if(false).
:- endif.
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8998
% option encoding 3
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8999
:- set_ec_option(encoding, 3).
:- if(false).
:- endif.

% load foundations/Root.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9001
:- load_e('foundations/Root.e', changed).
:- if(false).
:- endif.

% load foundations/EC.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9002
:- load_e('foundations/EC.e', changed).
:- if(false).
:- endif.

% load examples/AkmanEtAl2004/ZooWorld.e
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9003
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(false).
:- endif.

% human Homer
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9005
==> t(human,homer).

% elephant Jumbo
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9006
==> t(elephant,jumbo).

% horse Silver
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9007
==> t(horse,silver).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9008
% Species(Homer)=HumanSpecies.
species(homer,humanSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(homer, humanSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(homer, humanSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9009
% Adult(Homer).
adult(homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9010
% Species(Jumbo)=ElephantSpecies.
species(jumbo,elephantSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(jumbo, elephantSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(jumbo, elephantSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9011
% Adult(Jumbo).
adult(jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9012
% Species(Silver)=HorseSpecies.
species(silver,horseSpecies).

 /*  axiom_head(Axiom_head_Ret) ->
       species(silver, horseSpecies).
 */

 /*  fix_axiom_head(Axiom_head_Ret) ->
       holds_at(species(silver, horseSpecies), Axiom_head_Ret).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9013
% Adult(Silver).
adult(silver).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9015
% {position}


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9016
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).

 /*  exists([Position],
     not(initially(pos(homer, Position))),
      initially(pos(jumbo, Position)),
      holds_at(pos(homer, Position), 1),
      holds_at(neg(pos(jumbo, Position)), 1)).
 */

 /*  not(initially(pos(homer, Position))) :-
       some(Position, '$kolem_Fn_463').
 */

 /*  [some(Position, '$kolem_Fn_463')] ->
       ta(Ta_Param, not(initially(pos(homer, Position)))).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9019
axiom(not(initially(pos(homer, Position))),
    [some(Position, '$kolem_Fn_463')]).

 /*  initially(pos(jumbo, Position)) :-
       some(Position, '$kolem_Fn_463').
 */

 /*  [some(Position, '$kolem_Fn_463')] ->
       ta(Ta_Param3, initially(pos(jumbo, Position))).
 */
axiom(initially(pos(jumbo, Position)),
    [some(Position, '$kolem_Fn_463')]).

 /*  holds_at(pos(homer, Position), 1) :-
       some(Position, '$kolem_Fn_463').
 */

 /*  [some(Position, '$kolem_Fn_463'), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(pos(homer, Position), start)).
 */
axiom(holds_at(pos(homer, Position), start),
    [some(Position, '$kolem_Fn_463'), b(t, start)]).

 /*  holds_at(neg(pos(jumbo, Position)), 1) :-
       some(Position, '$kolem_Fn_463').
 */

 /*  [some(Position, '$kolem_Fn_463'), b(t, start), ignore(t+1==start)] ->
       ta(1, holds_at(neg(pos(jumbo, Position)), start)).
 */
axiom(holds_at(neg(pos(jumbo, Position)), start),
    [some(Position, '$kolem_Fn_463'), b(t, start)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9020
% [animal,time]
 % !Happens(ThrowOff(animal,Homer),time).
 %  not(happens(throwOff(Animal,homer),Time)).

 /*  [] ->
       ta(Time, not(happens(throwOff(Animal, homer), Time))).
 */
axiom(not(happens(throwOff(Animal, homer), Time)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9022
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9023
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
holds_at(neg(doneBy(Event,Animal)),1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9025
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,7),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Move(Silver,8),0).
%;Happens(Mount(Homer,Jumbo),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9033
% range time 0 1
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9034
==> range(time,0,1).

% range position 1 8
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9035
==> range(position,1,8).

% range offset 0 0
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9036
==> range(offset,0,0).
%; End of file.
