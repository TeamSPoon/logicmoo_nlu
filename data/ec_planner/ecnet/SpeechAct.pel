:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.pel:3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4638).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% event InviteIn(agent,agent,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',31).
event(inviteIn(InviteIn_Param,_,InviteIn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',31).
==> mpred_prop(inviteIn(agent,agent,room),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',31).
==> meta_argtypes(inviteIn(agent,agent,room)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:32
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',31).
%; agent1 is invited into room by agent2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',34).
% fluent InvitedIn(agent,room,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',34).
fluent(invitedIn(InvitedIn_Param,_,InvitedIn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',34).
==> mpred_prop(invitedIn(agent,room,agent),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',34).
==> meta_argtypes(invitedIn(agent,room,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',36).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:42
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:44
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',42).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  exists([Outside],
    happens(inviteIn(Agent1, Agent2, Room), Time) ->
       holds_at(at(Agent1, Room), Time),
       holds_at(at(Agent2, Outside), Time),
       adjacent(Room, Outside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  not(happens(inviteIn(Agent1, Agent2, Room), Time)) :-
       (   not(holds_at(at(Agent1, Room), Time))
       ;   not(holds_at(at(Agent2, Outside), Time))
       ;   not(adjacent(Room, Outside))
       ),
       some(Outside,
            '$kolem_Fn_278'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  [(holds_at(neg(at(Agent1, Room)), Time);holds_at(neg(at(Agent2, Outside)), Time);not(adjacent(Room, Outside))), some(Outside, '$kolem_Fn_278'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(inviteIn(Agent1, Agent2, Room), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).
axiom(not(happens(inviteIn(Agent1, Agent2, Room), Time)),
   
    [  (holds_at(neg(at(Agent1, Room)), Time);holds_at(neg(at(Agent2, Outside)), Time);not(adjacent(Room, Outside))),
      some(Outside,
           '$kolem_Fn_278'(Agent1, Agent2, Room, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  holds_at(at(Agent1, Room), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Outside,
            '$kolem_Fn_278'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  [happens(inviteIn(Agent1, Agent2, Room), Time), some(Outside, '$kolem_Fn_278'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).
axiom(holds_at(at(Agent1, Room), Time),
   
    [ happens(inviteIn(Agent1, Agent2, Room), Time),
      some(Outside,
           '$kolem_Fn_278'(Agent1, Agent2, Room, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  holds_at(at(Agent2, Outside), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Outside,
            '$kolem_Fn_278'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  [happens(inviteIn(Agent1, Agent2, Room), Time), some(Outside, '$kolem_Fn_278'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Outside), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).
axiom(holds_at(at(Agent2, Outside), Time),
   
    [ happens(inviteIn(Agent1, Agent2, Room), Time),
      some(Outside,
           '$kolem_Fn_278'(Agent1, Agent2, Room, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  adjacent(Room, Outside) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Outside,
            '$kolem_Fn_278'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).

 /*  [happens(inviteIn(Agent1, Agent2, Room), Time), some(Outside, '$kolem_Fn_278'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          adjacent(Room, Outside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',45).
axiom(adjacent(Room, Outside),
   
    [ happens(inviteIn(Agent1, Agent2, Room), Time),
      some(Outside,
           '$kolem_Fn_278'(Agent1, Agent2, Room, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:48
%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:52
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:54
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',52).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(inviteIn(Agent1, Agent2, Room),
                    invitedIn(Agent2, Room, Agent1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',52).
axiom(initiates(inviteIn(Agent1, Agent2, Room), invitedIn(Agent2, Room, Agent1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:56
%; agent intends to walk into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:57
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',58).
% event IntendToWalkIn(agent,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',58).
event(intendToWalkIn(IntendToWalkIn_Param,
		     IntendToWalkIn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',58).
==> mpred_prop(intendToWalkIn(agent,room),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',58).
==> meta_argtypes(intendToWalkIn(agent,room)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:58
%; agent has the intention to walk into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:59
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',60).
% fluent IntentionToWalkIn(agent,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',60).
fluent(intentionToWalkIn(IntentionToWalkIn_Param,
			 IntentionToWalkIn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',60).
==> mpred_prop(intentionToWalkIn(agent,room),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',60).
==> meta_argtypes(intentionToWalkIn(agent,room)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:60
%; agent acts on the intention to walk into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:61
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',62).
% fluent ActOnIntentionToWalkIn(agent,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',62).
fluent(actOnIntentionToWalkIn(ActOnIntentionToWalkIn_Param,
			      ActOnIntentionToWalkIn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',62).
==> mpred_prop(actOnIntentionToWalkIn(agent,room),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',62).
==> meta_argtypes(actOnIntentionToWalkIn(agent,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:62
% noninertial ActOnIntentionToWalkIn
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',62).
==> noninertial(actOnIntentionToWalkIn).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:71
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:74
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  holds_at(invitedIn(Agent1, Room, Agent2), Time), holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time) ->
       happens(intendToWalkIn(Agent1, Room), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  happens(intendToWalkIn(Agent1, Room), Time) :-
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       holds_at(like(Agent1, Agent2), Time),
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  [holds_at(invitedIn(Agent1, Room, Agent2), Time), holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).
axiom(happens(intendToWalkIn(Agent1, Room), Time),
   
    [ holds_at(invitedIn(Agent1, Room, Agent2), Time),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  not(holds_at(invitedIn(Agent1, Room, Agent2), Time)) :-
       ( holds_at(like(Agent1, Agent2), Time),
         holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)
       ),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  [holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time), not(happens(intendToWalkIn(Agent1, Room), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(invitedIn(Agent1, Room, Agent2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).
axiom(holds_at(neg(invitedIn(Agent1, Room, Agent2)), Time),
   
    [ holds_at(like(Agent1, Agent2), Time),
      holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
      not(happens(intendToWalkIn(Agent1, Room), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  not(holds_at(like(Agent1, Agent2), Time)) :-
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  [holds_at(neg(intentionToWalkIn(Agent1, Room)), Time), holds_at(invitedIn(Agent1, Room, Agent2), Time), not(happens(intendToWalkIn(Agent1, Room), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(like(Agent1, Agent2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).
axiom(holds_at(neg(like(Agent1, Agent2)), Time),
   
    [ holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
      holds_at(invitedIn(Agent1, Room, Agent2), Time),
      not(happens(intendToWalkIn(Agent1, Room), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  not(holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)) :-
       holds_at(like(Agent1, Agent2), Time),
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).

 /*  [holds_at(like(Agent1, Agent2), Time), holds_at(invitedIn(Agent1, Room, Agent2), Time), not(happens(intendToWalkIn(Agent1, Room), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(intentionToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',71).
axiom(holds_at(intentionToWalkIn(Agent1, Room), Time),
   
    [ holds_at(like(Agent1, Agent2), Time),
      holds_at(invitedIn(Agent1, Room, Agent2), Time),
      not(happens(intendToWalkIn(Agent1, Room), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:76
%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:80
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:82
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',80).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(intendToWalkIn(Agent, Room),
                    intentionToWalkIn(Agent, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',80).
axiom(initiates(intendToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:84
%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:92
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:97
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location) ->
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  happens(walkThroughDoor21(Agent, Door), Time) :-
       holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       equals(side1(Door), Room),
       equals(side2(Door), Location).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  [holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).
axiom(happens(walkThroughDoor21(Agent, Door), Time),
   
    [ holds_at(intentionToWalkIn(Agent, Room), Time),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side1(Door), Room),
      equals(side2(Door), Location)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  not(holds_at(intentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
         holds_at(at(Agent, Location), Time),
         equals(side1(Door), Room),
         equals(side2(Door), Location)
       ),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  [holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location), not(happens(walkThroughDoor21(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(intentionToWalkIn(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).
axiom(holds_at(neg(intentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side1(Door), Room),
      equals(side2(Door), Location),
      not(happens(walkThroughDoor21(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  not(holds_at(actOnIntentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         equals(side1(Door), Room),
         equals(side2(Door), Location)
       ),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  [holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor21(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnIntentionToWalkIn(Agent, Room)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).
axiom(holds_at(neg(actOnIntentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      equals(side1(Door), Room),
      equals(side2(Door), Location),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor21(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( equals(side1(Door), Room),
         equals(side2(Door), Location)
       ),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).

 /*  [equals(side1(Door), Room), equals(side2(Door), Location), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor21(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',92).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ equals(side1(Door), Room),
      equals(side2(Door), Location),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor21(Agent, Door), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:99
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:105
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location) ->
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  happens(walkThroughDoor12(Agent, Door), Time) :-
       holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       equals(side2(Door), Room),
       equals(side1(Door), Location).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  [holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).
axiom(happens(walkThroughDoor12(Agent, Door), Time),
   
    [ holds_at(intentionToWalkIn(Agent, Room), Time),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side2(Door), Room),
      equals(side1(Door), Location)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  not(holds_at(intentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
         holds_at(at(Agent, Location), Time),
         equals(side2(Door), Room),
         equals(side1(Door), Location)
       ),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  [holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location), not(happens(walkThroughDoor12(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(intentionToWalkIn(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).
axiom(holds_at(neg(intentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side2(Door), Room),
      equals(side1(Door), Location),
      not(happens(walkThroughDoor12(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  not(holds_at(actOnIntentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         equals(side2(Door), Room),
         equals(side1(Door), Location)
       ),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  [holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor12(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnIntentionToWalkIn(Agent, Room)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).
axiom(holds_at(neg(actOnIntentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      equals(side2(Door), Room),
      equals(side1(Door), Location),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor12(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( equals(side2(Door), Room),
         equals(side1(Door), Location)
       ),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).

 /*  [equals(side2(Door), Room), equals(side1(Door), Location), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor12(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',101).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ equals(side2(Door), Room),
      equals(side1(Door), Location),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor12(Agent, Door), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:107
%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:113
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:116
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',113).

 /*  [equals(side1(Door), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor21(Agent, Door),
                     intentionToWalkIn(Agent, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',113).
axiom(terminates(walkThroughDoor21(Agent, Door), intentionToWalkIn(Agent, Room), Time),
    [equals(side1(Door), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:118
% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:122
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',120).

 /*  [equals(side2(Door), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor12(Agent, Door),
                     intentionToWalkIn(Agent, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',120).
axiom(terminates(walkThroughDoor12(Agent, Door), intentionToWalkIn(Agent, Room), Time),
    [equals(side2(Door), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:124
%; agent greets object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:125
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',126).
% event Greet(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',126).
event(greet(Greet_Param,Greet_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',126).
==> mpred_prop(greet(agent,object),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',126).
==> meta_argtypes(greet(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:127
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',128).
% event SayPleasedToMeet(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',128).
event(sayPleasedToMeet(SayPleasedToMeet_Param,
		       SayPleasedToMeet_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',128).
==> mpred_prop(sayPleasedToMeet(agent,agent),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',128).
==> meta_argtypes(sayPleasedToMeet(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:129
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',130).
%; agent says goodbye to object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:130
% event SayGoodbye(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',130).
event(sayGoodbye(SayGoodbye_Param,SayGoodbye_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',130).
==> mpred_prop(sayGoodbye(agent,object),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',130).
==> meta_argtypes(sayGoodbye(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:132
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',133).
% event TalkAbout(agent,content)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',133).
event(talkAbout(TalkAbout_Param,TalkAbout_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',133).
==> mpred_prop(talkAbout(agent,content),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',133).
==> meta_argtypes(talkAbout(agent,content)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:134
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',135).
% event Converse(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',135).
event(converse(Converse_Param,Converse_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',135).
==> mpred_prop(converse(agent,agent),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',135).
==> meta_argtypes(converse(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:136
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',137).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:138
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',137).
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:140
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  exists([Location],
    happens(converse(Agent1, Agent2), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  not(happens(converse(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(converse(Agent1, Agent2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).
axiom(not(happens(converse(Agent1, Agent2), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  [happens(converse(Agent1, Agent2), Time), some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(converse(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).

 /*  [happens(converse(Agent1, Agent2), Time), some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',139).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(converse(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_279'(Agent1, Agent2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:142
%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:148
% Happens(Greet(agent,object),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:149
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',148).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:151
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  exists([Location],
    happens(greet(Agent, Object), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  not(happens(greet(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object, Location), Time))
       ),
       some(Location, '$kolem_Fn_280'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)), some(Location, '$kolem_Fn_280'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(greet(Agent, Object), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).
axiom(not(happens(greet(Agent, Object), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)),
      some(Location, '$kolem_Fn_280'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Location, '$kolem_Fn_280'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  [happens(greet(Agent, Object), Time), some(Location, '$kolem_Fn_280'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(greet(Agent, Object), Time),
      some(Location, '$kolem_Fn_280'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  holds_at(at(Object, Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Location, '$kolem_Fn_280'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).

 /*  [happens(greet(Agent, Object), Time), some(Location, '$kolem_Fn_280'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',150).
axiom(holds_at(at(Object, Location), Time),
   
    [ happens(greet(Agent, Object), Time),
      some(Location, '$kolem_Fn_280'(Agent, Object, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:153
% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:155
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  exists([Location],
    happens(sayGoodbye(Agent, Object), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  not(happens(sayGoodbye(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object, Location), Time))
       ),
       some(Location, '$kolem_Fn_281'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)), some(Location, '$kolem_Fn_281'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(sayGoodbye(Agent, Object), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).
axiom(not(happens(sayGoodbye(Agent, Object), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)),
      some(Location, '$kolem_Fn_281'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Location, '$kolem_Fn_281'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  [happens(sayGoodbye(Agent, Object), Time), some(Location, '$kolem_Fn_281'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(sayGoodbye(Agent, Object), Time),
      some(Location, '$kolem_Fn_281'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  holds_at(at(Object, Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Location, '$kolem_Fn_281'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).

 /*  [happens(sayGoodbye(Agent, Object), Time), some(Location, '$kolem_Fn_281'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',155).
axiom(holds_at(at(Object, Location), Time),
   
    [ happens(sayGoodbye(Agent, Object), Time),
      some(Location, '$kolem_Fn_281'(Agent, Object, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:159
%; speech: expression of emotions
%; agent cries for joy.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:162
% event CryForJoy(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',162).
event(cryForJoy(CryForJoy_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',162).
==> mpred_prop(cryForJoy(agent),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',162).
==> meta_argtypes(cryForJoy(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:164
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',165).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:168
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).

 /*  happens(cryForJoy(Agent), Time) ->
       holds_at(happy(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).

 /*  holds_at(happy(Agent), Time) :-
       happens(cryForJoy(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).

 /*  [holds_at(metreqs(cryForJoy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(cryForJoy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).
axiom(requires(cryForJoy(Agent), Time),
    [holds_at(metreqs(cryForJoy(Agent)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).

 /*  [holds_at(happy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(cryForJoy(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).
axiom(holds_at(requirements(cryForJoy(Agent)), Time),
    [holds_at(happy(Agent), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).

 /*  not(happens(cryForJoy(Agent), Time)) :-
       not(holds_at(happy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).

 /*  [holds_at(neg(happy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(cryForJoy(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',168).
axiom(not(happens(cryForJoy(Agent), Time)),
    [holds_at(neg(happy(Agent)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:171
% event Threaten(agent,agent,weapon)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',171).
event(threaten(Threaten_Param,_,Threaten_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',171).
==> mpred_prop(threaten(agent,agent,weapon),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',171).
==> meta_argtypes(threaten(agent,agent,weapon)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:173
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',174).
% event ReleaseFromThreat(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',174).
event(releaseFromThreat(ReleaseFromThreat_Param,
			ReleaseFromThreat_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',174).
==> mpred_prop(releaseFromThreat(agent,agent),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',174).
==> meta_argtypes(releaseFromThreat(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:175
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',176).
% fluent ThreatenedBy(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',176).
fluent(threatenedBy(ThreatenedBy_Param,ThreatenedBy_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',176).
==> mpred_prop(threatenedBy(agent,agent),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',176).
==> meta_argtypes(threatenedBy(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:177
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',178).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:180
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',178).
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:182
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  exists([Location],
    happens(threaten(Agent1, Agent2, Weapon), Time) ->
       holds_at(holding(Agent1, Weapon), Time),
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       (   not(holds_at(holding(Agent1, Weapon), Time))
       ;   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  [(holds_at(neg(holding(Agent1, Weapon)), Time);holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(threaten(Agent1, Agent2, Weapon),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).
axiom(not(happens(threaten(Agent1, Agent2, Weapon), Time)),
   
    [  (holds_at(neg(holding(Agent1, Weapon)), Time);holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  holds_at(holding(Agent1, Weapon), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Location,
            '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time), some(Location, '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(holding(Agent1, Weapon), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).
axiom(holds_at(holding(Agent1, Weapon), Time),
   
    [ happens(threaten(Agent1, Agent2, Weapon), Time),
      some(Location,
           '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Location,
            '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time), some(Location, '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(threaten(Agent1, Agent2, Weapon), Time),
      some(Location,
           '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Location,
            '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time), some(Location, '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',181).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(threaten(Agent1, Agent2, Weapon), Time),
      some(Location,
           '$kolem_Fn_282'(Agent1, Agent2, Weapon, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:184
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:186

 /*  happens(threaten(Agent1, Agent2, Weapon), Time) ->
       happens(becomeAngryAt(Agent2, Agent1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',186).

 /*  happens(becomeAngryAt(Agent2, Agent1), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',186).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(becomeAngryAt(Agent2, Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',186).
axiom(happens(becomeAngryAt(Agent2, Agent1), Time),
    [happens(threaten(Agent1, Agent2, Weapon), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',186).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       not(happens(becomeAngryAt(Agent2, Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',186).

 /*  [not(happens(becomeAngryAt(Agent2, Agent1), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(threaten(Agent1, Agent2, Weapon),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',186).
axiom(not(happens(threaten(Agent1, Agent2, Weapon), Time)),
    [not(happens(becomeAngryAt(Agent2, Agent1), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:188
% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:191
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',190).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(threaten(Agent1, Agent2, Weapon),
                    threatenedBy(Agent2, Agent1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',190).
axiom(initiates(threaten(Agent1, Agent2, Weapon), threatenedBy(Agent2, Agent1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:193
% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',195).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(releaseFromThreat(Agent1, Agent2),
                     threatenedBy(Agent2, Agent1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',195).
axiom(terminates(releaseFromThreat(Agent1, Agent2), threatenedBy(Agent2, Agent1), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:198
% event Order(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',198).
event(order(Order_Param,_,Order_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',198).
==> mpred_prop(order(agent,agent,physobj),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',198).
==> meta_argtypes(order(agent,agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:200
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',201).
% fluent KnowOrder(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',201).
fluent(knowOrder(KnowOrder_Param,_,KnowOrder_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',201).
==> mpred_prop(knowOrder(agent,agent,physobj),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',201).
==> meta_argtypes(knowOrder(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',203).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:205
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',203).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent1, Agent2, Physobj),
                    knowOrder(Agent2, Agent1, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',203).
axiom(initiates(order(Agent1, Agent2, Physobj), knowOrder(Agent2, Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:207
% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:209
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:211
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  exists([Location],
    happens(order(Agent1, Agent2, Physobj), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(order(Agent1, Agent2, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).
axiom(not(happens(order(Agent1, Agent2, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  [happens(order(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(order(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).

 /*  [happens(order(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',209).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(order(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_283'(Agent1, Agent2, Physobj, Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:213
% event Request(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',213).
event(request(Request_Param,_,Request_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',213).
==> mpred_prop(request(agent,agent,physobj),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',213).
==> meta_argtypes(request(agent,agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',216).
% fluent KnowRequest(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',216).
fluent(knowRequest(KnowRequest_Param,
		   _,
		   KnowRequest_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',216).
==> mpred_prop(knowRequest(agent,agent,physobj),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',216).
==> meta_argtypes(knowRequest(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',218).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:220
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',218).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(request(Agent1, Agent2, Physobj),
                    knowRequest(Agent2, Agent1, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',218).
axiom(initiates(request(Agent1, Agent2, Physobj), knowRequest(Agent2, Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:222
% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:224
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:226
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  exists([Location],
    happens(request(Agent1, Agent2, Physobj), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(request(Agent1, Agent2, Physobj),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).
axiom(not(happens(request(Agent1, Agent2, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  [happens(request(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(request(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).

 /*  [happens(request(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e',224).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(request(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_284'(Agent1, Agent2, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/SpeechAct.e:228
%; End of file.
