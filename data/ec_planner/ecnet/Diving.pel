:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.pel:3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',14).
==> sort(object).

% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',14).
==> subsort(agent,object).

% sort diver: agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',16).
==> subsort(diver,agent).

% sort depth: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',16).
==> subsort(depth,integer).

% sort boat: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',18).
==> subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',20).
==> subsort(line,object).

% sort equipment: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',23).
==> subsort(equipment,object).

% sort weight: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',23).
==> subsort(weight,equipment).

% sort fin: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',25).
==> subsort(fin,equipment).

% sort airtank: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',25).
==> subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

% sort computer: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',30).
==> subsort(computer,equipment).

% sort bc: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',30).
==> subsort(bc,equipment).

% fluent AtDepth(object,depth)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',33).
fluent(atDepth(AtDepth_Param,AtDepth_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',33).
==> mpred_prop(atDepth(object,depth),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',33).
==> meta_argtypes(atDepth(object,depth)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).

 /*  holds_at(atDepth(Object, Depth1), Time), holds_at(atDepth(Object, Depth2), Time) ->
       equals(Depth1, Depth2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).

 /*  not(holds_at(atDepth(Object, Depth1), Time)) :-
       holds_at(atDepth(Object, Depth2), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).

 /*  [holds_at(atDepth(Object, Depth2), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).
axiom(holds_at(neg(atDepth(Object, Depth1)), Time),
   
    [ holds_at(atDepth(Object, Depth2), Time),
      not(equals(Depth1, Depth2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).

 /*  not(holds_at(atDepth(Object, Depth2), Time)) :-
       holds_at(atDepth(Object, Depth1), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).

 /*  [holds_at(atDepth(Object, Depth1), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',35).
axiom(holds_at(neg(atDepth(Object, Depth2)), Time),
   
    [ holds_at(atDepth(Object, Depth1), Time),
      not(equals(Depth2, Depth1))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:39
% event Ascend(diver,depth)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',39).
event(ascend(Ascend_Param,Ascend_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',39).
==> mpred_prop(ascend(diver,depth),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',39).
==> meta_argtypes(ascend(diver,depth)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:41
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',42).
% event Descend(diver,depth)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',42).
event(descend(Descend_Param,Descend_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',42).
==> mpred_prop(descend(diver,depth),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',42).
==> meta_argtypes(descend(diver,depth)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:43
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  holds_at(atDepth(Diver, Depth1), Time), happens(descend(Diver, Depth2), Time) ->
       Depth2>Depth1.
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  comparison(Depth2, Depth1, >) :-
       holds_at(atDepth(Diver, Depth1), Time),
       happens(descend(Diver, Depth2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  [holds_at(atDepth(Diver, Depth1), Time), happens(descend(Diver, Depth2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).
axiom(comparison(Depth2, Depth1, >),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      happens(descend(Diver, Depth2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  not(holds_at(atDepth(Diver, Depth1), Time)) :-
       happens(descend(Diver, Depth2), Time),
       not(comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  [happens(descend(Diver, Depth2), Time), not(comparison(Depth2, Depth1, >))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).
axiom(holds_at(neg(atDepth(Diver, Depth1)), Time),
   
    [ happens(descend(Diver, Depth2), Time),
      not(comparison(Depth2, Depth1, >))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  not(happens(descend(Diver, Depth2), Time)) :-
       holds_at(atDepth(Diver, Depth1), Time),
       not(comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).

 /*  [holds_at(atDepth(Diver, Depth1), Time), not(comparison(Depth2, Depth1, >))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend(Diver, Depth2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',44).
axiom(not(happens(descend(Diver, Depth2), Time)),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      not(comparison(Depth2, Depth1, >))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:48
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:51
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  holds_at(atDepth(Diver, Depth1), Time), happens(ascend(Diver, Depth2), Time) ->
       Depth2<Depth1.
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  comparison(Depth2, Depth1, <) :-
       holds_at(atDepth(Diver, Depth1), Time),
       happens(ascend(Diver, Depth2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  [holds_at(atDepth(Diver, Depth1), Time), happens(ascend(Diver, Depth2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).
axiom(comparison(Depth2, Depth1, <),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      happens(ascend(Diver, Depth2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  not(holds_at(atDepth(Diver, Depth1), Time)) :-
       happens(ascend(Diver, Depth2), Time),
       not(comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  [happens(ascend(Diver, Depth2), Time), not(comparison(Depth2, Depth1, <))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).
axiom(holds_at(neg(atDepth(Diver, Depth1)), Time),
   
    [ happens(ascend(Diver, Depth2), Time),
      not(comparison(Depth2, Depth1, <))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  not(happens(ascend(Diver, Depth2), Time)) :-
       holds_at(atDepth(Diver, Depth1), Time),
       not(comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).

 /*  [holds_at(atDepth(Diver, Depth1), Time), not(comparison(Depth2, Depth1, <))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend(Diver, Depth2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',50).
axiom(not(happens(ascend(Diver, Depth2), Time)),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      not(comparison(Depth2, Depth1, <))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:53
% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',55).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(descend(Diver, Depth),
                    atDepth(Diver, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',55).
axiom(initiates(descend(Diver, Depth), atDepth(Diver, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:56
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',57).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:58
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',57).

 /*  [holds_at(atDepth(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(descend(Diver, Depth2),
                     atDepth(Diver, Depth1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',57).
axiom(terminates(descend(Diver, Depth2), atDepth(Diver, Depth1), Time),
    [holds_at(atDepth(Diver, Depth1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:60
% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',62).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(ascend(Diver, Depth),
                    atDepth(Diver, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',62).
axiom(initiates(ascend(Diver, Depth), atDepth(Diver, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:63
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',64).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:65
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',64).

 /*  [holds_at(atDepth(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(ascend(Diver, Depth2),
                     atDepth(Diver, Depth1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',64).
axiom(terminates(ascend(Diver, Depth2), atDepth(Diver, Depth1), Time),
    [holds_at(atDepth(Diver, Depth1), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:67
% fluent Wearing(diver,equipment)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',67).
fluent(wearing(Wearing_Param,Wearing_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',67).
==> mpred_prop(wearing(diver,equipment),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',67).
==> meta_argtypes(wearing(diver,equipment)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:69
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',70).
% event PutOn(diver,equipment)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',70).
event(putOn(PutOn_Param,PutOn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',70).
==> mpred_prop(putOn(diver,equipment),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',70).
==> meta_argtypes(putOn(diver,equipment)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:71
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',72).
% event TakeOff(diver,equipment)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',72).
event(takeOff(TakeOff_Param,TakeOff_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',72).
==> mpred_prop(takeOff(diver,equipment),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',72).
==> meta_argtypes(takeOff(diver,equipment)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:73
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',74).
% event Lose(diver,equipment)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',74).
event(lose(Lose_Param,Lose_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',74).
==> mpred_prop(lose(diver,equipment),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',74).
==> meta_argtypes(lose(diver,equipment)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:75
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',76).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',76).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putOn(Diver, Equipment),
                   atDepth(Equipment, Depth),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',76).
axiom(releases(putOn(Diver, Equipment), atDepth(Equipment, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:78
% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',80).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putOn(Diver, Equipment),
                   underWater(Equipment),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',80).
axiom(releases(putOn(Diver, Equipment), underWater(Equipment), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:81
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:83
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).

 /*  happens(putOn(Diver, Equipment), Time) ->
       not(exists([Diver1],
                  holds_at(wearing(Diver1, Equipment), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).

 /*  not(holds_at(wearing(Diver1, Equipment), Time)) :-
       happens(putOn(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).

 /*  [holds_at(metreqs(putOn(Diver, Equipment)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(putOn(Diver, Equipment), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).
axiom(requires(putOn(Diver, Equipment), Time),
    [holds_at(metreqs(putOn(Diver, Equipment)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).

 /*  [holds_at(neg(wearing(Diver1, Equipment)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(putOn(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).
axiom(holds_at(requirements(putOn(Diver, Equipment)), Time),
    [holds_at(neg(wearing(Diver1, Equipment)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).

 /*  not(happens(putOn(Diver, Equipment), Time)) :-
       holds_at(wearing(Diver1, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).

 /*  [holds_at(wearing(Diver1, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putOn(Diver, Equipment), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',82).
axiom(not(happens(putOn(Diver, Equipment), Time)),
    [holds_at(wearing(Diver1, Equipment), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:85
% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:88
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  holds_at(wearing(Diver, Equipment), Time) ->
       ( holds_at(atDepth(Diver, Depth), Time)<->holds_at(atDepth(Equipment, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  not(holds_at(wearing(Diver, Equipment), Time)) :-
       (   not(holds_at(atDepth(Equipment, Depth), Time)),
           holds_at(atDepth(Diver, Depth), Time)
       ;   not(holds_at(atDepth(Diver, Depth), Time)),
           holds_at(atDepth(Equipment, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  [(holds_at(neg(atDepth(Equipment, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Equipment, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wearing(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).
axiom(holds_at(neg(wearing(Diver, Equipment)), Time),
   
    [  (holds_at(neg(atDepth(Equipment, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Equipment, Depth), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  holds_at(atDepth(Equipment, Depth), Time) :-
       holds_at(atDepth(Diver, Depth), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Equipment, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).
axiom(holds_at(atDepth(Equipment, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  not(holds_at(atDepth(Diver, Depth), Time)) :-
       not(holds_at(atDepth(Equipment, Depth), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  [holds_at(neg(atDepth(Equipment, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).
axiom(holds_at(neg(atDepth(Diver, Depth)), Time),
   
    [ holds_at(neg(atDepth(Equipment, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       holds_at(atDepth(Equipment, Depth), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  [holds_at(atDepth(Equipment, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).
axiom(holds_at(atDepth(Diver, Depth), Time),
   
    [ holds_at(atDepth(Equipment, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  not(holds_at(atDepth(Equipment, Depth), Time)) :-
       not(holds_at(atDepth(Diver, Depth), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Equipment, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',87).
axiom(holds_at(neg(atDepth(Equipment, Depth)), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:90
% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:93
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  holds_at(holding(Diver, Object), Time) ->
       ( holds_at(atDepth(Diver, Depth), Time)<->holds_at(atDepth(Object, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  not(holds_at(holding(Diver, Object), Time)) :-
       (   not(holds_at(atDepth(Object, Depth), Time)),
           holds_at(atDepth(Diver, Depth), Time)
       ;   not(holds_at(atDepth(Diver, Depth), Time)),
           holds_at(atDepth(Object, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  [(holds_at(neg(atDepth(Object, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Object, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).
axiom(holds_at(neg(holding(Diver, Object)), Time),
   
    [  (holds_at(neg(atDepth(Object, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Object, Depth), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  holds_at(atDepth(Object, Depth), Time) :-
       holds_at(atDepth(Diver, Depth), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Object, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).
axiom(holds_at(atDepth(Object, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  not(holds_at(atDepth(Diver, Depth), Time)) :-
       not(holds_at(atDepth(Object, Depth), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  [holds_at(neg(atDepth(Object, Depth)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).
axiom(holds_at(neg(atDepth(Diver, Depth)), Time),
   
    [ holds_at(neg(atDepth(Object, Depth)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       holds_at(atDepth(Object, Depth), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  [holds_at(atDepth(Object, Depth), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).
axiom(holds_at(atDepth(Diver, Depth), Time),
   
    [ holds_at(atDepth(Object, Depth), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  not(holds_at(atDepth(Object, Depth), Time)) :-
       not(holds_at(atDepth(Diver, Depth), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',92).
axiom(holds_at(neg(atDepth(Object, Depth)), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:95
% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:98
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  holds_at(wearing(Diver, Equipment), Time) ->
       ( holds_at(underWater(Diver), Time)<->holds_at(underWater(Equipment), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  not(holds_at(wearing(Diver, Equipment), Time)) :-
       (   not(holds_at(underWater(Equipment), Time)),
           holds_at(underWater(Diver), Time)
       ;   not(holds_at(underWater(Diver), Time)),
           holds_at(underWater(Equipment), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  [(holds_at(neg(underWater(Equipment)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Equipment), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wearing(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).
axiom(holds_at(neg(wearing(Diver, Equipment)), Time),
   
    [  (holds_at(neg(underWater(Equipment)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Equipment), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  holds_at(underWater(Equipment), Time) :-
       holds_at(underWater(Diver), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  [holds_at(underWater(Diver), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Equipment), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).
axiom(holds_at(underWater(Equipment), Time),
   
    [ holds_at(underWater(Diver), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  not(holds_at(underWater(Diver), Time)) :-
       not(holds_at(underWater(Equipment), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  [holds_at(neg(underWater(Equipment)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).
axiom(holds_at(neg(underWater(Diver)), Time),
   
    [ holds_at(neg(underWater(Equipment)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(underWater(Equipment), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  [holds_at(underWater(Equipment), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).
axiom(holds_at(underWater(Diver), Time),
   
    [ holds_at(underWater(Equipment), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  not(holds_at(underWater(Equipment), Time)) :-
       not(holds_at(underWater(Diver), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).

 /*  [holds_at(neg(underWater(Diver)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',97).
axiom(holds_at(neg(underWater(Equipment)), Time),
   
    [ holds_at(neg(underWater(Diver)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:100
% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:103
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  holds_at(holding(Diver, Object), Time) ->
       ( holds_at(underWater(Diver), Time)<->holds_at(underWater(Object), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  not(holds_at(holding(Diver, Object), Time)) :-
       (   not(holds_at(underWater(Object), Time)),
           holds_at(underWater(Diver), Time)
       ;   not(holds_at(underWater(Diver), Time)),
           holds_at(underWater(Object), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  [(holds_at(neg(underWater(Object)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).
axiom(holds_at(neg(holding(Diver, Object)), Time),
   
    [  (holds_at(neg(underWater(Object)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  holds_at(underWater(Object), Time) :-
       holds_at(underWater(Diver), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  [holds_at(underWater(Diver), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).
axiom(holds_at(underWater(Object), Time),
   
    [ holds_at(underWater(Diver), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  not(holds_at(underWater(Diver), Time)) :-
       not(holds_at(underWater(Object), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  [holds_at(neg(underWater(Object)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).
axiom(holds_at(neg(underWater(Diver)), Time),
   
    [ holds_at(neg(underWater(Object)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(underWater(Object), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  [holds_at(underWater(Object), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).
axiom(holds_at(underWater(Diver), Time),
   
    [ holds_at(underWater(Object), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  not(holds_at(underWater(Object), Time)) :-
       not(holds_at(underWater(Diver), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).

 /*  [holds_at(neg(underWater(Diver)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',102).
axiom(holds_at(neg(underWater(Object)), Time),
   
    [ holds_at(neg(underWater(Diver)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:105
% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:108
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',107).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Diver, Equipment),
                    atDepth(Equipment, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',107).
axiom(initiates(takeOff(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:110
% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:113
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',112).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Equipment),
                     atDepth(Equipment, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',112).
axiom(terminates(takeOff(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:115
% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:117

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Diver, Equipment),
                    underWater(Equipment),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',117).
axiom(initiates(takeOff(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:119
% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:121

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Equipment),
                     underWater(Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',121).
axiom(terminates(takeOff(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:123
% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:126
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',125).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lose(Diver, Equipment),
                    atDepth(Equipment, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',125).
axiom(initiates(lose(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:128
% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:131
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',130).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lose(Diver, Equipment),
                     atDepth(Equipment, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',130).
axiom(terminates(lose(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:133
% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:135

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lose(Diver, Equipment),
                    underWater(Equipment),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',135).
axiom(initiates(lose(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:137
% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:139

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lose(Diver, Equipment),
                     underWater(Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',139).
axiom(terminates(lose(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(neg(underWater(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:141
% fluent Holding(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',141).
fluent(holding(Holding_Param,Holding_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',141).
==> mpred_prop(holding(diver,object),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',141).
==> meta_argtypes(holding(diver,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:143
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:145
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).

 /*  holds_at(holding(Diver1, Diver2), Time) ->
       holds_at(neg(holding(Diver2, Diver1)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).

 /*  holds_at(neg(holding(Diver2, Diver1)), Time) :-
       holds_at(holding(Diver1, Diver2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).

 /*  [holds_at(holding(Diver1, Diver2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver2, Diver1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).
axiom(holds_at(neg(holding(Diver2, Diver1)), Time),
    [holds_at(holding(Diver1, Diver2), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).

 /*  not(holds_at(holding(Diver1, Diver2), Time)) :-
       not(holds_at(neg(holding(Diver2, Diver1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).

 /*  [holds_at(holding(Diver2, Diver1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver1, Diver2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',144).
axiom(holds_at(neg(holding(Diver1, Diver2)), Time),
    [holds_at(holding(Diver2, Diver1), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:147
% event Grab(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',147).
event(grab(Grab_Param,Grab_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',147).
==> mpred_prop(grab(diver,object),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',147).
==> meta_argtypes(grab(diver,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:149
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',150).
% event LetGoOf(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',150).
event(letGoOf(LetGoOf_Param,LetGoOf_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',150).
==> mpred_prop(letGoOf(diver,object),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',150).
==> meta_argtypes(letGoOf(diver,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:151
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',152).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',152).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(grab(Diver, Object),
                    holding(Diver, Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',152).
axiom(initiates(grab(Diver, Object), holding(Diver, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:154
% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',156).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Diver, Object),
                     holding(Diver, Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',156).
axiom(terminates(letGoOf(Diver, Object), holding(Diver, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',158).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',158).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(grab(Diver, Object),
                   atDepth(Object, Depth),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',158).
axiom(releases(grab(Diver, Object), atDepth(Object, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:160
% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',162).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(grab(Diver, Object),
                   underWater(Object),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',162).
axiom(releases(grab(Diver, Object), underWater(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:163
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',164).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:166
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',164).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Diver, Object),
                    atDepth(Object, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',164).
axiom(initiates(letGoOf(Diver, Object), atDepth(Object, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:168
% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:171
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',170).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Diver, Object),
                     atDepth(Object, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',170).
axiom(terminates(letGoOf(Diver, Object), atDepth(Object, Depth), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:173
% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:175

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Diver, Object),
                    underWater(Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',175).
axiom(initiates(letGoOf(Diver, Object), underWater(Object), Time),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:177
% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:179

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Diver, Object),
                     underWater(Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',179).
axiom(terminates(letGoOf(Diver, Object), underWater(Object), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:181
% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',183).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(putOn(Diver, Equipment),
                    wearing(Diver, Equipment),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',183).
axiom(initiates(putOn(Diver, Equipment), wearing(Diver, Equipment), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:184
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:186
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).

 /*  happens(putOn(Diver, Equipment), Time) ->
       holds_at(neg(underWater(Diver)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).

 /*  holds_at(neg(underWater(Diver)), Time) :-
       happens(putOn(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).

 /*  [holds_at(metreqs(putOn(Diver, Equipment)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(putOn(Diver, Equipment), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).
axiom(requires(putOn(Diver, Equipment), Time),
    [holds_at(metreqs(putOn(Diver, Equipment)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(putOn(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).
axiom(holds_at(requirements(putOn(Diver, Equipment)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).

 /*  not(happens(putOn(Diver, Equipment), Time)) :-
       not(holds_at(neg(underWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putOn(Diver, Equipment), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',185).
axiom(not(happens(putOn(Diver, Equipment), Time)),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:188
% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',190).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Equipment),
                     wearing(Diver, Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',190).
axiom(terminates(takeOff(Diver, Equipment), wearing(Diver, Equipment), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:191
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',192).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',192).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lose(Diver, Equipment),
                     wearing(Diver, Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',192).
axiom(terminates(lose(Diver, Equipment), wearing(Diver, Equipment), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:194
% fluent Vertical(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',194).
fluent(vertical(Vertical_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',194).
==> mpred_prop(vertical(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',194).
==> meta_argtypes(vertical(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',197).
% fluent HorizontalDown(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',197).
fluent(horizontalDown(HorizontalDown_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',197).
==> mpred_prop(horizontalDown(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',197).
==> meta_argtypes(horizontalDown(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:198
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',199).
% fluent Inverted(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',199).
fluent(inverted(Inverted_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',199).
==> mpred_prop(inverted(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',199).
==> meta_argtypes(inverted(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:200
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',201).
% fluent HorizontalUp(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',201).
fluent(horizontalUp(HorizontalUp_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',201).
==> mpred_prop(horizontalUp(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',201).
==> meta_argtypes(horizontalUp(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',203).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',203).
==> xor([vertical,horizontalDown,inverted,horizontalUp]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:204
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',205).
% event RotatePitch(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',205).
event(rotatePitch(RotatePitch_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',205).
==> mpred_prop(rotatePitch(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',205).
==> meta_argtypes(rotatePitch(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:206
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',207).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:208
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',207).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver),
                    horizontalDown(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',207).
axiom(initiates(rotatePitch(Diver), horizontalDown(Diver), Time),
    [holds_at(vertical(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:210
% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:212

 /*  [holds_at(horizontalDown(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver), inverted(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',212).
axiom(initiates(rotatePitch(Diver), inverted(Diver), Time),
    [holds_at(horizontalDown(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:214
% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:216

 /*  [holds_at(horizontalDown(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rotatePitch(Diver),
                     horizontalDown(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',216).
axiom(terminates(rotatePitch(Diver), horizontalDown(Diver), Time),
    [holds_at(horizontalDown(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:218
% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:220

 /*  [holds_at(inverted(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver),
                    horizontalUp(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',220).
axiom(initiates(rotatePitch(Diver), horizontalUp(Diver), Time),
    [holds_at(inverted(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:222
% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:224

 /*  [holds_at(inverted(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rotatePitch(Diver), inverted(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',224).
axiom(terminates(rotatePitch(Diver), inverted(Diver), Time),
    [holds_at(inverted(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:226
% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:228

 /*  [holds_at(horizontalUp(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver), vertical(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',228).
axiom(initiates(rotatePitch(Diver), vertical(Diver), Time),
    [holds_at(horizontalUp(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:230
% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:232

 /*  [holds_at(horizontalUp(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rotatePitch(Diver),
                     horizontalUp(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',232).
axiom(terminates(rotatePitch(Diver), horizontalUp(Diver), Time),
    [holds_at(horizontalUp(Diver), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:234
% event RotateYaw(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',234).
event(rotateYaw(RotateYaw_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',234).
==> mpred_prop(rotateYaw(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',234).
==> meta_argtypes(rotateYaw(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:236
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',237).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:241
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  happens(ascend1(Diver), Time), not(happens(rapidAscendToSurface(Diver), Time)), not(exists([Diver1], holds_at(holding(Diver, Diver1), Time))) ->
       happens(rotateYaw(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  happens(rotateYaw(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(rapidAscendToSurface(Diver), Time)),
       not(holds_at(holding(Diver, Diver1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  [happens(ascend1(Diver), Time), not(happens(rapidAscendToSurface(Diver), Time)), holds_at(neg(holding(Diver, Diver1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).
axiom(happens(rotateYaw(Diver), Time),
   
    [ happens(ascend1(Diver), Time),
      not(happens(rapidAscendToSurface(Diver), Time)),
      holds_at(neg(holding(Diver, Diver1)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  not(happens(ascend1(Diver), Time)) :-
       ( not(happens(rapidAscendToSurface(Diver), Time)),
         not(holds_at(holding(Diver, Diver1), Time))
       ),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  [not(happens(rapidAscendToSurface(Diver), Time)), holds_at(neg(holding(Diver, Diver1)), Time), not(happens(rotateYaw(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).
axiom(not(happens(ascend1(Diver), Time)),
   
    [ not(happens(rapidAscendToSurface(Diver), Time)),
      holds_at(neg(holding(Diver, Diver1)), Time),
      not(happens(rotateYaw(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  happens(rapidAscendToSurface(Diver), Time) :-
       not(holds_at(holding(Diver, Diver1), Time)),
       happens(ascend1(Diver), Time),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  [holds_at(neg(holding(Diver, Diver1)), Time), happens(ascend1(Diver), Time), not(happens(rotateYaw(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(rapidAscendToSurface(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).
axiom(happens(rapidAscendToSurface(Diver), Time),
   
    [ holds_at(neg(holding(Diver, Diver1)), Time),
      happens(ascend1(Diver), Time),
      not(happens(rotateYaw(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  holds_at(holding(Diver, Diver1), Time) :-
       not(happens(rapidAscendToSurface(Diver), Time)),
       happens(ascend1(Diver), Time),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).

 /*  [not(happens(rapidAscendToSurface(Diver), Time)), happens(ascend1(Diver), Time), not(happens(rotateYaw(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(holding(Diver, Diver1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',239).
axiom(holds_at(holding(Diver, Diver1), Time),
   
    [ not(happens(rapidAscendToSurface(Diver), Time)),
      happens(ascend1(Diver), Time),
      not(happens(rotateYaw(Diver), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:243
% fluent UnderWater(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',243).
fluent(underWater(UnderWater_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',243).
==> mpred_prop(underWater(object),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',243).
==> meta_argtypes(underWater(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:245
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:248
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).

 /*  Depth>0, holds_at(atDepth(Object, Depth), Time) ->
       holds_at(underWater(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).

 /*  holds_at(underWater(Object), Time) :-
       comparison(Depth, 0, >),
       holds_at(atDepth(Object, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).

 /*  [comparison(Depth, 0, >), holds_at(atDepth(Object, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).
axiom(holds_at(underWater(Object), Time),
   
    [ comparison(Depth, 0, >),
      holds_at(atDepth(Object, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).

 /*  not(holds_at(atDepth(Object, Depth), Time)) :-
       comparison(Depth, 0, >),
       not(holds_at(underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).

 /*  [comparison(Depth, 0, >), holds_at(neg(underWater(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',246).
axiom(holds_at(neg(atDepth(Object, Depth)), Time),
   
    [ comparison(Depth, 0, >),
      holds_at(neg(underWater(Object)), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:250
% event EnterWater(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',250).
event(enterWater(EnterWater_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',250).
==> mpred_prop(enterWater(object),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',250).
==> meta_argtypes(enterWater(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:252
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',253).
% event Surface(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',253).
event(surface(Surface_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',253).
==> mpred_prop(surface(object),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',253).
==> meta_argtypes(surface(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:254
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',255).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',255).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(enterWater(Object), underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',255).
axiom(initiates(enterWater(Object), underWater(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:257
% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:259

 /*  happens(enterWater(Diver), Time) ->
       not(exists([Diver1],
                  holds_at(holding(Diver1, Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).

 /*  not(holds_at(holding(Diver1, Diver), Time)) :-
       happens(enterWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).

 /*  [holds_at(metreqs(enterWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(enterWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).
axiom(requires(enterWater(Diver), Time),
    [holds_at(metreqs(enterWater(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).

 /*  [holds_at(neg(holding(Diver1, Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(enterWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).
axiom(holds_at(requirements(enterWater(Diver)), Time),
    [holds_at(neg(holding(Diver1, Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).

 /*  not(happens(enterWater(Diver), Time)) :-
       holds_at(holding(Diver1, Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).

 /*  [holds_at(holding(Diver1, Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(enterWater(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',259).
axiom(not(happens(enterWater(Diver), Time)),
    [holds_at(holding(Diver1, Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:261
% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:263

 /*  [equals(Depth, 0)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(enterWater(Object),
                    atDepth(Object, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',263).
axiom(initiates(enterWater(Object), atDepth(Object, Depth), Time),
    [equals(Depth, 0)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:265
% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',267).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Object), underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',267).
axiom(terminates(surface(Object), underWater(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:268
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',269).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',269).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Diver),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',269).
axiom(terminates(surface(Diver), positivelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:271
% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',273).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Diver),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',273).
axiom(terminates(surface(Diver), negativelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:274
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',275).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',275).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Diver),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',275).
axiom(terminates(surface(Diver), neutrallyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:277
% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',279).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Object),
                     atDepth(Object, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',279).
axiom(terminates(surface(Object), atDepth(Object, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:280
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).

 /*  happens(enterWater(Diver), Time) ->
       holds_at(vertical(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).

 /*  holds_at(vertical(Diver), Time) :-
       happens(enterWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).

 /*  [holds_at(metreqs(enterWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(enterWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).
axiom(requires(enterWater(Diver), Time),
    [holds_at(metreqs(enterWater(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(enterWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).
axiom(holds_at(requirements(enterWater(Diver)), Time),
    [holds_at(vertical(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).

 /*  not(happens(enterWater(Diver), Time)) :-
       not(holds_at(vertical(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).

 /*  [holds_at(neg(vertical(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(enterWater(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',281).
axiom(not(happens(enterWater(Diver), Time)),
    [holds_at(neg(vertical(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:283
% fluent StandingOn(diver,boat)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',283).
fluent(standingOn(StandingOn_Param,StandingOn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',283).
==> mpred_prop(standingOn(diver,boat),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',283).
==> meta_argtypes(standingOn(diver,boat)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:285
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',286).
% event StandOn(diver,boat)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',286).
event(standOn(StandOn_Param,StandOn_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',286).
==> mpred_prop(standOn(diver,boat),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',286).
==> meta_argtypes(standOn(diver,boat)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:287
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',288).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',288).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(enterWater(Diver),
                     standingOn(Diver, Boat),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',288).
axiom(terminates(enterWater(Diver), standingOn(Diver, Boat), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:290
% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',292).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(standOn(Diver, Boat),
                    standingOn(Diver, Boat),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',292).
axiom(initiates(standOn(Diver, Boat), standingOn(Diver, Boat), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:293
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',294).
% fluent PositivelyBuoyant(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',294).
fluent(positivelyBuoyant(PositivelyBuoyant_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',294).
==> mpred_prop(positivelyBuoyant(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',294).
==> meta_argtypes(positivelyBuoyant(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:295
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',296).
% fluent NeutrallyBuoyant(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',296).
fluent(neutrallyBuoyant(NeutrallyBuoyant_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',296).
==> mpred_prop(neutrallyBuoyant(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',296).
==> meta_argtypes(neutrallyBuoyant(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:297
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',298).
% fluent NegativelyBuoyant(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',298).
fluent(negativelyBuoyant(NegativelyBuoyant_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',298).
==> mpred_prop(negativelyBuoyant(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',298).
==> meta_argtypes(negativelyBuoyant(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:299
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',300).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',300).
mutex(positivelyBuoyant).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',300).
mutex(neutrallyBuoyant).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',300).
mutex(negativelyBuoyant).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:301
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:303
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).

 /*  holds_at(positivelyBuoyant(Diver), Time) ->
       holds_at(underWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(positivelyBuoyant(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).

 /*  [holds_at(positivelyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).
axiom(holds_at(underWater(Diver), Time),
    [holds_at(positivelyBuoyant(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).

 /*  not(holds_at(positivelyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(positivelyBuoyant(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',302).
axiom(holds_at(neg(positivelyBuoyant(Diver)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:305
% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:307

 /*  holds_at(neutrallyBuoyant(Diver), Time) ->
       holds_at(underWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',307).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(neutrallyBuoyant(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',307).

 /*  [holds_at(neutrallyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',307).
axiom(holds_at(underWater(Diver), Time),
    [holds_at(neutrallyBuoyant(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',307).

 /*  not(holds_at(neutrallyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',307).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(neutrallyBuoyant(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',307).
axiom(holds_at(neg(neutrallyBuoyant(Diver)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:309
% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:311

 /*  holds_at(negativelyBuoyant(Diver), Time) ->
       holds_at(underWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',311).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(negativelyBuoyant(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',311).

 /*  [holds_at(negativelyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',311).
axiom(holds_at(underWater(Diver), Time),
    [holds_at(negativelyBuoyant(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',311).

 /*  not(holds_at(negativelyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',311).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(negativelyBuoyant(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',311).
axiom(holds_at(neg(negativelyBuoyant(Diver)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:313
% event PressDeflateButton(diver,bc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',313).
event(pressDeflateButton(PressDeflateButton_Param,
			 PressDeflateButton_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',313).
==> mpred_prop(pressDeflateButton(diver,bc),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',313).
==> meta_argtypes(pressDeflateButton(diver,bc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:315
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',316).
% event PressDumpButton(diver,bc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',316).
event(pressDumpButton(PressDumpButton_Param,
		      PressDumpButton_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',316).
==> mpred_prop(pressDumpButton(diver,bc),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',316).
==> meta_argtypes(pressDumpButton(diver,bc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:317
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',318).
% event PressInflateButton(diver,bc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',318).
event(pressInflateButton(PressInflateButton_Param,
			 PressInflateButton_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',318).
==> mpred_prop(pressInflateButton(diver,bc),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',318).
==> meta_argtypes(pressInflateButton(diver,bc)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:319
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:322
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  happens(pressDeflateButton(Diver, Bc), Time) ->
       holds_at(vertical(Diver), Time),
       holds_at(underWater(Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  not(happens(pressDeflateButton(Diver, Bc), Time)) :-
       (   not(holds_at(vertical(Diver), Time))
       ;   not(holds_at(underWater(Bc), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  [(holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pressDeflateButton(Diver, Bc), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).
axiom(not(happens(pressDeflateButton(Diver, Bc), Time)),
   
    [  (holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  holds_at(vertical(Diver), Time) :-
       happens(pressDeflateButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDeflateButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).
axiom(requires(pressDeflateButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(pressDeflateButton(Diver, Bc)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).
axiom(holds_at(requirements(pressDeflateButton(Diver, Bc)), Time),
    [holds_at(vertical(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  holds_at(underWater(Bc), Time) :-
       happens(pressDeflateButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDeflateButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).
axiom(requires(pressDeflateButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).

 /*  [holds_at(underWater(Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(pressDeflateButton(Diver, Bc)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',320).
axiom(holds_at(requirements(pressDeflateButton(Diver, Bc)), Time),
    [holds_at(underWater(Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:324
% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  happens(pressDumpButton(Diver, Bc), Time) ->
       holds_at(vertical(Diver), Time),
       holds_at(underWater(Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  not(happens(pressDumpButton(Diver, Bc), Time)) :-
       (   not(holds_at(vertical(Diver), Time))
       ;   not(holds_at(underWater(Bc), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  [(holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pressDumpButton(Diver, Bc), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).
axiom(not(happens(pressDumpButton(Diver, Bc), Time)),
   
    [  (holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  holds_at(vertical(Diver), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDumpButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).
axiom(requires(pressDumpButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(pressDumpButton(Diver, Bc)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).
axiom(holds_at(requirements(pressDumpButton(Diver, Bc)), Time),
    [holds_at(vertical(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  holds_at(underWater(Bc), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDumpButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).
axiom(requires(pressDumpButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).

 /*  [holds_at(underWater(Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(pressDumpButton(Diver, Bc)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',326).
axiom(holds_at(requirements(pressDumpButton(Diver, Bc)), Time),
    [holds_at(underWater(Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:329
% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).

 /*  happens(pressDumpButton(Diver, Bc), Time) ->
       holds_at(uncontrolledBuoyancy(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).

 /*  holds_at(uncontrolledBuoyancy(Diver), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).

 /*  [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDumpButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).
axiom(requires(pressDumpButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).

 /*  [holds_at(uncontrolledBuoyancy(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(pressDumpButton(Diver, Bc)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).
axiom(holds_at(requirements(pressDumpButton(Diver, Bc)), Time),
    [holds_at(uncontrolledBuoyancy(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).

 /*  not(happens(pressDumpButton(Diver, Bc), Time)) :-
       not(holds_at(uncontrolledBuoyancy(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).

 /*  [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pressDumpButton(Diver, Bc), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',329).
axiom(not(happens(pressDumpButton(Diver, Bc), Time)),
    [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:332
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:334

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pressDeflateButton(Diver, Bc),
                    negativelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',334).
axiom(initiates(pressDeflateButton(Diver, Bc), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:336
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:338

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDeflateButton(Diver, Bc),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',338).
axiom(terminates(pressDeflateButton(Diver, Bc), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:340
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:342

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDeflateButton(Diver, Bc),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',342).
axiom(terminates(pressDeflateButton(Diver, Bc), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:344
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:346

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pressDumpButton(Diver, Bc),
                    negativelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',346).
axiom(initiates(pressDumpButton(Diver, Bc), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:348
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:350

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDumpButton(Diver, Bc),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',350).
axiom(terminates(pressDumpButton(Diver, Bc), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:352
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:354

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDumpButton(Diver, Bc),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',354).
axiom(terminates(pressDumpButton(Diver, Bc), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:356
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:358

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pressInflateButton(Diver, Bc),
                    neutrallyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',358).
axiom(initiates(pressInflateButton(Diver, Bc), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:360
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:362

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressInflateButton(Diver, Bc),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',362).
axiom(terminates(pressInflateButton(Diver, Bc), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:364
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:366

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressInflateButton(Diver, Bc),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',366).
axiom(terminates(pressInflateButton(Diver, Bc), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:368
% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:370

 /*  [holds_at(wearing(Diver, Weight), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Diver, Weight),
                    positivelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',370).
axiom(initiates(takeOff(Diver, Weight), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Weight), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:372
% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:374

 /*  [holds_at(wearing(Diver, Weight), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Weight),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',374).
axiom(terminates(takeOff(Diver, Weight), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Weight), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:376
% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:378

 /*  [holds_at(wearing(Diver, Weight), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Weight),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',378).
axiom(terminates(takeOff(Diver, Weight), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Weight), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:380
% fluent UncontrolledBuoyancy(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',380).
fluent(uncontrolledBuoyancy(UncontrolledBuoyancy_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',380).
==> mpred_prop(uncontrolledBuoyancy(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',380).
==> meta_argtypes(uncontrolledBuoyancy(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:382
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',383).
% event LoseBuoyancyControl(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',383).
event(loseBuoyancyControl(LoseBuoyancyControl_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',383).
==> mpred_prop(loseBuoyancyControl(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',383).
==> meta_argtypes(loseBuoyancyControl(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:384
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',385).
% predicate IsInexperiencedDiver(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',385).
predicate(isInexperiencedDiver(IsInexperiencedDiver_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',385).
==> mpred_prop(isInexperiencedDiver(diver),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',385).
==> meta_argtypes(isInexperiencedDiver(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:386
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:388
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).

 /*  happens(loseBuoyancyControl(Diver), Time) ->
       isInexperiencedDiver(Diver).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).

 /*  isInexperiencedDiver(Diver) :-
       happens(loseBuoyancyControl(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).

 /*  [holds_at(metreqs(loseBuoyancyControl(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(loseBuoyancyControl(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).
axiom(requires(loseBuoyancyControl(Diver), Time),
    [holds_at(metreqs(loseBuoyancyControl(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).

 /*  [isInexperiencedDiver(Diver)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(loseBuoyancyControl(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).
axiom(holds_at(requirements(loseBuoyancyControl(Diver)), Time),
    [isInexperiencedDiver(Diver)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).

 /*  not(happens(loseBuoyancyControl(Diver), Time)) :-
       not(isInexperiencedDiver(Diver)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).

 /*  [not(isInexperiencedDiver(Diver))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(loseBuoyancyControl(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',387).
axiom(not(happens(loseBuoyancyControl(Diver), Time)),
    [not(isInexperiencedDiver(Diver))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:390
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',392).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(loseBuoyancyControl(Diver),
                    uncontrolledBuoyancy(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',392).
axiom(initiates(loseBuoyancyControl(Diver), uncontrolledBuoyancy(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:393
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',394).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',394).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(loseBuoyancyControl(Diver),
                    positivelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',394).
axiom(initiates(loseBuoyancyControl(Diver), positivelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:396
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',398).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(loseBuoyancyControl(Diver),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',398).
axiom(terminates(loseBuoyancyControl(Diver), negativelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:399
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',400).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',400).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(loseBuoyancyControl(Diver),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',400).
axiom(terminates(loseBuoyancyControl(Diver), neutrallyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:402
%; determining fluent

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:403
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',404).
% fluent AscendDescendAmount(diver,depth)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',404).
fluent(ascendDescendAmount(AscendDescendAmount_Param,
			   AscendDescendAmount_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',404).
==> mpred_prop(ascendDescendAmount(diver,depth),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',404).
==> meta_argtypes(ascendDescendAmount(diver,depth)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:404
% noninertial AscendDescendAmount
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',404).
==> noninertial(ascendDescendAmount).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:406
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:409
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(ascendDescendAmount(Diver, Depth2), Time) ->
       equals(Depth1, Depth2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).

 /*  not(holds_at(ascendDescendAmount(Diver, Depth1), Time)) :-
       holds_at(ascendDescendAmount(Diver, Depth2), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).

 /*  [holds_at(ascendDescendAmount(Diver, Depth2), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).
axiom(holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time),
   
    [ holds_at(ascendDescendAmount(Diver, Depth2), Time),
      not(equals(Depth1, Depth2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).

 /*  not(holds_at(ascendDescendAmount(Diver, Depth2), Time)) :-
       holds_at(ascendDescendAmount(Diver, Depth1), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).

 /*  [holds_at(ascendDescendAmount(Diver, Depth1), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ascendDescendAmount(Diver, Depth2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',407).
axiom(holds_at(neg(ascendDescendAmount(Diver, Depth2)), Time),
   
    [ holds_at(ascendDescendAmount(Diver, Depth1), Time),
      not(equals(Depth2, Depth1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:411
% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:416
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  happens(descend(Diver, Depth), Time) ->
       holds_at(negativelyBuoyant(Diver), Time),
       exists([Depth1],
               (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth-Depth1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  not(happens(descend(Diver, Depth), Time)) :-
       (   not(holds_at(negativelyBuoyant(Diver), Time))
       ;   not(holds_at(ascendDescendAmount(Diver, Depth1), Time))
       ;   not(holds_at(atDepth(Diver, Depth-Depth1),
                        Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [(holds_at(neg(negativelyBuoyant(Diver)), Time);holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth-Depth1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(not(happens(descend(Diver, Depth), Time)),
   
    [  (holds_at(neg(negativelyBuoyant(Diver)), Time);holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth-Depth1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  holds_at(negativelyBuoyant(Diver), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [holds_at(metreqs(descend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(requires(descend(Diver, Depth), Time),
    [holds_at(metreqs(descend(Diver, Depth)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [holds_at(negativelyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(descend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(holds_at(requirements(descend(Diver, Depth)), Time),
    [holds_at(negativelyBuoyant(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [holds_at(metreqs(descend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(requires(descend(Diver, Depth), Time),
    [holds_at(metreqs(descend(Diver, Depth)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [holds_at(ascendDescendAmount(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(descend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(holds_at(requirements(descend(Diver, Depth)), Time),
    [holds_at(ascendDescendAmount(Diver, Depth1), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  holds_at(atDepth(Diver, Depth-Depth1), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [holds_at(metreqs(descend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(requires(descend(Diver, Depth), Time),
    [holds_at(metreqs(descend(Diver, Depth)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).

 /*  [holds_at(atDepth(Diver, Depth-Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(descend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',413).
axiom(holds_at(requirements(descend(Diver, Depth)), Time),
    [holds_at(atDepth(Diver, Depth-Depth1), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:418
% event KickUp(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',418).
event(kickUp(KickUp_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',418).
==> mpred_prop(kickUp(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',418).
==> meta_argtypes(kickUp(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:420
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:426
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  happens(ascend(Diver, Depth), Time) ->
       (   holds_at(positivelyBuoyant(Diver), Time)
       ;   holds_at(neutrallyBuoyant(Diver), Time),
           happens(kickUp(Diver), Time)
       ),
       exists([Depth1],
               (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth+Depth1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  not(happens(ascend(Diver, Depth), Time)) :-
       (   not(holds_at(positivelyBuoyant(Diver), Time)),
           (   not(holds_at(neutrallyBuoyant(Diver), Time))
           ;   not(happens(kickUp(Diver), Time))
           )
       ;   not(holds_at(ascendDescendAmount(Diver, Depth1), Time))
       ;   not(holds_at(atDepth(Diver, Depth+Depth1),
                        Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [(holds_at(neg(positivelyBuoyant(Diver)), Time), (holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time)));holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth+Depth1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(not(happens(ascend(Diver, Depth), Time)),
   
    [  (holds_at(neg(positivelyBuoyant(Diver)), Time), (holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time)));holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth+Depth1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  holds_at(positivelyBuoyant(Diver), Time) :-
       (   not(holds_at(neutrallyBuoyant(Diver), Time))
       ;   not(happens(kickUp(Diver), Time))
       ),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [(holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time))), happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(positivelyBuoyant(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(holds_at(positivelyBuoyant(Diver), Time),
   
    [  (holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time))),
      happens(ascend(Diver, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  holds_at(neutrallyBuoyant(Diver), Time) :-
       not(holds_at(positivelyBuoyant(Diver), Time)),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [holds_at(neg(positivelyBuoyant(Diver)), Time), happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neutrallyBuoyant(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(holds_at(neutrallyBuoyant(Diver), Time),
   
    [ holds_at(neg(positivelyBuoyant(Diver)), Time),
      happens(ascend(Diver, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  happens(kickUp(Diver), Time) :-
       not(holds_at(positivelyBuoyant(Diver), Time)),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [holds_at(neg(positivelyBuoyant(Diver)), Time), happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(kickUp(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(happens(kickUp(Diver), Time),
   
    [ holds_at(neg(positivelyBuoyant(Diver)), Time),
      happens(ascend(Diver, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time) :-
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [holds_at(metreqs(ascend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(requires(ascend(Diver, Depth), Time),
    [holds_at(metreqs(ascend(Diver, Depth)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [holds_at(ascendDescendAmount(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(ascend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(holds_at(requirements(ascend(Diver, Depth)), Time),
    [holds_at(ascendDescendAmount(Diver, Depth1), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  holds_at(atDepth(Diver, Depth+Depth1), Time) :-
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [holds_at(metreqs(ascend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(requires(ascend(Diver, Depth), Time),
    [holds_at(metreqs(ascend(Diver, Depth)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).

 /*  [holds_at(atDepth(Diver, Depth+Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(ascend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',421).
axiom(holds_at(requirements(ascend(Diver, Depth)), Time),
    [holds_at(atDepth(Diver, Depth+Depth1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:428
% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:430

 /*  happens(kickUp(Diver), Time) ->
       holds_at(vertical(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).

 /*  holds_at(vertical(Diver), Time) :-
       happens(kickUp(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).

 /*  [holds_at(metreqs(kickUp(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(kickUp(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).
axiom(requires(kickUp(Diver), Time),
    [holds_at(metreqs(kickUp(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(kickUp(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).
axiom(holds_at(requirements(kickUp(Diver)), Time),
    [holds_at(vertical(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).

 /*  not(happens(kickUp(Diver), Time)) :-
       not(holds_at(vertical(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).

 /*  [holds_at(neg(vertical(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(kickUp(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',430).
axiom(not(happens(kickUp(Diver), Time)),
    [holds_at(neg(vertical(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:432
% event SwimAround(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',432).
event(swimAround(SwimAround_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',432).
==> mpred_prop(swimAround(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',432).
==> meta_argtypes(swimAround(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:434
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:436
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).

 /*  happens(swimAround(Diver), Time) ->
       holds_at(horizontalDown(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).

 /*  holds_at(horizontalDown(Diver), Time) :-
       happens(swimAround(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).

 /*  [holds_at(metreqs(swimAround(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(swimAround(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).
axiom(requires(swimAround(Diver), Time),
    [holds_at(metreqs(swimAround(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).

 /*  [holds_at(horizontalDown(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(swimAround(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).
axiom(holds_at(requirements(swimAround(Diver)), Time),
    [holds_at(horizontalDown(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).

 /*  not(happens(swimAround(Diver), Time)) :-
       not(holds_at(horizontalDown(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).

 /*  [holds_at(neg(horizontalDown(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(swimAround(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',435).
axiom(not(happens(swimAround(Diver), Time)),
    [holds_at(neg(horizontalDown(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:438
%; signaling

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:440
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',441).
% event SignalDescend(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',441).
event(signalDescend(SignalDescend_Param,SignalDescend_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',441).
==> mpred_prop(signalDescend(diver,diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',441).
==> meta_argtypes(signalDescend(diver,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:442
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',443).
% event SignalOutOfTime(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',443).
event(signalOutOfTime(SignalOutOfTime_Param,
		      SignalOutOfTime_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',443).
==> mpred_prop(signalOutOfTime(diver,diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',443).
==> meta_argtypes(signalOutOfTime(diver,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:444
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',445).
% event SignalAscend(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',445).
event(signalAscend(SignalAscend_Param,SignalAscend_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',445).
==> mpred_prop(signalAscend(diver,diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',445).
==> meta_argtypes(signalAscend(diver,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:446
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',447).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:478
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',479).
% event Descend1(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',479).
event(descend1(Descend1_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',479).
==> mpred_prop(descend1(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',479).
==> meta_argtypes(descend1(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:480
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',481).
% event Ascend1(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',481).
event(ascend1(Ascend1_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',481).
==> mpred_prop(ascend1(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',481).
==> meta_argtypes(ascend1(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:482
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',483).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:491
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',492).
% event RapidAscendToSurface(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',492).
event(rapidAscendToSurface(RapidAscendToSurface_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',492).
==> mpred_prop(rapidAscendToSurface(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',492).
==> meta_argtypes(rapidAscendToSurface(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:493
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:495
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  happens(descend1(Diver), Time) <->
       exists([Depth], happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  [happens, descend1] <->
       [exists, happens, descend].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  happens(descend1(Diver), Time) ->
       exists([Depth], happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  happens(descend(Diver, Depth), Time) :-
       happens(descend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  [happens(descend1(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).
axiom(happens(descend(Diver, Depth), Time),
    [happens(descend1(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  not(happens(descend1(Diver), Time)) :-
       not(happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  [not(happens(descend(Diver, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).
axiom(not(happens(descend1(Diver), Time)),
    [not(happens(descend(Diver, Depth), Time))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  exists([Depth], happens(descend(Diver, Depth), Time)) ->
       happens(descend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  happens(descend1(Diver), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  [happens(descend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(descend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).
axiom(happens(descend1(Diver), Time),
    [happens(descend(Diver, Depth), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  not(happens(descend(Diver, Depth), Time)) :-
       not(happens(descend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).

 /*  [not(happens(descend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',494).
axiom(not(happens(descend(Diver, Depth), Time)),
    [not(happens(descend1(Diver), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:497
% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:499

 /*  happens(ascend1(Diver), Time) <->
       exists([Depth], happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  [happens, ascend1] <->
       [exists, happens, ascend].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  happens(ascend1(Diver), Time) ->
       exists([Depth], happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  happens(ascend(Diver, Depth), Time) :-
       happens(ascend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  [happens(ascend1(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).
axiom(happens(ascend(Diver, Depth), Time),
    [happens(ascend1(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  [not(happens(ascend(Diver, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).
axiom(not(happens(ascend1(Diver), Time)),
    [not(happens(ascend(Diver, Depth), Time))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  exists([Depth], happens(ascend(Diver, Depth), Time)) ->
       happens(ascend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  happens(ascend1(Diver), Time) :-
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  [happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).
axiom(happens(ascend1(Diver), Time),
    [happens(ascend(Diver, Depth), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  not(happens(ascend(Diver, Depth), Time)) :-
       not(happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).

 /*  [not(happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',499).
axiom(not(happens(ascend(Diver, Depth), Time)),
    [not(happens(ascend1(Diver), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:501
% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:503

 /*  happens(rapidAscendToSurface(Diver), Time) ->
       happens(ascend(Diver, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',503).

 /*  happens(ascend(Diver, 0), Time) :-
       happens(rapidAscendToSurface(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',503).

 /*  [happens(rapidAscendToSurface(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend(Diver, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',503).
axiom(happens(ascend(Diver, 0), Time),
    [happens(rapidAscendToSurface(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',503).

 /*  not(happens(rapidAscendToSurface(Diver), Time)) :-
       not(happens(ascend(Diver, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',503).

 /*  [not(happens(ascend(Diver, 0), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(rapidAscendToSurface(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',503).
axiom(not(happens(rapidAscendToSurface(Diver), Time)),
    [not(happens(ascend(Diver, 0), Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:505
% event AscendLine(diver,line)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',505).
event(ascendLine(AscendLine_Param,AscendLine_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',505).
==> mpred_prop(ascendLine(diver,line),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',505).
==> meta_argtypes(ascendLine(diver,line)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:507
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:509
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).

 /*  happens(ascendLine(Diver, Line), Time) ->
       happens(ascend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).

 /*  happens(ascend1(Diver), Time) :-
       happens(ascendLine(Diver, Line), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).

 /*  [happens(ascendLine(Diver, Line), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).
axiom(happens(ascend1(Diver), Time),
    [happens(ascendLine(Diver, Line), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).

 /*  not(happens(ascendLine(Diver, Line), Time)) :-
       not(happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).

 /*  [not(happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascendLine(Diver, Line), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',508).
axiom(not(happens(ascendLine(Diver, Line), Time)),
    [not(happens(ascend1(Diver), Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:511
% fluent Disoriented(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',511).
fluent(disoriented(Disoriented_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',511).
==> mpred_prop(disoriented(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',511).
==> meta_argtypes(disoriented(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:513
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',514).
% event BecomeDisoriented(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',514).
event(becomeDisoriented(BecomeDisoriented_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',514).
==> mpred_prop(becomeDisoriented(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',514).
==> meta_argtypes(becomeDisoriented(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:515
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',516).
% event BecomeReoriented(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',516).
event(becomeReoriented(BecomeReoriented_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',516).
==> mpred_prop(becomeReoriented(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',516).
==> meta_argtypes(becomeReoriented(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:517
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',518).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',518).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeDisoriented(Diver),
                    disoriented(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',518).
axiom(initiates(becomeDisoriented(Diver), disoriented(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:520
% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',522).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeReoriented(Diver),
                     disoriented(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',522).
axiom(terminates(becomeReoriented(Diver), disoriented(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:523
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',524).
% fluent DisturbedSilt()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',524).
fluent(disturbedSilt).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',524).
==> mpred_prop(disturbedSilt,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:525
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',526).
% event DisturbSilt(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',526).
event(disturbSilt(DisturbSilt_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',526).
==> mpred_prop(disturbSilt(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',526).
==> meta_argtypes(disturbSilt(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:527
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',528).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',528).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(disturbSilt(Diver), disturbedSilt, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',528).
axiom(initiates(disturbSilt(Diver), disturbedSilt, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:530
% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:533
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  happens(becomeDisoriented(Diver), Time) ->
       holds_at(neg(disturbedSilt), Time-1),
       holds_at(disturbedSilt, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  not(happens(becomeDisoriented(Diver), Time)) :-
       (   not(holds_at(neg(disturbedSilt), Time-1))
       ;   not(holds_at(disturbedSilt, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  [(holds_at(disturbedSilt, Time2);holds_at(neg(disturbedSilt), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          not(happens(becomeDisoriented(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).
axiom(not(happens(becomeDisoriented(Diver), Time)),
   
    [  (holds_at(disturbedSilt, Time2);holds_at(neg(disturbedSilt), Time)),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  holds_at(neg(disturbedSilt), Time-1) :-
       happens(becomeDisoriented(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  [holds_at(metreqs(becomeDisoriented(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeDisoriented(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).
axiom(requires(becomeDisoriented(Diver), Time),
    [holds_at(metreqs(becomeDisoriented(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  [holds_at(neg(disturbedSilt), Time4), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time4],
          holds_at(requirements(becomeDisoriented(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).
axiom(holds_at(requirements(becomeDisoriented(Diver)), Time),
    [holds_at(neg(disturbedSilt), Time4), b(Time4, Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  holds_at(disturbedSilt, Time) :-
       happens(becomeDisoriented(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  [holds_at(metreqs(becomeDisoriented(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeDisoriented(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).
axiom(requires(becomeDisoriented(Diver), Time),
    [holds_at(metreqs(becomeDisoriented(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).

 /*  [holds_at(disturbedSilt, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(becomeDisoriented(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',532).
axiom(holds_at(requirements(becomeDisoriented(Diver)), Time),
    [holds_at(disturbedSilt, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:535
% event Panic(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',535).
event(panic(Panic_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',535).
==> mpred_prop(panic(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',535).
==> meta_argtypes(panic(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:537
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:541
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  happens(panic(Diver), Time) ->
       (   holds_at(disoriented(Diver), Time)
       ;   holds_at(uncontrolledBuoyancy(Diver), Time)
       ;   exists([Equipment],
                  happens(lose(Diver, Equipment), Time-1))
       ;   happens(vomit(Diver), Time-1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  holds_at(disoriented(Diver), Time) :-
       ( not(holds_at(uncontrolledBuoyancy(Diver), Time)),
         not(happens(lose(Diver, Equipment), Time-1)),
         not(happens(vomit(Diver), Time-1))
       ),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  [holds_at(neg(uncontrolledBuoyancy(Diver)), Time), not(happens(lose(Diver, Equipment), Maptime)), not(happens(vomit(Diver), Maptime)), happens(panic(Diver), Time), b(Maptime, Time), ignore(Time-1==Maptime)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime],
          holds_at(disoriented(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).
axiom(holds_at(disoriented(Diver), Time),
   
    [ holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      not(happens(lose(Diver, Equipment), Maptime)),
      not(happens(vomit(Diver), Maptime)),
      happens(panic(Diver), Time),
      b(Maptime, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  holds_at(uncontrolledBuoyancy(Diver), Time) :-
       ( not(happens(lose(Diver, Equipment), Time-1)),
         not(happens(vomit(Diver), Time-1))
       ),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  [not(happens(lose(Diver, Equipment), Maptime4)), not(happens(vomit(Diver), Maptime4)), holds_at(neg(disoriented(Diver)), Time), happens(panic(Diver), Time), b(Maptime4, Time), ignore(Time-1==Maptime4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime4],
          holds_at(uncontrolledBuoyancy(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).
axiom(holds_at(uncontrolledBuoyancy(Diver), Time),
   
    [ not(happens(lose(Diver, Equipment), Maptime4)),
      not(happens(vomit(Diver), Maptime4)),
      holds_at(neg(disoriented(Diver)), Time),
      happens(panic(Diver), Time),
      b(Maptime4, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  happens(lose(Diver, Equipment), Time-1) :-
       not(happens(vomit(Diver), Time-1)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  [not(happens(vomit(Diver), Maptime5)), holds_at(neg(uncontrolledBuoyancy(Diver)), Time), holds_at(neg(disoriented(Diver)), Time), happens(panic(Diver), Time), b(Maptime5, Time), ignore(Time-1==Maptime5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime5],
          happens(lose(Diver, Equipment), Maptime5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).
axiom(happens(lose(Diver, Equipment), Maptime5),
   
    [ not(happens(vomit(Diver), Maptime5)),
      holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      holds_at(neg(disoriented(Diver)), Time),
      happens(panic(Diver), Time),
      b(Maptime5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  happens(vomit(Diver), Time-1) :-
       not(happens(lose(Diver, Equipment), Time-1)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  [not(happens(lose(Diver, Equipment), Maptime6)), holds_at(neg(uncontrolledBuoyancy(Diver)), Time), holds_at(neg(disoriented(Diver)), Time), happens(panic(Diver), Time), b(Maptime6, Time), ignore(Time-1==Maptime6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime6],
          happens(vomit(Diver), Maptime6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).
axiom(happens(vomit(Diver), Maptime6),
   
    [ not(happens(lose(Diver, Equipment), Maptime6)),
      holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      holds_at(neg(disoriented(Diver)), Time),
      happens(panic(Diver), Time),
      b(Maptime6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  not(happens(panic(Diver), Time)) :-
       not(holds_at(disoriented(Diver), Time)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(happens(lose(Diver, Equipment), Time-1)),
       not(happens(vomit(Diver), Time-1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).

 /*  [holds_at(neg(disoriented(Diver)), Time), holds_at(neg(uncontrolledBuoyancy(Diver)), Time), not(happens(lose(Diver, Equipment), Maptime7)), not(happens(vomit(Diver), Maptime7)), b(Maptime7, Time), ignore(Time-1==Maptime7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime7],
          not(happens(panic(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',538).
axiom(not(happens(panic(Diver), Time)),
   
    [ holds_at(neg(disoriented(Diver)), Time),
      holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      not(happens(lose(Diver, Equipment), Maptime7)),
      not(happens(vomit(Diver), Maptime7)),
      b(Maptime7, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:543
% event Vomit(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',543).
event(vomit(Vomit_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',543).
==> mpred_prop(vomit(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',543).
==> meta_argtypes(vomit(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:545
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',546).
%; conditions

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:547
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',548).
% fluent Unconscious(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',548).
fluent(unconscious(Unconscious_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',548).
==> mpred_prop(unconscious(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',548).
==> meta_argtypes(unconscious(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:549
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',550).
% event GoUnconscious(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',550).
event(goUnconscious(GoUnconscious_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',550).
==> mpred_prop(goUnconscious(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',550).
==> meta_argtypes(goUnconscious(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:551
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',552).
% event RegainConsciousness(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',552).
event(regainConsciousness(RegainConsciousness_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',552).
==> mpred_prop(regainConsciousness(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',552).
==> meta_argtypes(regainConsciousness(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:553
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',554).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',554).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(goUnconscious(Diver),
                    unconscious(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',554).
axiom(initiates(goUnconscious(Diver), unconscious(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:556
% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',558).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(regainConsciousness(Diver),
                     unconscious(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',558).
axiom(terminates(regainConsciousness(Diver), unconscious(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:559
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:561
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).

 /*  happens(goUnconscious(Diver), Time) ->
       happens(rapidAscendToSurface(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).

 /*  happens(rapidAscendToSurface(Diver), Time) :-
       happens(goUnconscious(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).

 /*  [happens(goUnconscious(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(rapidAscendToSurface(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).
axiom(happens(rapidAscendToSurface(Diver), Time),
    [happens(goUnconscious(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).

 /*  not(happens(goUnconscious(Diver), Time)) :-
       not(happens(rapidAscendToSurface(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).

 /*  [not(happens(rapidAscendToSurface(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(goUnconscious(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',560).
axiom(not(happens(goUnconscious(Diver), Time)),
    [not(happens(rapidAscendToSurface(Diver), Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:563
% fluent HasEarPain(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',563).
fluent(hasEarPain(HasEarPain_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',563).
==> mpred_prop(hasEarPain(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',563).
==> meta_argtypes(hasEarPain(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',566).
% event StartEarPain(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',566).
event(startEarPain(StartEarPain_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',566).
==> mpred_prop(startEarPain(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',566).
==> meta_argtypes(startEarPain(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:567
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',568).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',568).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startEarPain(Diver), hasEarPain(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',568).
axiom(initiates(startEarPain(Diver), hasEarPain(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:569
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',570).
% fluent HasRupturedEardrum(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',570).
fluent(hasRupturedEardrum(HasRupturedEardrum_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',570).
==> mpred_prop(hasRupturedEardrum(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',570).
==> meta_argtypes(hasRupturedEardrum(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:571
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',572).
% event RuptureEardrum(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',572).
event(ruptureEardrum(RuptureEardrum_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',572).
==> mpred_prop(ruptureEardrum(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',572).
==> meta_argtypes(ruptureEardrum(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',574).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',574).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(ruptureEardrum(Diver),
                    hasRupturedEardrum(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',574).
axiom(initiates(ruptureEardrum(Diver), hasRupturedEardrum(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',576).
% fluent ConditionOK(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',576).
fluent(conditionOK(ConditionOK_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',576).
==> mpred_prop(conditionOK(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',576).
==> meta_argtypes(conditionOK(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:577
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',578).
% fluent HasDecompressionIllness(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',578).
fluent(hasDecompressionIllness(HasDecompressionIllness_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',578).
==> mpred_prop(hasDecompressionIllness(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',578).
==> meta_argtypes(hasDecompressionIllness(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:579
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',580).
% event StartDecompressionIllness(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',580).
event(startDecompressionIllness(StartDecompressionIllness_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',580).
==> mpred_prop(startDecompressionIllness(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',580).
==> meta_argtypes(startDecompressionIllness(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:581
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',582).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:584
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',582).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startDecompressionIllness(Diver),
                    hasDecompressionIllness(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',582).
axiom(initiates(startDecompressionIllness(Diver), hasDecompressionIllness(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:586
% fluent SignalingDecompress(computer,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',586).
fluent(signalingDecompress(SignalingDecompress_Param,
			   SignalingDecompress_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',586).
==> mpred_prop(signalingDecompress(computer,diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',586).
==> meta_argtypes(signalingDecompress(computer,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:588
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',589).
% fluent SignalingLowOnAir(computer,airtank,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',589).
fluent(signalingLowOnAir(SignalingLowOnAir_Param,
			 _,
			 SignalingLowOnAir_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',589).
==> mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',589).
==> meta_argtypes(signalingLowOnAir(computer,airtank,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:590
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:592
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).

 /*  holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time) ->
       holds_at(lowOnAir(Airtank), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).

 /*  holds_at(lowOnAir(Airtank), Time) :-
       holds_at(signalingLowOnAir(Computer, Airtank, Diver),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).

 /*  [holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lowOnAir(Airtank), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).
axiom(holds_at(lowOnAir(Airtank), Time),
   
    [ holds_at(signalingLowOnAir(Computer, Airtank, Diver),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).

 /*  not(holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time)) :-
       not(holds_at(lowOnAir(Airtank), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).

 /*  [holds_at(neg(lowOnAir(Airtank)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(signalingLowOnAir(Computer,
                                         Airtank,
                                         Diver)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',591).
axiom(holds_at(neg(signalingLowOnAir(Computer, Airtank, Diver)), Time),
    [holds_at(neg(lowOnAir(Airtank)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:594
% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:596

 /*  holds_at(signalingDecompress(Computer, Diver), Time) ->
       not(exists([Time1],
                   (Time1<Time, happens(decompress(Diver), Time1)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',596).

 /*  not(happens(decompress(Diver), Time1)) :-
       comparison(Time1, Time, <),
       holds_at(signalingDecompress(Computer, Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',596).

 /*  [comparison(Time1, Time, <), holds_at(signalingDecompress(Computer, Diver), Time)] ->
       ta(Time1,
          tvs1=[Time, Time1],
          tvs2=[Time, Time1],
          not(happens(decompress(Diver), Time1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',596).
axiom(not(happens(decompress(Diver), Time1)),
   
    [ comparison(Time1, Time, <),
      holds_at(signalingDecompress(Computer, Diver), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',596).

 /*  not(holds_at(signalingDecompress(Computer, Diver), Time)) :-
       comparison(Time1, Time, <),
       happens(decompress(Diver), Time1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',596).

 /*  [comparison(Time1, Time, <), happens(decompress(Diver), Time1)] ->
       ta(Time,
          tvs1=[Time, Time1],
          tvs2=[Time, Time1],
          holds_at(neg(signalingDecompress(Computer, Diver)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',596).
axiom(holds_at(neg(signalingDecompress(Computer, Diver)), Time),
   
    [ comparison(Time1, Time, <),
      happens(decompress(Diver), Time1)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:598
% event Decompress(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',598).
event(decompress(Decompress_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',598).
==> mpred_prop(decompress(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',598).
==> meta_argtypes(decompress(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:600
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',601).
% event EqualizeEars(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',601).
event(equalizeEars(EqualizeEars_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',601).
==> mpred_prop(equalizeEars(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',601).
==> meta_argtypes(equalizeEars(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:602
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:606
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time)), not(happens(equalizeEars(Diver), Time)) ->
       happens(startEarPain(Diver), Time),
       happens(ruptureEardrum(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  happens(startEarPain(Diver), Time) :-
       not(happens(equalizeEars(Diver), Time)),
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  [not(happens(equalizeEars(Diver), Time)),  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startEarPain(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).
axiom(happens(startEarPain(Diver), Time),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  happens(ruptureEardrum(Diver), Time) :-
       not(happens(equalizeEars(Diver), Time)),
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  [not(happens(equalizeEars(Diver), Time)),  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ruptureEardrum(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).
axiom(happens(ruptureEardrum(Diver), Time),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  happens(equalizeEars(Diver), Time) :-
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  [(happens(descend1(Diver), Time);happens(ascend1(Diver), Time)),  (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(equalizeEars(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).
axiom(happens(equalizeEars(Diver), Time),
   
    [  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time)),
       (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  not(happens(descend1(Diver), Time)) :-
       not(happens(equalizeEars(Diver), Time)),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  [not(happens(equalizeEars(Diver), Time)),  (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).
axiom(not(happens(descend1(Diver), Time)),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(equalizeEars(Diver), Time)),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).

 /*  [not(happens(equalizeEars(Diver), Time)),  (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',603).
axiom(not(happens(ascend1(Diver), Time)),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:608
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:611
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  happens(ascend1(Diver), Time), not(happens(decompress(Diver), Time)) ->
       happens(startDecompressionIllness(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  happens(startDecompressionIllness(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  [happens(ascend1(Diver), Time), not(happens(decompress(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).
axiom(happens(startDecompressionIllness(Diver), Time),
   
    [ happens(ascend1(Diver), Time),
      not(happens(decompress(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(decompress(Diver), Time)),
       not(happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  [not(happens(decompress(Diver), Time)), not(happens(startDecompressionIllness(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).
axiom(not(happens(ascend1(Diver), Time)),
   
    [ not(happens(decompress(Diver), Time)),
      not(happens(startDecompressionIllness(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  happens(decompress(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).

 /*  [happens(ascend1(Diver), Time), not(happens(startDecompressionIllness(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',610).
axiom(happens(decompress(Diver), Time),
   
    [ happens(ascend1(Diver), Time),
      not(happens(startDecompressionIllness(Diver), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:613
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:617
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  holds_at(holding(Diver1, Diver2), Time), happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time)) ->
       happens(startDecompressionIllness(Diver2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  happens(startDecompressionIllness(Diver2), Time) :-
       holds_at(holding(Diver1, Diver2), Time),
       happens(ascend1(Diver1), Time),
       not(happens(decompress(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  [holds_at(holding(Diver1, Diver2), Time), happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).
axiom(happens(startDecompressionIllness(Diver2), Time),
   
    [ holds_at(holding(Diver1, Diver2), Time),
      happens(ascend1(Diver1), Time),
      not(happens(decompress(Diver2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  not(holds_at(holding(Diver1, Diver2), Time)) :-
       ( happens(ascend1(Diver1), Time),
         not(happens(decompress(Diver2), Time))
       ),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  [happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time)), not(happens(startDecompressionIllness(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver1, Diver2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).
axiom(holds_at(neg(holding(Diver1, Diver2)), Time),
   
    [ happens(ascend1(Diver1), Time),
      not(happens(decompress(Diver2), Time)),
      not(happens(startDecompressionIllness(Diver2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  not(happens(ascend1(Diver1), Time)) :-
       not(happens(decompress(Diver2), Time)),
       holds_at(holding(Diver1, Diver2), Time),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  [not(happens(decompress(Diver2), Time)), holds_at(holding(Diver1, Diver2), Time), not(happens(startDecompressionIllness(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).
axiom(not(happens(ascend1(Diver1), Time)),
   
    [ not(happens(decompress(Diver2), Time)),
      holds_at(holding(Diver1, Diver2), Time),
      not(happens(startDecompressionIllness(Diver2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  happens(decompress(Diver2), Time) :-
       happens(ascend1(Diver1), Time),
       holds_at(holding(Diver1, Diver2), Time),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).

 /*  [happens(ascend1(Diver1), Time), holds_at(holding(Diver1, Diver2), Time), not(happens(startDecompressionIllness(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(decompress(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',615).
axiom(happens(decompress(Diver2), Time),
   
    [ happens(ascend1(Diver1), Time),
      holds_at(holding(Diver1, Diver2), Time),
      not(happens(startDecompressionIllness(Diver2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:619
% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:622
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  happens(decompress(Diver), Time) ->
       exists([Depth],
               (Depth>0, holds_at(atDepth(Diver, Depth), Time))),
       holds_at(neg(uncontrolledBuoyancy(Diver)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  not(happens(decompress(Diver), Time)) :-
       (   not(holds_at(neg(uncontrolledBuoyancy(Diver)), Time))
       ;   not(comparison(Depth, 0, >))
       ;   not(holds_at(atDepth(Diver, Depth), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [(holds_at(uncontrolledBuoyancy(Diver), Time);not(comparison(Depth, 0, >));holds_at(neg(atDepth(Diver, Depth)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(decompress(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(not(happens(decompress(Diver), Time)),
   
    [  (holds_at(uncontrolledBuoyancy(Diver), Time);not(comparison(Depth, 0, >));holds_at(neg(atDepth(Diver, Depth)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  holds_at(neg(uncontrolledBuoyancy(Diver)), Time) :-
       happens(decompress(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [holds_at(metreqs(decompress(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(requires(decompress(Diver), Time),
    [holds_at(metreqs(decompress(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(decompress(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(holds_at(requirements(decompress(Diver)), Time),
    [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  comparison(Depth, 0, >) :-
       happens(decompress(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [holds_at(metreqs(decompress(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(requires(decompress(Diver), Time),
    [holds_at(metreqs(decompress(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [comparison(Depth, 0, >)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(decompress(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(holds_at(requirements(decompress(Diver)), Time),
    [comparison(Depth, 0, >)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       happens(decompress(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [holds_at(metreqs(decompress(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(requires(decompress(Diver), Time),
    [holds_at(metreqs(decompress(Diver)), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).

 /*  [holds_at(atDepth(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(requirements(decompress(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',621).
axiom(holds_at(requirements(decompress(Diver)), Time),
    [holds_at(atDepth(Diver, Depth), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:624
% fluent HasHeadache(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',624).
fluent(hasHeadache(HasHeadache_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',624).
==> mpred_prop(hasHeadache(diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',624).
==> meta_argtypes(hasHeadache(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:626
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:632
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  holds_at(conditionOK(Diver), Time) ->
       holds_at(neg(unconscious(Diver)), Time),
       holds_at(neg(hasEarPain(Diver)), Time),
       holds_at(neg(hasRupturedEardrum(Diver)), Time),
       holds_at(neg(hasDecompressionIllness(Diver)), Time),
       holds_at(neg(hasHeadache(Diver)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  not(holds_at(conditionOK(Diver), Time)) :-
       (   not(holds_at(neg(unconscious(Diver)), Time))
       ;   not(holds_at(neg(hasEarPain(Diver)), Time))
       ;   not(holds_at(neg(hasRupturedEardrum(Diver)), Time))
       ;   not(holds_at(neg(hasDecompressionIllness(Diver)), Time))
       ;   not(holds_at(neg(hasHeadache(Diver)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  [(holds_at(unconscious(Diver), Time);holds_at(hasEarPain(Diver), Time);holds_at(hasRupturedEardrum(Diver), Time);holds_at(hasDecompressionIllness(Diver), Time);holds_at(hasHeadache(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(conditionOK(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
axiom(holds_at(neg(conditionOK(Diver)), Time),
   
    [  (holds_at(unconscious(Diver), Time);holds_at(hasEarPain(Diver), Time);holds_at(hasRupturedEardrum(Diver), Time);holds_at(hasDecompressionIllness(Diver), Time);holds_at(hasHeadache(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  holds_at(neg(unconscious(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(unconscious(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
axiom(holds_at(neg(unconscious(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  holds_at(neg(hasEarPain(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasEarPain(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
axiom(holds_at(neg(hasEarPain(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  holds_at(neg(hasRupturedEardrum(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasRupturedEardrum(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
axiom(holds_at(neg(hasRupturedEardrum(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  holds_at(neg(hasDecompressionIllness(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasDecompressionIllness(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
axiom(holds_at(neg(hasDecompressionIllness(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  holds_at(neg(hasHeadache(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasHeadache(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',627).
axiom(holds_at(neg(hasHeadache(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:634
% event BeAirlifted(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',634).
event(beAirlifted(BeAirlifted_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',634).
==> mpred_prop(beAirlifted(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',634).
==> meta_argtypes(beAirlifted(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:636
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',637).
% event TakeInWater(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',637).
event(takeInWater(TakeInWater_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',637).
==> mpred_prop(takeInWater(diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',637).
==> meta_argtypes(takeInWater(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:638
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',639).
% fluent LowOnAir(airtank)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',639).
fluent(lowOnAir(LowOnAir_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',639).
==> mpred_prop(lowOnAir(airtank),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',639).
==> meta_argtypes(lowOnAir(airtank)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:640
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',641).
% event BecomeLowOnAir(airtank)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',641).
event(becomeLowOnAir(BecomeLowOnAir_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',641).
==> mpred_prop(becomeLowOnAir(airtank),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',641).
==> meta_argtypes(becomeLowOnAir(airtank)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:642
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',643).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',643).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeLowOnAir(Airtank),
                    lowOnAir(Airtank),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',643).
axiom(initiates(becomeLowOnAir(Airtank), lowOnAir(Airtank), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:645
%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',647).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], initially(conditionOK(Diver))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',647).
axiom(initially(conditionOK(Diver)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:647
% [diver]
 % HoldsAt(Vertical(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',647).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], initially(vertical(Diver))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',647).
axiom(initially(vertical(Diver)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:648
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',649).
% !HoldsAt(DisturbedSilt(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',649).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], initially(neg(disturbedSilt))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',649).
axiom(initially(neg(disturbedSilt)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:649
% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',649).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          initially(neg(uncontrolledBuoyancy(Diver)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',649).
axiom(initially(neg(uncontrolledBuoyancy(Diver))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:650
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          initially(neg(disoriented(Diver)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).
axiom(initially(neg(disoriented(Diver))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:651
% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:653
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).

 /*   initially(neg(positivelyBuoyant(Diver))),
      initially(neg(neutrallyBuoyant(Diver))),
      initially(neg(negativelyBuoyant(Diver))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          initially(neg(positivelyBuoyant(Diver)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).
axiom(initially(neg(positivelyBuoyant(Diver))),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).

 /*  [] ->
       ta(Ta_Param2,
          tvs1=[],
          tvs2=[],
          initially(neg(neutrallyBuoyant(Diver)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).
axiom(initially(neg(neutrallyBuoyant(Diver))),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).

 /*  [] ->
       ta(Ta_Param3,
          tvs1=[],
          tvs2=[],
          initially(neg(negativelyBuoyant(Diver)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',651).
axiom(initially(neg(negativelyBuoyant(Diver))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:654
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',655).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',655).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          initially(neg(wearing(Diver, Object)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',655).
axiom(initially(neg(wearing(Diver, Object))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:655
% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',655).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          initially(neg(holding(Diver, Object)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',655).
axiom(initially(neg(holding(Diver, Object))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:656
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',657).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',657).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          initially(neg(separated(Diver1, Diver2)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',657).
axiom(initially(neg(separated(Diver1, Diver2))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:657
%;[agent,object] !HoldsAt(See(agent,object),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:659
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',660).
% fluent Separated(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',660).
fluent(separated(Separated_Param,Separated_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',660).
==> mpred_prop(separated(diver,diver),fluent).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',660).
==> meta_argtypes(separated(diver,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:661
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',662).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:663
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',662).

 /*  holds_at(separated(Diver1, Diver2), Time) ->
       holds_at(separated(Diver2, Diver1), Time).
 */

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:665
% event BecomeSeparated(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',665).
event(becomeSeparated(BecomeSeparated_Param,
		      BecomeSeparated_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',665).
==> mpred_prop(becomeSeparated(diver,diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',665).
==> meta_argtypes(becomeSeparated(diver,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:667
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',668).
% event BeReunitedWith(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',668).
event(beReunitedWith(BeReunitedWith_Param,
		     BeReunitedWith_Ret)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',668).
==> mpred_prop(beReunitedWith(diver,diver),event).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',668).
==> meta_argtypes(beReunitedWith(diver,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:669
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',670).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',670).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeSeparated(Diver1, Diver2),
                    separated(Diver1, Diver2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',670).
axiom(initiates(becomeSeparated(Diver1, Diver2), separated(Diver1, Diver2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:672
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',674).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeSeparated(Diver1, Diver2),
                    separated(Diver2, Diver1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',674).
axiom(initiates(becomeSeparated(Diver1, Diver2), separated(Diver2, Diver1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:675
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',676).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',676).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(beReunitedWith(Diver1, Diver2),
                     separated(Diver1, Diver2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',676).
axiom(terminates(beReunitedWith(Diver1, Diver2), separated(Diver1, Diver2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:678
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',680).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(beReunitedWith(Diver1, Diver2),
                     separated(Diver2, Diver1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',680).
axiom(terminates(beReunitedWith(Diver1, Diver2), separated(Diver2, Diver1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e:681
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Diving.e',682).
%; End of file.
