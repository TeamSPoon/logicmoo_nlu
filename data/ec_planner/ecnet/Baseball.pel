:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{EthanAllen:1982,
%;   author = "Ethan Allen",
%;   year = "1982",
%;   title = "Baseball Play and Strategy",
%;   address = "Robert E. Krieger",
%;   publisher = "Malabar, FL",
%;   edition = "Third",
%; }
%;
%; @book{Coombs:1967,
%;   author = "Jack Coombs",
%;   year = "1967",
%;   title = "Baseball",
%;   address = "Englewood Cliffs, NJ",
%;   publisher = "Prentice-Hall",
%;   edition = "4th",
%;   howpublished = "revised by Danny Litwhiler",
%; }
%;

% sort ballgame
==> sort(ballgame).

% sort hardball: ball
==> subsort(hardball,ball).

% sort base: physobj
==> subsort(base,physobj).

% sort firstbase: base
==> subsort(firstbase,base).
%;sort secondbase: base
%;sort thirdbase: base

% sort homeplate: base
==> subsort(homeplate,base).

% sort mound: physobj
==> subsort(mound,physobj).

% sort pitchermound: mound
==> subsort(pitchermound,mound).
%;sort furniture: physobj
%;sort bench: furniture
%;sort playerbench: bench

% sort field: physobj
==> subsort(field,physobj).
%;sort shortstoparea: field
%;sort catcherarea: field

% sort outfield: field
==> subsort(outfield,field).
%;sort leftfield: outfield
%;sort centerfield: outfield
%;sort rightfield: outfield

% function BallOf(ballgame): hardball
functional_predicate(ballOf(BallOf_Param,BallOf_Ret)).
==> mpred_prop(ballOf(ballgame,hardball),functional_predicate).
==> meta_argtypes(ballOf(ballgame,hardball)).
predicate(ballOf(BallOf_Param3,BallOf_Ret2)).
==> mpred_prop(ballOf(ballgame,hardball),predicate).
==> meta_argtypes(ballOf(ballgame,hardball)).
==> resultIsa(ballOf,hardball).

% function FirstBaseOf(ballgame): firstbase
functional_predicate(firstBaseOf(FirstBaseOf_Param,
				 FirstBaseOf_Ret)).
==> mpred_prop(firstBaseOf(ballgame,firstbase),functional_predicate).
==> meta_argtypes(firstBaseOf(ballgame,firstbase)).
predicate(firstBaseOf(FirstBaseOf_Param3,FirstBaseOf_Ret2)).
==> mpred_prop(firstBaseOf(ballgame,firstbase),predicate).
==> meta_argtypes(firstBaseOf(ballgame,firstbase)).
==> resultIsa(firstBaseOf,firstbase).
%;function SecondBaseOf(ballgame): secondbase
%;function ThirdBaseOf(ballgame): thirdbase

% function HomeplateOf(ballgame): homeplate
functional_predicate(homeplateOf(HomeplateOf_Param,
				 HomeplateOf_Ret)).
==> mpred_prop(homeplateOf(ballgame,homeplate),functional_predicate).
==> meta_argtypes(homeplateOf(ballgame,homeplate)).
predicate(homeplateOf(HomeplateOf_Param3,HomeplateOf_Ret2)).
==> mpred_prop(homeplateOf(ballgame,homeplate),predicate).
==> meta_argtypes(homeplateOf(ballgame,homeplate)).
==> resultIsa(homeplateOf,homeplate).

% function OutfieldOf(ballgame): outfield
functional_predicate(outfieldOf(OutfieldOf_Param,
				OutfieldOf_Ret)).
==> mpred_prop(outfieldOf(ballgame,outfield),functional_predicate).
==> meta_argtypes(outfieldOf(ballgame,outfield)).
predicate(outfieldOf(OutfieldOf_Param3,OutfieldOf_Ret2)).
==> mpred_prop(outfieldOf(ballgame,outfield),predicate).
==> meta_argtypes(outfieldOf(ballgame,outfield)).
==> resultIsa(outfieldOf,outfield).

% function PitchermoundOf(ballgame): pitchermound
functional_predicate(pitchermoundOf(PitchermoundOf_Param,
				    PitchermoundOf_Ret)).
==> mpred_prop(pitchermoundOf(ballgame,pitchermound),
	       functional_predicate).
==> meta_argtypes(pitchermoundOf(ballgame,pitchermound)).
predicate(pitchermoundOf(PitchermoundOf_Param3,
			 PitchermoundOf_Ret2)).
==> mpred_prop(pitchermoundOf(ballgame,pitchermound),predicate).
==> meta_argtypes(pitchermoundOf(ballgame,pitchermound)).
==> resultIsa(pitchermoundOf,pitchermound).

% function PlayerbenchOf(ballgame): playerbench
functional_predicate(playerbenchOf(PlayerbenchOf_Param,
				   PlayerbenchOf_Ret)).
==> mpred_prop(playerbenchOf(ballgame,playerbench),
	       functional_predicate).
==> meta_argtypes(playerbenchOf(ballgame,playerbench)).
predicate(playerbenchOf(PlayerbenchOf_Param3,
			PlayerbenchOf_Ret2)).
==> mpred_prop(playerbenchOf(ballgame,playerbench),predicate).
==> meta_argtypes(playerbenchOf(ballgame,playerbench)).
==> resultIsa(playerbenchOf,playerbench).

% predicate HomeTeamPlayer(ballgame,agent)
predicate(homeTeamPlayer(HomeTeamPlayer_Param,
			 HomeTeamPlayer_Ret)).
==> mpred_prop(homeTeamPlayer(ballgame,agent),predicate).
==> meta_argtypes(homeTeamPlayer(ballgame,agent)).

% predicate VisitingTeamPlayer(ballgame,agent)
predicate(visitingTeamPlayer(VisitingTeamPlayer_Param,
			     VisitingTeamPlayer_Ret)).
==> mpred_prop(visitingTeamPlayer(ballgame,agent),predicate).
==> meta_argtypes(visitingTeamPlayer(ballgame,agent)).

% predicate Player(ballgame,agent)
predicate(player(Player_Param,Player_Ret)).
==> mpred_prop(player(ballgame,agent),predicate).
==> meta_argtypes(player(ballgame,agent)).

% predicate OnOppositeTeams(ballgame,agent,agent)
predicate(onOppositeTeams(OnOppositeTeams_Param,
			  _,
			  OnOppositeTeams_Ret)).
==> mpred_prop(onOppositeTeams(ballgame,agent,agent),predicate).
==> meta_argtypes(onOppositeTeams(ballgame,agent,agent)).

% event Pitch(ballgame,agent,hardball,agent)
event(pitch(Pitch_Param,_,_,Pitch_Ret)).
==> mpred_prop(pitch(ballgame,agent,hardball,agent),event).
==> meta_argtypes(pitch(ballgame,agent,hardball,agent)).

% event PitchInStrikeZone(ballgame,agent,hardball,agent)
event(pitchInStrikeZone(PitchInStrikeZone_Param,
			_,
			_,
			PitchInStrikeZone_Ret)).
==> mpred_prop(pitchInStrikeZone(ballgame,agent,hardball,agent),event).
==> meta_argtypes(pitchInStrikeZone(ballgame,agent,hardball,agent)).

% event PitchOutOfStrikeZone(ballgame,agent,hardball,agent)
event(pitchOutOfStrikeZone(PitchOutOfStrikeZone_Param,
			   _,
			   _,
			   PitchOutOfStrikeZone_Ret)).
==> mpred_prop(pitchOutOfStrikeZone(ballgame,agent,hardball,agent),
	       event).
==> meta_argtypes(pitchOutOfStrikeZone(ballgame,agent,hardball,agent)).

% event Swing(ballgame,agent,hardball)
event(swing(Swing_Param,_,Swing_Ret)).
==> mpred_prop(swing(ballgame,agent,hardball),event).
==> meta_argtypes(swing(ballgame,agent,hardball)).

% event SwingMiss(ballgame,agent,hardball)
event(swingMiss(SwingMiss_Param,_,SwingMiss_Ret)).
==> mpred_prop(swingMiss(ballgame,agent,hardball),event).
==> meta_argtypes(swingMiss(ballgame,agent,hardball)).

% event SwingHit(ballgame,agent,hardball)
event(swingHit(SwingHit_Param,_,SwingHit_Ret)).
==> mpred_prop(swingHit(ballgame,agent,hardball),event).
==> meta_argtypes(swingHit(ballgame,agent,hardball)).

% event SwingHitFair(ballgame,agent,hardball)
event(swingHitFair(SwingHitFair_Param,
		   _,
		   SwingHitFair_Ret)).
==> mpred_prop(swingHitFair(ballgame,agent,hardball),event).
==> meta_argtypes(swingHitFair(ballgame,agent,hardball)).

% event SwingHitFoul(ballgame,agent,hardball)
event(swingHitFoul(SwingHitFoul_Param,
		   _,
		   SwingHitFoul_Ret)).
==> mpred_prop(swingHitFoul(ballgame,agent,hardball),event).
==> meta_argtypes(swingHitFoul(ballgame,agent,hardball)).

% event SwingHitFairFly(ballgame,agent,hardball)
event(swingHitFairFly(SwingHitFairFly_Param,
		      _,
		      SwingHitFairFly_Ret)).
==> mpred_prop(swingHitFairFly(ballgame,agent,hardball),event).
==> meta_argtypes(swingHitFairFly(ballgame,agent,hardball)).

% event SwingHitFairGround(ballgame,agent,hardball)
event(swingHitFairGround(SwingHitFairGround_Param,
			 _,
			 SwingHitFairGround_Ret)).
==> mpred_prop(swingHitFairGround(ballgame,agent,hardball),event).
==> meta_argtypes(swingHitFairGround(ballgame,agent,hardball)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:82
% [ballgame,agent]
% HomeTeamPlayer(ballgame,agent) ->
% !VisitingTeamPlayer(ballgame,agent).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:84
axiom(not(visitingTeamPlayer(Ballgame, Agent)),
    [homeTeamPlayer(Ballgame, Agent)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:86
% [ballgame,agent]
 % HomeTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
axiom(player(Ballgame, Agent),
    [homeTeamPlayer(Ballgame, Agent)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:88
% [ballgame,agent]
 % VisitingTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
axiom(player(Ballgame, Agent),
    [visitingTeamPlayer(Ballgame, Agent)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:90
% [ballgame,agent1,agent2]
% OnOppositeTeams(ballgame,agent1,agent2) <->
% (HomeTeamPlayer(ballgame,agent1) &
%  VisitingTeamPlayer(ballgame,agent2)) |
% (HomeTeamPlayer(ballgame,agent2) &
%  VisitingTeamPlayer(ballgame,agent1)).

 /*  onOppositeTeams(Ballgame, Agent1, Agent2) <->
       (   homeTeamPlayer(Ballgame, Agent1),
           visitingTeamPlayer(Ballgame, Agent2)
       ;   homeTeamPlayer(Ballgame, Agent2),
           visitingTeamPlayer(Ballgame, Agent1)
       ).
 */

 /*  onOppositeTeams(Ballgame, Agent1, Agent2) ->
       (   homeTeamPlayer(Ballgame, Agent1),
           visitingTeamPlayer(Ballgame, Agent2)
       ;   homeTeamPlayer(Ballgame, Agent2),
           visitingTeamPlayer(Ballgame, Agent1)
       ).
 */

 /*  not(onOppositeTeams(Ballgame, Agent1, Agent2)) :-
       (   not(homeTeamPlayer(Ballgame, Agent1))
       ;   not(visitingTeamPlayer(Ballgame, Agent2))
       ),
       (   not(homeTeamPlayer(Ballgame, Agent2))
       ;   not(visitingTeamPlayer(Ballgame, Agent1))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:95
axiom(not(onOppositeTeams(Ballgame, Agent1, Agent2)),
   
    [  (not(homeTeamPlayer(Ballgame, Agent1));not(visitingTeamPlayer(Ballgame, Agent2))),
       (not(homeTeamPlayer(Ballgame, Agent2));not(visitingTeamPlayer(Ballgame, Agent1)))
    ]).

 /*  homeTeamPlayer(Ballgame, Agent1) :-
       (   not(homeTeamPlayer(Ballgame, Agent2))
       ;   not(visitingTeamPlayer(Ballgame, Agent1))
       ),
       onOppositeTeams(Ballgame, Agent1, Agent2).
 */
axiom(homeTeamPlayer(Ballgame, Agent1),
   
    [  (not(homeTeamPlayer(Ballgame, Agent2));not(visitingTeamPlayer(Ballgame, Agent1))),
      onOppositeTeams(Ballgame, Agent1, Agent2)
    ]).

 /*  visitingTeamPlayer(Ballgame, Agent2) :-
       (   not(homeTeamPlayer(Ballgame, Agent2))
       ;   not(visitingTeamPlayer(Ballgame, Agent1))
       ),
       onOppositeTeams(Ballgame, Agent1, Agent2).
 */
axiom(visitingTeamPlayer(Ballgame, Agent2),
   
    [  (not(homeTeamPlayer(Ballgame, Agent2));not(visitingTeamPlayer(Ballgame, Agent1))),
      onOppositeTeams(Ballgame, Agent1, Agent2)
    ]).

 /*  homeTeamPlayer(Ballgame, Agent2) :-
       (   not(homeTeamPlayer(Ballgame, Agent1))
       ;   not(visitingTeamPlayer(Ballgame, Agent2))
       ),
       onOppositeTeams(Ballgame, Agent1, Agent2).
 */
axiom(homeTeamPlayer(Ballgame, Agent2),
   
    [  (not(homeTeamPlayer(Ballgame, Agent1));not(visitingTeamPlayer(Ballgame, Agent2))),
      onOppositeTeams(Ballgame, Agent1, Agent2)
    ]).

 /*  visitingTeamPlayer(Ballgame, Agent1) :-
       (   not(homeTeamPlayer(Ballgame, Agent1))
       ;   not(visitingTeamPlayer(Ballgame, Agent2))
       ),
       onOppositeTeams(Ballgame, Agent1, Agent2).
 */
axiom(visitingTeamPlayer(Ballgame, Agent1),
   
    [  (not(homeTeamPlayer(Ballgame, Agent1));not(visitingTeamPlayer(Ballgame, Agent2))),
      onOppositeTeams(Ballgame, Agent1, Agent2)
    ]).
axiom(onOppositeTeams(Ballgame, Agent1, Agent2),
   
    [  (homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:97
% [ballgame,agent1,hardball,agent2,pitchermound,homeplate,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) &
% PitchermoundOf(ballgame) = pitchermound &
% HomeplateOf(ballgame) = homeplate ->
% HoldsAt(Near(agent1,pitchermound),time) &
% HoldsAt(Near(agent2,homeplate),time) &
% OnOppositeTeams(ballgame,agent1,agent2).

 /*  happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time), equals(pitchermoundOf(Ballgame), Pitchermound), equals(homeplateOf(Ballgame), Homeplate) ->
       holds_at(near(Agent1, Pitchermound), Time),
       holds_at(near(Agent2, Homeplate), Time),
       onOppositeTeams(Ballgame, Agent1, Agent2).
 */

 /*  not(happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time)) :-
       ( equals(pitchermoundOf(Ballgame), Pitchermound),
         equals(homeplateOf(Ballgame), Homeplate)
       ),
       (   not(holds_at(near(Agent1, Pitchermound), Time))
       ;   not(holds_at(near(Agent2, Homeplate), Time))
       ;   not(onOppositeTeams(Ballgame, Agent1, Agent2))
       ).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:103
axiom(not(happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret)),
   
    [ pitchermoundOf(Ballgame, Pitchermound),
      homeplateOf(Ballgame, Homeplate),
       (holds_at(neg(near(Agent1, Pitchermound)), Time);holds_at(neg(near(Agent2, Homeplate)), Time);not(onOppositeTeams(Ballgame, Agent1, Agent2)))
    ]).

 /*  not(equals(pitchermoundOf(Ballgame), Pitchermound)) :-
       equals(homeplateOf(Ballgame), Homeplate),
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time),
       (   not(holds_at(near(Agent1, Pitchermound), Time))
       ;   not(holds_at(near(Agent2, Homeplate), Time))
       ;   not(onOppositeTeams(Ballgame, Agent1, Agent2))
       ).
 */
axiom(not(pitchermoundOf(Ballgame, Pitchermound)),
   
    [ homeplateOf(Ballgame, Homeplate),
      happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time,
              Happens_Ret8),
       (holds_at(neg(near(Agent1, Pitchermound)), Time);holds_at(neg(near(Agent2, Homeplate)), Time);not(onOppositeTeams(Ballgame, Agent1, Agent2)))
    ]).

 /*  not(equals(homeplateOf(Ballgame), Homeplate)) :-
       equals(pitchermoundOf(Ballgame), Pitchermound),
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time),
       (   not(holds_at(near(Agent1, Pitchermound), Time))
       ;   not(holds_at(near(Agent2, Homeplate), Time))
       ;   not(onOppositeTeams(Ballgame, Agent1, Agent2))
       ).
 */
axiom(not(homeplateOf(Ballgame, Homeplate)),
   
    [ pitchermoundOf(Ballgame, Pitchermound),
      happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time,
              Happens_Ret9),
       (holds_at(neg(near(Agent1, Pitchermound)), Time);holds_at(neg(near(Agent2, Homeplate)), Time);not(onOppositeTeams(Ballgame, Agent1, Agent2)))
    ]).

 /*  holds_at(near(Agent1, Pitchermound), Time) :-
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time),
       equals(pitchermoundOf(Ballgame), Pitchermound),
       equals(homeplateOf(Ballgame), Homeplate).
 */
axiom(holds_at(near(Agent1, Pitchermound), Time),
   
    [ happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time,
              Time),
      pitchermoundOf(Ballgame, Pitchermound),
      homeplateOf(Ballgame, Homeplate)
    ]).

 /*  holds_at(near(Agent2, Homeplate), Time) :-
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time),
       equals(pitchermoundOf(Ballgame), Pitchermound),
       equals(homeplateOf(Ballgame), Homeplate).
 */
axiom(holds_at(near(Agent2, Homeplate), Time),
   
    [ happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time,
              Time),
      pitchermoundOf(Ballgame, Pitchermound),
      homeplateOf(Ballgame, Homeplate)
    ]).

 /*  onOppositeTeams(Ballgame, Agent1, Agent2) :-
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time),
       equals(pitchermoundOf(Ballgame), Pitchermound),
       equals(homeplateOf(Ballgame), Homeplate).
 */
axiom(onOppositeTeams(Ballgame, Agent1, Agent2),
   
    [ happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time),
      equals(pitchermoundOf(Ballgame), Pitchermound),
      equals(homeplateOf(Ballgame), Homeplate)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:105
% [ballgame,agent1,agent2,hardball,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) ->
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) |
% Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).

 /*  happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret) ->
       (   happens(pitchInStrikeZone(Ballgame,
                                     Agent1,
                                     Hardball,
                                     Agent2),
                   Time,
                   Happens_Ret)
       ;   happens(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time,
                   Happens_Ret)
       ).
 */

 /*  happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret) :-
       not(happens(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time,
                   Happens_Ret)),
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time,
               Happens_Ret).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:108
axiom(happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret),
   
    [ not(happens(pitchOutOfStrikeZone(Ballgame,
                                       Agent1,
                                       Hardball,
                                       Agent2),
                  Time,
                  Happens_Ret)),
      happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time,
              Happens_Ret)
    ]).

 /*  happens(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret) :-
       not(happens(pitchInStrikeZone(Ballgame,
                                     Agent1,
                                     Hardball,
                                     Agent2),
                   Time,
                   Happens_Ret)),
       happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time,
               Happens_Ret).
 */
axiom(happens(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret),
   
    [ not(happens(pitchInStrikeZone(Ballgame,
                                    Agent1,
                                    Hardball,
                                    Agent2),
                  Time,
                  Happens_Ret)),
      happens(pitch(Ballgame, Agent1, Hardball, Agent2),
              Time,
              Happens_Ret)
    ]).

 /*  not(happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret)) :-
       not(happens(pitchInStrikeZone(Ballgame,
                                     Agent1,
                                     Hardball,
                                     Agent2),
                   Time,
                   Happens_Ret)),
       not(happens(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time,
                   Happens_Ret)).
 */
axiom(not(happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret)),
   
    [ not(happens(pitchInStrikeZone(Ballgame,
                                    Agent1,
                                    Hardball,
                                    Agent2),
                  Time,
                  Happens_Ret)),
      not(happens(pitchOutOfStrikeZone(Ballgame,
                                       Agent1,
                                       Hardball,
                                       Agent2),
                  Time,
                  Happens_Ret))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:110
% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% !Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:112
axiom(not(happens(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time, Happens_Ret)),
   
    [ happens(pitchInStrikeZone(Ballgame,
                                Agent1,
                                Hardball,
                                Agent2),
              Time,
              Happens_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:114
% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% Happens(Swing(ballgame,agent2,hardball),time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:116
axiom(happens(swing(Ballgame, Agent2, Hardball), start, Happens_Ret),
   
    [ happens(pitchInStrikeZone(Ballgame,
                                Agent1,
                                Hardball,
                                Agent2),
              t,
              Happens_Ret),
      b(t, start),
      ignore(t+1=start)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:118
% [ballgame,agent,hardball,time]
% Happens(Swing(ballgame,agent,hardball),time) ->
% Happens(SwingHit(ballgame,agent,hardball),time) |
% Happens(SwingMiss(ballgame,agent,hardball),time).

 /*  happens(swing(Ballgame, Agent, Hardball), Time, Happens_Ret) ->
       (   happens(swingHit(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)
       ;   happens(swingMiss(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)
       ).
 */

 /*  happens(swingHit(Ballgame, Agent, Hardball), Time, Happens_Ret) :-
       not(happens(swingMiss(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       happens(swing(Ballgame, Agent, Hardball),
               Time,
               Happens_Ret).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:121
axiom(happens(swingHit(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ not(happens(swingMiss(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      happens(swing(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).

 /*  happens(swingMiss(Ballgame, Agent, Hardball), Time, Happens_Ret) :-
       not(happens(swingHit(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       happens(swing(Ballgame, Agent, Hardball),
               Time,
               Happens_Ret).
 */
axiom(happens(swingMiss(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ not(happens(swingHit(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      happens(swing(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).

 /*  not(happens(swing(Ballgame, Agent, Hardball), Time, Happens_Ret)) :-
       not(happens(swingHit(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       not(happens(swingMiss(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)).
 */
axiom(not(happens(swing(Ballgame, Agent, Hardball), Time, Happens_Ret)),
   
    [ not(happens(swingHit(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      not(happens(swingMiss(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:123
% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% !Happens(SwingMiss(ballgame,agent,hardball),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:125
axiom(not(happens(swingMiss(Ballgame, Agent, Hardball), Time, Happens_Ret)),
   
    [ happens(swingHit(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:127
% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% Happens(SwingHitFair(ballgame,agent,hardball),time) |
% Happens(SwingHitFoul(ballgame,agent,hardball),time).

 /*  happens(swingHit(Ballgame, Agent, Hardball), Time, Happens_Ret) ->
       (   happens(swingHitFair(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)
       ;   happens(swingHitFoul(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)
       ).
 */

 /*  happens(swingHitFair(Ballgame, Agent, Hardball), Time, Happens_Ret) :-
       not(happens(swingHitFoul(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       happens(swingHit(Ballgame, Agent, Hardball),
               Time,
               Happens_Ret).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:130
axiom(happens(swingHitFair(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ not(happens(swingHitFoul(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      happens(swingHit(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).

 /*  happens(swingHitFoul(Ballgame, Agent, Hardball), Time, Happens_Ret) :-
       not(happens(swingHitFair(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       happens(swingHit(Ballgame, Agent, Hardball),
               Time,
               Happens_Ret).
 */
axiom(happens(swingHitFoul(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ not(happens(swingHitFair(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      happens(swingHit(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).

 /*  not(happens(swingHit(Ballgame, Agent, Hardball), Time, Happens_Ret)) :-
       not(happens(swingHitFair(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       not(happens(swingHitFoul(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)).
 */
axiom(not(happens(swingHit(Ballgame, Agent, Hardball), Time, Happens_Ret)),
   
    [ not(happens(swingHitFair(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      not(happens(swingHitFoul(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:132
% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% !Happens(SwingHitFoul(ballgame,agent,hardball),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:134
axiom(not(happens(swingHitFoul(Ballgame, Agent, Hardball), Time, Happens_Ret)),
   
    [ happens(swingHitFair(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:136
% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) |
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).

 /*  happens(swingHitFair(Ballgame, Agent, Hardball), Time, Happens_Ret) ->
       (   happens(swingHitFairFly(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)
       ;   happens(swingHitFairGround(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)
       ).
 */

 /*  happens(swingHitFairFly(Ballgame, Agent, Hardball), Time, Happens_Ret) :-
       not(happens(swingHitFairGround(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       happens(swingHitFair(Ballgame, Agent, Hardball),
               Time,
               Happens_Ret).
 */
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:139
axiom(happens(swingHitFairFly(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ not(happens(swingHitFairGround(Ballgame,
                                     Agent,
                                     Hardball),
                  Time,
                  Happens_Ret)),
      happens(swingHitFair(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).

 /*  happens(swingHitFairGround(Ballgame, Agent, Hardball), Time, Happens_Ret) :-
       not(happens(swingHitFairFly(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       happens(swingHitFair(Ballgame, Agent, Hardball),
               Time,
               Happens_Ret).
 */
axiom(happens(swingHitFairGround(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ not(happens(swingHitFairFly(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      happens(swingHitFair(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).

 /*  not(happens(swingHitFair(Ballgame, Agent, Hardball), Time, Happens_Ret)) :-
       not(happens(swingHitFairFly(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)),
       not(happens(swingHitFairGround(Ballgame, Agent, Hardball),
                   Time,
                   Happens_Ret)).
 */
axiom(not(happens(swingHitFair(Ballgame, Agent, Hardball), Time, Happens_Ret)),
   
    [ not(happens(swingHitFairFly(Ballgame, Agent, Hardball),
                  Time,
                  Happens_Ret)),
      not(happens(swingHitFairGround(Ballgame,
                                     Agent,
                                     Hardball),
                  Time,
                  Happens_Ret))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:141
% [ballgame,agent,hardball,time]
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:143
axiom(happens(swingHitFairGround(Ballgame, Agent, Hardball), Time, Happens_Ret),
   
    [ happens(swingHitFairFly(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:145
% [ballgame,agent,hardball,homeplate,firstbase,time]
% Happens(SwingHit(ballgame,agent,hardball),time) &
% HomeplateOf(ballgame) = homeplate &
% FirstBaseOf(ballgame) = firstbase ->
% Happens(RunFromTo(agent,homeplate,firstbase),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:149
axiom(happens(runFromTo(Agent, Homeplate, Firstbase), Time, Happens_Ret),
   
    [ happens(swingHit(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret),
      homeplateOf(Ballgame, Homeplate),
      firstBaseOf(Ballgame, Firstbase)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:151
% [ballgame,agent,hardball,homeplate,outfield,time]
% HomeplateOf(ballgame) = homeplate &
% OutfieldOf(ballgame) = outfield &
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(HitFromTo(agent,hardball,homeplate,outfield),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:155
axiom(happens(hitFromTo(Agent, Hardball, Homeplate, Outfield), Time, Happens_Ret),
   
    [ homeplateOf(Ballgame, Homeplate),
      outfieldOf(Ballgame, Outfield),
      happens(swingHitFairFly(Ballgame, Agent, Hardball),
              Time,
              Happens_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e:157
%; End of file.
