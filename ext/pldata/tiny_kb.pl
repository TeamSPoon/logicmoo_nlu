
% ===================================================================
% OPERATOR PRECEDANCE
% ===================================================================
:- module(tiny_kb,['TINYKB-ASSERTION'/5, 'TINYKB-ASSERTION'/6]).
:- dynamic(('TINYKB-ASSERTION'/5, 'TINYKB-ASSERTION'/6)).
:-style_check(-singleton).
:-style_check(-discontiguous).
:-style_check(-atom).
% :-style_check(-string).
:-set_prolog_flag(double_quotes,string).

:- include('tiny_kb.pldata').

'TINYKB-ASSERTION'(':TRUE-MON',[[],[['backchainForbidden','unknownSentence']]],'UniversalVocabularyMt',[],/*HL*/['backchainForbidden','unknownSentence']).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['backchainForbidden','unknownSentence']]],'CoreCycLImplementationMt',[],/*HL*/['backchainForbidden','unknownSentence']).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['negationPreds','unknownSentence','knownSentence']]],'UniversalVocabularyMt',[],/*HL*/['negationPreds','unknownSentence','knownSentence']).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['negationPreds','unknownSentence','trueSentence']]],'UniversalVocabularyMt',[],/*HL*/['negationPreds','unknownSentence','trueSentence']).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['negationPreds','unknownSentence','knownSentence']]],'BaseKB',[],/*HL*/['negationPreds','unknownSentence','knownSentence']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['oldConstantName','unknownSentence',"unknownFormula"]]],'BookkeepingMt',[],/*HL*/['oldConstantName','unknownSentence',"unknownFormula"]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['notAssertible','unknownSentence']]],'BaseKB',[],/*HL*/['notAssertible','unknownSentence']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedArgument','xor',2]]],'UniversalVocabularyMt',[],/*HL*/['quotedArgument','xor',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedArgument','xor',1]]],'UniversalVocabularyMt',[],/*HL*/['quotedArgument','xor',1]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','xor',2,'CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['argQuotedIsa','xor',2,'CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','xor',1,'CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['argQuotedIsa','xor',1,'CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','xor',1,'CycLSentence-Assertible']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','xor',1,'CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','xor',2,'CycLSentence-Assertible']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','xor',2,'CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['comment','xor',"The LogicalConnective that represents exclusive-or in CycL. Unlike or, which is a VariableArityRelation, xor takes two arguments, which must be instances of ELSentence-Assertible. (xor P Q) means  one but not both of P and Q is true. (An EL formula that mentions 
  xor is translated during canonicalization into an equivalent, less compact, formula that mentions or, and, and not)."]]],'UniversalVocabularyMt',[],/*HL*/['comment','xor',"The LogicalConnective that represents exclusive-or in CycL. Unlike or, which is a VariableArityRelation, xor takes two arguments, which must be instances of ELSentence-Assertible. (xor P Q) means  one but not both of P and Q is true. (An EL formula that mentions 
  xor is translated during canonicalization into an equivalent, less compact, formula that mentions or, and, and not)."]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genFormat','xor',"either ~a or ~a (but not both)",'TheEmptyList']]],'EnglishParaphraseMt',[],/*HL*/['genFormat','xor',"either ~a or ~a (but not both)",'TheEmptyList']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['expansion','xor',['or',['and',':ARG1',['not',':ARG2']],['and',':ARG2',['not',':ARG1']]]]]],'BaseKB',[],/*HL*/['expansion','xor',['or',['and',':ARG1',['not',':ARG2']],['and',':ARG2',['not',':ARG1']]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['ruleTemplateDirection','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),'Forward-AssertionDirection']]],'BaseKB',[],/*HL*/['ruleTemplateDirection','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),'Forward-AssertionDirection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg1Isa','?RELN','?COL'],['argIsa','?RELN',1,'?COL']],['implies',['argIsa','?RELN',1,'?COL'],['arg1Isa','?RELN','?COL']]]]]],'UniversalVocabularyMt',[],/*HL*/['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg1Isa','?RELN','?COL'],['argIsa','?RELN',1,'?COL']],['implies',['argIsa','?RELN',1,'?COL'],['arg1Isa','?RELN','?COL']]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argIsa','$VAR'(0),1,'$VAR'(1)]],[['arg1Isa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argIsa','$VAR'(0),1,'$VAR'(1)],['arg1Isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1Isa','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),1,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg1Isa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),1,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg2Isa','?RELN','?COL'],['argIsa','?RELN',2,'?COL']],['implies',['argIsa','?RELN',2,'?COL'],['arg2Isa','?RELN','?COL']]]]]],'UniversalVocabularyMt',[],/*HL*/['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg2Isa','?RELN','?COL'],['argIsa','?RELN',2,'?COL']],['implies',['argIsa','?RELN',2,'?COL'],['arg2Isa','?RELN','?COL']]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argIsa','$VAR'(0),2,'$VAR'(1)]],[['arg2Isa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argIsa','$VAR'(0),2,'$VAR'(1)],['arg2Isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2Isa','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),2,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg2Isa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),2,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg5Isa','?RELN','?COL'],['argIsa','?RELN',5,'?COL']],['implies',['argIsa','?RELN',5,'?COL'],['arg5Isa','?RELN','?COL']]]]]],'UniversalVocabularyMt',[],/*HL*/['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg5Isa','?RELN','?COL'],['argIsa','?RELN',5,'?COL']],['implies',['argIsa','?RELN',5,'?COL'],['arg5Isa','?RELN','?COL']]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argIsa','$VAR'(0),5,'$VAR'(1)]],[['arg5Isa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argIsa','$VAR'(0),5,'$VAR'(1)],['arg5Isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg5Isa','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),5,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg5Isa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),5,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg4Isa','?RELN','?COL'],['argIsa','?RELN',4,'?COL']],['implies',['argIsa','?RELN',4,'?COL'],['arg4Isa','?RELN','?COL']]]]]],'UniversalVocabularyMt',[],/*HL*/['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg4Isa','?RELN','?COL'],['argIsa','?RELN',4,'?COL']],['implies',['argIsa','?RELN',4,'?COL'],['arg4Isa','?RELN','?COL']]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argIsa','$VAR'(0),4,'$VAR'(1)]],[['arg4Isa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argIsa','$VAR'(0),4,'$VAR'(1)],['arg4Isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg4Isa','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),4,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg4Isa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),4,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg3Isa','?RELN','?COL'],['argIsa','?RELN',3,'?COL']],['implies',['argIsa','?RELN',3,'?COL'],['arg3Isa','?RELN','?COL']]]]]],'UniversalVocabularyMt',[],/*HL*/['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg3Isa','?RELN','?COL'],['argIsa','?RELN',3,'?COL']],['implies',['argIsa','?RELN',3,'?COL'],['arg3Isa','?RELN','?COL']]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argIsa','$VAR'(0),3,'$VAR'(1)]],[['arg3Isa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argIsa','$VAR'(0),3,'$VAR'(1)],['arg3Isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg3Isa','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),3,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg3Isa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),3,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg6Isa','?RELN','?COL'],['argIsa','?RELN',6,'?COL']],['implies',['argIsa','?RELN',6,'?COL'],['arg6Isa','?RELN','?COL']]]]]],'UniversalVocabularyMt',[],/*HL*/['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['arg6Isa','?RELN','?COL'],['argIsa','?RELN',6,'?COL']],['implies',['argIsa','?RELN',6,'?COL'],['arg6Isa','?RELN','?COL']]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argIsa','$VAR'(0),6,'$VAR'(1)]],[['arg6Isa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argIsa','$VAR'(0),6,'$VAR'(1)],['arg6Isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg6Isa','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),6,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg6Isa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),6,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['ruleTemplateDirection','NART'(['CollectionRuleTemplateFn','HypotheticalContext']),'Forward-AssertionDirection']]],'UniversalVocabularyMt',[],/*HL*/['ruleTemplateDirection','NART'(['CollectionRuleTemplateFn','HypotheticalContext']),'Forward-AssertionDirection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['subsetOf','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['subsetOf','$VAR'(0),'$VAR'(1)],['genls','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa2-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(0),'$VAR'(5)]],[['isa','$VAR'(5),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa2-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(0),'$VAR'(5)]],['isa','$VAR'(5),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],[['$VAR'(2),['RelationExistsAllFn','$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(1)],'$VAR'(0)]]],'BaseKB',["?TERM","?INDEP-COL","?PRED","?DEP-COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],['$VAR'(2),['RelationExistsAllFn','$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(1)],'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)],['$VAR'(1),'$VAR'(2),'$VAR'(3)]],[]],'BaseKB',["?NEG-PRED","?PRED","?ARG1","?ARG2"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)],['$VAR'(1),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0)]],[['isa','$VAR'(5),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?DEP-INS","?ANY-ARG-3"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0)]],['isa','$VAR'(5),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa',['Quote','$VAR'(0)],'$VAR'(1)]],[['quotedIsa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?X","?COL"],/*EL*/['implies',['isa',['Quote',['EscapeQuote','$VAR'(0)]],'$VAR'(1)],['quotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['$VAR'(1),'$VAR'(3),'$VAR'(2)]]],'BaseKB',["?PRED","?GENL-INV-PRED","?ARG1","?ARG2"],/*EL*/['implies',['and',['genlInverse','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(1),'$VAR'(3),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0),'$VAR'(7)]],[['isa','$VAR'(7),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-2","?ANY-ARG-3","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0),'$VAR'(7)]],['isa','$VAR'(7),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationExistsMinAll','$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],[['trueSentence',['thereExistAtLeast','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'?ARG','$VAR'(0)]]]]]],'BaseKB',["?ARG2","?UNIV-COL","?SLOT","?EXIST-COL","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationExistsMinAll','$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],['trueSentence',['thereExistAtLeast','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'?ARG','$VAR'(0)]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'BinaryPredicate'],['arg2Isa','$VAR'(0),'$VAR'(1)],['requiredArg1Pred','$VAR'(2),'$VAR'(0)]],[['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?COL2","?COL1"],/*EL*/['implies',['and',['isa','$VAR'(0),'BinaryPredicate'],['arg2Isa','$VAR'(0),'$VAR'(1)],['requiredArg1Pred','$VAR'(2),'$VAR'(0)]],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['$VAR'(2),'$VAR'(0),'$VAR'(3)]]],'BaseKB',["?INST","?COL","?PRED","?THING"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['$VAR'(2),'$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationExistsInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(1)],['$VAR'(0),'?INST','$VAR'(2)]]]]]],'BaseKB',["?PRED","?COL","?THING"],/*EL*/['implies',['relationExistsInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(1)],['$VAR'(0),'?INST','$VAR'(2)]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['instanceElementType','$VAR'(0),'$VAR'(1)]],[['defnSufficient','$VAR'(0),['SubLQuoteFn','CYC-SET-OF-TYPE-SUFFICIENT']]]],'UniversalVocabularyImplementationMt',["?SET-TYPE","??COL"],/*EL*/['implies',['instanceElementType','$VAR'(0),'$VAR'(1)],['defnSufficient','$VAR'(0),['SubLQuoteFn','CYC-SET-OF-TYPE-SUFFICIENT']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','$VAR'(0),'$VAR'(1)],['equals','$VAR'(0),'$VAR'(1)]],[]],'BaseKB',["?THING1","?THING2"],/*EL*/['not',['and',['different','$VAR'(0),'$VAR'(1)],['equals','$VAR'(0),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'QuaternaryRelation']],[['arity','$VAR'(0),4]]],'CoreCycLMt',["?REL"],/*EL*/['implies',['isa','$VAR'(0),'QuaternaryRelation'],['arity','$VAR'(0),4]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa2-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(0),'$VAR'(5),'$VAR'(6)]],[['isa','$VAR'(6),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-3","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa2-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(0),'$VAR'(5),'$VAR'(6)]],['isa','$VAR'(6),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AsymmetricBinaryPredicate']],[['negationInverse','$VAR'(0),'$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'AsymmetricBinaryPredicate'],['negationInverse','$VAR'(0),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],[['quotedIsa','$VAR'(0),'$VAR'(2)]]],'BookkeepingMt',["?INS","?COLL","?QUOTED-COLL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],['quotedIsa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'Function-Denotational'],['arity','$VAR'(0),5]],[['isa','$VAR'(0),'QuintaryFunction']]],'BaseKB',["?FUNC"],/*EL*/['implies',['and',['isa','$VAR'(0),'Function-Denotational'],['arity','$VAR'(0),5]],['isa','$VAR'(0),'QuintaryFunction']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['holdsIn','$VAR'(0),['holdsIn','$VAR'(1),'$VAR'(2)]]],[['holdsIn','$VAR'(1),'$VAR'(2)]]],'BaseKB',["??T1","?T2","?P"],/*EL*/['implies',['holdsIn','$VAR'(0),['holdsIn','$VAR'(1),'$VAR'(2)]],['holdsIn','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'LogicalConnective'],['arity','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'ArgQuotedIsaBinaryPredicate'],['constrainsArg','$VAR'(2),'$VAR'(3)],['integerBetween',1,'$VAR'(3),'$VAR'(1)]],[['$VAR'(2),'$VAR'(0),'CycLSentence-Assertible']]],'BaseKB',["?CONNECT","?ARITY","?ARG-N-QUOTED-ISA","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'LogicalConnective'],['arity','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'ArgQuotedIsaBinaryPredicate'],['constrainsArg','$VAR'(2),'$VAR'(3)],['integerBetween',1,'$VAR'(3),'$VAR'(1)]],['$VAR'(2),'$VAR'(0),'CycLSentence-Assertible']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['relationAllExists','$VAR'(1),'$VAR'(3),'$VAR'(2)]]],'BaseKB',["?PRED","?INVERSE","?TYPE1","?TYPE2"],/*EL*/['implies',['and',['genlInverse','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['relationAllExists','$VAR'(1),'$VAR'(3),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]],[['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),3,'$VAR'(1)],['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],[['isa','$VAR'(5),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?DEP-INS","?ANY-ARG-3","?ANY-ARG-4"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],['isa','$VAR'(5),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'DisjointCollectionType'],['isa','$VAR'(1),'$VAR'(0)],['isa','$VAR'(2),'$VAR'(0)],['different','$VAR'(1),'$VAR'(2)]],[['disjointWith','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?DIS-COL-TYPE","?COL1","?COL2"],/*EL*/['implies',['and',['isa','$VAR'(0),'DisjointCollectionType'],['isa','$VAR'(1),'$VAR'(0)],['isa','$VAR'(2),'$VAR'(0)],['different','$VAR'(1),'$VAR'(2)]],['disjointWith','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['relationAllExistsMin','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(4)]],[['greaterThanOrEqualTo','$VAR'(3),'$VAR'(4)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?N","?M"],/*EL*/['implies',['and',['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['relationAllExistsMin','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(4)]],['greaterThanOrEqualTo','$VAR'(3),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0),'$VAR'(6)]],[['isa','$VAR'(6),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-2","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0),'$VAR'(6)]],['isa','$VAR'(6),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4),'$VAR'(5) | '$VAR'(6)]],[['isa','$VAR'(5),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","??ANY-ARG-2","?DEP-INS","??ARGS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4),'$VAR'(5) | '$VAR'(6)]],['isa','$VAR'(5),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(0),'$VAR'(2)]],[['$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?ARG1","?GENL-PRED"],/*EL*/['implies',['and',['$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(0),'$VAR'(2)]],['$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Microtheory']],[['ist','BaseKB',['isa','$VAR'(0),'Microtheory']]]],'BaseKB',["?MT"],/*EL*/['implies',['isa','$VAR'(0),'Microtheory'],['ist','BaseKB',['isa','$VAR'(0),'Microtheory']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg1Isa','$VAR'(0),'$VAR'(1)],['relationInstanceAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE","?ARG1","?COL"],/*EL*/['implies',['and',['arg1Isa','$VAR'(0),'$VAR'(1)],['relationInstanceAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)]],[]],'BaseKB',["?NEG-PRED","?PRED","?ARG1","?ARG2","?ARG3","?ARG4","?ARG5"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['$VAR'(2),'$VAR'(0),['RelationAllExistsFn','$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3)]]]],'BaseKB',["?TERM","?INDEP-COL","?PRED","?DEP-COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['$VAR'(2),'$VAR'(0),['RelationAllExistsFn','$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure']],[['equals',['$VAR'(0) | '$VAR'(1)],['$VAR'(0),['Unity' | '$VAR'(1)]]]]],'BaseKB',["?UNIT","?ARGS"],/*EL*/['implies',['isa','$VAR'(0),'UnitOfMeasure'],['equals',['$VAR'(0) | '$VAR'(1)],['$VAR'(0),['Unity' | '$VAR'(1)]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ExistentialQuantifier-Bounded']],[['arg2QuotedIsa','$VAR'(0),'CycLVariable']]],'UniversalVocabularyMt',["?QUANT"],/*EL*/['implies',['isa','$VAR'(0),'ExistentialQuantifier-Bounded'],['arg2QuotedIsa','$VAR'(0),'CycLVariable']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationInstanceAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],[['$VAR'(2),'$VAR'(3),'$VAR'(0)]]],'BaseKB',["?INST","?COL","?PRED","?THING"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationInstanceAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],['$VAR'(2),'$VAR'(3),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultIsa','$VAR'(1),'$VAR'(2)]],[['isa','$VAR'(0),'$VAR'(2)]]],'CoreCycLMt',["?NAT","?FUNCTION","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultIsa','$VAR'(1),'$VAR'(2)]],['isa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(1),'$VAR'(2)],['natFunction','$VAR'(3),'$VAR'(1)],['genls','$VAR'(4),'$VAR'(5)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(4)],['natArgument','$VAR'(3),'$VAR'(2),'$VAR'(5)]],[['genls','$VAR'(0),'$VAR'(3)]]],'UniversalVocabularyMt',["?NAT","?FUNC","?NUM","?INDEP-COLL-NAT","?TERM","?INDEP-COLL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(1),'$VAR'(2)],['natFunction','$VAR'(3),'$VAR'(1)],['genls','$VAR'(4),'$VAR'(5)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(4)],['natArgument','$VAR'(3),'$VAR'(2),'$VAR'(5)]],['genls','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExistsMax','$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]],[['trueSentence',['thereExistAtMost','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?ARG']]]]]],'BaseKB',["?ARG1","?UNIV-COL","?SLOT","?EXIST-COL","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExistsMax','$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]],['trueSentence',['thereExistAtMost','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?ARG']]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),'$VAR'(1)]],[['greaterThanOrEqualTo','$VAR'(1),3]]],'BaseKB',["?REL","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),'$VAR'(1)]],['greaterThanOrEqualTo','$VAR'(1),3]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)],['unknownSentence',['thereExists','?BETWEEN',['and',['genls','?BETWEEN','$VAR'(1)],['genls','$VAR'(0),'?BETWEEN'],['different','?BETWEEN','$VAR'(0),'$VAR'(1)]]]]],[['nearestGenls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?COL","?NEAR-COL"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)],['unknownSentence',['thereExists','?BETWEEN',['and',['genls','?BETWEEN','$VAR'(1)],['genls','$VAR'(0),'?BETWEEN'],['different','?BETWEEN','$VAR'(0),'$VAR'(1)]]]]],['nearestGenls','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultQuotedIsa','$VAR'(1),'$VAR'(2)]],[['quotedIsa','$VAR'(0),'$VAR'(2)]]],'CoreCycLMt',["?NAT","?FUNCTION","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultQuotedIsa','$VAR'(1),'$VAR'(2)]],['quotedIsa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]],[['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),6,'$VAR'(1)],['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedCollection','$VAR'(0)],['collectionConventionMt','$VAR'(0),'$VAR'(1)]],[['genlMt','BaseKB','$VAR'(1)]]],'UniversalVocabularyMt',["?COL","?MT"],/*EL*/['implies',['and',['decontextualizedCollection','$VAR'(0)],['collectionConventionMt','$VAR'(0),'$VAR'(1)]],['genlMt','BaseKB','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['different','$VAR'(3),'$VAR'(2)],['arity','$VAR'(1),'$VAR'(3)]],[]],'BaseKB',["?SPEC","?GENL","?SPEC-ARITY","?GENL-ARITY"],/*EL*/['not',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['different','$VAR'(3),'$VAR'(2)],['arity','$VAR'(1),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'LogicalConnective'],['isa','$VAR'(0),'VariableArityRelation']],[['argsQuotedIsa','$VAR'(0),'CycLSentence-Assertible']]],'BaseKB',["?CONNECT"],/*EL*/['implies',['and',['isa','$VAR'(0),'LogicalConnective'],['isa','$VAR'(0),'VariableArityRelation']],['argsQuotedIsa','$VAR'(0),'CycLSentence-Assertible']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['conceptuallyRelated','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COLLECTION","?INSTANCE"],/*EL*/['implies',['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4),'$VAR'(5),'$VAR'(6)]],[['isa','$VAR'(6),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-2","?ANY-ARG-3","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4),'$VAR'(5),'$VAR'(6)]],['isa','$VAR'(6),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]],[['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]]],'BaseKB',["?PRED","?GENL-PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),3]],[['isa','$VAR'(0),'TernaryRelation']]],'BaseKB',["?REL"],/*EL*/['implies',['arity','$VAR'(0),3],['isa','$VAR'(0),'TernaryRelation']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls','$VAR'(0),'$VAR'(1)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]],[['conceptuallyRelated','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?SPEC","?COL","?REL-OBJ"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]],['conceptuallyRelated','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'CommutativeRelation'],['arity','$VAR'(0),'$VAR'(1)],['integerBetween',0,'$VAR'(2),'$VAR'(1)],['different','$VAR'(2),'$VAR'(3)],['integerBetween',0,'$VAR'(3),'$VAR'(1)]],[['commutativeInArgs','$VAR'(0),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?RELN","?ARITY","?M","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'CommutativeRelation'],['arity','$VAR'(0),'$VAR'(1)],['integerBetween',0,'$VAR'(2),'$VAR'(1)],['different','$VAR'(2),'$VAR'(3)],['integerBetween',0,'$VAR'(3),'$VAR'(1)]],['commutativeInArgs','$VAR'(0),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['unknownSentence',['thereExists','?BETWEEN',['and',['genlPreds','?BETWEEN','$VAR'(1)],['genlPreds','$VAR'(0),'?BETWEEN'],['different','?BETWEEN','$VAR'(1),'$VAR'(0)]]]]],[['nearestGenlPreds','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?PRED","?NEAR-PRED"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['unknownSentence',['thereExists','?BETWEEN',['and',['genlPreds','?BETWEEN','$VAR'(1)],['genlPreds','$VAR'(0),'?BETWEEN'],['different','?BETWEEN','$VAR'(1),'$VAR'(0)]]]]],['nearestGenlPreds','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['TimesFn',['$VAR'(1),1],['$VAR'(2),'$VAR'(3)]]],['termOfUnit','$VAR'(4),['UnitProductFn','$VAR'(2),'$VAR'(1)]]],[['equals','$VAR'(0),['$VAR'(4),'$VAR'(3)]]]],'BaseKB',["?TIMESFN","?UNIT2","?UNIT1","?N","?UNITPRODUCTFN"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['TimesFn',['$VAR'(1),1],['$VAR'(2),'$VAR'(3)]]],['termOfUnit','$VAR'(4),['UnitProductFn','$VAR'(2),'$VAR'(1)]]],['equals','$VAR'(0),['$VAR'(4),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['FormulaArgListFn','$VAR'(1)]],['evaluate','$VAR'(0),['FormulaArgListFn','$VAR'(2)]],['termOfUnit','$VAR'(1),'$VAR'(3)],['termOfUnit','$VAR'(2),'$VAR'(4)]],[['natArgumentsEqual','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?ARGS-LIST","?NAT1","?NAT2","?FORMULA1","?FORMULA2"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['FormulaArgListFn','$VAR'(1)]],['evaluate','$VAR'(0),['FormulaArgListFn','$VAR'(2)]],['termOfUnit','$VAR'(1),'$VAR'(3)],['termOfUnit','$VAR'(2),'$VAR'(4)]],['natArgumentsEqual','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgIsaTernaryPredicate']],[['transitiveViaArg','$VAR'(0),'genls',3]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ArgIsaTernaryPredicate'],['transitiveViaArg','$VAR'(0),'genls',3]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'AntiSymmetricBinaryPredicate'],['admittedArgument','$VAR'(1),1,'$VAR'(0)],['admittedArgument','$VAR'(1),2,'$VAR'(0)],['different','$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(1)],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['admittedArgument','$VAR'(2),1,'$VAR'(0)],['admittedArgument','$VAR'(2),2,'$VAR'(0)]],[]],'BaseKB',["?PRED","?ARG1","?ARG2"],/*EL*/['not',['and',['isa','$VAR'(0),'AntiSymmetricBinaryPredicate'],['admittedArgument','$VAR'(1),1,'$VAR'(0)],['admittedArgument','$VAR'(1),2,'$VAR'(0)],['different','$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(1)],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['admittedArgument','$VAR'(2),1,'$VAR'(0)],['admittedArgument','$VAR'(2),2,'$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'QuintaryRelation']],[['arity','$VAR'(0),5]]],'CoreCycLMt',["?REL"],/*EL*/['implies',['isa','$VAR'(0),'QuintaryRelation'],['arity','$VAR'(0),5]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?PRED","?X","?Y","?Z"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['isa','$VAR'(0),'VariableArityRelation'],['arityMin','$VAR'(0),'$VAR'(1)]],[['greaterThanOrEqualTo','$VAR'(1),2]]],'BaseKB',["?RELN","?ARITY-MIN"],/*EL*/['implies',['and',['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['isa','$VAR'(0),'VariableArityRelation'],['arityMin','$VAR'(0),'$VAR'(1)]],['greaterThanOrEqualTo','$VAR'(1),2]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationExistsCountAll','$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],[['trueSentence',['thereExistExactly','$VAR'(4),'?ARG1',['and',['isa','?ARG1','$VAR'(3)],['$VAR'(2),'?ARG1','$VAR'(0)]]]]]],'BaseKB',["?ARG2","?UNIV-COL","?SLOT","?EXIST-COL","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationExistsCountAll','$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],['trueSentence',['thereExistExactly','$VAR'(4),'?ARG1',['and',['isa','?ARG1','$VAR'(3)],['$VAR'(2),'?ARG1','$VAR'(0)]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsa','$VAR'(0),'$VAR'(1)],['equals','$VAR'(2),['$VAR'(0) | '$VAR'(3)]]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?FUNC","?COL","?VALUE","?ARGS"],/*EL*/['implies',['and',['resultIsa','$VAR'(0),'$VAR'(1)],['equals','$VAR'(2),['$VAR'(0) | '$VAR'(3)]]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa2-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(0),'$VAR'(5),'$VAR'(6),'$VAR'(7)]],[['isa','$VAR'(7),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-3","?ANY-ARG-4","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa2-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(0),'$VAR'(5),'$VAR'(6),'$VAR'(7)]],['isa','$VAR'(7),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['backchainForbiddenWhenUnboundInArg','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]],[]],'UniversalVocabularyMt',["?PRED","?N","?M"],/*EL*/['not',['and',['backchainForbiddenWhenUnboundInArg','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arityMax','$VAR'(0),'$VAR'(1)],['arityMin','$VAR'(0),'$VAR'(2)]],[['greaterThanOrEqualTo','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?RELN","?MAX","?MIN"],/*EL*/['implies',['and',['arityMax','$VAR'(0),'$VAR'(1)],['arityMin','$VAR'(0),'$VAR'(2)]],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['unknownSentence',['thereExists','?DIR',['reformulationDirectionInMode','?DIR','$VAR'(2),'$VAR'(3)]]],['defaultReformulationDirectionInModeForPred','$VAR'(4),'$VAR'(2),'$VAR'(1)],['evaluate','$VAR'(0),['FormulaArgFn',0,'$VAR'(3)]]],[['reformulationDirectionInMode','$VAR'(4),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?MODE","?RULE","?DEFAULT-DIR"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['unknownSentence',['thereExists','?DIR',['reformulationDirectionInMode','?DIR','$VAR'(2),'$VAR'(3)]]],['defaultReformulationDirectionInModeForPred','$VAR'(4),'$VAR'(2),'$VAR'(1)],['evaluate','$VAR'(0),['FormulaArgFn',0,'$VAR'(3)]]],['reformulationDirectionInMode','$VAR'(4),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),4]],[['isa','$VAR'(0),'QuaternaryRelation']]],'BaseKB',["?REL"],/*EL*/['implies',['arity','$VAR'(0),4],['isa','$VAR'(0),'QuaternaryRelation']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]]],'BaseKB',["?PRED","?GENL-PRED","?ARG1","?ARG2","?ARG3"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(0),'$VAR'(3)],['interArgGenl1-2','$VAR'(2),'$VAR'(1),'$VAR'(4)]],[['genls','$VAR'(3),'$VAR'(4)]]],'BaseKB',["?INDEP-SPEC","?INDEP-COL","?PRED","?DEP-SPEC","?DEP-COL"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(0),'$VAR'(3)],['interArgGenl1-2','$VAR'(2),'$VAR'(1),'$VAR'(4)]],['genls','$VAR'(3),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]],[['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),1,'$VAR'(1)],['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['evaluate','$VAR'(0),['FormulaArgFn',0,'$VAR'(1)]],['termOfUnit','$VAR'(1),'$VAR'(2)]],[['natFunction','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?FUNCTION","?NAT","?FORMULA"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['FormulaArgFn',0,'$VAR'(1)]],['termOfUnit','$VAR'(1),'$VAR'(2)]],['natFunction','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-1','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0)]],[['isa','$VAR'(4),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?DEP-INS","?ANY-ARG-2"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-1','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0)]],['isa','$VAR'(4),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SymmetricBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['$VAR'(0),'$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?ARG1","?ARG2"],/*EL*/['implies',['and',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)]],['$VAR'(0),'$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','False','$VAR'(0)],['evaluate','$VAR'(0),['EvaluateSubLFn',['ExpandSubLFn',['$VAR'(1)],['FIF',['QUOTE','$VAR'(1)],'True','False']]]],['evaluate','$VAR'(1),['EvaluateSubLFn','$VAR'(2)]]],[['trueSubL','$VAR'(2)]]],'BaseKB',["?EVALUATESUBLFN","?RESULT","?SUBL"],/*EL*/['implies',['and',['different','False','$VAR'(0)],['evaluate','$VAR'(0),['EvaluateSubLFn',['ExpandSubLFn',['$VAR'(1)],['FIF',['QUOTE','$VAR'(1)],'True','False']]]],['evaluate','$VAR'(1),['EvaluateSubLFn','$VAR'(2)]]],['trueSubL','$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7)]],[['isa','$VAR'(7),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-2","?ANY-ARG-3","?ANY-ARG-4","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7)]],['isa','$VAR'(7),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnaryRelation']],[['arity','$VAR'(0),1]]],'CoreCycLMt',["?REL"],/*EL*/['implies',['isa','$VAR'(0),'UnaryRelation'],['arity','$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['extentCardinality',['TheSetOf','?OBJ',['and',['isa','?OBJ','$VAR'(1)],['not',['isa','?OBJ','$VAR'(0)]]]],0]],[['subsetOf','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?COLL-2","?COLL-1"],/*EL*/['implies',['extentCardinality',['TheSetOf','?OBJ',['and',['isa','?OBJ','$VAR'(1)],['not',['isa','?OBJ','$VAR'(0)]]]],0],['subsetOf','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['subsetOf','TheEmptySet','$VAR'(0)]]],'BaseKB',["?SET"],/*EL*/['subsetOf','TheEmptySet','$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationExistsInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['isa',['RelationExistsInstanceFn','$VAR'(0),'$VAR'(1),'$VAR'(2)],'$VAR'(1)]]],'BaseKB',["?PRED","?COLL","?THING"],/*EL*/['implies',['relationExistsInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['isa',['RelationExistsInstanceFn','$VAR'(0),'$VAR'(1),'$VAR'(2)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionGenlsBackchainRequired','$VAR'(0)]],[['collectionGenlsBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionGenlsBackchainRequired','$VAR'(0)],['collectionGenlsBackchainEncouraged','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['relationInstanceExists','$VAR'(2),'$VAR'(0),'$VAR'(3)]]],'BaseKB',["?OBJ","?COL-1","?PRED","?COL-2"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['relationInstanceExists','$VAR'(2),'$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'PositiveInteger'],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(0)],['arity','$VAR'(2),'$VAR'(1)],['canonicalizerDirectiveForAllArgs','$VAR'(2),'$VAR'(3)]],[['canonicalizerDirectiveForArg','$VAR'(2),'$VAR'(0),'$VAR'(3)]]],'CoreCycLImplementationMt',["?N","?ARITY","?RELN","?DIRECTIVE"],/*EL*/['implies',['and',['isa','$VAR'(0),'PositiveInteger'],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(0)],['arity','$VAR'(2),'$VAR'(1)],['canonicalizerDirectiveForAllArgs','$VAR'(2),'$VAR'(3)]],['canonicalizerDirectiveForArg','$VAR'(2),'$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['denotes',['Quote',['Quote','$VAR'(0)]],['Quote','$VAR'(0)]]]],'BaseKB',["?X"],/*EL*/['denotes',['Quote',['Quote',['EscapeQuote','$VAR'(0)]]],['Quote',['EscapeQuote','$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['completeExtentDecidable','$VAR'(0)]],[['backchainForbidden','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['completeExtentDecidable','$VAR'(0)],['backchainForbidden','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]],[['conceptuallyRelated','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?OBJ","?COL","?REL-OBJ"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]],['conceptuallyRelated','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['EvaluateSubLFn','$VAR'(1)]]],[['performSubL','$VAR'(1)]]],'BaseKB',["??RESULT","?SUBL"],/*EL*/['implies',['evaluate','$VAR'(0),['EvaluateSubLFn','$VAR'(1)]],['performSubL','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?PRED","?GENL-PRED","?ARG1","?ARG2"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['relationAll','$VAR'(0),'$VAR'(2)]],[['relationAll','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?COL"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['relationAll','$VAR'(0),'$VAR'(2)]],['relationAll','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultGenl','$VAR'(0),'$VAR'(1)],['equals','$VAR'(2),['$VAR'(0) | '$VAR'(3)]]],[['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?FUNC","?COL","?VALUE","?ARGS"],/*EL*/['implies',['and',['resultGenl','$VAR'(0),'$VAR'(1)],['equals','$VAR'(2),['$VAR'(0) | '$VAR'(3)]]],['genls','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-1','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0)]],[['isa','$VAR'(4),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?DEP-INS","?ANY-ARG-2","?ANY-ARG-3"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-1','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0)]],['isa','$VAR'(4),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]],[['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),4,'$VAR'(1)],['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'termDependsOn']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-DEPENDENT-TERM']]]],'BaseKB',["?PRED"],/*EL*/['implies',['genlPreds','$VAR'(0),'termDependsOn'],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-DEPENDENT-TERM']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultIsaArg','$VAR'(1),'$VAR'(2)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(0),'$VAR'(3)]]],'CoreCycLMt',["?NAT","?FUNC","?N","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultIsaArg','$VAR'(1),'$VAR'(2)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4)],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[]],'BaseKB',["?NEG-PRED","?PRED","?ARG1","?ARG2","?ARG3"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4)],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['holdsIn','$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['holdsIn','$VAR'(1),['$VAR'(0),'$VAR'(3),'$VAR'(4)]]],[['holdsIn','$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(4)]]]],'BaseKB',["?PRED","?TIME","?ARG1","?ARG2","?ARG3"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['holdsIn','$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['holdsIn','$VAR'(1),['$VAR'(0),'$VAR'(3),'$VAR'(4)]]],['holdsIn','$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsa','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'Collection']],[['isa','$VAR'(0),'CollectionDenotingFunction']]],'BaseKB',["?FUNCTION","?COLTYPE"],/*EL*/['implies',['and',['resultIsa','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'Collection']],['isa','$VAR'(0),'CollectionDenotingFunction']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls-SpecDenotesGenlInstances','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'UniversalVocabularyMt',["?Q-COL","?COL","?RELN","?N"],/*EL*/['implies',['and',['genls-SpecDenotesGenlInstances','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)]],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['elInverse','$VAR'(0),'$VAR'(1)]],[['expansion','$VAR'(1),['$VAR'(0),':ARG2',':ARG1']]]],'BaseKB',["?SLOT","?INVERSE"],/*EL*/['implies',['elInverse','$VAR'(0),'$VAR'(1)],['expansion','$VAR'(1),['$VAR'(0),':ARG2',':ARG1']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['arity','$VAR'(0),'$VAR'(1)]],[['greaterThanOrEqualTo','$VAR'(1),2]]],'BaseKB',["?RELN","?ARITY"],/*EL*/['implies',['and',['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['arity','$VAR'(0),'$VAR'(1)]],['greaterThanOrEqualTo','$VAR'(1),2]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['coExtensional','$VAR'(1),'$VAR'(2)]],[['isa','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?THING","?COL1","?COL2"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['coExtensional','$VAR'(1),'$VAR'(2)]],['isa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],[['isa','$VAR'(6),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-2","?DEP-INS","?ANY-ARG-4"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],['isa','$VAR'(6),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['natFunction','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultGenl','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['genls','$VAR'(0),'$VAR'(5)]]],'BaseKB',["?NAT","?FUNC","?COL","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultGenl','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['genls','$VAR'(0),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['trueSentence','$VAR'(0)],['sentenceTruth','$VAR'(0),'False']]],'UniversalVocabularyMt',["?SENT"],/*EL*/['or',['trueSentence','$VAR'(0)],['sentenceTruth','$VAR'(0),'False']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)],['$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?NEG-PRED","?PRED","?ARG1"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)],['$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['genlInverse','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['arg1Isa','$VAR'(0),'$VAR'(2)],['arg2Isa','$VAR'(1),'$VAR'(2)],['arg2Isa','$VAR'(0),'$VAR'(3)],['arg1Isa','$VAR'(1),'$VAR'(3)]],[['isa','$VAR'(1),'ReflexiveBinaryPredicate']]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?ARG1ISA","?ARG2ISA"],/*EL*/['implies',['and',['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['genlInverse','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['arg1Isa','$VAR'(0),'$VAR'(2)],['arg2Isa','$VAR'(1),'$VAR'(2)],['arg2Isa','$VAR'(0),'$VAR'(3)],['arg1Isa','$VAR'(1),'$VAR'(3)]],['isa','$VAR'(1),'ReflexiveBinaryPredicate']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['ist-Asserted','$VAR'(0),'$VAR'(1)]],[['ist','$VAR'(0),['assertedSentence','$VAR'(1)]]]],'UniversalVocabularyMt',["?MT","?FORMULA"],/*EL*/['implies',['ist-Asserted','$VAR'(0),'$VAR'(1)],['ist','$VAR'(0),['assertedSentence','$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quotedIsa','$VAR'(0),'$VAR'(1)]],[['isa',['Quote','$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?X","?COL"],/*EL*/['implies',['quotedIsa','$VAR'(0),'$VAR'(1)],['isa',['Quote',['EscapeQuote','$VAR'(0)]],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ExistentialQuantifier-Bounded']],[['arg3QuotedIsa','$VAR'(0),'CycLSentence-Assertible']]],'UniversalVocabularyMt',["?QUANT"],/*EL*/['implies',['isa','$VAR'(0),'ExistentialQuantifier-Bounded'],['arg3QuotedIsa','$VAR'(0),'CycLSentence-Assertible']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(2)]],[['predicateConventionMt','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?SPEC","?MT"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(2)]],['predicateConventionMt','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['trueSentence','$VAR'(0)],['interArgDifferent','$VAR'(1),'$VAR'(2),'$VAR'(3)],['evaluate','$VAR'(1),['FormulaArgFn',0,'$VAR'(0)]],['evaluate','$VAR'(4),['FormulaArgFn','$VAR'(2),'$VAR'(0)]],['evaluate','$VAR'(5),['FormulaArgFn','$VAR'(3),'$VAR'(0)]]],[['different','$VAR'(4),'$VAR'(5)]]],'BaseKB',["?FORMULA","?FORMULAARGFN-2","?ARG-1","?ARG-2","?FORMULAARGFN","?FORMULAARGFN-1"],/*EL*/['implies',['and',['trueSentence','$VAR'(0)],['interArgDifferent','$VAR'(1),'$VAR'(2),'$VAR'(3)],['evaluate','$VAR'(1),['FormulaArgFn',0,'$VAR'(0)]],['evaluate','$VAR'(4),['FormulaArgFn','$VAR'(2),'$VAR'(0)]],['evaluate','$VAR'(5),['FormulaArgFn','$VAR'(3),'$VAR'(0)]]],['different','$VAR'(4),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'BinaryRelation']],[['arity','$VAR'(0),2]]],'CoreCycLMt',["?REL"],/*EL*/['implies',['isa','$VAR'(0),'BinaryRelation'],['arity','$VAR'(0),2]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(0),'$VAR'(4)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],[['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]],'BaseKB',["?UNIT-ONE","?UNIT-TWO","?FACTOR1","?PERFN-1","?UNIT-THREE","?PERFN"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(0),'$VAR'(4)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationExistsMaxAll','$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],[['trueSentence',['thereExistAtMost','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'?ARG','$VAR'(0)]]]]]],'BaseKB',["?ARG2","?UNIV-COL","?SLOT","?EXIST-COL","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationExistsMaxAll','$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],['trueSentence',['thereExistAtMost','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'?ARG','$VAR'(0)]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgGenlTernaryPredicate']],[['transitiveViaArg','$VAR'(0),'genls',3]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ArgGenlTernaryPredicate'],['transitiveViaArg','$VAR'(0),'genls',3]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0)]],[['isa','$VAR'(5),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0)]],['isa','$VAR'(5),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'AntiSymmetricBinaryPredicate'],['isa','$VAR'(0),'IrreflexiveBinaryPredicate']],[['isa','$VAR'(0),'AsymmetricBinaryPredicate']]],'BaseKB',["?SLOT"],/*EL*/['implies',['and',['isa','$VAR'(0),'AntiSymmetricBinaryPredicate'],['isa','$VAR'(0),'IrreflexiveBinaryPredicate']],['isa','$VAR'(0),'AsymmetricBinaryPredicate']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],[['isa','$VAR'(7),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-2","?ANY-ARG-3","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-4','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],['isa','$VAR'(7),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['isa','$VAR'(0),'$VAR'(1)]],['natFunction','$VAR'(2),'$VAR'(3)],['resultIsaArgIsa','$VAR'(3),'$VAR'(4)],['natArgument','$VAR'(2),'$VAR'(4),'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?ARG","?COL","?NART","?FUNC","?INT"],/*EL*/['implies',['and',['assertedSentence',['isa','$VAR'(0),'$VAR'(1)]],['natFunction','$VAR'(2),'$VAR'(3)],['resultIsaArgIsa','$VAR'(3),'$VAR'(4)],['natArgument','$VAR'(2),'$VAR'(4),'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'Function-Denotational'],['arity','$VAR'(0),2]],[['isa','$VAR'(0),'BinaryFunction']]],'BaseKB',["?FUN"],/*EL*/['implies',['and',['isa','$VAR'(0),'Function-Denotational'],['arity','$VAR'(0),2]],['isa','$VAR'(0),'BinaryFunction']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg1Genl','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(3),'$VAR'(1)]]],'BaseKB',["?PRED","?COL2","??ARG1","?ARG2"],/*EL*/['implies',['and',['arg1Genl','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAll','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(1)]],[['$VAR'(0),'$VAR'(2)]]],'BaseKB',["?PRED","?COL","?OBJ"],/*EL*/['implies',['and',['relationAll','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(1)]],['$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['sentenceDesignationArgnum','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),'$VAR'(1),'CycLSentence-Assertible']]],'BaseKB',["?RELN","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['sentenceDesignationArgnum','$VAR'(0),'$VAR'(1)]],['argIsa','$VAR'(0),'$VAR'(1),'CycLSentence-Assertible']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationInstanceExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['$VAR'(0),'$VAR'(1),['RelationInstanceExistsFn','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]],'BaseKB',["?PRED","?THING","?COLL"],/*EL*/['implies',['relationInstanceExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(1),['RelationInstanceExistsFn','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','$VAR'(0),'$VAR'(1)],['genlMt','$VAR'(0),'$VAR'(1)],['unknownSentence',['thereExists','?BETWEEN',['and',['genlMt','?BETWEEN','$VAR'(1)],['genlMt','$VAR'(0),'?BETWEEN'],['different','?BETWEEN','$VAR'(0),'$VAR'(1)]]]]],[['nearestGenlMt','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?MT","?NEAR-MT"],/*EL*/['implies',['and',['different','$VAR'(0),'$VAR'(1)],['genlMt','$VAR'(0),'$VAR'(1)],['unknownSentence',['thereExists','?BETWEEN',['and',['genlMt','?BETWEEN','$VAR'(1)],['genlMt','$VAR'(0),'?BETWEEN'],['different','?BETWEEN','$VAR'(0),'$VAR'(1)]]]]],['nearestGenlMt','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Microtheory']],[['genlMt','$VAR'(0),'BaseKB']]],'BaseKB',["?MIC"],/*EL*/['implies',['isa','$VAR'(0),'Microtheory'],['genlMt','$VAR'(0),'BaseKB']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['evaluate','$VAR'(2),['TimesFn',['$VAR'(0),'$VAR'(3)],['$VAR'(1),'$VAR'(4)]]],['evaluate','$VAR'(5),['TimesFn',['$VAR'(0),'$VAR'(4)],['$VAR'(1),'$VAR'(3)]]]],[['equals','$VAR'(2),'$VAR'(5)]]],'BaseKB',["?UNIT1","?UNIT2","?TIMESFN","?NUM2","?NUM1","?TIMESFN-1"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['evaluate','$VAR'(2),['TimesFn',['$VAR'(0),'$VAR'(3)],['$VAR'(1),'$VAR'(4)]]],['evaluate','$VAR'(5),['TimesFn',['$VAR'(0),'$VAR'(4)],['$VAR'(1),'$VAR'(3)]]]],['equals','$VAR'(2),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(0)],['interArgIsa2-1','$VAR'(2),'$VAR'(1),'$VAR'(4)]],[['isa','$VAR'(3),'$VAR'(4)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-INS","?DEP-COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(0)],['interArgIsa2-1','$VAR'(2),'$VAR'(1),'$VAR'(4)]],['isa','$VAR'(3),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultGenlArg','$VAR'(1),'$VAR'(2)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['genls','$VAR'(0),'$VAR'(3)]]],'CoreCycLMt',["?NAT","?FUNC","?N","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultGenlArg','$VAR'(1),'$VAR'(2)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['genls','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]],[]],'BaseKB',["?NEG-PRED","?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExistsMin','$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]],[['trueSentence',['thereExistAtLeast','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?ARG']]]]]],'BaseKB',["?ARG1","?UNIV-COL","?SLOT","?EXIST-COL","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExistsMin','$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]],['trueSentence',['thereExistAtLeast','$VAR'(4),'?ARG',['and',['isa','?ARG','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?ARG']]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['admittedArgument','$VAR'(1),1,'$VAR'(0)],['admittedArgument','$VAR'(1),2,'$VAR'(0)]],[['$VAR'(0),'$VAR'(1),'$VAR'(1)]]],'BaseKB',["?PRED","?OBJ"],/*EL*/['implies',['and',['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['admittedArgument','$VAR'(1),1,'$VAR'(0)],['admittedArgument','$VAR'(1),2,'$VAR'(0)]],['$VAR'(0),'$VAR'(1),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['isa','$VAR'(0),'$VAR'(5)]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['isa','$VAR'(0),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['trueSentence','$VAR'(0)]],[['sentenceTruth','$VAR'(0),'True']]],'UniversalVocabularyMt',["?SENT"],/*EL*/['implies',['trueSentence','$VAR'(0)],['sentenceTruth','$VAR'(0),'True']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]],[['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),2,'$VAR'(1)],['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],[['predicateConventionMt','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?MT","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],['predicateConventionMt','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0),'$VAR'(6),'$VAR'(7)]],[['isa','$VAR'(7),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-2","?ANY-ARG-4","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa3-5','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(0),'$VAR'(6),'$VAR'(7)]],['isa','$VAR'(7),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)]],[['coExtensional','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?COL1","?COL2"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)]],['coExtensional','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],[['isa',['RelationExistsAllFn','$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(1)],'$VAR'(3)]]],'BaseKB',["?TERM","?INDEP-COL","?PRED","?DEP-COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],['isa',['RelationExistsAllFn','$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(1)],'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationInstanceExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(2)],['$VAR'(0),'$VAR'(1),'?INST']]]]]],'BaseKB',["?PRED","?THING","?COL"],/*EL*/['implies',['relationInstanceExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(2)],['$VAR'(0),'$VAR'(1),'?INST']]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['quotedArgument','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?PRED","?N","??COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)],['quotedArgument','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['elementOf','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['elementOf','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['microtheoryDesignationArgnum','$VAR'(0),'$VAR'(1)]],[['argIsa','$VAR'(0),'$VAR'(1),'Microtheory']]],'BaseKB',["?RELN","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'MicrotheoryDesignatingRelation'],['microtheoryDesignationArgnum','$VAR'(0),'$VAR'(1)]],['argIsa','$VAR'(0),'$VAR'(1),'Microtheory']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['equals','$VAR'(0),'$VAR'(1)]],[['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['equals','$VAR'(0),'$VAR'(1)],['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'PositiveInteger'],['greaterThanOrEqualTo','$VAR'(0),'$VAR'(1)],['greaterThanOrEqualTo','$VAR'(2),'$VAR'(0)],['arity','$VAR'(3),'$VAR'(2)],['canonicalizerDirectiveForArgAndRest','$VAR'(3),'$VAR'(1),'$VAR'(4)]],[['canonicalizerDirectiveForArg','$VAR'(3),'$VAR'(0),'$VAR'(4)]]],'CoreCycLImplementationMt',["?N","?ARGNUM","?ARITY","?RELN","?DIRECTIVE"],/*EL*/['implies',['and',['isa','$VAR'(0),'PositiveInteger'],['greaterThanOrEqualTo','$VAR'(0),'$VAR'(1)],['greaterThanOrEqualTo','$VAR'(2),'$VAR'(0)],['arity','$VAR'(3),'$VAR'(2)],['canonicalizerDirectiveForArgAndRest','$VAR'(3),'$VAR'(1),'$VAR'(4)]],['canonicalizerDirectiveForArg','$VAR'(3),'$VAR'(0),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['minimize',['disjointWith','$VAR'(0),'$VAR'(0)]]]],'BaseKB',["?COL"],/*EL*/['minimize',['disjointWith','$VAR'(0),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['QuotientFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),1]]],['termOfUnit','$VAR'(4),['PerFn','$VAR'(1),'$VAR'(3)]]],[['equals','$VAR'(0),['$VAR'(4),'$VAR'(2)]]]],'BaseKB',["?QUOTIENTFN","?UNIT1","?N","?UNIT2","?PERFN"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['QuotientFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),1]]],['termOfUnit','$VAR'(4),['PerFn','$VAR'(1),'$VAR'(3)]]],['equals','$VAR'(0),['$VAR'(4),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(2)],['disjointWith','$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?OBJ","?COL1","?COL2"],/*EL*/['not',['and',['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(2)],['disjointWith','$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SiblingDisjointCollectionType'],['isa','$VAR'(1),'$VAR'(0)],['isa','$VAR'(2),'$VAR'(0)]],[['genls','$VAR'(1),'$VAR'(2)],['disjointWith','$VAR'(1),'$VAR'(2)],['siblingDisjointExceptions','$VAR'(1),'$VAR'(2)],['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?SIBDIS-COL","?COL1","?COL2"],/*EL*/['implies',['and',['isa','$VAR'(0),'SiblingDisjointCollectionType'],['isa','$VAR'(1),'$VAR'(0)],['isa','$VAR'(2),'$VAR'(0)]],['or',['genls','$VAR'(1),'$VAR'(2)],['disjointWith','$VAR'(1),'$VAR'(2)],['siblingDisjointExceptions','$VAR'(1),'$VAR'(2)],['genls','$VAR'(2),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]],[['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),5,'$VAR'(1)],['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExistsCount','$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]],[['trueSentence',['thereExistExactly','$VAR'(4),'?INST-EXIST',['and',['isa','?INST-EXIST','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?INST-EXIST']]]]]],'BaseKB',["?INST-UNIV","?UNIV-COL","?REL","?EXIST-COL","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExistsCount','$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]],['trueSentence',['thereExistExactly','$VAR'(4),'?INST-EXIST',['and',['isa','?INST-EXIST','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?INST-EXIST']]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'TernaryRelation']],[['arity','$VAR'(0),3]]],'CoreCycLMt',["?REL"],/*EL*/['implies',['isa','$VAR'(0),'TernaryRelation'],['arity','$VAR'(0),3]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(0)]]],[['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]],'BaseKB',["?UNIT-TWO","?UNIT-THREE","?FACTOR1","?PERFN-1","?UNIT-ONE","?PERFN"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(0)]]],['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','disjointWith','$VAR'(0)],['genlPreds','$VAR'(0),'disjointWith']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-DISJOINTWITH']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','disjointWith','$VAR'(0)],['genlPreds','$VAR'(0),'disjointWith']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-DISJOINTWITH']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SymmetricBinaryPredicate'],['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['$VAR'(1),'$VAR'(3),'$VAR'(2)]]],'BaseKB',["?PRED","?GENL-PRED","?ARG-1","?ARG-2"],/*EL*/['implies',['and',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(1),'$VAR'(3),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'AntiTransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(1),'$VAR'(3)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[]],'BaseKB',["?PRED","?X","?Y","?Z"],/*EL*/['not',['and',['isa','$VAR'(0),'AntiTransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(1),'$VAR'(3)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['decontextualizedPredicate','$VAR'(1)]]],'BaseKB',["?PRED","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(1),'$VAR'(0)]],['decontextualizedPredicate','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0)]],[['isa','$VAR'(6),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?ANY-ARG-1","?ANY-ARG-2","?DEP-INS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa4-3','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(0)]],['isa','$VAR'(6),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['differentSymbols','$VAR'(0),'$VAR'(1)],['equalSymbols','$VAR'(0),'$VAR'(1)]],[]],'BaseKB',["?A","?B"],/*EL*/['not',['and',['differentSymbols','$VAR'(0),'$VAR'(1)],['equalSymbols','$VAR'(0),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['evaluateImmediately','$VAR'(0)]],[['evaluateAtEL','$VAR'(0)]]],'UniversalVocabularyMt',["?FUNC"],/*EL*/['implies',['evaluateImmediately','$VAR'(0)],['evaluateAtEL','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['trueSentence','$VAR'(0)],['sentenceImplies','$VAR'(0),'$VAR'(1)]],[['trueSentence','$VAR'(1)]]],'BaseKB',["?ANTE","?CONSEQ"],/*EL*/['implies',['and',['trueSentence','$VAR'(0)],['sentenceImplies','$VAR'(0),'$VAR'(1)]],['trueSentence','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['FormulaArgFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(2),'$VAR'(3)]],[['natArgument','$VAR'(2),'$VAR'(1),'$VAR'(0)]]],'BaseKB',["?TERM","?ARG","?NAT","?FORMULA"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['FormulaArgFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(2),'$VAR'(3)]],['natArgument','$VAR'(2),'$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionBackchainRequired','$VAR'(0)]],[['collectionBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionBackchainRequired','$VAR'(0)],['collectionBackchainEncouraged','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(3),'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE","?COL","?ARG2"],/*EL*/['implies',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)]],[['isa','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?OBJ","?SUBSET","?SUPERSET"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)]],['isa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['operatorFormulas','$VAR'(0),'$VAR'(1)]],[['natFunction','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['operatorFormulas','$VAR'(0),'$VAR'(1)],['natFunction','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['isa',['RelationAllExistsFn','$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3)],'$VAR'(3)]]],'BaseKB',["?TERM","?INDEP-COL","?PRED","?DEP-COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['isa',['RelationAllExistsFn','$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3)],'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationInstanceExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['isa',['RelationInstanceExistsFn','$VAR'(0),'$VAR'(1),'$VAR'(2)],'$VAR'(2)]]],'BaseKB',["?PRED","?THING","?COLL"],/*EL*/['implies',['relationInstanceExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['isa',['RelationInstanceExistsFn','$VAR'(0),'$VAR'(1),'$VAR'(2)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationInstanceAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['trueSentence',['implies',['isa','$VAR'(3),'$VAR'(2)],['$VAR'(0),'$VAR'(1),'$VAR'(3)]]]]],'BaseKB',["?PRED","?THING","?COL","?INST"],/*EL*/['implies',['relationInstanceAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['implies',['isa','$VAR'(3),'$VAR'(2)],['$VAR'(0),'$VAR'(1),'$VAR'(3)]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['termOfUnit','$VAR'(0),['PerFn','$VAR'(1),'$VAR'(2)]]],[['multiplicationUnits','$VAR'(0),'$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PERFN","?UOM1","?UOM2"],/*EL*/['implies',['termOfUnit','$VAR'(0),['PerFn','$VAR'(1),'$VAR'(2)]],['multiplicationUnits','$VAR'(0),'$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['negationInverse','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)],['$VAR'(1),'$VAR'(3),'$VAR'(2)]],[]],'BaseKB',["?BINPRED1","?BINPRED2","?ARG1","?ARG2"],/*EL*/['not',['and',['negationInverse','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)],['$VAR'(1),'$VAR'(3),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultGenl','$VAR'(1),'$VAR'(2)]],[['genls','$VAR'(0),'$VAR'(2)]]],'CoreCycLMt',["?NAT","?FUNCTION","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultGenl','$VAR'(1),'$VAR'(2)]],['genls','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['evaluate','$VAR'(3),['TimesFn','$VAR'(2),'$VAR'(4)]]],[['equals',['$VAR'(1),'$VAR'(4)],['$VAR'(0),'$VAR'(3)]]]],'BaseKB',["?SMALL","?BIG","?FACTOR","?TIMESFN","?N"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['evaluate','$VAR'(3),['TimesFn','$VAR'(2),'$VAR'(4)]]],['equals',['$VAR'(1),'$VAR'(4)],['$VAR'(0),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['isa','$VAR'(0),'TransitiveBinaryPredicate']],[['isa','$VAR'(0),'AsymmetricBinaryPredicate']]],'BaseKB',["?SLOT"],/*EL*/['implies',['and',['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['isa','$VAR'(0),'TransitiveBinaryPredicate']],['isa','$VAR'(0),'AsymmetricBinaryPredicate']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-1','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],[['isa','$VAR'(4),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?DEP-INS","?ANY-ARG-2","?ANY-ARG-3","?ANY-ARG-4"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa5-1','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(4),'$VAR'(5),'$VAR'(6),'$VAR'(7),'$VAR'(0)]],['isa','$VAR'(4),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['isa','$VAR'(0),'Thing']]],'UniversalVocabularyMt',["?OBJ"],/*EL*/['isa','$VAR'(0),'Thing']).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationExistsInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['$VAR'(0),['RelationExistsInstanceFn','$VAR'(0),'$VAR'(1),'$VAR'(2)],'$VAR'(2)]]],'BaseKB',["?PRED","?COLL","?THING"],/*EL*/['implies',['relationExistsInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),['RelationExistsInstanceFn','$VAR'(0),'$VAR'(1),'$VAR'(2)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)]],[['genlMt','BaseKB','$VAR'(1)]]],'UniversalVocabularyMt',["?PRED","?MT"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)]],['genlMt','BaseKB','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionIsaBackchainRequired','$VAR'(0)]],[['collectionIsaBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionIsaBackchainRequired','$VAR'(0)],['collectionIsaBackchainEncouraged','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThanOrEqualTo','$VAR'(0),'$VAR'(1)],['argAndRestIsa','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['argIsa','$VAR'(2),'$VAR'(0),'$VAR'(3)]]],'BaseKB',["?N","?ARGNUM","?PRED","?COL"],/*EL*/['implies',['and',['greaterThanOrEqualTo','$VAR'(0),'$VAR'(1)],['argAndRestIsa','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['argIsa','$VAR'(2),'$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)]],[['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)]]],'BaseKB',["?PRED","?GENL-PRED","?ARG1","?ARG2","?ARG3","?ARG4","?ARG5"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)]],['$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(6)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['microtheoryDesignationArgnum','$VAR'(0),'$VAR'(1)],['sentenceDesignationArgnum','$VAR'(0),'$VAR'(1)]],[]],'BaseKB',["?RELN","?NUM"],/*EL*/['not',['and',['microtheoryDesignationArgnum','$VAR'(0),'$VAR'(1)],['sentenceDesignationArgnum','$VAR'(0),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),0],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(0)],['arity','$VAR'(2),'$VAR'(1)],['resultIsa','$VAR'(2),'$VAR'(3)]],[['interArgResultIsa','$VAR'(2),'$VAR'(0),'Thing','$VAR'(3)]]],'BaseKB',["?NUM","?ARITY","?FN","?COLL"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),0],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(0)],['arity','$VAR'(2),'$VAR'(1)],['resultIsa','$VAR'(2),'$VAR'(3)]],['interArgResultIsa','$VAR'(2),'$VAR'(0),'Thing','$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(1),'$VAR'(3)],['different','$VAR'(1),'$VAR'(3)],['relationAllExists','$VAR'(0),'$VAR'(3),'$VAR'(2)]],[['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?COL1","?COL2","?GENL"],/*EL*/['implies',['and',['genls','$VAR'(1),'$VAR'(3)],['different','$VAR'(1),'$VAR'(3)],['relationAllExists','$VAR'(0),'$VAR'(3),'$VAR'(2)]],['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)]],[['nearestIsa','$VAR'(0),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?FARTHER-COL',['thereExists','?FAR-COL',['and',['isa','$VAR'(0),'?FAR-COL'],['genls','?FAR-COL','?FARTHER-COL'],['different','?FAR-COL','?FARTHER-COL']]]]]]],'BaseKB',["?OBJ","?NEAR-COL"],/*EL*/['implies',['isa','$VAR'(0),'$VAR'(1)],['or',['nearestIsa','$VAR'(0),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?FARTHER-COL',['thereExists','?FAR-COL',['and',['isa','$VAR'(0),'?FAR-COL'],['genls','?FAR-COL','?FARTHER-COL'],['different','?FAR-COL','?FARTHER-COL']]]]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['trueRule','$VAR'(0),'$VAR'(1)]],[['trueSentence','$VAR'(1)]]],'BaseKB',["?TEMPLATE","?FORMULA"],/*EL*/['implies',['trueRule','$VAR'(0),'$VAR'(1)],['trueSentence','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['evaluate','$VAR'(0),['QuotientFn','$VAR'(1),'$VAR'(2)]]],[['ratioOfTo','$VAR'(1),'$VAR'(2),'$VAR'(0)]]],'BaseKB',["?QUOTIENTFN","?NUM-1","?NUM-2"],/*EL*/['implies',['evaluate','$VAR'(0),['QuotientFn','$VAR'(1),'$VAR'(2)]],['ratioOfTo','$VAR'(1),'$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg5Isa','$VAR'(0),'$VAR'(1)]],[['resultIsa',['FunctionToArg',5,'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE"],/*EL*/['implies',['arg5Isa','$VAR'(0),'$VAR'(1)],['resultIsa',['FunctionToArg',5,'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),2,'$VAR'(1)]],[['arg2QuotedIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),2,'$VAR'(1)],['arg2QuotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['different','$VAR'(2),'$VAR'(4)],['isa','$VAR'(4),'$VAR'(3)],['$VAR'(5),'$VAR'(0),'$VAR'(4)],['$VAR'(5),'$VAR'(0),'$VAR'(2)],['relationAllExistsMax','$VAR'(5),'$VAR'(1),'$VAR'(3),1]],[]],'UniversalVocabularyMt',["?INST-1","?COL1","?INST-2A","?COL2","?INST-2B","?PRED"],/*EL*/['not',['and',['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['different','$VAR'(2),'$VAR'(4)],['isa','$VAR'(4),'$VAR'(3)],['$VAR'(5),'$VAR'(0),'$VAR'(4)],['$VAR'(5),'$VAR'(0),'$VAR'(2)],['relationAllExistsMax','$VAR'(5),'$VAR'(1),'$VAR'(3),1]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)],['genls','$VAR'(1),'$VAR'(2)],['different','$VAR'(2),'$VAR'(1)]],[['nearestCommonSpecs','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['genls','?COMMON-FAR','$VAR'(0)],['genls','?COMMON-FAR','$VAR'(2)],['genls','?COMMON-FARTHER','?COMMON-FAR'],['different','$VAR'(0),'?COMMON-FAR'],['different','$VAR'(2),'?COMMON-FAR'],['different','?COMMON-FAR','?COMMON-FARTHER']]]]]]],'BaseKB',["?COL-1","?COMMON-NEAR","?COL-2"],/*EL*/['implies',['and',['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)],['genls','$VAR'(1),'$VAR'(2)],['different','$VAR'(2),'$VAR'(1)]],['or',['nearestCommonSpecs','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['genls','?COMMON-FAR','$VAR'(0)],['genls','?COMMON-FAR','$VAR'(2)],['genls','?COMMON-FARTHER','?COMMON-FAR'],['different','$VAR'(0),'?COMMON-FAR'],['different','$VAR'(2),'?COMMON-FAR'],['different','?COMMON-FAR','?COMMON-FARTHER']]]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'genlPreds']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLPREDS']]]],'BaseKB',["?SPEC-INVERSE"],/*EL*/['implies',['genlInverse','$VAR'(0),'genlPreds'],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLPREDS']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['trueSentence',['$VAR'(2),'$VAR'(0),'$VAR'(3)]]]],'BaseKB',["?INST","?COL","?PRED","?THING"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['trueSentence',['$VAR'(2),'$VAR'(0),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationAllExists','$VAR'(0),'$VAR'(3),'$VAR'(2)]],[]],'BaseKB',["?PRED","?ARG2ISA","?ARG2TYPE","?ARG1TYPE"],/*EL*/['not',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationAllExists','$VAR'(0),'$VAR'(3),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['notAssertible','$VAR'(0)]],[['abnormal',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'termDependsOn']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-DEPENDENT-TERM']]]],'BaseKB',["?PRED"],/*EL*/['implies',['genlPreds','$VAR'(0),'termDependsOn'],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-DEPENDENT-TERM']]])]]],'BaseKB',["?PRED"],/*EL*/['implies',['notAssertible','$VAR'(0)],['abnormal',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'termDependsOn']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-DEPENDENT-TERM']]]],'BaseKB',["?PRED"],/*EL*/['implies',['genlPreds','$VAR'(0),'termDependsOn'],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-DEPENDENT-TERM']]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ScalarPointValue'],['maxQuantValue','$VAR'(0),'$VAR'(1)]],[['equals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?POINT1","?POINT2"],/*EL*/['implies',['and',['isa','$VAR'(0),'ScalarPointValue'],['maxQuantValue','$VAR'(0),'$VAR'(1)]],['equals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]],[['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg4SometimesIsa','$VAR'(0),'$VAR'(1)],['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(1)],['different','$VAR'(2),'$VAR'(1)]],[['nearestCommonGenls','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['genls','$VAR'(0),'?COMMON-FAR'],['genls','$VAR'(2),'?COMMON-FAR'],['genls','?COMMON-FAR','?COMMON-FARTHER'],['different','$VAR'(0),'?COMMON-FAR'],['different','$VAR'(2),'?COMMON-FAR'],['different','?COMMON-FAR','?COMMON-FARTHER']]]]]]],'BaseKB',["?COL-1","?COMMON-NEAR","?COL-2"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(1)],['different','$VAR'(2),'$VAR'(1)]],['or',['nearestCommonGenls','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['genls','$VAR'(0),'?COMMON-FAR'],['genls','$VAR'(2),'?COMMON-FAR'],['genls','?COMMON-FAR','?COMMON-FARTHER'],['different','$VAR'(0),'?COMMON-FAR'],['different','$VAR'(2),'?COMMON-FAR'],['different','?COMMON-FAR','?COMMON-FARTHER']]]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),3,'$VAR'(1),1,'$VAR'(2)]],[['interArgIsa3-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),3,'$VAR'(1),1,'$VAR'(2)],['interArgIsa3-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),0]],[]],'BaseKB',["?RELATION","?COL1","?COL2"],/*EL*/['not',['and',['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),0]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quantitySubsumes','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(3),'$VAR'(2)],['maxQuantValue','$VAR'(1),'$VAR'(3)]],[]],'BaseKB',["?SUPER","?SUB","?SUPERMAX","?SUBMAX"],/*EL*/['not',['and',['quantitySubsumes','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(3),'$VAR'(2)],['maxQuantValue','$VAR'(1),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['evaluationDefn',['FunctionToArg','$VAR'(0),'$VAR'(1)],['SubLQuoteFn','CYC-FUNCTION-TO-ARG']]]],'BaseKB',["?N","?PREDICATE"],/*EL*/['evaluationDefn',['FunctionToArg','$VAR'(0),'$VAR'(1)],['SubLQuoteFn','CYC-FUNCTION-TO-ARG']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SymmetricBinaryPredicate'],['transitiveViaArg','$VAR'(1),'$VAR'(0),'$VAR'(2)]],[['transitiveViaArgInverse','$VAR'(1),'$VAR'(0),'$VAR'(2)]]],'BaseKB',["?BPRED","?PRED","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['transitiveViaArg','$VAR'(1),'$VAR'(0),'$VAR'(2)]],['transitiveViaArgInverse','$VAR'(1),'$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'FixedArityRelation'],['arity','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],[['arity','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?ARITY","?SPECPRED"],/*EL*/['implies',['and',['isa','$VAR'(0),'FixedArityRelation'],['arity','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],['arity','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','$VAR'(0),'$VAR'(0)]],[]],'BaseKB',["?OBJ"],/*EL*/['not',['different','$VAR'(0),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllExistsMax','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['relationAllExistsMin','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?REL","?A","?B","?N"],/*EL*/['implies',['and',['relationAllExistsMax','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['relationAllExistsMin','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ReflexiveBinaryPredicate']],[['genlPreds','equals','$VAR'(0)]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['genlPreds','equals','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['ist',['MtSpace','$VAR'(0)],'$VAR'(1)]],[['ist','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?MT","?SENTENCE"],/*EL*/['implies',['ist',['MtSpace','$VAR'(0)],'$VAR'(1)],['ist','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quotedIsa','$VAR'(0),'CycLGAFAssertion']],[['assertionDirection','$VAR'(0),'Forward-AssertionDirection']]],'BaseKB',["?ASSERTION"],/*EL*/['implies',['quotedIsa','$VAR'(0),'CycLGAFAssertion'],['assertionDirection','$VAR'(0),'Forward-AssertionDirection']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['equals','$VAR'(0),'$VAR'(0)]]],'BaseKB',["?X"],/*EL*/['equals','$VAR'(0),'$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['quantityIntersects',['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(3),'$VAR'(4)]]],[['quantityIntersects',['Unity','$VAR'(1),'$VAR'(2)],['Unity','$VAR'(3),'$VAR'(4)]]]],'BaseKB',["?UNIT","?NUM1A","?NUM1B","?NUM2A","?NUM2B"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['quantityIntersects',['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(3),'$VAR'(4)]]],['quantityIntersects',['Unity','$VAR'(1),'$VAR'(2)],['Unity','$VAR'(3),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),1,'$VAR'(1),2,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),1,'$VAR'(1),2,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertionUtility-1','$VAR'(0),-1]],[['irrelevantAssertion','$VAR'(0)]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['assertionUtility-1','$VAR'(0),-1],['irrelevantAssertion','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa',['$VAR'(0),'$VAR'(1)],'ScalarIntegralValue'],['isa',['$VAR'(0),'$VAR'(2)],'ScalarIntegralValue'],['evaluate','$VAR'(3),['PlusFn',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]],[['isa','$VAR'(3),'ScalarIntegralValue']]],'BaseKB',["?UNIT","?M","?N","?PLUSFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa',['$VAR'(0),'$VAR'(1)],'ScalarIntegralValue'],['isa',['$VAR'(0),'$VAR'(2)],'ScalarIntegralValue'],['evaluate','$VAR'(3),['PlusFn',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]],['isa','$VAR'(3),'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)],['defnNecessary','$VAR'(1),'$VAR'(2)]],[['defnNecessary','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?SPEC","?COL","?DEFN"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['defnNecessary','$VAR'(1),'$VAR'(2)]],['defnNecessary','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2Isa','$VAR'(0),'$VAR'(1)]],[['resultIsa',['FunctionToArg',2,'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE"],/*EL*/['implies',['arg2Isa','$VAR'(0),'$VAR'(1)],['resultIsa',['FunctionToArg',2,'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','$VAR'(1),'$VAR'(2)],['different','$VAR'(2),'$VAR'(3)]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?PRED","?X","?Y","?Z"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(1),'$VAR'(3)]])]]],'BaseKB',["?PRED","?X","?Y","?Z"],/*EL*/['implies',['and',['different','$VAR'(1),'$VAR'(2)],['different','$VAR'(2),'$VAR'(3)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?PRED","?X","?Y","?Z"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(1),'$VAR'(3)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'BinaryPredicate'],['arg1Isa','$VAR'(0),'$VAR'(1)],['requiredArg2Pred','$VAR'(2),'$VAR'(0)]],[['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?BINPRED","?COL2","?COL1"],/*EL*/['implies',['and',['isa','$VAR'(0),'BinaryPredicate'],['arg1Isa','$VAR'(0),'$VAR'(1)],['requiredArg2Pred','$VAR'(2),'$VAR'(0)]],['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['completeExtentEnumerableForValueInArg','isa','$VAR'(0),2]],[['completelyEnumerableCollection','$VAR'(0)]]],'CoreCycLMt',["?COL"],/*EL*/['implies',['completeExtentEnumerableForValueInArg','isa','$VAR'(0),2],['completelyEnumerableCollection','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['elInverse','$VAR'(0),'$VAR'(1)],['arg1Genl','$VAR'(0),'$VAR'(2)]],[['arg2Genl','$VAR'(1),'$VAR'(2)]]],'UniversalVocabularyMt',["?PRED","?INVERSE","?COL"],/*EL*/['implies',['and',['elInverse','$VAR'(0),'$VAR'(1)],['arg1Genl','$VAR'(0),'$VAR'(2)]],['arg2Genl','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),1,'$VAR'(0)]],[['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg1Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),1,'$VAR'(0)]],['genls','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa3-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),3,'$VAR'(1),2,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa3-2','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),3,'$VAR'(1),2,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),2,'$VAR'(1),1,'$VAR'(2)]],[['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'UniversalVocabularyMt',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),2,'$VAR'(1),1,'$VAR'(2)],['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ScalarPointValue'],['isa','$VAR'(1),'ScalarPointValue'],['isa','$VAR'(2),'UnitOfMeasure']],[['maxQuantValue',['$VAR'(2),'$VAR'(1),'$VAR'(0)],['$VAR'(2),'$VAR'(0)]]]],'BaseKB',["?HIGH","?LOW","?UNIT"],/*EL*/['implies',['and',['isa','$VAR'(0),'ScalarPointValue'],['isa','$VAR'(1),'ScalarPointValue'],['isa','$VAR'(2),'UnitOfMeasure']],['maxQuantValue',['$VAR'(2),'$VAR'(1),'$VAR'(0)],['$VAR'(2),'$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),2],['different','$VAR'(1),'$VAR'(2)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?REL","?M","?N"],/*EL*/['not',['and',['arity','$VAR'(0),2],['different','$VAR'(1),'$VAR'(2)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationExistsMinAll','$VAR'(0),'$VAR'(1),'$VAR'(2),1]]],'BaseKB',["?SLOT","?UNIV-COL","?EXIST-COL"],/*EL*/['implies',['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationExistsMinAll','$VAR'(0),'$VAR'(1),'$VAR'(2),1]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['relationAllExists','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?COL-1","?COL-2"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['relationAllExists','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(1)],['not',['$VAR'(0),'?INST','$VAR'(2)]]]]]],[]],'BaseKB',["?PRED","?COL","?THING"],/*EL*/['not',['and',['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(1)],['not',['$VAR'(0),'?INST','$VAR'(2)]]]]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThanOrEqualTo',2,'$VAR'(0)],['arg3Isa','$VAR'(1),'$VAR'(2)]],[['arg2Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThanOrEqualTo',2,'$VAR'(0)],['arg3Isa','$VAR'(1),'$VAR'(2)]],['arg2Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['minQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),'$VAR'(1)]],[['quantityIntersects','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?INTERVAL1","?VALUE","?INTERVAL2"],/*EL*/['implies',['and',['minQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),'$VAR'(1)]],['quantityIntersects','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)],['defnSufficient','$VAR'(0),'$VAR'(2)]],[['defnSufficient','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?COL","?GENL","?DEFN"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['defnSufficient','$VAR'(0),'$VAR'(2)]],['defnSufficient','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['isa','$VAR'(0),'CommutativeRelation']],[['commutativeInArgs','$VAR'(0),1,2]]],'BaseKB',["?RELN"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['isa','$VAR'(0),'CommutativeRelation']],['commutativeInArgs','$VAR'(0),1,2]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['admittedAllArgument','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllInstance',['Kappa',['?X','?Y'],['admittedArgument','?X','$VAR'(1),'?Y']],'$VAR'(0),'$VAR'(2)]]],'UniversalVocabularyMt',["?COL","?NUM","?RELN"],/*EL*/['implies',['admittedAllArgument','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationAllInstance',['Kappa',['?X','?Y'],['admittedArgument','?X','$VAR'(1),'?Y']],'$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AssociativeRelation'],['isa','$VAR'(0),'Function-Denotational'],['resultIsa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['genls','$VAR'(1),'$VAR'(3)]]],'BaseKB',["?FUNC","?RESULTCOL","??N","?ARGCOL"],/*EL*/['implies',['and',['isa','$VAR'(0),'AssociativeRelation'],['isa','$VAR'(0),'Function-Denotational'],['resultIsa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['genls','$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TernaryPredicate'],['commutativeInArgs','$VAR'(0),1,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(3),'$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3"],/*EL*/['implies',['and',['isa','$VAR'(0),'TernaryPredicate'],['commutativeInArgs','$VAR'(0),1,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(3),'$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)]],[['elementOf','$VAR'(2),['TheSetOf','?ITEM-1',['genls','?ITEM-1','$VAR'(1)]]],['nearestDifferentGenls','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?DIFF-FARTHER',['thereExists','?DIFF-FAR',['and',['genls','$VAR'(0),'?DIFF-FAR'],['genls','?DIFF-FAR','?DIFF-FARTHER'],['different','$VAR'(0),'?DIFF-FAR'],['different','?DIFF-FAR','?DIFF-FARTHER'],['not',['elementOf','$VAR'(2),['TheSetOf','?ITEM-2',['genls','?ITEM-2','?DIFF-FAR']]]],['not',['elementOf','$VAR'(2),['TheSetOf','?ITEM-3',['genls','?ITEM-3','?DIFF-FARTHER']]]]]]]]]],'BaseKB',["?COL-1","?DIFF-NEAR","?COL-2"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)]],['or',['elementOf','$VAR'(2),['TheSetOf','?ITEM-1',['genls','?ITEM-1','$VAR'(1)]]],['nearestDifferentGenls','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?DIFF-FARTHER',['thereExists','?DIFF-FAR',['and',['genls','$VAR'(0),'?DIFF-FAR'],['genls','?DIFF-FAR','?DIFF-FARTHER'],['different','$VAR'(0),'?DIFF-FAR'],['different','?DIFF-FAR','?DIFF-FARTHER'],['not',['elementOf','$VAR'(2),['TheSetOf','?ITEM-2',['genls','?ITEM-2','?DIFF-FAR']]]],['not',['elementOf','$VAR'(2),['TheSetOf','?ITEM-3',['genls','?ITEM-3','?DIFF-FARTHER']]]]]]]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)]],[['coExtensional','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?ARGS-5","?ARGS-6"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)]],['coExtensional','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgGenlQuantityTernaryPredicate']],[['transitiveViaArgInverse','$VAR'(0),'quantitySubsumes',3]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ArgGenlQuantityTernaryPredicate'],['transitiveViaArgInverse','$VAR'(0),'quantitySubsumes',3]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(0),'genlMt']],[['predicateConventionMt','$VAR'(0),'UniversalVocabularyMt']]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(0),'genlMt']],['predicateConventionMt','$VAR'(0),'UniversalVocabularyMt']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['minQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),'$VAR'(3)],['greaterThan','$VAR'(1),'$VAR'(3)]],[['greaterThan','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?VALUE1","?VALUE1MIN","?VALUE2","?VALUE2MAX"],/*EL*/['implies',['and',['minQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),'$VAR'(3)],['greaterThan','$VAR'(1),'$VAR'(3)]],['greaterThan','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),4,'$VAR'(1),3,'$VAR'(2)]],[['interArgIsa4-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),4,'$VAR'(1),3,'$VAR'(2)],['interArgIsa4-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['completelyEnumerableCollection','$VAR'(0)],['isa','$VAR'(1),'$VAR'(0)]],[['knownSentence',['isa','$VAR'(1),'$VAR'(0)]]]],'BaseKB',["?COL","?INST"],/*EL*/['implies',['and',['completelyEnumerableCollection','$VAR'(0)],['isa','$VAR'(1),'$VAR'(0)]],['knownSentence',['isa','$VAR'(1),'$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AtemporalNecessarilyEssentialCollectionType']],[['collectionConventionMt','$VAR'(0),'UniversalVocabularyMt']]],'UniversalVocabularyMt',["?ANECT"],/*EL*/['implies',['isa','$VAR'(0),'AtemporalNecessarilyEssentialCollectionType'],['collectionConventionMt','$VAR'(0),'UniversalVocabularyMt']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SymmetricBinaryPredicate'],['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(1)]],[['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(1)]]],'UniversalVocabularyMt',["?PRED","?COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(1)]],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['genls','$VAR'(0),'$VAR'(1)]],['genls','$VAR'(1),'$VAR'(0)],['different','$VAR'(1),'$VAR'(0)]],[['coExtensional','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?SPEC","?GENL"],/*EL*/['implies',['and',['assertedSentence',['genls','$VAR'(0),'$VAR'(1)]],['genls','$VAR'(1),'$VAR'(0)],['different','$VAR'(1),'$VAR'(0)]],['coExtensional','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationExistsAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?PRED","?COL1","?COL2","?COL3"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationExistsAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa2-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),2,'$VAR'(1),3,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa2-3','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),2,'$VAR'(1),3,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['nearestCommonIsa','$VAR'(0),'$VAR'(0),'$VAR'(1)]],[['nearestIsa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?OBJ","?NEAR-ISA"],/*EL*/['implies',['nearestCommonIsa','$VAR'(0),'$VAR'(0),'$VAR'(1)],['nearestIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),5,'$VAR'(1)]],[['arg5QuotedIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),5,'$VAR'(1)],['arg5QuotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]],[['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-VALUE']]]],'BaseKB',["?PRED"],/*EL*/['implies',['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']],['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-VALUE']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['integerBetween','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['greaterThanOrEqualTo','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?LOW","?MED","?HIGH"],/*EL*/['implies',['integerBetween','$VAR'(0),'$VAR'(1),'$VAR'(2)],['greaterThanOrEqualTo','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),3],['different','$VAR'(1),'$VAR'(2),'$VAR'(3)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[]],'BaseKB',["?REL","?L","?M","?N"],/*EL*/['not',['and',['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),3],['different','$VAR'(1),'$VAR'(2),'$VAR'(3)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg3QuotedIsa','$VAR'(0),'$VAR'(1)]],[['argQuotedIsa','$VAR'(0),3,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg3QuotedIsa','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(0),3,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultGenlArg','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?FUNC","?ARGNUM","?ARITY"],/*EL*/['not',['and',['resultGenlArg','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?PRED","?COL1","?COL2","?COL3"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['PlusFn','$VAR'(1),0]]],[['equals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?PLUSFN","?X"],/*EL*/['implies',['evaluate','$VAR'(0),['PlusFn','$VAR'(1),0]],['equals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]],[['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),1,'$VAR'(1)],['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['assertedSentence',['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]],[['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),1,'$VAR'(1)],['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Integer'],['isa',['$VAR'(1),'$VAR'(2)],'ScalarIntegralValue'],['isa',['$VAR'(3),'$VAR'(4)],'ScalarIntegralValue'],['unitMultiplicationFactor','$VAR'(1),'$VAR'(3),'$VAR'(0)],['evaluate','$VAR'(5),['TimesFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),'$VAR'(4)]]]],[['isa','$VAR'(5),'ScalarIntegralValue']]],'BaseKB',["?NUM","?UNIT1","?M","?UNIT2","?N","?TIMESFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'Integer'],['isa',['$VAR'(1),'$VAR'(2)],'ScalarIntegralValue'],['isa',['$VAR'(3),'$VAR'(4)],'ScalarIntegralValue'],['unitMultiplicationFactor','$VAR'(1),'$VAR'(3),'$VAR'(0)],['evaluate','$VAR'(5),['TimesFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),'$VAR'(4)]]]],['isa','$VAR'(5),'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','genlInverse','$VAR'(0)],['genlPreds','$VAR'(0),'genlInverse']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLINVERSE']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','genlInverse','$VAR'(0)],['genlPreds','$VAR'(0),'genlInverse']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLINVERSE']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),1,'$VAR'(1),5,'$VAR'(2)]],[['interArgIsa1-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),1,'$VAR'(1),5,'$VAR'(2)],['interArgIsa1-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedArgument','$VAR'(0),1,'genls'],['admittedArgument','$VAR'(1),2,'genls']],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['subsetOf','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['subsetOf','$VAR'(0),'$VAR'(1)],['genls','$VAR'(0),'$VAR'(1)]])]]],'BaseKB',["?A","?B"],/*EL*/['implies',['and',['admittedArgument','$VAR'(0),1,'genls'],['admittedArgument','$VAR'(1),2,'genls']],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['subsetOf','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['subsetOf','$VAR'(0),'$VAR'(1)],['genls','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),5,'$VAR'(1),2,'$VAR'(2)]],[['interArgIsa5-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),5,'$VAR'(1),2,'$VAR'(2)],['interArgIsa5-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['genls','$VAR'(0),'$VAR'(0)]]],'LogicalTruthMt',["?X"],/*EL*/['genls','$VAR'(0),'$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg5Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),5,'$VAR'(0)]],[['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg5Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),5,'$VAR'(0)]],['genls','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),1,'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg1Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),1,'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['equals','$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?PRED","?OBJ1","?OBJ2"],/*EL*/['not',['and',['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['equals','$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(3),'$VAR'(0)],['different','$VAR'(0),'$VAR'(3)],['relationAllExists','$VAR'(3),'$VAR'(1),'$VAR'(2)]],[['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?COL1","?COL2","?SPEC-PRED"],/*EL*/['implies',['and',['genlPreds','$VAR'(3),'$VAR'(0)],['different','$VAR'(0),'$VAR'(3)],['relationAllExists','$VAR'(3),'$VAR'(1),'$VAR'(2)]],['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['relationExistsInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["??ANY","?COL","?PRED","?INST"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['relationExistsInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['maxQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(2)],['minQuantValue','$VAR'(3),'$VAR'(4)],['greaterThanOrEqualTo','$VAR'(4),'$VAR'(2)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(4)]],[['quantityIntersects','$VAR'(0),'$VAR'(3)]]],'BaseKB',["?INTERVAL1","?MAX1","?MIN1","?INTERVAL2","?MIN2"],/*EL*/['implies',['and',['maxQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(2)],['minQuantValue','$VAR'(3),'$VAR'(4)],['greaterThanOrEqualTo','$VAR'(4),'$VAR'(2)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(4)]],['quantityIntersects','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['requiredArg1Pred','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?PRED","?COL1","??COL2"],/*EL*/['implies',['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['requiredArg1Pred','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExistsMin','$VAR'(0),'$VAR'(1),'$VAR'(2),1]]],'BaseKB',["?SLOT","?UNIV-COL","?EXIST-COL"],/*EL*/['implies',['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)],['relationAllExistsMin','$VAR'(0),'$VAR'(1),'$VAR'(2),1]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quantitySubsumes','$VAR'(0),'$VAR'(1)]],[['quantitySubsumes',['Unity','$VAR'(2),'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?NUM2","?SUBNUM2","??NUM1"],/*EL*/['implies',['quantitySubsumes','$VAR'(0),'$VAR'(1)],['quantitySubsumes',['Unity','$VAR'(2),'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['collectionGenlsBackchainRequired','$VAR'(0)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionGenlsBackchainRequired','$VAR'(0)]],[['collectionGenlsBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionGenlsBackchainRequired','$VAR'(0)],['collectionGenlsBackchainEncouraged','$VAR'(0)]])]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['assertedSentence',['collectionGenlsBackchainRequired','$VAR'(0)]],['meetsPragmaticRequirement',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionGenlsBackchainRequired','$VAR'(0)]],[['collectionGenlsBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionGenlsBackchainRequired','$VAR'(0)],['collectionGenlsBackchainEncouraged','$VAR'(0)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),2,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(0),'$VAR'(1),'$VAR'(3),'$VAR'(2),'$VAR'(4)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),2,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(0),'$VAR'(1),'$VAR'(3),'$VAR'(2),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThanOrEqualTo',4,'$VAR'(0)],['arg5Isa','$VAR'(1),'$VAR'(2)]],[['arg4Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThanOrEqualTo',4,'$VAR'(0)],['arg5Isa','$VAR'(1),'$VAR'(2)]],['arg4Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],[['relationExistsInstance','$VAR'(2),'$VAR'(3),'$VAR'(0)]]],'BaseKB',["?OBJ","?COL-2","?PRED","?COL-1"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationExistsAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]],['relationExistsInstance','$VAR'(2),'$VAR'(3),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa3-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),3,'$VAR'(1),1,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa3-1','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),3,'$VAR'(1),1,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['greaterThanOrEqualTo','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),['$VAR'(3),'$VAR'(0)]],['minQuantValue','$VAR'(2),['$VAR'(3),'$VAR'(1)]]],[['equals','$VAR'(2),['$VAR'(3),'$VAR'(1),'$VAR'(0)]]]],'BaseKB',["?MAX","?MIN","?ATT","?UNIT"],/*EL*/['implies',['and',['greaterThanOrEqualTo','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),['$VAR'(3),'$VAR'(0)]],['minQuantValue','$VAR'(2),['$VAR'(3),'$VAR'(1)]]],['equals','$VAR'(2),['$VAR'(3),'$VAR'(1),'$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['elementOf','$VAR'(0),'TheEmptySet']],[]],'BaseKB',["?X"],/*EL*/['not',['elementOf','$VAR'(0),'TheEmptySet']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'genlInverse']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLINVERSE']]]],'BaseKB',["?SPEC-INVERSE"],/*EL*/['implies',['genlInverse','$VAR'(0),'genlInverse'],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLINVERSE']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ArgIsaBinaryPredicate'],['constrainsArg','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(2),'$VAR'(1)]],[['$VAR'(0),'$VAR'(2),'Collection']]],'BaseKB',["?ARG-ISA-PRED","?N","?FUNC"],/*EL*/['implies',['and',['isa','$VAR'(0),'ArgIsaBinaryPredicate'],['constrainsArg','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(2),'$VAR'(1)]],['$VAR'(0),'$VAR'(2),'Collection']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'SymmetricBinaryPredicate']],[['genlInverse','$VAR'(0),'$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['genlInverse','$VAR'(0),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['elInverse','$VAR'(0),'$VAR'(1)],['arg2Isa','$VAR'(0),'$VAR'(2)]],[['arg1Isa','$VAR'(1),'$VAR'(2)]]],'UniversalVocabularyMt',["?PRED","?INVERSE","?COL"],/*EL*/['implies',['and',['elInverse','$VAR'(0),'$VAR'(1)],['arg2Isa','$VAR'(0),'$VAR'(2)]],['arg1Isa','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'PositiveInteger'],['isa','$VAR'(1),'PositiveInteger'],['different','$VAR'(0),'$VAR'(1),1]],[['interArgDifferent','commutativeInArgs','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?M","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'PositiveInteger'],['isa','$VAR'(1),'PositiveInteger'],['different','$VAR'(0),'$VAR'(1),1]],['interArgDifferent','commutativeInArgs','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),3,'$VAR'(1),2,'$VAR'(2)]],[['interArgIsa3-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),3,'$VAR'(1),2,'$VAR'(2)],['interArgIsa3-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg6Isa','$VAR'(0),'$VAR'(1)]],[['resultIsa',['FunctionToArg',6,'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE"],/*EL*/['implies',['arg6Isa','$VAR'(0),'$VAR'(1)],['resultIsa',['FunctionToArg',6,'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['termOfUnit','$VAR'(0),['PerFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(2)]]],[['multiplicationUnits','$VAR'(0),'$VAR'(3),'$VAR'(5)]]],'BaseKB',["?PERFN-1","?UNIT2","?UNIT3","?PERFN-2","?UNIT1","?PERFN"],/*EL*/['implies',['and',['termOfUnit','$VAR'(0),['PerFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(2)]]],['multiplicationUnits','$VAR'(0),'$VAR'(3),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'Collection'],['isa','$VAR'(1),'BinaryPredicate'],['overlappingExternalConcept','$VAR'(1),'$VAR'(2),'$VAR'(3)],['overlappingExternalConcept','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['extConceptOverlapsColAndReln','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?COL","?RELN","?SOURCE","?STRING"],/*EL*/['implies',['and',['isa','$VAR'(0),'Collection'],['isa','$VAR'(1),'BinaryPredicate'],['overlappingExternalConcept','$VAR'(1),'$VAR'(2),'$VAR'(3)],['overlappingExternalConcept','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['extConceptOverlapsColAndReln','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg1Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[]],'BaseKB',["?PRED","?ARG1ISA","?ARG1TYPE","?ARG2TYPE"],/*EL*/['not',['and',['arg1Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationAllExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quantitySubsumes','$VAR'(0),'$VAR'(1)],['followingValue','$VAR'(0),'$VAR'(2)]],[['followingValue','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?SUPER","?SUB","?LATER"],/*EL*/['implies',['and',['quantitySubsumes','$VAR'(0),'$VAR'(1)],['followingValue','$VAR'(0),'$VAR'(2)]],['followingValue','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]],[['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),4,'$VAR'(1)],['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['assertedSentence',['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),4,'$VAR'(1)]],[['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),4,'$VAR'(1)],['arg4SometimesIsa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Integer'],['isa','$VAR'(1),'UnitOfMeasure']],[['isa',['$VAR'(1),'$VAR'(0)],'ScalarIntegralValue']]],'BaseKB',["?INT","?UNIT"],/*EL*/['implies',['and',['isa','$VAR'(0),'Integer'],['isa','$VAR'(1),'UnitOfMeasure']],['isa',['$VAR'(1),'$VAR'(0)],'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['isa','$VAR'(0),'$VAR'(5)]]],'CoreCycLMt',["?NAT","?FUNC","?TERM","?INDEP-COL","?N","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['isa','$VAR'(0),'$VAR'(5)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa3-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),3,'$VAR'(1),5,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa3-5','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),3,'$VAR'(1),5,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['completelyDecidableCollection','$VAR'(0)],['completelyDecidableCollection','$VAR'(1)]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['extentCardinality',['TheSetOf','?OBJ',['and',['isa','?OBJ','$VAR'(1)],['not',['isa','?OBJ','$VAR'(0)]]]],0]],[['subsetOf','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?COLL-2","?COLL-1"],/*EL*/['implies',['extentCardinality',['TheSetOf','?OBJ',['and',['isa','?OBJ','$VAR'(1)],['not',['isa','?OBJ','$VAR'(0)]]]],0],['subsetOf','$VAR'(1),'$VAR'(0)]])]]],'BaseKB',["?COLL-2","?COLL-1"],/*EL*/['implies',['and',['completelyDecidableCollection','$VAR'(0)],['completelyDecidableCollection','$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['extentCardinality',['TheSetOf','?OBJ',['and',['isa','?OBJ','$VAR'(1)],['not',['isa','?OBJ','$VAR'(0)]]]],0]],[['subsetOf','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?COLL-2","?COLL-1"],/*EL*/['implies',['extentCardinality',['TheSetOf','?OBJ',['and',['isa','?OBJ','$VAR'(1)],['not',['isa','?OBJ','$VAR'(0)]]]],0],['subsetOf','$VAR'(1),'$VAR'(0)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['ist','$VAR'(0),'$VAR'(1)]],[['ist',['MtSpace','$VAR'(0)],'$VAR'(1)]]],'UniversalVocabularyMt',["?MT","?SENTENCE"],/*EL*/['implies',['ist','$VAR'(0),'$VAR'(1)],['ist',['MtSpace','$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),0],['relationAllExistsCount','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationAllExists','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?NUM","?SLOT","?UNIV-COL","?EXIST-COL"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),0],['relationAllExistsCount','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationAllExists','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['thereExists','?COLINST',['and',['isa','?COLINST','$VAR'(1)],['not',['$VAR'(0),'?COLINST','$VAR'(2)]]]]]],[]],'BaseKB',["?PRED","?COL","?THING"],/*EL*/['not',['and',['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['trueSentence',['thereExists','?COLINST',['and',['isa','?COLINST','$VAR'(1)],['not',['$VAR'(0),'?COLINST','$VAR'(2)]]]]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),0],['relationAllExistsMin','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationAllExists','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?NUM","?SLOT","?UNIV-COL","?EXIST-COL"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),0],['relationAllExistsMin','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationAllExists','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'IrreflexiveBinaryPredicate']],[['genlPreds','$VAR'(0),'different']]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['genlPreds','$VAR'(0),'different']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgGenlQuantityBinaryPredicate']],[['transitiveViaArgInverse','$VAR'(0),'quantitySubsumes',2]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ArgGenlQuantityBinaryPredicate'],['transitiveViaArgInverse','$VAR'(0),'quantitySubsumes',2]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['ist','$VAR'(0),['not',['numericallyEquals','$VAR'(1),'$VAR'(2)]]],['ist','$VAR'(0),['relationAllExistsCount','$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(2)]]],[['ist','$VAR'(0),['not',['relationAllExistsCount','$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(1)]]]]],'UniversalVocabularyMt',["?MT","?M","?N","?REL","?COL1","?COL2"],/*EL*/['implies',['and',['ist','$VAR'(0),['not',['numericallyEquals','$VAR'(1),'$VAR'(2)]]],['ist','$VAR'(0),['relationAllExistsCount','$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(2)]]],['ist','$VAR'(0),['not',['relationAllExistsCount','$VAR'(3),'$VAR'(4),'$VAR'(5),'$VAR'(1)]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['resultIsa','$VAR'(0),'$VAR'(1)],['termOfUnit','$VAR'(2),['$VAR'(0)]]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?F","?COL","?U"],/*EL*/['implies',['and',['resultIsa','$VAR'(0),'$VAR'(1)],['termOfUnit','$VAR'(2),['$VAR'(0)]]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['trueSentence',['forAll','?INST',['implies',['isa','?INST','$VAR'(0)],['admittedArgument','?INST','$VAR'(1),'$VAR'(2)]]]]],[['admittedAllArgument','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'UniversalVocabularyMt',["?COL","?NUM","?RELN"],/*EL*/['implies',['trueSentence',['forAll','?INST',['implies',['isa','?INST','$VAR'(0)],['admittedArgument','?INST','$VAR'(1),'$VAR'(2)]]]],['admittedAllArgument','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quotedIsa','$VAR'(0),'SubLPositiveInteger'],['denotes','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(1),'PositiveInteger']]],'LogicalTruthImplementationMt',["?SUBL-NUM","?NUM"],/*EL*/['implies',['and',['quotedIsa','$VAR'(0),'SubLPositiveInteger'],['denotes','$VAR'(0),'$VAR'(1)]],['isa','$VAR'(1),'PositiveInteger']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]],[['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg2SometimesIsa','$VAR'(0),'$VAR'(1)],['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['irrelevantAssertion','$VAR'(0)]],[['assertionUtility-1','$VAR'(0),-1]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['irrelevantAssertion','$VAR'(0)],['assertionUtility-1','$VAR'(0),-1]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),2,'$VAR'(1),5,'$VAR'(2)]],[['interArgIsa2-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),2,'$VAR'(1),5,'$VAR'(2)],['interArgIsa2-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['unknownSentence',['thereExists','?SOME-MT',['predicateConventionMt','$VAR'(1),'?SOME-MT']]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(2)]],[['predicateConventionMt','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?SPEC","?MT"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(2)]],['predicateConventionMt','$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?SPEC","?MT"],/*EL*/['implies',['unknownSentence',['thereExists','?SOME-MT',['predicateConventionMt','$VAR'(1),'?SOME-MT']]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(2)]],[['predicateConventionMt','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?SPEC","?MT"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(2)]],['predicateConventionMt','$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa',['$VAR'(0),'$VAR'(1)],'ScalarIntegralValue'],['isa',['$VAR'(0),'$VAR'(2)],'ScalarIntegralValue'],['evaluate','$VAR'(3),['DifferenceFn',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]],[['isa','$VAR'(3),'ScalarIntegralValue']]],'BaseKB',["?UNIT","?M","?N","?DIFFERENCEFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa',['$VAR'(0),'$VAR'(1)],'ScalarIntegralValue'],['isa',['$VAR'(0),'$VAR'(2)],'ScalarIntegralValue'],['evaluate','$VAR'(3),['DifferenceFn',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]],['isa','$VAR'(3),'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1Isa','$VAR'(0),'$VAR'(1)]],[['resultIsa',['FunctionToArg',1,'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE"],/*EL*/['implies',['arg1Isa','$VAR'(0),'$VAR'(1)],['resultIsa',['FunctionToArg',1,'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['requiredArg2Pred','$VAR'(2),'$VAR'(0)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['relationExistsAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['requiredArg2Pred','$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa1-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),1,'$VAR'(1),5,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa1-5','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),1,'$VAR'(1),5,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)]],[['genls','$VAR'(0),'$VAR'(2)]]],'LogicalTruthMt',["?X","?Y","?Z"],/*EL*/['implies',['and',['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)]],['genls','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg5Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),5,'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg5Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),5,'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['relationExistsInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(3),'$VAR'(1)]]],'BaseKB',["?PRED","?COL","??DUMMY","?THING"],/*EL*/['implies',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['relationExistsInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertionUtility','$VAR'(0),1]],[['highlyRelevantAssertion','$VAR'(0)]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['assertionUtility','$VAR'(0),1],['highlyRelevantAssertion','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['trueSentence',['thereExists','?X',['and',['isa','?X','$VAR'(2)],['unknownSentence',['$VAR'(1),'?X']]]]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['relationAll','$VAR'(0),'$VAR'(2)]],[['relationAll','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?COL"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['relationAll','$VAR'(0),'$VAR'(2)]],['relationAll','$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?COL"],/*EL*/['implies',['trueSentence',['thereExists','?X',['and',['isa','?X','$VAR'(2)],['unknownSentence',['$VAR'(1),'?X']]]]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['relationAll','$VAR'(0),'$VAR'(2)]],[['relationAll','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?COL"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['relationAll','$VAR'(0),'$VAR'(2)]],['relationAll','$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationInstanceExists','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'BaseKB',["?OBJECT2","?TYPE","?RELATION","?OBJECT1"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationInstanceExists','$VAR'(2),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['commutativeInArgsAndRest','$VAR'(0),1]],[]],'BaseKB',["?REL"],/*EL*/['not',['commutativeInArgsAndRest','$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['natArgument','$VAR'(0),0,'$VAR'(1)]],[['natFunction','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?NAT","?FUNCTION"],/*EL*/['implies',['natArgument','$VAR'(0),0,'$VAR'(1)],['natFunction','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate']],[['transitiveViaArgInverse','$VAR'(0),'$VAR'(0),1]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['transitiveViaArgInverse','$VAR'(0),'$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),0],['relationExistsMinAll','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationExistsAll','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?NUM","?SLOT","?EXIST-COL","?UNIV-COL"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),0],['relationExistsMinAll','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationExistsAll','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa3-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),3,'$VAR'(1),4,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa3-4','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),3,'$VAR'(1),4,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'DayOfWeekType']],[['defnSufficient','$VAR'(0),['SubLQuoteFn','CYC-DAY-OF-WEEK-DEFN']]]],'CoreCycLImplementationMt',["?WEEKDAY"],/*EL*/['implies',['isa','$VAR'(0),'DayOfWeekType'],['defnSufficient','$VAR'(0),['SubLQuoteFn','CYC-DAY-OF-WEEK-DEFN']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),2,'$VAR'(1),1,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),2,'$VAR'(1),1,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),4,'$VAR'(1),5,'$VAR'(2)]],[['interArgIsa4-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),4,'$VAR'(1),5,'$VAR'(2)],['interArgIsa4-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['scopingArg','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?RELN","?N","?ARITY"],/*EL*/['not',['and',['scopingArg','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),1],['arg1Isa','$VAR'(1),'$VAR'(2)]],[['arg1Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),1],['arg1Isa','$VAR'(1),'$VAR'(2)]],['arg1Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),'$VAR'(1)],['quantityIntersects','$VAR'(0),'$VAR'(1)]],[]],'BaseKB',["?INTERVAL1","?INTERVAL2"],/*EL*/['not',['and',['greaterThan','$VAR'(0),'$VAR'(1)],['quantityIntersects','$VAR'(0),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'isa']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-ISA']]]],'BaseKB',["?SPEC-INVERSE"],/*EL*/['implies',['genlInverse','$VAR'(0),'isa'],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-ISA']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['evaluate','$VAR'(3),['TimesFn','$VAR'(4),['$VAR'(0),'$VAR'(2)]]]],[['equals','$VAR'(3),['$VAR'(1),'$VAR'(4)]]]],'BaseKB',["?SMALLER-UNIT","?LARGER-UNIT","?N","?TIMESFN","?M"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['evaluate','$VAR'(3),['TimesFn','$VAR'(4),['$VAR'(0),'$VAR'(2)]]]],['equals','$VAR'(3),['$VAR'(1),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['maxQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(2)],['minQuantValue','$VAR'(3),'$VAR'(4)],['maxQuantValue','$VAR'(3),'$VAR'(5)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(5)],['greaterThanOrEqualTo','$VAR'(4),'$VAR'(2)]],[['quantitySubsumes','$VAR'(0),'$VAR'(3)]]],'BaseKB',["?INTERVAL1","?MAX1","?MIN1","?INTERVAL2","?MIN2","?MAX2"],/*EL*/['implies',['and',['maxQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(2)],['minQuantValue','$VAR'(3),'$VAR'(4)],['maxQuantValue','$VAR'(3),'$VAR'(5)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(5)],['greaterThanOrEqualTo','$VAR'(4),'$VAR'(2)]],['quantitySubsumes','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TernaryPredicate'],['commutativeInArgs','$VAR'(0),2,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(1),'$VAR'(3),'$VAR'(2)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3"],/*EL*/['implies',['and',['isa','$VAR'(0),'TernaryPredicate'],['commutativeInArgs','$VAR'(0),2,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(1),'$VAR'(3),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['requiredArg1Pred','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?PRED","?COL1","??COL2"],/*EL*/['implies',['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['requiredArg1Pred','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'BinaryPredicate'],['isa','$VAR'(0),'CommutativeRelation']],[['isa','$VAR'(0),'SymmetricBinaryPredicate']]],'BaseKB',["?PRED"],/*EL*/['implies',['and',['isa','$VAR'(0),'BinaryPredicate'],['isa','$VAR'(0),'CommutativeRelation']],['isa','$VAR'(0),'SymmetricBinaryPredicate']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['canonicalizerDirectiveForAllArgs','$VAR'(0),'$VAR'(1)]],[['canonicalizerDirectiveForArgAndRest','$VAR'(0),1,'$VAR'(1)]]],'CoreCycLImplementationMt',["?RELN","?DIRECTIVE"],/*EL*/['implies',['canonicalizerDirectiveForAllArgs','$VAR'(0),'$VAR'(1)],['canonicalizerDirectiveForArgAndRest','$VAR'(0),1,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg6QuotedIsa','$VAR'(0),'$VAR'(1)]],[['argQuotedIsa','$VAR'(0),6,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg6QuotedIsa','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(0),6,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),3],['isa','$VAR'(0),'CommutativeRelation']],[['commutativeInArgs','$VAR'(0),1,2,3]]],'BaseKB',["?RELN"],/*EL*/['implies',['and',['arity','$VAR'(0),3],['isa','$VAR'(0),'CommutativeRelation']],['commutativeInArgs','$VAR'(0),1,2,3]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(2),'$VAR'(0)]],[['negationInverse','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?GENL-PRED","?NEG-PRED","?SPEC-PRED"],/*EL*/['implies',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(2),'$VAR'(0)]],['negationInverse','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-KEY']]],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-KEY']]]],'BaseKB',["?PRED"],/*EL*/['implies',['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-KEY']],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-KEY']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4) | '$VAR'(5)]],[['isa','$VAR'(4),'$VAR'(3)]]],'BaseKB',["?INDEP-INS","?INDEP-COL","?PRED","?DEP-COL","?DEP-INS","??ARGS"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['interArgIsa1-2','$VAR'(2),'$VAR'(1),'$VAR'(3)],['$VAR'(2),'$VAR'(0),'$VAR'(4) | '$VAR'(5)]],['isa','$VAR'(4),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),0],['relationExistsCountAll','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationExistsAll','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?NUM","?SLOT","?EXIST-COL","?UNIV-COL"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),0],['relationExistsCountAll','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationExistsAll','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['integerBetween','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['greaterThanOrEqualTo','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?LOW","?MED","?HIGH"],/*EL*/['implies',['integerBetween','$VAR'(0),'$VAR'(1),'$VAR'(2)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['different','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?OBJ1","?OBJ2"],/*EL*/['implies',['and',['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)]],['different','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'IndeterminateTermDenotingFunction']],[['resultQuotedIsa','$VAR'(0),'IndeterminateTerm']]],'BaseKB',["?FUNC"],/*EL*/['implies',['isa','$VAR'(0),'IndeterminateTermDenotingFunction'],['resultQuotedIsa','$VAR'(0),'IndeterminateTerm']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'InterArgFormatPredicate']],[['arg1Isa','$VAR'(0),'Relation']]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InterArgFormatPredicate'],['arg1Isa','$VAR'(0),'Relation']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]],[['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg5SometimesIsa','$VAR'(0),'$VAR'(1)],['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedSentence',['isa','$VAR'(0),'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['elementOf','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['elementOf','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(1)]])]]],'BaseKB',["?A","?B"],/*EL*/['implies',['admittedSentence',['isa','$VAR'(0),'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['elementOf','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['elementOf','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['admittedAllArgument','$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['admittedArgument','$VAR'(0),'$VAR'(2),'$VAR'(3)]]],'UniversalVocabularyMt',["?INST","?COL","?NUM","?RELN"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['admittedAllArgument','$VAR'(1),'$VAR'(2),'$VAR'(3)]],['admittedArgument','$VAR'(0),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg4Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),4,'$VAR'(0)]],[['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg4Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),4,'$VAR'(0)]],['genls','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['minQuantValue','$VAR'(0),'$VAR'(1)],['greaterThan','$VAR'(0),'$VAR'(2)],['maxQuantValue','$VAR'(2),'$VAR'(3)]],[['greaterThan','$VAR'(1),'$VAR'(3)]]],'BaseKB',["?MORE","?MOREMIN","?LESS","?LESSMAX"],/*EL*/['implies',['and',['minQuantValue','$VAR'(0),'$VAR'(1)],['greaterThan','$VAR'(0),'$VAR'(2)],['maxQuantValue','$VAR'(2),'$VAR'(3)]],['greaterThan','$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['termOfUnit','$VAR'(0),['MeaningInSystemFn','$VAR'(1),'$VAR'(2)]]],[['synonymousExternalConcept','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?MEANINGINSYSTEMFN","?SYSTEM","?STRING"],/*EL*/['implies',['termOfUnit','$VAR'(0),['MeaningInSystemFn','$VAR'(1),'$VAR'(2)]],['synonymousExternalConcept','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertionUtility-1','$VAR'(0),1]],[['highlyRelevantAssertion','$VAR'(0)]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['assertionUtility-1','$VAR'(0),1],['highlyRelevantAssertion','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1QuotedIsa','$VAR'(0),'$VAR'(1)]],[['argQuotedIsa','$VAR'(0),1,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg1QuotedIsa','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(0),1,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnitOfMeasure']],[['arityMax','$VAR'(0),2]]],'BaseKB',["?UNIT"],/*EL*/['implies',['isa','$VAR'(0),'UnitOfMeasure'],['arityMax','$VAR'(0),2]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Integer'],['isa',['$VAR'(1),'$VAR'(2)],'ScalarIntegralValue'],['isa',['$VAR'(3),'$VAR'(4)],'ScalarIntegralValue'],['unitMultiplicationFactor','$VAR'(1),'$VAR'(3),'$VAR'(0)],['evaluate','$VAR'(5),['DifferenceFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),'$VAR'(4)]]]],[['isa','$VAR'(5),'ScalarIntegralValue']]],'BaseKB',["?NUM","?UNIT1","?M","?UNIT2","?N","?DIFFERENCEFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'Integer'],['isa',['$VAR'(1),'$VAR'(2)],'ScalarIntegralValue'],['isa',['$VAR'(3),'$VAR'(4)],'ScalarIntegralValue'],['unitMultiplicationFactor','$VAR'(1),'$VAR'(3),'$VAR'(0)],['evaluate','$VAR'(5),['DifferenceFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),'$VAR'(4)]]]],['isa','$VAR'(5),'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','negationPreds','$VAR'(0)],['genlPreds','$VAR'(0),'negationPreds']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-NEGATIONPREDS']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','negationPreds','$VAR'(0)],['genlPreds','$VAR'(0),'negationPreds']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-NEGATIONPREDS']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'equals']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE']]]],'BaseKB',["?EQUALITY-PRED"],/*EL*/['implies',['genlPreds','$VAR'(0),'equals'],['afterRemoving','$VAR'(0),['SubLQuoteFn','DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),3,'$VAR'(1)]],[['arg3QuotedIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),3,'$VAR'(1)],['arg3QuotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'Predicate'],['isa','$VAR'(1),'SymmetricBinaryPredicate'],['isa','$VAR'(2),'PositiveInteger'],['transitiveViaArgInverse','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['transitiveViaArg','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?INS1","?INS2","?INS3"],/*EL*/['implies',['and',['isa','$VAR'(0),'Predicate'],['isa','$VAR'(1),'SymmetricBinaryPredicate'],['isa','$VAR'(2),'PositiveInteger'],['transitiveViaArgInverse','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['transitiveViaArg','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['disjointWith','$VAR'(0),'$VAR'(1)]],[['disjointWith','$VAR'(0),'$VAR'(1)]]],'LogicalTruthMt',["?X","?Y"],/*EL*/['implies',['disjointWith','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa5-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),5,'$VAR'(1),1,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa5-1','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),5,'$VAR'(1),1,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['commutativeInArgs','$VAR'(0) | '$VAR'(1)]],[['different' | '$VAR'(1)]]],'BaseKB',["??PRED","?ARGS"],/*EL*/['implies',['commutativeInArgs','$VAR'(0) | '$VAR'(1)],['different' | '$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(1)]],[]],'BaseKB',["?PRED","?OBJ"],/*EL*/['not',['and',['isa','$VAR'(0),'IrreflexiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['relationAllInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['relationAllInstance','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?ARG1","?ARG2"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['relationAllInstance','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['relationAllInstance','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['disjointWith','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(1)]],[['disjointWith','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?COL","?SUPERSET","?SUBSET"],/*EL*/['implies',['and',['disjointWith','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(1)]],['disjointWith','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),5],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]],[]],'BaseKB',["?REL","?J","?K","?L","?M","?N"],/*EL*/['not',['and',['arity','$VAR'(0),5],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['PlusFn','$VAR'(1)]]],[['equals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?PLUSFN","?X"],/*EL*/['implies',['evaluate','$VAR'(0),['PlusFn','$VAR'(1)]],['equals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['forwardNonTriggerLiteral',['isa','$VAR'(2),'$VAR'(3)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['isa','$VAR'(0),'$VAR'(5)]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['isa','$VAR'(0),'$VAR'(5)]])]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['forwardNonTriggerLiteral',['isa','$VAR'(2),'$VAR'(3)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['isa','$VAR'(0),'$VAR'(5)]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['isa','$VAR'(0),'$VAR'(5)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quantitySubsumes','$VAR'(0),'$VAR'(1)]],[['quantitySubsumes',['Unity','$VAR'(0),'$VAR'(2)],'$VAR'(1)]]],'BaseKB',["?NUM1","?SUBNUM1","??NUM2"],/*EL*/['implies',['quantitySubsumes','$VAR'(0),'$VAR'(1)],['quantitySubsumes',['Unity','$VAR'(0),'$VAR'(2)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['trueSentence','$VAR'(0)],['sentenceTruth','$VAR'(0),'False']],[]],'UniversalVocabularyMt',["?SENT"],/*EL*/['not',['and',['trueSentence','$VAR'(0)],['sentenceTruth','$VAR'(0),'False']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['equals','True','$VAR'(0)]],[['trueSentence','$VAR'(0)]]],'UniversalVocabularyMt',["?VALUE"],/*EL*/['implies',['equals','True','$VAR'(0)],['trueSentence','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),1,4],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(0),'$VAR'(4),'$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),1,4],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(0),'$VAR'(4),'$VAR'(2),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationInstanceAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['conceptuallyRelated','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?INSTANCE","?COLLECTION"],/*EL*/['implies',['relationInstanceAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['conceptuallyRelated','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),3],['arg3Isa','$VAR'(1),'$VAR'(2)]],[['arg3Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),3],['arg3Isa','$VAR'(1),'$VAR'(2)]],['arg3Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationInverse','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],[['negationInverse','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?GENL-PRED","?NEG-PRED","?SPEC-PRED"],/*EL*/['implies',['and',['negationInverse','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],['negationInverse','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)]],[['decontextualizedPredicate','$VAR'(1)]]],'BaseKB',["?PRED","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['different','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(0)]],['decontextualizedPredicate','$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedSentence','$VAR'(0)],['integerBetween',1,'$VAR'(1),'$VAR'(2)],['evaluate','$VAR'(3),['FormulaArgFn',0,'$VAR'(0)]],['evaluate','$VAR'(2),['FormulaArityFn','$VAR'(0)]],['evaluate','$VAR'(4),['FormulaArgFn','$VAR'(1),'$VAR'(0)]]],[['admittedArgument','$VAR'(4),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?FORMULA","?ARG","?ARITY","?RELATION","?TERM"],/*EL*/['implies',['and',['admittedSentence','$VAR'(0)],['integerBetween',1,'$VAR'(1),'$VAR'(2)],['evaluate','$VAR'(3),['FormulaArgFn',0,'$VAR'(0)]],['evaluate','$VAR'(2),['FormulaArityFn','$VAR'(0)]],['evaluate','$VAR'(4),['FormulaArgFn','$VAR'(1),'$VAR'(0)]]],['admittedArgument','$VAR'(4),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['trueSentence',['forAll','?Y',['or',['isa','?Y','$VAR'(2)],['not',['isa','?Y','$VAR'(1)]]]]]],[['isa','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?X","?COL1","?COL2"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['trueSentence',['forAll','?Y',['or',['isa','?Y','$VAR'(2)],['not',['isa','?Y','$VAR'(1)]]]]]],['isa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'InterArgIsaPredicate']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','INTER-ARG-ISA-AFTER-REMOVING']]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InterArgIsaPredicate'],['afterRemoving','$VAR'(0),['SubLQuoteFn','INTER-ARG-ISA-AFTER-REMOVING']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['maxQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(2)],['maxQuantValue','$VAR'(3),'$VAR'(4)],['greaterThanOrEqualTo','$VAR'(4),'$VAR'(2)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(4)]],[['quantityIntersects','$VAR'(0),'$VAR'(3)]]],'BaseKB',["?INTERVAL1","?MAX1","?MIN1","?INTERVAL2","?MAX2"],/*EL*/['implies',['and',['maxQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(2)],['maxQuantValue','$VAR'(3),'$VAR'(4)],['greaterThanOrEqualTo','$VAR'(4),'$VAR'(2)],['greaterThanOrEqualTo','$VAR'(1),'$VAR'(4)]],['quantityIntersects','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence','$VAR'(0)],['evaluate','$VAR'(1),['FormulaArgFn',0,'$VAR'(0)]],['evaluate','$VAR'(2),['FormulaArgFn','$VAR'(3),'$VAR'(0)]]],[['assertedPredicateArg','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'BaseKB',["?FORMULA","?FORMULAARGFN","?FORMULAARGFN-1","?ARG"],/*EL*/['implies',['and',['assertedSentence','$VAR'(0)],['evaluate','$VAR'(1),['FormulaArgFn',0,'$VAR'(0)]],['evaluate','$VAR'(2),['FormulaArgFn','$VAR'(3),'$VAR'(0)]]],['assertedPredicateArg','$VAR'(2),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),5,'$VAR'(1),1,'$VAR'(2)]],[['interArgIsa5-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),5,'$VAR'(1),1,'$VAR'(2)],['interArgIsa5-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['QuotientFn',['$VAR'(1) | '$VAR'(2)],['$VAR'(3),1]]],['termOfUnit','$VAR'(4),['PerFn','$VAR'(1),'$VAR'(3)]]],[['equals','$VAR'(0),['$VAR'(4) | '$VAR'(2)]]]],'UniversalVocabularyMt',["?QUOTIENTFN","?UNIT1","?ARGS","?UNIT2","?PERFN"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['QuotientFn',['$VAR'(1) | '$VAR'(2)],['$VAR'(3),1]]],['termOfUnit','$VAR'(4),['PerFn','$VAR'(1),'$VAR'(3)]]],['equals','$VAR'(0),['$VAR'(4) | '$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['greaterThan',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]],[['greaterThan','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?UNIT","?NUM1","?NUM2"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['greaterThan',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]],['greaterThan','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['trueSentence',['thereExists','?EX-INST',['and',['isa','?EX-INST','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?EX-INST']]]]]],'BaseKB',["?ALL-INST","?ALL-COL","?PRED","?EX-COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['trueSentence',['thereExists','?EX-INST',['and',['isa','?EX-INST','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?EX-INST']]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['hypotheticalTerm','$VAR'(0)]],[['highlyRelevantTerm','$VAR'(0)]]],'CoreCycLImplementationMt',["?TERM"],/*EL*/['implies',['hypotheticalTerm','$VAR'(0)],['highlyRelevantTerm','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),'$VAR'(1)],['evaluate','$VAR'(2),['DifferenceFn','$VAR'(1),1]]],[['arity',['FunctionToArg','$VAR'(3),'$VAR'(0)],'$VAR'(2)]]],'BaseKB',["?PRED","?M","?M-1","?N"],/*EL*/['implies',['and',['arity','$VAR'(0),'$VAR'(1)],['evaluate','$VAR'(2),['DifferenceFn','$VAR'(1),1]]],['arity',['FunctionToArg','$VAR'(3),'$VAR'(0)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlMt','$VAR'(0),'$VAR'(1)]],[['genlMt',['MtUnionFn','$VAR'(0) | '$VAR'(2)],'$VAR'(1)]]],'UniversalVocabularyMt',["?SPEC","?GENL","?OTHER-MTS"],/*EL*/['implies',['genlMt','$VAR'(0),'$VAR'(1)],['genlMt',['MtUnionFn','$VAR'(0) | '$VAR'(2)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['forwardNonTriggerLiteral',['isa','$VAR'(0),'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['isa','$VAR'(0),'$VAR'(1)]],['natFunction','$VAR'(2),'$VAR'(3)],['resultIsaArgIsa','$VAR'(3),'$VAR'(4)],['natArgument','$VAR'(2),'$VAR'(4),'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?ARG","?COL","?NART","?FUNC","?INT"],/*EL*/['implies',['and',['assertedSentence',['isa','$VAR'(0),'$VAR'(1)]],['natFunction','$VAR'(2),'$VAR'(3)],['resultIsaArgIsa','$VAR'(3),'$VAR'(4)],['natArgument','$VAR'(2),'$VAR'(4),'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]])]]],'BaseKB',["?ARG","?COL","?NART","?FUNC","?INT"],/*EL*/['implies',['forwardNonTriggerLiteral',['isa','$VAR'(0),'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['isa','$VAR'(0),'$VAR'(1)]],['natFunction','$VAR'(2),'$VAR'(3)],['resultIsaArgIsa','$VAR'(3),'$VAR'(4)],['natArgument','$VAR'(2),'$VAR'(4),'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?ARG","?COL","?NART","?FUNC","?INT"],/*EL*/['implies',['and',['assertedSentence',['isa','$VAR'(0),'$VAR'(1)]],['natFunction','$VAR'(2),'$VAR'(3)],['resultIsaArgIsa','$VAR'(3),'$VAR'(4)],['natArgument','$VAR'(2),'$VAR'(4),'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['extConceptOverlapsColAndReln','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['overlappingExternalConcept','$VAR'(0),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?COL","?RELN","?SOURCE","?STRING"],/*EL*/['implies',['extConceptOverlapsColAndReln','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['overlappingExternalConcept','$VAR'(0),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2]],[['isa','$VAR'(0),'BinaryRelation']]],'BaseKB',["?REL"],/*EL*/['implies',['arity','$VAR'(0),2],['isa','$VAR'(0),'BinaryRelation']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'InterArgFormatPredicate']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','INTER-ARG-FORMAT-AFTER-REMOVING']]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InterArgFormatPredicate'],['afterRemoving','$VAR'(0),['SubLQuoteFn','INTER-ARG-FORMAT-AFTER-REMOVING']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),1,'$VAR'(1),2,'$VAR'(2)]],[['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),1,'$VAR'(1),2,'$VAR'(2)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),1],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?REL","?M","?N"],/*EL*/['not',['and',['arity','$VAR'(0),1],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'Quantifier']],[['decontextualizedCollection','$VAR'(0)]]],'BaseKB',["?SPEC"],/*EL*/['implies',['genls','$VAR'(0),'Quantifier'],['decontextualizedCollection','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgResultIsa','$VAR'(0),'$VAR'(1),'Thing','$VAR'(2)]],[['resultIsa','$VAR'(0),'$VAR'(2)]]],'UniversalVocabularyMt',["?FN","??NUM","?COLL"],/*EL*/['implies',['interArgResultIsa','$VAR'(0),'$VAR'(1),'Thing','$VAR'(2)],['resultIsa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['elementOf','$VAR'(0),['TheSet' | '$VAR'(1)]]],[['genlMt',['MtSpace' | '$VAR'(1)],'$VAR'(0)]]],'UniversalVocabularyMt',["?MT-DIM","?MT-DIMS"],/*EL*/['implies',['elementOf','$VAR'(0),['TheSet' | '$VAR'(1)]],['genlMt',['MtSpace' | '$VAR'(1)],'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AtemporalNecessarilyEssentialCollectionType']],[['decontextualizedCollection','$VAR'(0)]]],'UniversalVocabularyMt',["?ANECT"],/*EL*/['implies',['isa','$VAR'(0),'AtemporalNecessarilyEssentialCollectionType'],['decontextualizedCollection','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['quotedArgument','differentSymbols','$VAR'(0)]]],'UniversalVocabularyMt',["?ALL"],/*EL*/['quotedArgument','differentSymbols','$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(2)]],[['genlInverse','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?SPEC-PRED","?PRED","?GENL-PRED"],/*EL*/['implies',['and',['genlInverse','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(2)]],['genlInverse','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['pointQuantValue','$VAR'(0),'$VAR'(1)]],[['minQuantValue','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?SCALAR","?VALUE"],/*EL*/['implies',['pointQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)]],[['isa','$VAR'(0),'$VAR'(2)]]],'LogicalTruthMt',["?INS","?SPEC","?GENL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)]],['isa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','genls','$VAR'(0)],['genlPreds','$VAR'(0),'genls']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLS']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','genls','$VAR'(0)],['genlPreds','$VAR'(0),'genls']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLS']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['relationInstanceAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['relationInstanceAll','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?SPEC-PRED","?GENL-PRED","?ARG1","?ARG2"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['relationInstanceAll','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['relationInstanceAll','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa4-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),4,'$VAR'(1),2,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa4-2','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),4,'$VAR'(1),2,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['trueSentence',['forAll','?ISA-CONSTR',['implies',['argIsa','$VAR'(0),'$VAR'(1),'?ISA-CONSTR'],['genls','?ISA-CONSTR','CycLTerm']]]]],[['quotedArgument','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?PRED","?N"],/*EL*/['implies',['trueSentence',['forAll','?ISA-CONSTR',['implies',['argIsa','$VAR'(0),'$VAR'(1),'?ISA-CONSTR'],['genls','?ISA-CONSTR','CycLTerm']]]],['quotedArgument','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['multiplicationUnits','Unity','$VAR'(0),'$VAR'(0)]]],'BaseKB',["?UNIT"],/*EL*/['multiplicationUnits','Unity','$VAR'(0),'$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['requiredArg2Pred','$VAR'(0),'$VAR'(1)],['interArgIsa2-1','$VAR'(1),'$VAR'(0),'$VAR'(2)]],[['relationExistsAll','$VAR'(1),'$VAR'(2),'$VAR'(0)]]],'BaseKB',["?COL-2","?PRED","?COL-1"],/*EL*/['implies',['and',['requiredArg2Pred','$VAR'(0),'$VAR'(1)],['interArgIsa2-1','$VAR'(1),'$VAR'(0),'$VAR'(2)]],['relationExistsAll','$VAR'(1),'$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['ist',['MtSpace','$VAR'(0) | '$VAR'(1)],'$VAR'(2)]],[['ist',['MtSpace' | '$VAR'(1)],'$VAR'(2)]]],'UniversalVocabularyMt',["?MT-DIM","?OTHER-MT-DIMS","?SENTENCE"],/*EL*/['implies',['ist',['MtSpace','$VAR'(0) | '$VAR'(1)],'$VAR'(2)],['ist',['MtSpace' | '$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['nearestDifferentIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['isa','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?OBJ-1","?OBJ-2","?NEAR-DIFF"],/*EL*/['implies',['nearestDifferentIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)],['isa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure']],[['unitMultiplicationFactor','$VAR'(0),'$VAR'(0),1]]],'UniversalVocabularyMt',["?UNIT"],/*EL*/['implies',['isa','$VAR'(0),'UnitOfMeasure'],['unitMultiplicationFactor','$VAR'(0),'$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationInstanceAll','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['requiredArg2Pred','$VAR'(2),'$VAR'(0)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['relationInstanceAll','$VAR'(0),'$VAR'(1),'$VAR'(2)],['requiredArg2Pred','$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['unknownSentence',['disjointWith','$VAR'(0),'$VAR'(1)]]],[['consistent',['and',['isa','$VAR'(2),'$VAR'(0)],['isa','$VAR'(2),'$VAR'(1)]]]]],'BaseKB',["?COL1","?COL2","?THING"],/*EL*/['implies',['unknownSentence',['disjointWith','$VAR'(0),'$VAR'(1)]],['consistent',['and',['isa','$VAR'(2),'$VAR'(0)],['isa','$VAR'(2),'$VAR'(1)]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]],[['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),2,'$VAR'(1)],['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['assertedSentence',['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),2,'$VAR'(1)]],[['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),2,'$VAR'(1)],['arg2SometimesIsa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa4-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),4,'$VAR'(1),1,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa4-1','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),4,'$VAR'(1),1,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['elInverse','$VAR'(0),'$VAR'(1)],['arg2Genl','$VAR'(0),'$VAR'(2)]],[['arg1Genl','$VAR'(1),'$VAR'(2)]]],'UniversalVocabularyMt',["?PRED","?INVERSE","?COL"],/*EL*/['implies',['and',['elInverse','$VAR'(0),'$VAR'(1)],['arg2Genl','$VAR'(0),'$VAR'(2)]],['arg1Genl','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['genlPreds','$VAR'(2),'$VAR'(0)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],[['predicateConventionMt','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?MT","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],['predicateConventionMt','$VAR'(2),'$VAR'(1)]])]]],'BaseKB',["?PRED","?MT","?SPEC"],/*EL*/['implies',['assertedSentence',['genlPreds','$VAR'(2),'$VAR'(0)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],[['predicateConventionMt','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?MT","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['predicateConventionMt','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],['predicateConventionMt','$VAR'(2),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlMt','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['different','$VAR'(1),'$VAR'(2)],['genlMt','$VAR'(2),'$VAR'(1)]],[['nearestCommonGenlMt','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['genlMt','?COMMON-FAR','?COMMON-FARTHER'],['genlMt','$VAR'(0),'?COMMON-FAR'],['genlMt','$VAR'(2),'?COMMON-FAR'],['different','?COMMON-FAR','?COMMON-FARTHER'],['different','?COMMON-FAR','$VAR'(0)],['different','?COMMON-FAR','$VAR'(2)]]]]]]],'BaseKB',["?MT-1","?COMMON-NEAR","?MT-2"],/*EL*/['implies',['and',['genlMt','$VAR'(0),'$VAR'(1)],['different','$VAR'(1),'$VAR'(0)],['different','$VAR'(1),'$VAR'(2)],['genlMt','$VAR'(2),'$VAR'(1)]],['or',['nearestCommonGenlMt','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['genlMt','?COMMON-FAR','?COMMON-FARTHER'],['genlMt','$VAR'(0),'?COMMON-FAR'],['genlMt','$VAR'(2),'?COMMON-FAR'],['different','?COMMON-FAR','?COMMON-FARTHER'],['different','?COMMON-FAR','$VAR'(0)],['different','?COMMON-FAR','$VAR'(2)]]]]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa2-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),2,'$VAR'(1),4,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa2-4','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),2,'$VAR'(1),4,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),5],['arg5Isa','$VAR'(1),'$VAR'(2)]],[['arg5Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),5],['arg5Isa','$VAR'(1),'$VAR'(2)]],['arg5Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['completeExtentDecidableForValueInArg','isa','$VAR'(0),2]],[['completelyDecidableCollection','$VAR'(0)]]],'CoreCycLMt',["?COL"],/*EL*/['implies',['completeExtentDecidableForValueInArg','isa','$VAR'(0),2],['completelyDecidableCollection','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedArgument','$VAR'(0),1,'isa'],['admittedArgument','$VAR'(1),2,'isa']],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['elementOf','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['elementOf','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(1)]])]]],'BaseKB',["?A","?B"],/*EL*/['implies',['and',['admittedArgument','$VAR'(0),1,'isa'],['admittedArgument','$VAR'(1),2,'isa']],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['elementOf','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['elementOf','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['commutativeInArgsAndRest','$VAR'(0),1,2,3]],[]],'BaseKB',["?REL"],/*EL*/['not',['commutativeInArgsAndRest','$VAR'(0),1,2,3]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['termOfUnit','$VAR'(0),['PerFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(1),['UnitProductFn','$VAR'(3),'$VAR'(2)]]],[['equals','$VAR'(0),'$VAR'(3)]]],'UniversalVocabularyMt',["?PERFN","?UNITPRODUCTFN","?UNIT2","?UNIT1"],/*EL*/['implies',['and',['termOfUnit','$VAR'(0),['PerFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(1),['UnitProductFn','$VAR'(3),'$VAR'(2)]]],['equals','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg4Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),4,'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg4Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),4,'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','CycLNonAtomicTerm','$VAR'(2)]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultQuotedIsa','$VAR'(1),'$VAR'(2)]],[['quotedIsa','$VAR'(0),'$VAR'(2)]]],'CoreCycLMt',["?NAT","?FUNCTION","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultQuotedIsa','$VAR'(1),'$VAR'(2)]],['quotedIsa','$VAR'(0),'$VAR'(2)]])]]],'CoreCycLMt',["?NAT","?FUNCTION","?COL"],/*EL*/['implies',['different','CycLNonAtomicTerm','$VAR'(2)],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['resultQuotedIsa','$VAR'(1),'$VAR'(2)]],[['quotedIsa','$VAR'(0),'$VAR'(2)]]],'CoreCycLMt',["?NAT","?FUNCTION","?COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['resultQuotedIsa','$VAR'(1),'$VAR'(2)]],['quotedIsa','$VAR'(0),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['highlyRelevantAssertion','$VAR'(0)]],[['assertionUtility','$VAR'(0),1]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['highlyRelevantAssertion','$VAR'(0)],['assertionUtility','$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgGenlBinaryPredicate']],[['transitiveViaArg','$VAR'(0),'genls',2]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ArgGenlBinaryPredicate'],['transitiveViaArg','$VAR'(0),'genls',2]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['unitMultiplicationFactor','$VAR'(0),'$VAR'(0),1]]],'BaseKB',["?UNIT"],/*EL*/['unitMultiplicationFactor','$VAR'(0),'$VAR'(0),1]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(0),'$VAR'(3)]],[['relationExistsInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?OBJECT1","?TYPE","?RELATION","?OBJECT2"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(0),'$VAR'(3)]],['relationExistsInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['equals','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(2)]],[['isa','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?X","?Y","?COL"],/*EL*/['implies',['and',['equals','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(2)]],['isa','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['termOfUnit','$VAR'(0),['UnitProductFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(1),['PerFn','$VAR'(3),'$VAR'(2)]]],[['equals','$VAR'(3),'$VAR'(0)]]],'UniversalVocabularyMt',["?UNITPRODUCTFN","?PERFN","?UNIT2","?UNIT1"],/*EL*/['implies',['and',['termOfUnit','$VAR'(0),['UnitProductFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(1),['PerFn','$VAR'(3),'$VAR'(2)]]],['equals','$VAR'(3),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['nearestCommonGenlMt','$VAR'(0),'$VAR'(0),'$VAR'(1)]],[['nearestGenlMt','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?MT","?NEAR-MT"],/*EL*/['implies',['nearestCommonGenlMt','$VAR'(0),'$VAR'(0),'$VAR'(1)],['nearestGenlMt','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TernaryPredicate'],['commutativeInArgs','$VAR'(0),1,2],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3"],/*EL*/['implies',['and',['isa','$VAR'(0),'TernaryPredicate'],['commutativeInArgs','$VAR'(0),1,2],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['isa','$VAR'(0),'$VAR'(5)]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['isa','$VAR'(0),'$VAR'(5)]])]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['assertedSentence',['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],[['isa','$VAR'(0),'$VAR'(5)]]],'BaseKB',["?NAT","?FUNC","?TERM","?INDEP-COL","?ARG","?DEP-COL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['natArgument','$VAR'(0),'$VAR'(4),'$VAR'(2)],['interArgResultIsa','$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(5)]],['isa','$VAR'(0),'$VAR'(5)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThanOrEqualTo',1,'$VAR'(0)],['arg2Isa','$VAR'(1),'$VAR'(2)]],[['arg1Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThanOrEqualTo',1,'$VAR'(0)],['arg2Isa','$VAR'(1),'$VAR'(2)]],['arg1Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),6,'$VAR'(1)]],[['arg6QuotedIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),6,'$VAR'(1)],['arg6QuotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnitOfMeasure']],[['arityMin','$VAR'(0),1]]],'BaseKB',["?UNIT"],/*EL*/['implies',['isa','$VAR'(0),'UnitOfMeasure'],['arityMin','$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'genls']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLS']]]],'BaseKB',["?SPEC-INVERSE"],/*EL*/['implies',['genlInverse','$VAR'(0),'genls'],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLS']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg4QuotedIsa','$VAR'(0),'$VAR'(1)]],[['argQuotedIsa','$VAR'(0),4,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg4QuotedIsa','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(0),4,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(1),'$VAR'(2),'$VAR'(3)],['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(2)],['$VAR'(0),'?INST','$VAR'(3)]]]]],[]],'BaseKB',["?NEGPRED","?PRED","?COL","?THING"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(1),'$VAR'(2),'$VAR'(3)],['trueSentence',['thereExists','?INST',['and',['isa','?INST','$VAR'(2)],['$VAR'(0),'?INST','$VAR'(3)]]]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SymmetricBinaryPredicate'],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(1)]],[['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(1)]]],'UniversalVocabularyMt',["?PRED","?COL"],/*EL*/['implies',['and',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(1)]],['interArgIsa2-1','$VAR'(0),'$VAR'(1),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ScalarPointValue'],['isa','$VAR'(1),'ScalarPointValue'],['quantityIntersects','$VAR'(0),'$VAR'(1)]],[['numericallyEquals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?INTERVAL1","?INTERVAL2"],/*EL*/['implies',['and',['isa','$VAR'(0),'ScalarPointValue'],['isa','$VAR'(1),'ScalarPointValue'],['quantityIntersects','$VAR'(0),'$VAR'(1)]],['numericallyEquals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg1Isa','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?COL","?THING","??DUMMY"],/*EL*/['implies',['and',['arg1Isa','$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['$VAR'(0) | '$VAR'(1)],['genlPreds','$VAR'(0),'$VAR'(2)]],[['$VAR'(2) | '$VAR'(1)]]],'BaseKB',["?SPEC","?ARGS","?GENL"],/*EL*/['implies',['and',['$VAR'(0) | '$VAR'(1)],['genlPreds','$VAR'(0),'$VAR'(2)]],['$VAR'(2) | '$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),4],['isa','$VAR'(0),'CommutativeRelation']],[['commutativeInArgs','$VAR'(0),1,2,3,4]]],'BaseKB',["?RELN"],/*EL*/['implies',['and',['arity','$VAR'(0),4],['isa','$VAR'(0),'CommutativeRelation']],['commutativeInArgs','$VAR'(0),1,2,3,4]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),4,'$VAR'(1),1,'$VAR'(2)]],[['interArgIsa4-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),4,'$VAR'(1),1,'$VAR'(2)],['interArgIsa4-1','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),3,'$VAR'(1),5,'$VAR'(2)]],[['interArgIsa3-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),3,'$VAR'(1),5,'$VAR'(2)],['interArgIsa3-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(4)]],[['numericallyEquals','$VAR'(3),'$VAR'(4)]]],'BaseKB',["?REL","?COL1","?COL2","?M","?N"],/*EL*/['implies',['and',['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(4)]],['numericallyEquals','$VAR'(3),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),'$VAR'(1)],['relationAllInstance','greaterThanOrEqualTo','$VAR'(2),'$VAR'(0)]],[['relationAllInstance','greaterThan','$VAR'(2),'$VAR'(1)]]],'UniversalVocabularyMt',["?BIGGER","?SMALLER","?COL"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),'$VAR'(1)],['relationAllInstance','greaterThanOrEqualTo','$VAR'(2),'$VAR'(0)]],['relationAllInstance','greaterThan','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['rewriteOf','$VAR'(0),'$VAR'(1)],['rewriteOf','$VAR'(0),'$VAR'(2)]],[['equals','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?TERM","?NART1","?NART2"],/*EL*/['implies',['and',['rewriteOf','$VAR'(0),'$VAR'(1)],['rewriteOf','$VAR'(0),'$VAR'(2)]],['equals','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quantitySubsumes','$VAR'(0),'$VAR'(1)],['quantitySubsumes','$VAR'(1),'$VAR'(0)]],[['numericallyEquals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?INTERVAL1","?INTERVAL2"],/*EL*/['implies',['and',['quantitySubsumes','$VAR'(0),'$VAR'(1)],['quantitySubsumes','$VAR'(1),'$VAR'(0)]],['numericallyEquals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-KEY']]],[['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-KEY']]]],'BaseKB',["?PRED"],/*EL*/['implies',['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-KEY']],['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-KEY']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),1,'$VAR'(1)]],[['arg1QuotedIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),1,'$VAR'(1)],['arg1QuotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','$VAR'(0),'$VAR'(1)]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(0),'$VAR'(4)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],[['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]],'BaseKB',["?UNIT-ONE","?UNIT-TWO","?FACTOR1","?PERFN-1","?UNIT-THREE","?PERFN"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(0),'$VAR'(4)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]])]]],'BaseKB',["?UNIT-ONE","?UNIT-TWO","?FACTOR1","?PERFN-1","?UNIT-THREE","?PERFN"],/*EL*/['implies',['different','$VAR'(0),'$VAR'(1)],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(0),'$VAR'(4)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],[['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]],'BaseKB',["?UNIT-ONE","?UNIT-TWO","?FACTOR1","?PERFN-1","?UNIT-THREE","?PERFN"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(0),'$VAR'(4)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['disjointWith','$VAR'(0),'$VAR'(1)],['trueSentence',['thereExists','?THING',['and',['isa','?THING','$VAR'(0)],['isa','?THING','$VAR'(1)]]]]],[]],'BaseKB',["?COL1","?COL2"],/*EL*/['not',['and',['disjointWith','$VAR'(0),'$VAR'(1)],['trueSentence',['thereExists','?THING',['and',['isa','?THING','$VAR'(0)],['isa','?THING','$VAR'(1)]]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AsymmetricBinaryPredicate'],['isa','$VAR'(0),'SymmetricBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?PRED","?ANYTHING1","?ANYTHING2"],/*EL*/['not',['and',['isa','$VAR'(0),'AsymmetricBinaryPredicate'],['isa','$VAR'(0),'SymmetricBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa5-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),5,'$VAR'(1),2,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa5-2','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),5,'$VAR'(1),2,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsaArg','$VAR'(0),1],['arg1Genl','$VAR'(0),'$VAR'(1)]],[['resultIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?FUNC","?COL"],/*EL*/['implies',['and',['resultIsaArg','$VAR'(0),1],['arg1Genl','$VAR'(0),'$VAR'(1)]],['resultIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedSentence',['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['equals','$VAR'(0),'$VAR'(1)]],[['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['equals','$VAR'(0),'$VAR'(1)],['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]])]]],'BaseKB',["?A","?B"],/*EL*/['implies',['admittedSentence',['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['equals','$VAR'(0),'$VAR'(1)]],[['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['equals','$VAR'(0),'$VAR'(1)],['equalStrings-CaseInsensitive','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]],[['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),5,'$VAR'(1)],['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['assertedSentence',['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),5,'$VAR'(1)]],[['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),5,'$VAR'(1)],['arg5SometimesIsa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),4],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[]],'BaseKB',["?REL","?K","?L","?M","?N"],/*EL*/['not',['and',['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),4],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quotedIsa','$VAR'(0),'CycLRuleAssertion']],[['assertionDirection','$VAR'(0),'Backward-AssertionDirection']]],'BaseKB',["?ASSERTION"],/*EL*/['implies',['quotedIsa','$VAR'(0),'CycLRuleAssertion'],['assertionDirection','$VAR'(0),'Backward-AssertionDirection']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationInverse','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(2),'$VAR'(0)]],[['negationPreds','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?GENL-PRED","?NEG-PRED","?SPEC-PRED"],/*EL*/['implies',['and',['negationInverse','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(2),'$VAR'(0)]],['negationPreds','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['highlyRelevantAssertion','$VAR'(0)]],[['assertionUtility-1','$VAR'(0),1]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['highlyRelevantAssertion','$VAR'(0)],['assertionUtility-1','$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Integer'],['isa',['$VAR'(1),'$VAR'(2)],'ScalarIntegralValue'],['isa',['$VAR'(3),'$VAR'(4)],'ScalarIntegralValue'],['unitMultiplicationFactor','$VAR'(1),'$VAR'(3),'$VAR'(0)],['evaluate','$VAR'(5),['PlusFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),'$VAR'(4)]]]],[['isa','$VAR'(5),'ScalarIntegralValue']]],'BaseKB',["?NUM","?UNIT1","?M","?UNIT2","?N","?PLUSFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'Integer'],['isa',['$VAR'(1),'$VAR'(2)],'ScalarIntegralValue'],['isa',['$VAR'(3),'$VAR'(4)],'ScalarIntegralValue'],['unitMultiplicationFactor','$VAR'(1),'$VAR'(3),'$VAR'(0)],['evaluate','$VAR'(5),['PlusFn',['$VAR'(1),'$VAR'(2)],['$VAR'(3),'$VAR'(4)]]]],['isa','$VAR'(5),'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','negationInverse','$VAR'(0)],['genlPreds','$VAR'(0),'negationInverse']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-NEGATIONINVERSE']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','negationInverse','$VAR'(0)],['genlPreds','$VAR'(0),'negationInverse']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-NEGATIONINVERSE']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),2,'$VAR'(1),4,'$VAR'(2)]],[['interArgIsa2-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),2,'$VAR'(1),4,'$VAR'(2)],['interArgIsa2-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['$VAR'(0),'$VAR'(2),'$VAR'(4)],['relationAllInstance','$VAR'(1),'$VAR'(3),'$VAR'(4)]],[]],'BaseKB',["?NEGPRED","?PRED","?INST","?COL","?THING"],/*EL*/['not',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['$VAR'(0),'$VAR'(2),'$VAR'(4)],['relationAllInstance','$VAR'(1),'$VAR'(3),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence','$VAR'(0)]],[['quotedIsa','$VAR'(0),'CycLAssertion']]],'BaseKB',["?SENT"],/*EL*/['implies',['assertedSentence','$VAR'(0)],['quotedIsa','$VAR'(0),'CycLAssertion']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)],['relationAllInstance','$VAR'(2),'$VAR'(0),'$VAR'(3)]],[['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?GENL-COL","?SPEC-COL","?PRED","?ARG"],/*EL*/['implies',['and',['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)],['relationAllInstance','$VAR'(2),'$VAR'(0),'$VAR'(3)]],['relationAllInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'AntiTransitiveBinaryPredicate'],['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]],[]],'BaseKB',["?PRED","??A","?B","??C"],/*EL*/['not',['and',['isa','$VAR'(0),'AntiTransitiveBinaryPredicate'],['isa','$VAR'(0),'TransitiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['equals','$VAR'(0),'$VAR'(1)]],[['equals','$VAR'(0),'$VAR'(1)]]],'LogicalTruthMt',["?X","?Y"],/*EL*/['implies',['equals','$VAR'(0),'$VAR'(1)],['equals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['numericallyEquals','$VAR'(0),'$VAR'(1)],['relationAllExistsCount','$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(1)]],[['relationAllExistsCount','$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(0)]]],'BaseKB',["?M","?N","?REL","?COL1","?COL2"],/*EL*/['implies',['and',['numericallyEquals','$VAR'(0),'$VAR'(1)],['relationAllExistsCount','$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(1)]],['relationAllExistsCount','$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg3Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),3,'$VAR'(0)]],[['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg3Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),3,'$VAR'(0)]],['genls','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['evaluationResultQuotedIsa','$VAR'(0),'$VAR'(1)],['genls-SpecDenotesGenlInstances','$VAR'(1),'$VAR'(2)]],[['resultIsa','$VAR'(0),'$VAR'(2)]]],'UniversalVocabularyMt',["?FUNCTION","?Q-COL","?COL"],/*EL*/['implies',['and',['evaluationResultQuotedIsa','$VAR'(0),'$VAR'(1)],['genls-SpecDenotesGenlInstances','$VAR'(1),'$VAR'(2)]],['resultIsa','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['arg1Isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(1)],['equals','$VAR'(2),'$VAR'(3)]],[['$VAR'(0),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?PRED","?CONSTRAINT1","?OBJ1","?OBJ2"],/*EL*/['implies',['and',['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['arg1Isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(1)],['equals','$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(0),'Thing']]],'BaseKB',["?SUB","?SUPER"],/*EL*/['implies',['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(0),'Thing']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),4],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[]],'BaseKB',["?REL","?K","?L","?M","?N"],/*EL*/['not',['and',['arity','$VAR'(0),4],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa1-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),1,'$VAR'(1),4,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa1-4','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),1,'$VAR'(1),4,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ScalarInterval'],['isa','$VAR'(1),'ScalarInterval'],['equals','$VAR'(0),'$VAR'(1)]],[['numericallyEquals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?INTERVAL1","?INTERVAL2"],/*EL*/['implies',['and',['isa','$VAR'(0),'ScalarInterval'],['isa','$VAR'(1),'ScalarInterval'],['equals','$VAR'(0),'$VAR'(1)]],['numericallyEquals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['sentenceTruth','$VAR'(0),'True']],[['trueSentence','$VAR'(0)]]],'UniversalVocabularyMt',["?SENT"],/*EL*/['implies',['sentenceTruth','$VAR'(0),'True'],['trueSentence','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['equals','$VAR'(0),['Unity','$VAR'(0)]]]],'BaseKB',["?NUM"],/*EL*/['equals','$VAR'(0),['Unity','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),1,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(0),'$VAR'(3),'$VAR'(2),'$VAR'(1),'$VAR'(4)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),1,3],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(0),'$VAR'(3),'$VAR'(2),'$VAR'(1),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThanOrEqualTo',3,'$VAR'(0)],['arg4Isa','$VAR'(1),'$VAR'(2)]],[['arg3Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThanOrEqualTo',3,'$VAR'(0)],['arg4Isa','$VAR'(1),'$VAR'(2)]],['arg3Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['minQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(2),'$VAR'(1)]],[['quantityIntersects','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?INTERVAL1","?MIN","?INTERVAL2"],/*EL*/['implies',['and',['minQuantValue','$VAR'(0),'$VAR'(1)],['minQuantValue','$VAR'(2),'$VAR'(1)]],['quantityIntersects','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),1,'$VAR'(1),3,'$VAR'(2)]],[['interArgIsa1-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),1,'$VAR'(1),3,'$VAR'(2)],['interArgIsa1-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(1),'Thing']]],'BaseKB',["?SUB","?SUPER"],/*EL*/['implies',['genls','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'Thing']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['omitArgIsa','$VAR'(2),'$VAR'(3)]],[['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls-SpecDenotesGenlInstances','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'UniversalVocabularyMt',["?Q-COL","?COL","?RELN","?N"],/*EL*/['implies',['and',['genls-SpecDenotesGenlInstances','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)]],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?Q-COL","?COL","?RELN","?N"],/*EL*/['implies',['omitArgIsa','$VAR'(2),'$VAR'(3)],['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls-SpecDenotesGenlInstances','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'UniversalVocabularyMt',["?Q-COL","?COL","?RELN","?N"],/*EL*/['implies',['and',['genls-SpecDenotesGenlInstances','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)]],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['collectionBackchainRequired','$VAR'(0)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionBackchainRequired','$VAR'(0)]],[['collectionBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionBackchainRequired','$VAR'(0)],['collectionBackchainEncouraged','$VAR'(0)]])]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['assertedSentence',['collectionBackchainRequired','$VAR'(0)]],['meetsPragmaticRequirement',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionBackchainRequired','$VAR'(0)]],[['collectionBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionBackchainRequired','$VAR'(0)],['collectionBackchainEncouraged','$VAR'(0)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]],[['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg3SometimesIsa','$VAR'(0),'$VAR'(1)],['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'InterArgIsaPredicate']],[['afterAdding','$VAR'(0),['SubLQuoteFn','INTER-ARG-ISA-AFTER-ADDING']]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InterArgIsaPredicate'],['afterAdding','$VAR'(0),['SubLQuoteFn','INTER-ARG-ISA-AFTER-ADDING']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'Collection']],[['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?COL1","?COL2"],/*EL*/['implies',['isa','$VAR'(0),'Collection'],['or',['genls','$VAR'(0),'$VAR'(1)],['different','$VAR'(0),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['minQuantValue','$VAR'(0),'$VAR'(1)],['quantityIntersects','$VAR'(0),'$VAR'(2)],['maxQuantValue','$VAR'(2),'$VAR'(3)],['greaterThan','$VAR'(1),'$VAR'(3)]],[]],'BaseKB',["?INTERVAL1","?MIN1","?INTERVAL2","?MAX2"],/*EL*/['not',['and',['minQuantValue','$VAR'(0),'$VAR'(1)],['quantityIntersects','$VAR'(0),'$VAR'(2)],['maxQuantValue','$VAR'(2),'$VAR'(3)],['greaterThan','$VAR'(1),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['greaterThan',['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(3),'$VAR'(4)]]],[['greaterThan',['Unity','$VAR'(1),'$VAR'(2)],['Unity','$VAR'(3),'$VAR'(4)]]]],'BaseKB',["?UNIT","?NUM1A","?NUM1B","?NUM2A","?NUM2B"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['greaterThan',['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(3),'$VAR'(4)]]],['greaterThan',['Unity','$VAR'(1),'$VAR'(2)],['Unity','$VAR'(3),'$VAR'(4)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlPreds','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(2)]],[['genlInverse','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?SPEC-PRED","?PRED","?GENL-PRED"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(2)]],['genlInverse','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Genl','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationAllInstance','$VAR'(0),'$VAR'(3),'$VAR'(2)]],[]],'BaseKB',["?PRED","?ARG2TYPE","?GROUPMEMBERTYPE","?GROUPTYPE"],/*EL*/['not',['and',['arg2Genl','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationAllInstance','$VAR'(0),'$VAR'(3),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['termOfUnit','$VAR'(0),['UnitProductFn','$VAR'(1),'$VAR'(2)]]],[['multiplicationUnits','$VAR'(1),'$VAR'(2),'$VAR'(0)]]],'BaseKB',["?UNITPRODUCTFN","?X","?Y"],/*EL*/['implies',['termOfUnit','$VAR'(0),['UnitProductFn','$VAR'(1),'$VAR'(2)]],['multiplicationUnits','$VAR'(1),'$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'BookkeepingPredicate']],[['minimizeExtent','$VAR'(0)]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'BookkeepingPredicate'],['minimizeExtent','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'InterArgFormatPredicate']],[['afterAdding','$VAR'(0),['SubLQuoteFn','INTER-ARG-FORMAT-AFTER-ADDING']]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InterArgFormatPredicate'],['afterAdding','$VAR'(0),['SubLQuoteFn','INTER-ARG-FORMAT-AFTER-ADDING']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedSentence',['genls','$VAR'(0),'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['subsetOf','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['subsetOf','$VAR'(0),'$VAR'(1)],['genls','$VAR'(0),'$VAR'(1)]])]]],'BaseKB',["?A","?B"],/*EL*/['implies',['admittedSentence',['genls','$VAR'(0),'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['subsetOf','$VAR'(0),'$VAR'(1)]],[['genls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['subsetOf','$VAR'(0),'$VAR'(1)],['genls','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['genlMt',['MtSpace' | '$VAR'(0)],'UniversalVocabularyMt']]],'UniversalVocabularyMt',["??MT-DIMS"],/*EL*/['genlMt',['MtSpace' | '$VAR'(0)],'UniversalVocabularyMt']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2QuotedIsa','$VAR'(0),'$VAR'(1)]],[['argQuotedIsa','$VAR'(0),2,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg2QuotedIsa','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(0),2,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['FormulaArgFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(2),'$VAR'(3)]],[['termDependsOn','$VAR'(2),'$VAR'(0)]]],'BaseKB',["?ARG","?N","?NAT","?FORMULA"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['FormulaArgFn','$VAR'(1),'$VAR'(2)]],['termOfUnit','$VAR'(2),'$VAR'(3)]],['termDependsOn','$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['quotedIsa','$VAR'(0),'SubLNonNegativeInteger'],['denotes','$VAR'(0),'$VAR'(1)]],[['isa','$VAR'(1),'NonNegativeInteger']]],'LogicalTruthImplementationMt',["?SUBL-NUM","?NUM"],/*EL*/['implies',['and',['quotedIsa','$VAR'(0),'SubLNonNegativeInteger'],['denotes','$VAR'(0),'$VAR'(1)]],['isa','$VAR'(1),'NonNegativeInteger']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(1)]],[['nearestCommonIsa','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['isa','$VAR'(0),'?COMMON-FAR'],['isa','$VAR'(2),'?COMMON-FAR'],['genls','?COMMON-FAR','?COMMON-FARTHER'],['different','?COMMON-FAR','?COMMON-FARTHER']]]]]]],'BaseKB',["?OBJ-1","?COMMON-NEAR","?OBJ-2"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(1)]],['or',['nearestCommonIsa','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?COMMON-FARTHER',['thereExists','?COMMON-FAR',['and',['isa','$VAR'(0),'?COMMON-FAR'],['isa','$VAR'(2),'?COMMON-FAR'],['genls','?COMMON-FAR','?COMMON-FARTHER'],['different','?COMMON-FAR','?COMMON-FARTHER']]]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ExceptionPredicate']],[['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'LogicalConnective'],['arity','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'ArgQuotedIsaBinaryPredicate'],['constrainsArg','$VAR'(2),'$VAR'(3)],['integerBetween',1,'$VAR'(3),'$VAR'(1)]],[['$VAR'(2),'$VAR'(0),'CycLSentence-Assertible']]],'BaseKB',["?CONNECT","?ARITY","?ARG-N-QUOTED-ISA","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'LogicalConnective'],['arity','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'ArgQuotedIsaBinaryPredicate'],['constrainsArg','$VAR'(2),'$VAR'(3)],['integerBetween',1,'$VAR'(3),'$VAR'(1)]],['$VAR'(2),'$VAR'(0),'CycLSentence-Assertible']])]]],'BaseKB',["?CONNECT","?ARITY","?ARG-N-QUOTED-ISA","?N","?ARG-N-ISA"],/*EL*/['implies',['isa','$VAR'(0),'ExceptionPredicate'],['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)],'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'LogicalConnective'],['arity','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'ArgQuotedIsaBinaryPredicate'],['constrainsArg','$VAR'(2),'$VAR'(3)],['integerBetween',1,'$VAR'(3),'$VAR'(1)]],[['$VAR'(2),'$VAR'(0),'CycLSentence-Assertible']]],'BaseKB',["?CONNECT","?ARITY","?ARG-N-QUOTED-ISA","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'FixedArityRelation'],['isa','$VAR'(0),'LogicalConnective'],['arity','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'ArgQuotedIsaBinaryPredicate'],['constrainsArg','$VAR'(2),'$VAR'(3)],['integerBetween',1,'$VAR'(3),'$VAR'(1)]],['$VAR'(2),'$VAR'(0),'CycLSentence-Assertible']])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','genlMt','$VAR'(0)],['genlPreds','$VAR'(0),'genlMt']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLMT']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','genlMt','$VAR'(0)],['genlPreds','$VAR'(0),'genlMt']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLMT']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(2),'$VAR'(3)],['arg2Isa','$VAR'(0),'$VAR'(3)]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?COL1","?COL2","?COL3"],/*EL*/['implies',['and',['genls','$VAR'(2),'$VAR'(3)],['arg2Isa','$VAR'(0),'$VAR'(3)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],[['trueSentence',['thereExists','?OTHER',['and',['isa','?OTHER','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?OTHER']]]]]],'BaseKB',["?THING","?UNIVCOL","?PRED","?EXISTCOL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllExists','$VAR'(2),'$VAR'(1),'$VAR'(3)]],['trueSentence',['thereExists','?OTHER',['and',['isa','?OTHER','$VAR'(3)],['$VAR'(2),'$VAR'(0),'?OTHER']]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['requiredArg1Pred','$VAR'(2),'$VAR'(0)],['isa','$VAR'(3),'$VAR'(2)]],[['relationInstanceExists','$VAR'(0),'$VAR'(3),'$VAR'(1)]]],'BaseKB',["?ROLE","?TYPE","?SITTYPE","?SIT"],/*EL*/['implies',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['requiredArg1Pred','$VAR'(2),'$VAR'(0)],['isa','$VAR'(3),'$VAR'(2)]],['relationInstanceExists','$VAR'(0),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa1-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),1,'$VAR'(1),3,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa1-3','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),1,'$VAR'(1),3,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['equals','$VAR'(0),'$VAR'(0)]]],'LogicalTruthMt',["?X"],/*EL*/['equals','$VAR'(0),'$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(2)],['genls','$VAR'(2),'$VAR'(3)],['disjointWith','$VAR'(1),'$VAR'(3)]],[]],'BaseKB',["?OBJ","?COL1","?COL2","?COL3"],/*EL*/['not',['and',['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(0),'$VAR'(2)],['genls','$VAR'(2),'$VAR'(3)],['disjointWith','$VAR'(1),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['ist',['MtSpace' | '$VAR'(0)],'$VAR'(1)]],[['ist',['MtSpace','$VAR'(2) | '$VAR'(0)],'$VAR'(1)]]],'UniversalVocabularyMt',["?OTHER-MT-DIMS","?SENTENCE","?MT-DIM"],/*EL*/['implies',['ist',['MtSpace' | '$VAR'(0)],'$VAR'(1)],['ist',['MtSpace','$VAR'(2) | '$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)],['relationInstanceAll','$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationInstanceAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'BaseKB',["?GENL-COL","?SPEC-COL","?PRED","?ARG"],/*EL*/['implies',['and',['different','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(0)],['relationInstanceAll','$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationInstanceAll','$VAR'(2),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'Function-Denotational'],['quotedIsa','$VAR'(0),'CycLConstant']],[['isa','$VAR'(0),'ReifiableFunction'],['isa','$VAR'(0),'UnreifiableFunction']]],'BaseKB',["?FUNCTION"],/*EL*/['implies',['and',['isa','$VAR'(0),'Function-Denotational'],['quotedIsa','$VAR'(0),'CycLConstant']],['or',['isa','$VAR'(0),'ReifiableFunction'],['isa','$VAR'(0),'UnreifiableFunction']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa5-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),5,'$VAR'(1),3,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa5-3','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),5,'$VAR'(1),3,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TransitiveBinaryPredicate'],['relationExistsMaxAll','$VAR'(0),'$VAR'(1),'$VAR'(2),1],['relationAllExistsCount','$VAR'(0),'$VAR'(3),'$VAR'(1),'$VAR'(4)],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(5)],['evaluate','$VAR'(6),['TimesFn','$VAR'(4),'$VAR'(5)]]],[['relationAllExistsMin','$VAR'(0),'$VAR'(3),'$VAR'(2),'$VAR'(6)]]],'BaseKB',["?REL","?TYPE2","?TYPE3","?TYPE1","?X","?Y","?TIMESFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['relationExistsMaxAll','$VAR'(0),'$VAR'(1),'$VAR'(2),1],['relationAllExistsCount','$VAR'(0),'$VAR'(3),'$VAR'(1),'$VAR'(4)],['relationAllExistsCount','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(5)],['evaluate','$VAR'(6),['TimesFn','$VAR'(4),'$VAR'(5)]]],['relationAllExistsMin','$VAR'(0),'$VAR'(3),'$VAR'(2),'$VAR'(6)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]],[['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg6SometimesIsa','$VAR'(0),'$VAR'(1)],['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'TernaryPredicate'],['arg4Isa','$VAR'(0),'$VAR'(1)]],[]],'BaseKB',["?X","?Y"],/*EL*/['not',['and',['isa','$VAR'(0),'TernaryPredicate'],['arg4Isa','$VAR'(0),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationExistsAll','$VAR'(0),'$VAR'(3),'$VAR'(2)]],[]],'BaseKB',["?PRED","?ARG2ISA","?ARG2TYPE","?ARG1TYPE"],/*EL*/['not',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['relationExistsAll','$VAR'(0),'$VAR'(3),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg3Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),3,'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg3Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),3,'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['trueSentence','$VAR'(0)],['equals','False','$VAR'(0)]],[]],'UniversalVocabularyMt',["?VALUE"],/*EL*/['not',['and',['trueSentence','$VAR'(0)],['equals','False','$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),5,'$VAR'(1),4,'$VAR'(2)]],[['interArgIsa5-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),5,'$VAR'(1),4,'$VAR'(2)],['interArgIsa5-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThanOrEqualTo',5,'$VAR'(0)],['arg6Isa','$VAR'(1),'$VAR'(2)]],[['arg5Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThanOrEqualTo',5,'$VAR'(0)],['arg6Isa','$VAR'(1),'$VAR'(2)]],['arg5Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['completelyDecidableCollection','$VAR'(0)]],[['completeExtentDecidableForValueInArg','isa','$VAR'(0),2]]],'CoreCycLMt',["?COL"],/*EL*/['implies',['completelyDecidableCollection','$VAR'(0)],['completeExtentDecidableForValueInArg','isa','$VAR'(0),2]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa4-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),4,'$VAR'(1),5,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa4-5','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),4,'$VAR'(1),5,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['equals','$VAR'(0),'$VAR'(1)],['equals','$VAR'(1),'$VAR'(2)]],[['equals','$VAR'(0),'$VAR'(2)]]],'LogicalTruthMt',["?X","?Y","?Z"],/*EL*/['implies',['and',['equals','$VAR'(0),'$VAR'(1)],['equals','$VAR'(1),'$VAR'(2)]],['equals','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'TransitiveBinaryPredicate']],[['transitiveViaArg','$VAR'(0),'$VAR'(0),2]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'TransitiveBinaryPredicate'],['transitiveViaArg','$VAR'(0),'$VAR'(0),2]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['collectionIsaBackchainRequired','$VAR'(0)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionIsaBackchainRequired','$VAR'(0)]],[['collectionIsaBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionIsaBackchainRequired','$VAR'(0)],['collectionIsaBackchainEncouraged','$VAR'(0)]])]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['assertedSentence',['collectionIsaBackchainRequired','$VAR'(0)]],['meetsPragmaticRequirement',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['collectionIsaBackchainRequired','$VAR'(0)]],[['collectionIsaBackchainEncouraged','$VAR'(0)]]],'UniversalVocabularyMt',["?PRED"],/*EL*/['implies',['collectionIsaBackchainRequired','$VAR'(0)],['collectionIsaBackchainEncouraged','$VAR'(0)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['pointQuantValue','$VAR'(0),'$VAR'(1)]],[['maxQuantValue','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?SCALAR","?VALUE"],/*EL*/['implies',['pointQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),3,4],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(4),'$VAR'(3)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),3,4],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(4),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(2),'ScalarInterval']],[['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['conceptuallyRelated','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COLLECTION","?INSTANCE"],/*EL*/['implies',['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?COLLECTION","?INSTANCE"],/*EL*/['implies',['isa','$VAR'(2),'ScalarInterval'],['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['conceptuallyRelated','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COLLECTION","?INSTANCE"],/*EL*/['implies',['relationAllInstance','$VAR'(0),'$VAR'(1),'$VAR'(2)],['conceptuallyRelated','$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['holdsIn','$VAR'(0),'$VAR'(1)],['holdsIn','$VAR'(0),['not','$VAR'(1)]]],[]],'BaseKB',["?TIME","?PROP"],/*EL*/['not',['and',['holdsIn','$VAR'(0),'$VAR'(1)],['holdsIn','$VAR'(0),['not','$VAR'(1)]]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['commutativeInArgsAndRest','$VAR'(0),1,2]],[]],'BaseKB',["?REL"],/*EL*/['not',['commutativeInArgsAndRest','$VAR'(0),1,2]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['arg1Format','$VAR'(1),'SingleEntry']]],'UniversalVocabularyMt',["?GENLPRED","?SPECPRED"],/*EL*/['implies',['and',['arg1Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],['arg1Format','$VAR'(1),'SingleEntry']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure']],[['resultIsa','$VAR'(0),'ScalarInterval']]],'BaseKB',["?MEASURE-FN"],/*EL*/['implies',['isa','$VAR'(0),'UnitOfMeasure'],['resultIsa','$VAR'(0),'ScalarInterval']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['nearestCommonSpecs','$VAR'(0),'$VAR'(0),'$VAR'(1)]],[['nearestGenls','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?COL","?NEAREST-SPEC"],/*EL*/['implies',['nearestCommonSpecs','$VAR'(0),'$VAR'(0),'$VAR'(1)],['nearestGenls','$VAR'(1),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(3),'$VAR'(2)],['different','$VAR'(2),'$VAR'(3)],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(3)]],[['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?COL1","?COL2","?SPEC"],/*EL*/['implies',['and',['genls','$VAR'(3),'$VAR'(2)],['different','$VAR'(2),'$VAR'(3)],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(3)]],['abnormal',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['extConceptOverlapsColAndReln','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[['overlappingExternalConcept','$VAR'(1),'$VAR'(2),'$VAR'(3)]]],'BaseKB',["?COL","?RELN","?SOURCE","?STRING"],/*EL*/['implies',['extConceptOverlapsColAndReln','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)],['overlappingExternalConcept','$VAR'(1),'$VAR'(2),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['minQuantValue','$VAR'(0),'$VAR'(1)],['quantitySubsumes','$VAR'(0),'$VAR'(2)],['minQuantValue','$VAR'(2),'$VAR'(3)],['greaterThan','$VAR'(1),'$VAR'(3)]],[]],'BaseKB',["?SUPER","?SUPERMIN","?SUB","?SUBMIN"],/*EL*/['not',['and',['minQuantValue','$VAR'(0),'$VAR'(1)],['quantitySubsumes','$VAR'(0),'$VAR'(2)],['minQuantValue','$VAR'(2),'$VAR'(3)],['greaterThan','$VAR'(1),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg4Isa','$VAR'(0),'$VAR'(1)]],[['resultIsa',['FunctionToArg',4,'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE"],/*EL*/['implies',['arg4Isa','$VAR'(0),'$VAR'(1)],['resultIsa',['FunctionToArg',4,'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['quotedIsa','$VAR'(0),'CycLClosedExpression']],[['equals',['Quote','?EXPR'],['Quote','$VAR'(0)]]]],'BaseKB',["?EXPR"],/*EL*/['implies',['quotedIsa','$VAR'(0),'CycLClosedExpression'],['equals',['Quote','?EXPR'],['Quote',['EscapeQuote','$VAR'(0)]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsaArg','$VAR'(0),3],['arg3Genl','$VAR'(0),'$VAR'(1)]],[['resultIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?FUNC","?COL"],/*EL*/['implies',['and',['resultIsaArg','$VAR'(0),3],['arg3Genl','$VAR'(0),'$VAR'(1)]],['resultIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'genlMt']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLMT']]]],'BaseKB',["?SPEC-INVERSE"],/*EL*/['implies',['genlInverse','$VAR'(0),'genlMt'],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-INVERSE-TO-GENLMT']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['TimesFn','$VAR'(1),0]]],[['evaluate',0,'$VAR'(0)]]],'BaseKB',["?TIMESFN","?X"],/*EL*/['implies',['evaluate','$VAR'(0),['TimesFn','$VAR'(1),0]],['evaluate',0,'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'RuleTemplate']],[['ruleTemplateDirection','$VAR'(0),'Backward-AssertionDirection']]],'BaseKB',["?TEMPLATE"],/*EL*/['implies',['isa','$VAR'(0),'RuleTemplate'],['ruleTemplateDirection','$VAR'(0),'Backward-AssertionDirection']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['argQuotedIsa','$VAR'(0),4,'$VAR'(1)]],[['arg4QuotedIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argQuotedIsa','$VAR'(0),4,'$VAR'(1)],['arg4QuotedIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)]],[['elementOf','$VAR'(2),['TheSetOf','?ITEM-1',['isa','?ITEM-1','$VAR'(1)]]],['nearestDifferentIsa','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?DIFF-FARTHER',['thereExists','?DIFF-FAR',['and',['isa','$VAR'(0),'?DIFF-FAR'],['genls','?DIFF-FAR','?DIFF-FARTHER'],['different','?DIFF-FAR','?DIFF-FARTHER'],['not',['elementOf','$VAR'(2),['TheSetOf','?ITEM-2',['isa','?ITEM-2','$VAR'(1)]]]]]]]]]],'BaseKB',["?OBJ-1","?DIFF-NEAR","?OBJ-2"],/*EL*/['implies',['isa','$VAR'(0),'$VAR'(1)],['or',['elementOf','$VAR'(2),['TheSetOf','?ITEM-1',['isa','?ITEM-1','$VAR'(1)]]],['nearestDifferentIsa','$VAR'(0),'$VAR'(2),'$VAR'(1)],['elementOf','$VAR'(1),['TheSetOf','?DIFF-FARTHER',['thereExists','?DIFF-FAR',['and',['isa','$VAR'(0),'?DIFF-FAR'],['genls','?DIFF-FAR','?DIFF-FARTHER'],['different','?DIFF-FAR','?DIFF-FARTHER'],['not',['elementOf','$VAR'(2),['TheSetOf','?ITEM-2',['isa','?ITEM-2','$VAR'(1)]]]]]]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),5],['isa','$VAR'(0),'CommutativeRelation']],[['commutativeInArgs','$VAR'(0),1,2,3,4,5]]],'BaseKB',["?RELN"],/*EL*/['implies',['and',['arity','$VAR'(0),5],['isa','$VAR'(0),'CommutativeRelation']],['commutativeInArgs','$VAR'(0),1,2,3,4,5]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'ScalarPointValue'],['isa','$VAR'(1),'UnitOfMeasure']],[['minQuantValue',['$VAR'(1),'$VAR'(0),'$VAR'(2)],['$VAR'(1),'$VAR'(0)]]]],'BaseKB',["?LOW","?UNIT","?HIGH"],/*EL*/['implies',['and',['isa','$VAR'(0),'ScalarPointValue'],['isa','$VAR'(1),'UnitOfMeasure']],['minQuantValue',['$VAR'(1),'$VAR'(0),'$VAR'(2)],['$VAR'(1),'$VAR'(0)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),3,'$VAR'(1),4,'$VAR'(2)]],[['interArgIsa3-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),3,'$VAR'(1),4,'$VAR'(2)],['interArgIsa3-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AssociativeRelation'],['isa','$VAR'(0),'BinaryFunction']],[['equals',['$VAR'(0),'$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(3),['$VAR'(0),'$VAR'(1),'$VAR'(2)]]]]],'BaseKB',["?FUNC","?THING1","?THING2","?THING3"],/*EL*/['implies',['and',['isa','$VAR'(0),'AssociativeRelation'],['isa','$VAR'(0),'BinaryFunction']],['equals',['$VAR'(0),'$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(3)]],['$VAR'(0),'$VAR'(3),['$VAR'(0),'$VAR'(1),'$VAR'(2)]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),2,'$VAR'(1),3,'$VAR'(2)]],[['interArgIsa2-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),2,'$VAR'(1),3,'$VAR'(2)],['interArgIsa2-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['relationAll','$VAR'(0),'$VAR'(1)]],[['trueSentence',['implies',['isa','$VAR'(2),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]]],'BaseKB',["?PRED","?COL","?INST"],/*EL*/['implies',['relationAll','$VAR'(0),'$VAR'(1)],['trueSentence',['implies',['isa','$VAR'(2),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg4Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['arg4Format','$VAR'(1),'SingleEntry']]],'UniversalVocabularyMt',["?GENLPRED","?SPECPRED"],/*EL*/['implies',['and',['arg4Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],['arg4Format','$VAR'(1),'SingleEntry']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['canonicalizerDirectiveForArgAndRest','$VAR'(0),1,'$VAR'(1)]],[['canonicalizerDirectiveForAllArgs','$VAR'(0),'$VAR'(1)]]],'CoreCycLImplementationMt',["?RELN","?DIRECTIVE"],/*EL*/['implies',['canonicalizerDirectiveForArgAndRest','$VAR'(0),1,'$VAR'(1)],['canonicalizerDirectiveForAllArgs','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-VALUE']]],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]]],'BaseKB',["?PRED"],/*EL*/['implies',['afterAdding','$VAR'(0),['SubLQuoteFn','ADD-TVA-CACHE-VALUE']],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['knownAntecedentRule','$VAR'(0)]],[['highlyRelevantAssertion','$VAR'(0)]]],'UniversalVocabularyMt',["?ASSERTION"],/*EL*/['implies',['knownAntecedentRule','$VAR'(0)],['highlyRelevantAssertion','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'SymmetricBinaryPredicate'],['transitiveViaArgInverse','$VAR'(1),'$VAR'(0),'$VAR'(2)]],[['transitiveViaArg','$VAR'(1),'$VAR'(0),'$VAR'(2)]]],'BaseKB',["?BPRED","?PRED","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'SymmetricBinaryPredicate'],['transitiveViaArgInverse','$VAR'(1),'$VAR'(0),'$VAR'(2)]],['transitiveViaArg','$VAR'(1),'$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['elInverse','$VAR'(0),'$VAR'(1)],['arg1Isa','$VAR'(0),'$VAR'(2)]],[['arg2Isa','$VAR'(1),'$VAR'(2)]]],'UniversalVocabularyMt',["?PRED","?INVERSE","?COL"],/*EL*/['implies',['and',['elInverse','$VAR'(0),'$VAR'(1)],['arg1Isa','$VAR'(0),'$VAR'(2)]],['arg2Isa','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsaArg','$VAR'(0),4],['arg4Genl','$VAR'(0),'$VAR'(1)]],[['resultIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?FUNC","?COL"],/*EL*/['implies',['and',['resultIsaArg','$VAR'(0),4],['arg4Genl','$VAR'(0),'$VAR'(1)]],['resultIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','$VAR'(1),'$VAR'(0)]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-MON',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(0)]]],[['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]],'BaseKB',["?UNIT-TWO","?UNIT-THREE","?FACTOR1","?PERFN-1","?UNIT-ONE","?PERFN"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(0)]]],['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]])]]],'BaseKB',["?UNIT-TWO","?UNIT-THREE","?FACTOR1","?PERFN-1","?UNIT-ONE","?PERFN"],/*EL*/['implies',['different','$VAR'(1),'$VAR'(0)],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-MON',[[['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(0)]]],[['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]]],'BaseKB',["?UNIT-TWO","?UNIT-THREE","?FACTOR1","?PERFN-1","?UNIT-ONE","?PERFN"],/*EL*/['implies',['and',['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)],['termOfUnit','$VAR'(3),['PerFn','$VAR'(4),'$VAR'(1)]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(4),'$VAR'(0)]]],['unitMultiplicationFactor','$VAR'(3),'$VAR'(5),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'InferenceRelatedBookkeepingPredicate']],[['definingMt','$VAR'(0),'BaseKB']]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InferenceRelatedBookkeepingPredicate'],['definingMt','$VAR'(0),'BaseKB']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['admittedArgument','$VAR'(1),1,'$VAR'(0)],['admittedArgument','$VAR'(1),2,'$VAR'(0)],['equals','$VAR'(2),'$VAR'(1)]],[['$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?THING","?SAMETHING"],/*EL*/['implies',['and',['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['admittedArgument','$VAR'(1),1,'$VAR'(0)],['admittedArgument','$VAR'(1),2,'$VAR'(0)],['equals','$VAR'(2),'$VAR'(1)]],['$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AsymmetricBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(1)]],[]],'BaseKB',["?PRED","?ARG1","?ARG2"],/*EL*/['not',['and',['isa','$VAR'(0),'AsymmetricBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(2),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['notAssertible','$VAR'(0)]],[['abnormal',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','disjointWith','$VAR'(0)],['genlPreds','$VAR'(0),'disjointWith']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-DISJOINTWITH']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','disjointWith','$VAR'(0)],['genlPreds','$VAR'(0),'disjointWith']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-DISJOINTWITH']]])]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['notAssertible','$VAR'(0)],['abnormal',['TheList','$VAR'(0)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['different','disjointWith','$VAR'(0)],['genlPreds','$VAR'(0),'disjointWith']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-DISJOINTWITH']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','disjointWith','$VAR'(0)],['genlPreds','$VAR'(0),'disjointWith']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-DISJOINTWITH']]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(3)],['genls','$VAR'(4),'$VAR'(5)],['greaterThanOrEqualTo','$VAR'(6),'$VAR'(7)],['relationExistsMaxAll','$VAR'(1),'$VAR'(3),'$VAR'(5),'$VAR'(7)]],[['relationExistsMaxAll','$VAR'(0),'$VAR'(2),'$VAR'(4),'$VAR'(6)]]],'BaseKB',["?SPEC-PRED","?PRED","?EXISTS-SPEC","?EXISTS-COL","?ALL-SPEC","?ALL-COL","?MORE","?MAX"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['genls','$VAR'(2),'$VAR'(3)],['genls','$VAR'(4),'$VAR'(5)],['greaterThanOrEqualTo','$VAR'(6),'$VAR'(7)],['relationExistsMaxAll','$VAR'(1),'$VAR'(3),'$VAR'(5),'$VAR'(7)]],['relationExistsMaxAll','$VAR'(0),'$VAR'(2),'$VAR'(4),'$VAR'(6)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),5],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]],[]],'BaseKB',["?REL","?J","?K","?L","?M","?N"],/*EL*/['not',['and',['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),5],['different','$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['quantityIntersects',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]],[['quantityIntersects','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?UNIT","?NUM1","?NUM2"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['quantityIntersects',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]],['quantityIntersects','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['disjointWith','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]],[]],'BaseKB',["?ARGTYPE1","?ARGTYPE2","?PRED","?ARGNUM"],/*EL*/['not',['and',['disjointWith','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(0)],['argIsa','$VAR'(2),'$VAR'(3),'$VAR'(1)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg1Isa','$VAR'(0),'$VAR'(1)],['relationInstanceExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?PRED","?COL","?THING","??DUMMY"],/*EL*/['implies',['and',['arg1Isa','$VAR'(0),'$VAR'(1)],['relationInstanceExists','$VAR'(0),'$VAR'(2),'$VAR'(3)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa',['$VAR'(0),'$VAR'(1)],'ScalarIntegralValue'],['isa',['$VAR'(0),'$VAR'(2)],'ScalarIntegralValue'],['evaluate','$VAR'(3),['TimesFn',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]],[['isa','$VAR'(3),'ScalarIntegralValue']]],'BaseKB',["?UNIT","?M","?N","?TIMESFN"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa',['$VAR'(0),'$VAR'(1)],'ScalarIntegralValue'],['isa',['$VAR'(0),'$VAR'(2)],'ScalarIntegralValue'],['evaluate','$VAR'(3),['TimesFn',['$VAR'(0),'$VAR'(1)],['$VAR'(0),'$VAR'(2)]]]],['isa','$VAR'(3),'ScalarIntegralValue']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'equals']],[['afterAdding','$VAR'(0),['SubLQuoteFn','DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE']]]],'BaseKB',["?EQUALITY-PRED"],/*EL*/['implies',['genlPreds','$VAR'(0),'equals'],['afterAdding','$VAR'(0),['SubLQuoteFn','DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg3Isa','$VAR'(0),'$VAR'(1)]],[['resultIsa',['FunctionToArg',3,'$VAR'(0)],'$VAR'(1)]]],'BaseKB',["?PRED","?TYPE"],/*EL*/['implies',['arg3Isa','$VAR'(0),'$VAR'(1)],['resultIsa',['FunctionToArg',3,'$VAR'(0)],'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['notAssertible','$VAR'(0)],['isa','$VAR'(0),'DistributingMetaKnowledgePredicate']],[]],'UniversalVocabularyMt',["?PRED"],/*EL*/['not',['and',['notAssertible','$VAR'(0)],['isa','$VAR'(0),'DistributingMetaKnowledgePredicate']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['omitArgIsa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'UniversalVocabularyMt',["?RELN","?N","??THING"],/*EL*/['not',['and',['omitArgIsa','$VAR'(0),'$VAR'(1)],['argIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['completelyEnumerableCollection','$VAR'(0)]],[['completeExtentEnumerableForValueInArg','isa','$VAR'(0),2]]],'CoreCycLMt',["?COL"],/*EL*/['implies',['completelyEnumerableCollection','$VAR'(0)],['completeExtentEnumerableForValueInArg','isa','$VAR'(0),2]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlMt','$VAR'(0),'$VAR'(1)],['genlMt','$VAR'(1),'$VAR'(2)]],[['genlMt','$VAR'(0),'$VAR'(2)]]],'LogicalTruthMt',["?X","?Y","?Z"],/*EL*/['implies',['and',['genlMt','$VAR'(0),'$VAR'(1)],['genlMt','$VAR'(1),'$VAR'(2)]],['genlMt','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),2,'$VAR'(0)]],[['genls','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg2Genl','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),2,'$VAR'(0)]],['genls','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','isa','$VAR'(0)],['genlPreds','$VAR'(0),'isa']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-ISA']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','isa','$VAR'(0)],['genlPreds','$VAR'(0),'isa']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-ISA']]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlInverse','$VAR'(0),'genls']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]]],'BaseKB',["?SPEC-INVERSE"],/*EL*/['implies',['genlInverse','$VAR'(0),'genls'],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ReflexiveBinaryPredicate']],[['$VAR'(0),'$VAR'(1),'$VAR'(1)]]],'BaseKB',["?PRED","?OBJ"],/*EL*/['implies',['isa','$VAR'(0),'ReflexiveBinaryPredicate'],['$VAR'(0),'$VAR'(1),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'$VAR'(1)],['fanOutArg','$VAR'(1),'$VAR'(2)]],[['fanOutArg','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?SPEC","?GENL","?ARG-NUM"],/*EL*/['implies',['and',['genlPreds','$VAR'(0),'$VAR'(1)],['fanOutArg','$VAR'(1),'$VAR'(2)]],['fanOutArg','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),3],['different','$VAR'(1),'$VAR'(2),'$VAR'(3)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]],[]],'BaseKB',["?REL","?L","?M","?N"],/*EL*/['not',['and',['arity','$VAR'(0),3],['different','$VAR'(1),'$VAR'(2),'$VAR'(3)],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['evaluate','$VAR'(0),['QuotientFn',['$VAR'(1),'$VAR'(2),'$VAR'(3)],['$VAR'(4),1]]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],[['equals','$VAR'(0),['$VAR'(5),'$VAR'(2),'$VAR'(3)]]]],'BaseKB',["?QUOTIENTFN","?UNIT1","?M","?N","?UNIT2","?PERFN"],/*EL*/['implies',['and',['evaluate','$VAR'(0),['QuotientFn',['$VAR'(1),'$VAR'(2),'$VAR'(3)],['$VAR'(4),1]]],['termOfUnit','$VAR'(5),['PerFn','$VAR'(1),'$VAR'(4)]]],['equals','$VAR'(0),['$VAR'(5),'$VAR'(2),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa4-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),4,'$VAR'(1),3,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa4-3','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),4,'$VAR'(1),3,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],[['quotedIsa','$VAR'(0),'$VAR'(2)]]],'BookkeepingMt',["?INS","?COLL","?QUOTED-COLL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],['quotedIsa','$VAR'(0),'$VAR'(2)]])]]],'BookkeepingMt',["?INS","?COLL","?QUOTED-COLL"],/*EL*/['implies',['assertedSentence',['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],[['quotedIsa','$VAR'(0),'$VAR'(2)]]],'BookkeepingMt',["?INS","?COLL","?QUOTED-COLL"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','quotedIsa','$VAR'(1),'$VAR'(2)]],['quotedIsa','$VAR'(0),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]],[['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),3,'$VAR'(1)],['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['assertedSentence',['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),3,'$VAR'(1)]],[['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),3,'$VAR'(1)],['arg3SometimesIsa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['trueSentence',['$VAR'(2),'$VAR'(0),'$VAR'(3)]]],[['relationExistsInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]],'BaseKB',["?INS","?COL","?PRED","?VALUE"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['trueSentence',['$VAR'(2),'$VAR'(0),'$VAR'(3)]]],['relationExistsInstance','$VAR'(2),'$VAR'(1),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),1,2],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),1,2],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(0),'$VAR'(2),'$VAR'(1),'$VAR'(3),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),2],['arg2Isa','$VAR'(1),'$VAR'(2)]],[['arg2Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),2],['arg2Isa','$VAR'(1),'$VAR'(2)]],['arg2Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['equals','$VAR'(0),['TheSetOf','?X',['and',['isa','?X','Set-Mathematical'],['not',['elementOf','?X','?X']]]]]],[]],'BaseKB',["??SET"],/*EL*/['not',['equals','$VAR'(0),['TheSetOf','?X',['and',['isa','?X','Set-Mathematical'],['not',['elementOf','?X','?X']]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsaArg','$VAR'(0),5],['arg5Genl','$VAR'(0),'$VAR'(1)]],[['resultIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?FUNC","?COL"],/*EL*/['implies',['and',['resultIsaArg','$VAR'(0),5],['arg5Genl','$VAR'(0),'$VAR'(1)]],['resultIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['admittedArgument','$VAR'(1),1,'natFunction'],['admittedArgument','$VAR'(0),2,'natFunction']],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['operatorFormulas','$VAR'(0),'$VAR'(1)]],[['natFunction','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['operatorFormulas','$VAR'(0),'$VAR'(1)],['natFunction','$VAR'(1),'$VAR'(0)]])]]],'BaseKB',["?A","?B"],/*EL*/['implies',['and',['admittedArgument','$VAR'(1),1,'natFunction'],['admittedArgument','$VAR'(0),2,'natFunction']],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['operatorFormulas','$VAR'(0),'$VAR'(1)]],[['natFunction','$VAR'(1),'$VAR'(0)]]],'BaseKB',["?A","?B"],/*EL*/['implies',['operatorFormulas','$VAR'(0),'$VAR'(1)],['natFunction','$VAR'(1),'$VAR'(0)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'AssociativeRelation'],['isa','$VAR'(0),'Function-Denotational'],['argIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['argIsa','$VAR'(0),'$VAR'(3),'$VAR'(2)]]],'BaseKB',["?FUNC","??N","?ARGCOL","??M"],/*EL*/['implies',['and',['isa','$VAR'(0),'AssociativeRelation'],['isa','$VAR'(0),'Function-Denotational'],['argIsa','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['argIsa','$VAR'(0),'$VAR'(3),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'InterArgIsaPredicate']],[['arg1Isa','$VAR'(0),'Relation']]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'InterArgIsaPredicate'],['arg1Isa','$VAR'(0),'Relation']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg5QuotedIsa','$VAR'(0),'$VAR'(1)]],[['argQuotedIsa','$VAR'(0),5,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg5QuotedIsa','$VAR'(0),'$VAR'(1)],['argQuotedIsa','$VAR'(0),5,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['maxQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),'$VAR'(1)]],[['quantityIntersects','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?INTERVAL1","?MAX","?INTERVAL2"],/*EL*/['implies',['and',['maxQuantValue','$VAR'(0),'$VAR'(1)],['maxQuantValue','$VAR'(2),'$VAR'(1)]],['quantityIntersects','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['nearestDifferentGenls','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['genls','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?COL-1","?COL-2","?NEAR-DIFF"],/*EL*/['implies',['nearestDifferentGenls','$VAR'(0),'$VAR'(1),'$VAR'(2)],['genls','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['equals',['$VAR'(1),1],['$VAR'(0),'$VAR'(2)]]]],'UniversalVocabularyMt',["?SMALLER-UNIT","?LARGER-UNIT","?N"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['unitMultiplicationFactor','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['equals',['$VAR'(1),1],['$VAR'(0),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['opaqueArgument','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?REL","?N","?ARITY"],/*EL*/['not',['and',['opaqueArgument','$VAR'(0),'$VAR'(1)],['arity','$VAR'(0),'$VAR'(2)],['greaterThan','$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),4,'$VAR'(1),2,'$VAR'(2)]],[['interArgIsa4-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),4,'$VAR'(1),2,'$VAR'(2)],['interArgIsa4-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['nearestCommonGenls','$VAR'(0),'$VAR'(0),'$VAR'(1)]],[['nearestGenls','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?COL","?NEAR-GENL"],/*EL*/['implies',['nearestCommonGenls','$VAR'(0),'$VAR'(0),'$VAR'(1)],['nearestGenls','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['$VAR'(4),'$VAR'(0),'$VAR'(2)],['relationAllExistsCount','$VAR'(4),'$VAR'(1),'$VAR'(3),0]],[]],'BaseKB',["?INST1","?TYPE1","?INST2","?TYPE2","?PRED"],/*EL*/['not',['and',['isa','$VAR'(0),'$VAR'(1)],['isa','$VAR'(2),'$VAR'(3)],['$VAR'(4),'$VAR'(0),'$VAR'(2)],['relationAllExistsCount','$VAR'(4),'$VAR'(1),'$VAR'(3),0]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['rewriteOf','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(1)]],[['$VAR'(2),'$VAR'(3),'$VAR'(0)]]],'UniversalVocabularyMt',["?REWRITE","?TERM","?PRED","?ARG1"],/*EL*/['implies',['and',['rewriteOf','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(1)]],['$VAR'(2),'$VAR'(3),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['hypotheticalTerm','$VAR'(0)]],[['ephemeralTerm','$VAR'(0)]]],'CoreCycLImplementationMt',["?TERM"],/*EL*/['implies',['hypotheticalTerm','$VAR'(0)],['ephemeralTerm','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),'$VAR'(1)],['arity','$VAR'(2),'$VAR'(1)],['disjointWith','$VAR'(3),'$VAR'(4)],['argIsa','$VAR'(0),'$VAR'(5),'$VAR'(3)],['argIsa','$VAR'(2),'$VAR'(5),'$VAR'(4)]],[['negationPreds','$VAR'(0),'$VAR'(2)]]],'UniversalVocabularyMt',["?PRED1","?ARITY","?PRED2","?TYPE1","?TYPE2","?ARG"],/*EL*/['implies',['and',['arity','$VAR'(0),'$VAR'(1)],['arity','$VAR'(2),'$VAR'(1)],['disjointWith','$VAR'(3),'$VAR'(4)],['argIsa','$VAR'(0),'$VAR'(5),'$VAR'(3)],['argIsa','$VAR'(2),'$VAR'(5),'$VAR'(4)]],['negationPreds','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg3Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['arg3Format','$VAR'(1),'SingleEntry']]],'UniversalVocabularyMt',["?GENLPRED","?SPECPRED"],/*EL*/['implies',['and',['arg3Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],['arg3Format','$VAR'(1),'SingleEntry']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['different','$VAR'(0),'$VAR'(1)],['equals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?THING1","?THING2"],/*EL*/['or',['different','$VAR'(0),'$VAR'(1)],['equals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['except','$VAR'(0)]],[['exceptWhen',['except','$VAR'(0)],'$VAR'(0)]]],'BaseKB',["?ASSERTION"],/*EL*/['implies',['except','$VAR'(0)],['exceptWhen',['except','$VAR'(0)],'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['denotes',['Quote','$VAR'(0)],'$VAR'(1)]],[['denotes',['Quote','$VAR'(0)],'$VAR'(0)]]],'LogicalTruthMt',["?X","??ANYTHING"],/*EL*/['implies',['denotes',['Quote',['EscapeQuote','$VAR'(0)]],'$VAR'(1)],['denotes',['Quote',['EscapeQuote','$VAR'(0)]],'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'UnitOfMeasure'],['equals','$VAR'(1),['$VAR'(0),'$VAR'(2)]]],[['equals','$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(2)]]]],'BaseKB',["?UNIT","?QUANT","?NUM"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['equals','$VAR'(1),['$VAR'(0),'$VAR'(2)]]],['equals','$VAR'(1),['$VAR'(0),'$VAR'(2),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),1,'$VAR'(1),4,'$VAR'(2)]],[['interArgIsa1-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),1,'$VAR'(1),4,'$VAR'(2)],['interArgIsa1-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['hypotheticalTerm','$VAR'(0)]],[['quotedIsa','$VAR'(0),'IndeterminateTerm']]],'CoreCycLImplementationMt',["?TERM"],/*EL*/['implies',['hypotheticalTerm','$VAR'(0)],['quotedIsa','$VAR'(0),'IndeterminateTerm']]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genls','$VAR'(0),'LogicalConnective']],[['decontextualizedCollection','$VAR'(0)]]],'BaseKB',["?SPEC"],/*EL*/['implies',['genls','$VAR'(0),'LogicalConnective'],['decontextualizedCollection','$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsaArg','$VAR'(0),2],['arg2Genl','$VAR'(0),'$VAR'(1)]],[['resultIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?FUNC","?COL"],/*EL*/['implies',['and',['resultIsaArg','$VAR'(0),2],['arg2Genl','$VAR'(0),'$VAR'(1)]],['resultIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['rewriteOf','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],[['$VAR'(2),'$VAR'(3),'$VAR'(0),'$VAR'(4)]]],'UniversalVocabularyMt',["?REWRITE","?TERM","?PRED","?ARG1","?ARG3"],/*EL*/['implies',['and',['rewriteOf','$VAR'(0),'$VAR'(1)],['$VAR'(2),'$VAR'(3),'$VAR'(1),'$VAR'(4)]],['$VAR'(2),'$VAR'(3),'$VAR'(0),'$VAR'(4)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['genlPreds','$VAR'(1),'$VAR'(0)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['decontextualizedPredicate','$VAR'(1)]]],'BaseKB',["?PRED","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(1),'$VAR'(0)]],['decontextualizedPredicate','$VAR'(1)]])]]],'BaseKB',["?PRED","?SPEC"],/*EL*/['implies',['assertedSentence',['genlPreds','$VAR'(1),'$VAR'(0)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-MON',[[['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['decontextualizedPredicate','$VAR'(1)]]],'BaseKB',["?PRED","?SPEC"],/*EL*/['implies',['and',['decontextualizedPredicate','$VAR'(0)],['genlPreds','$VAR'(1),'$VAR'(0)]],['decontextualizedPredicate','$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['genlInverse','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(2)]],[['genlPreds','$VAR'(0),'$VAR'(2)]]],'BaseKB',["?SPEC-PRED","?PRED","?GENL-PRED"],/*EL*/['implies',['and',['genlInverse','$VAR'(0),'$VAR'(1)],['genlInverse','$VAR'(1),'$VAR'(2)]],['genlPreds','$VAR'(0),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),2],['different','$VAR'(1),'$VAR'(2)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?REL","?M","?N"],/*EL*/['not',['and',['isa','$VAR'(0),'PartiallyCommutativeRelation'],['arity','$VAR'(0),2],['different','$VAR'(1),'$VAR'(2)],['commutativeInArgs','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['resultIsaArg','$VAR'(0),6],['arg6Genl','$VAR'(0),'$VAR'(1)]],[['resultIsa','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?FUNC","?COL"],/*EL*/['implies',['and',['resultIsaArg','$VAR'(0),6],['arg6Genl','$VAR'(0),'$VAR'(1)]],['resultIsa','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa5-4','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),5,'$VAR'(1),4,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa5-4','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),5,'$VAR'(1),4,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg1SometimesIsa','$VAR'(0),'$VAR'(1)]],[['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['arg1SometimesIsa','$VAR'(0),'$VAR'(1)],['argSometimesIsa','$VAR'(0),1,'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['different','genlPreds','$VAR'(0)],['genlPreds','$VAR'(0),'genlPreds']],[['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLPREDS']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['and',['different','genlPreds','$VAR'(0)],['genlPreds','$VAR'(0),'genlPreds']],['afterAdding','$VAR'(0),['SubLQuoteFn','PROPAGATE-TO-GENLPREDS']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgIsaBinaryPredicate'],['constrainsArg','$VAR'(0),'$VAR'(1)]],[['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['$VAR'(0),'$VAR'(3),'$VAR'(2)],['argIsa','$VAR'(3),'$VAR'(1),'$VAR'(2)]],['implies',['argIsa','$VAR'(3),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(3),'$VAR'(2)]]]]]],'CoreCycLMt',["?ARG-ISA","?NUM","?COL","?RELN"],/*EL*/['implies',['and',['isa','$VAR'(0),'ArgIsaBinaryPredicate'],['constrainsArg','$VAR'(0),'$VAR'(1)]],['trueRule','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),['and',['implies',['$VAR'(0),'$VAR'(3),'$VAR'(2)],['argIsa','$VAR'(3),'$VAR'(1),'$VAR'(2)]],['implies',['argIsa','$VAR'(3),'$VAR'(1),'$VAR'(2)],['$VAR'(0),'$VAR'(3),'$VAR'(2)]]]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['maxQuantValue','$VAR'(0),['$VAR'(1),'$VAR'(2)]],['minQuantValue','$VAR'(0),['$VAR'(1),'$VAR'(2)]]],[['equals','$VAR'(0),['$VAR'(1),'$VAR'(2)]]]],'BaseKB',["?ATT","?UNIT","?VAL"],/*EL*/['implies',['and',['maxQuantValue','$VAR'(0),['$VAR'(1),'$VAR'(2)]],['minQuantValue','$VAR'(0),['$VAR'(1),'$VAR'(2)]]],['equals','$VAR'(0),['$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['assertedSentence',['genls','$VAR'(4),'$VAR'(5)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(1),'$VAR'(2)],['natFunction','$VAR'(3),'$VAR'(1)],['genls','$VAR'(4),'$VAR'(5)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(4)],['natArgument','$VAR'(3),'$VAR'(2),'$VAR'(5)]],[['genls','$VAR'(0),'$VAR'(3)]]],'UniversalVocabularyMt',["?NAT","?FUNC","?NUM","?INDEP-COLL-NAT","?TERM","?INDEP-COLL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(1),'$VAR'(2)],['natFunction','$VAR'(3),'$VAR'(1)],['genls','$VAR'(4),'$VAR'(5)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(4)],['natArgument','$VAR'(3),'$VAR'(2),'$VAR'(5)]],['genls','$VAR'(0),'$VAR'(3)]])]]],'UniversalVocabularyMt',["?NAT","?FUNC","?NUM","?INDEP-COLL-NAT","?TERM","?INDEP-COLL"],/*EL*/['implies',['assertedSentence',['genls','$VAR'(4),'$VAR'(5)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4),'$VAR'(5)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['natFunction','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(1),'$VAR'(2)],['natFunction','$VAR'(3),'$VAR'(1)],['genls','$VAR'(4),'$VAR'(5)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(4)],['natArgument','$VAR'(3),'$VAR'(2),'$VAR'(5)]],[['genls','$VAR'(0),'$VAR'(3)]]],'UniversalVocabularyMt',["?NAT","?FUNC","?NUM","?INDEP-COLL-NAT","?TERM","?INDEP-COLL"],/*EL*/['implies',['and',['natFunction','$VAR'(0),'$VAR'(1)],['preservesGenlsInArg','$VAR'(1),'$VAR'(2)],['natFunction','$VAR'(3),'$VAR'(1)],['genls','$VAR'(4),'$VAR'(5)],['natArgument','$VAR'(0),'$VAR'(2),'$VAR'(4)],['natArgument','$VAR'(3),'$VAR'(2),'$VAR'(5)]],['genls','$VAR'(0),'$VAR'(3)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['forwardNonTriggerLiteral',['arity','$VAR'(0),2]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['forwardNonTriggerLiteral',['arity','$VAR'(0),2]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1),'$VAR'(2)],'TINYKB-ASSERTION'(':TRUE-MON',[[['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?COL1","?COL2"],/*EL*/['implies',['and',['arity','$VAR'(0),2],['requiredArg1Pred','$VAR'(1),'$VAR'(0)],['interArgIsa1-2','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['relationAllExists','$VAR'(0),'$VAR'(1),'$VAR'(2)]])]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'Predicate'],['isa','$VAR'(1),'SymmetricBinaryPredicate'],['isa','$VAR'(2),'PositiveInteger'],['transitiveViaArg','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['transitiveViaArgInverse','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?INS1","?INS2","?INS3"],/*EL*/['implies',['and',['isa','$VAR'(0),'Predicate'],['isa','$VAR'(1),'SymmetricBinaryPredicate'],['isa','$VAR'(2),'PositiveInteger'],['transitiveViaArg','$VAR'(0),'$VAR'(1),'$VAR'(2)]],['transitiveViaArgInverse','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['negationPreds','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],[['negationPreds','$VAR'(1),'$VAR'(2)]]],'BaseKB',["?GENL-PRED","?NEG-PRED","?SPEC-PRED"],/*EL*/['implies',['and',['negationPreds','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(2),'$VAR'(0)]],['negationPreds','$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','$VAR'(0),'$VAR'(0)]]],'LogicalTruthMt',["?X"],/*EL*/['genlMt','$VAR'(0),'$VAR'(0)]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ScalarPointValue'],['minQuantValue','$VAR'(0),'$VAR'(1)]],[['equals','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?POINT1","?POINT2"],/*EL*/['implies',['and',['isa','$VAR'(0),'ScalarPointValue'],['minQuantValue','$VAR'(0),'$VAR'(1)]],['equals','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['assertedSentence',['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]]],[['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]],[['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),6,'$VAR'(1)],['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]])]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['assertedSentence',['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]],['meetsPragmaticRequirement',['TheList','$VAR'(0),'$VAR'(1)],'TINYKB-ASSERTION'(':TRUE-DEF',[[['argSometimesIsa','$VAR'(0),6,'$VAR'(1)]],[['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]]],'UniversalVocabularyMt',["?RELN","?COL"],/*EL*/['implies',['argSometimesIsa','$VAR'(0),6,'$VAR'(1)],['arg6SometimesIsa','$VAR'(0),'$VAR'(1)]])]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['multiplicationUnits','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['multiplicationUnits','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?UNIT1","?UNIT2","?PROD-UNIT"],/*EL*/['implies',['multiplicationUnits','$VAR'(0),'$VAR'(1),'$VAR'(2)],['multiplicationUnits','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'PositiveInteger']],[['greaterThanOrEqualTo','$VAR'(0),1]]],'BaseKB',["?X"],/*EL*/['implies',['isa','$VAR'(0),'PositiveInteger'],['greaterThanOrEqualTo','$VAR'(0),1]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['interArgIsa','$VAR'(0),5,'$VAR'(1),3,'$VAR'(2)]],[['interArgIsa5-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]],'BaseKB',["?PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa','$VAR'(0),5,'$VAR'(1),3,'$VAR'(2)],['interArgIsa5-3','$VAR'(0),'$VAR'(1),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),2,4],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],[['$VAR'(0),'$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(2)]]],'BaseKB',["?PRED","?ARG1","?ARG2","?ARG3","?ARG4"],/*EL*/['implies',['and',['isa','$VAR'(0),'QuaternaryPredicate'],['commutativeInArgs','$VAR'(0),2,4],['$VAR'(0),'$VAR'(1),'$VAR'(2),'$VAR'(3),'$VAR'(4)]],['$VAR'(0),'$VAR'(1),'$VAR'(4),'$VAR'(3),'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['greaterThan','$VAR'(0),4],['arg4Isa','$VAR'(1),'$VAR'(2)]],[['arg4Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]],'BaseKB',["?N","?PRED","?TYPE"],/*EL*/['implies',['and',['greaterThan','$VAR'(0),4],['arg4Isa','$VAR'(1),'$VAR'(2)]],['arg4Isa',['FunctionToArg','$VAR'(0),'$VAR'(1)],'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['evaluate','$VAR'(0),['FormulaArgFn',0,'$VAR'(1)]]],[['operatorFormulas','$VAR'(0),'$VAR'(1)]]],'BaseKB',["?FORMULAARGFN","?FORMULA"],/*EL*/['implies',['evaluate','$VAR'(0),['FormulaArgFn',0,'$VAR'(1)]],['operatorFormulas','$VAR'(0),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['interArgIsa2-5','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[['interArgIsa','$VAR'(0),2,'$VAR'(1),5,'$VAR'(2)]]],'BaseKB',["?CONSTRAINED-PRED","?IND-COL","?DEP-COL"],/*EL*/['implies',['interArgIsa2-5','$VAR'(0),'$VAR'(1),'$VAR'(2)],['interArgIsa','$VAR'(0),2,'$VAR'(1),5,'$VAR'(2)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],[['arg2Format','$VAR'(1),'SingleEntry']]],'UniversalVocabularyMt',["?GENLPRED","?SPECPRED"],/*EL*/['implies',['and',['arg2Format','$VAR'(0),'SingleEntry'],['different','$VAR'(0),'$VAR'(1)],['genlPreds','$VAR'(1),'$VAR'(0)]],['arg2Format','$VAR'(1),'SingleEntry']]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),2,'$VAR'(0)]],[['isa','$VAR'(2),'$VAR'(1)]]],'BaseKB',["?REL","?COLL","?TERM"],/*EL*/['implies',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['admittedArgument','$VAR'(2),2,'$VAR'(0)]],['isa','$VAR'(2),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['arg2Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['isa','$VAR'(3),'$VAR'(2)],['$VAR'(0),'$VAR'(4),'$VAR'(3)]],[]],'BaseKB',["?PRED","?COL1","?COL2","?INST","??X"],/*EL*/['not',['and',['arg2Isa','$VAR'(0),'$VAR'(1)],['disjointWith','$VAR'(1),'$VAR'(2)],['isa','$VAR'(3),'$VAR'(2)],['$VAR'(0),'$VAR'(4),'$VAR'(3)]]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'ArgIsaBinaryPredicate']],[['transitiveViaArg','$VAR'(0),'genls',2]]],'BaseKB',["?PRED"],/*EL*/['implies',['isa','$VAR'(0),'ArgIsaBinaryPredicate'],['transitiveViaArg','$VAR'(0),'genls',2]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(3),'$VAR'(0)]],[['relationAllExists','$VAR'(2),'$VAR'(3),'$VAR'(1)]]],'BaseKB',["?INST","?COL2","?PRED","?COL1"],/*EL*/['implies',['and',['isa','$VAR'(0),'$VAR'(1)],['relationAllInstance','$VAR'(2),'$VAR'(3),'$VAR'(0)]],['relationAllExists','$VAR'(2),'$VAR'(3),'$VAR'(1)]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['termOfUnit','$VAR'(1),['PerFn','$VAR'(2),'$VAR'(3)]],['termOfUnit','$VAR'(0),['UnitProductFn','$VAR'(1),'$VAR'(3)]]],[['equals','$VAR'(2),'$VAR'(0)]]],'UniversalVocabularyMt',["?UNITPRODUCTFN","?PERFN","?UNIT1","?UNIT2"],/*EL*/['implies',['and',['isa','$VAR'(0),'UnitOfMeasure'],['isa','$VAR'(1),'UnitOfMeasure'],['termOfUnit','$VAR'(1),['PerFn','$VAR'(2),'$VAR'(3)]],['termOfUnit','$VAR'(0),['UnitProductFn','$VAR'(1),'$VAR'(3)]]],['equals','$VAR'(2),'$VAR'(0)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['arity','$VAR'(0),1],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2)]],[]],'BaseKB',["?REL","?M","?N"],/*EL*/['not',['and',['arity','$VAR'(0),1],['commutativeInArgsAndRest','$VAR'(0),'$VAR'(1),'$VAR'(2)]]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genlPreds','$VAR'(0),'genls']],[['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]]],'BaseKB',["?SPEC-PRED"],/*EL*/['implies',['genlPreds','$VAR'(0),'genls'],['afterRemoving','$VAR'(0),['SubLQuoteFn','REMOVE-TVA-CACHE-VALUE']]]).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['notAssertibleMt','EverythingPSC']]],'UniversalVocabularyMt',[],/*HL*/['notAssertibleMt','EverythingPSC']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','equiv','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg1QuotedIsa','equiv','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2QuotedIsa','equiv','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg2QuotedIsa','equiv','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','implies','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg1QuotedIsa','implies','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2QuotedIsa','implies','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg2QuotedIsa','implies','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','not','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg1QuotedIsa','not','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','xor','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg1QuotedIsa','xor','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2QuotedIsa','xor','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['arg2QuotedIsa','xor','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','NART'(['CollectionRuleTemplateFn','HypotheticalContext']),'RuleTemplate']]],'BaseKB',[],/*HL*/['isa','NART'(['CollectionRuleTemplateFn','HypotheticalContext']),'RuleTemplate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),'RuleTemplate']]],'BaseKB',[],/*HL*/['isa','NART'(['CollectionRuleTemplateFn','ArgIsaPredicate']),'RuleTemplate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argsQuotedIsa','and','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['argsQuotedIsa','and','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argsQuotedIsa','or','CycLSentence-Assertible']]],'BaseKB',[],/*HL*/['argsQuotedIsa','or','CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','BaseKB','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','BaseKB','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','BookkeepingMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','BookkeepingMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','CoreCycLImplementationMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','CoreCycLImplementationMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','CoreCycLMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','CoreCycLMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','CurrentWorldDataCollectorMt-NonHomocentric','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','CurrentWorldDataCollectorMt-NonHomocentric','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','EnglishParaphraseMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','EnglishParaphraseMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','LogicalTruthImplementationMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','LogicalTruthImplementationMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','LogicalTruthMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','LogicalTruthMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genlMt','TemporaryEnglishParaphraseMt','BaseKB']]],'UniversalVocabularyMt',[],/*HL*/['genlMt','TemporaryEnglishParaphraseMt','BaseKB']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2QuotedIsa','oldConstantName','SubLString']]],'BookkeepingMt',[],/*HL*/['arg2QuotedIsa','oldConstantName','SubLString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2QuotedIsa','collectionExpansion','CycLExpression']]],'UniversalVocabularyImplementationMt',[],/*HL*/['arg2QuotedIsa','collectionExpansion','CycLExpression']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2QuotedIsa','expansion','CycLExpression']]],'UniversalVocabularyImplementationMt',[],/*HL*/['arg2QuotedIsa','expansion','CycLExpression']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['collectionConventionMt','BroadMicrotheory','UniversalVocabularyMt']]],'BaseKB',[],/*HL*/['collectionConventionMt','BroadMicrotheory','UniversalVocabularyMt']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','reformulationDirectionInMode',3,'CycLAtomicAssertion']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','reformulationDirectionInMode',3,'CycLAtomicAssertion']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','reformulationPrecondition',3,'CycLAtomicAssertion']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','reformulationPrecondition',3,'CycLAtomicAssertion']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','thereExistAtLeast',3,'CycLSentence-Assertible']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','thereExistAtLeast',3,'CycLSentence-Assertible']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','arg1Format',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','arg1Format',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','assertionUtility-1',2,'RealNumber']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','assertionUtility-1',2,'RealNumber']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','PlusAll',2,'EvaluatableFunction']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','PlusAll',2,'EvaluatableFunction']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','assertionUtility',2,'RealNumber']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','assertionUtility',2,'RealNumber']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','arg2Format',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','arg2Format',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','collectionExpansion',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','collectionExpansion',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','followingValue',2,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','followingValue',2,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','myCreationPurpose',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','myCreationPurpose',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','reformulationPrecondition',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','reformulationPrecondition',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MtTimeWithGranularityDimFn',2,'Collection']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MtTimeWithGranularityDimFn',2,'Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','QuantityConversionFn',2,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','QuantityConversionFn',2,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','arg3Format',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','arg3Format',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','sentenceEquiv',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','sentenceEquiv',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','myCreationTime',2,'Integer']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','myCreationTime',2,'Integer']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','reformulationDirectionInMode',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','reformulationDirectionInMode',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','cycTransformationProofBindings',2,'List']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','cycTransformationProofBindings',2,'List']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','DateEncodeStringFn',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','DateEncodeStringFn',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','arg4Format',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','arg4Format',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','defaultReformulationDirectionInModeForPred',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','defaultReformulationDirectionInModeForPred',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','arg6Format',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','arg6Format',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','overlappingExternalConcept',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','overlappingExternalConcept',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','expansion',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','expansion',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','relationMemberInstance',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','relationMemberInstance',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','constantGUID',2,'SubLString']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','constantGUID',2,'SubLString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','myCreationSecond',2,'NonNegativeInteger']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','myCreationSecond',2,'NonNegativeInteger']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','synonymousExternalConcept',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','synonymousExternalConcept',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','FunctionToArg',2,'Predicate']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','FunctionToArg',2,'Predicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','sentenceEquiv',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','sentenceEquiv',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','arg5Format',2,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','arg5Format',2,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','Minimum','UnaryFunction']]],'BaseKB',[],/*HL*/['arg2Isa','Minimum','UnaryFunction']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','collectionExpansion','Thing']]],'UniversalVocabularyImplementationMt',[],/*HL*/['arg2Isa','collectionExpansion','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','isa','Collection']]],'BaseKB',[],/*HL*/['arg2Isa','isa','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','myCreator','Cyclist']]],'BookkeepingMt',[],/*HL*/['arg2Isa','myCreator','Cyclist']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','PlusAll','UnaryFunction']]],'BaseKB',[],/*HL*/['arg2Isa','PlusAll','UnaryFunction']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','oldConstantName','CharacterString']]],'BookkeepingMt',[],/*HL*/['arg2Isa','oldConstantName','CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','sentenceEquiv','Individual']]],'BaseKB',[],/*HL*/['arg2Isa','sentenceEquiv','Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','expansion','Thing']]],'UniversalVocabularyImplementationMt',[],/*HL*/['arg2Isa','expansion','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','reformulationPrecondition','Thing']]],'UniversalVocabularyImplementationMt',[],/*HL*/['arg2Isa','reformulationPrecondition','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','Maximum','UnaryFunction']]],'BaseKB',[],/*HL*/['arg2Isa','Maximum','UnaryFunction']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','genlPreds','Predicate']]],'BaseKB',[],/*HL*/['arg2Isa','genlPreds','Predicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','numericallyEquals','ScalarInterval']]],'BaseKB',[],/*HL*/['arg2Isa','numericallyEquals','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','genlMt','Microtheory']]],'BaseKB',[],/*HL*/['arg2Isa','genlMt','Microtheory']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','greaterThan','ScalarInterval']]],'BaseKB',[],/*HL*/['arg2Isa','greaterThan','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','siblingDisjointExceptions','SetOrCollection']]],'BaseKB',[],/*HL*/['arg2Isa','siblingDisjointExceptions','SetOrCollection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','greaterThanOrEqualTo','ScalarInterval']]],'BaseKB',[],/*HL*/['arg2Isa','greaterThanOrEqualTo','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','genls','Collection']]],'BaseKB',[],/*HL*/['arg2Isa','genls','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','Average','UnaryFunction']]],'BaseKB',[],/*HL*/['arg2Isa','Average','UnaryFunction']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','resultIsa','Collection']]],'BaseKB',[],/*HL*/['arg2Isa','resultIsa','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','resultGenl','Collection']]],'BaseKB',[],/*HL*/['arg2Isa','resultGenl','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','sentenceEquiv','Thing']]],'BaseKB',[],/*HL*/['arg2Isa','sentenceEquiv','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','constrainsArg',1,'Predicate']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','constrainsArg',1,'Predicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','resultIsa',1,'Relation']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','resultIsa',1,'Relation']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','relationExpansion',1,'Predicate']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','relationExpansion',1,'Predicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','sentenceEquiv',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','sentenceEquiv',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','reformulationDirectionInMode',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','reformulationDirectionInMode',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','ExpFn',1,'ScalarPointValue']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','ExpFn',1,'ScalarPointValue']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','LogFn',1,'NonNegativeScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','LogFn',1,'NonNegativeScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','defaultReformulationDirectionInModeForPred',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','defaultReformulationDirectionInModeForPred',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','FOL-PredicateFn',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','FOL-PredicateFn',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','IntervalMaxFn',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','IntervalMaxFn',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','expansion',1,'Relation']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','expansion',1,'Relation']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','resultGenlArg',1,'CollectionDenotingFunction']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','resultGenlArg',1,'CollectionDenotingFunction']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','singleEntryFormatInArgs',1,'Predicate']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','singleEntryFormatInArgs',1,'Predicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','commutativeInArgs',1,'Relation']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','commutativeInArgs',1,'Relation']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','IntervalMinFn',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','IntervalMinFn',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','sentenceEquiv',1,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','sentenceEquiv',1,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','resultGenl',1,'Relation']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','resultGenl',1,'Relation']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','LogFn',1,'RealNumber']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','LogFn',1,'RealNumber']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','independentArg',1,'ArgConstraintPredicate']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','independentArg',1,'ArgConstraintPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MtTimeDimFn',1,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MtTimeDimFn',1,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','followingValue',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','followingValue',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MeaningInSystemFn',1,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MeaningInSystemFn',1,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','reformulatorRuleProperties',1,'Collection']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','reformulatorRuleProperties',1,'Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','reformulationPrecondition',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','reformulationPrecondition',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','holdsIn',1,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','holdsIn',1,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MtTimeWithGranularityDimFn',1,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MtTimeWithGranularityDimFn',1,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MaxRangeFn',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MaxRangeFn',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MinRangeFn',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MinRangeFn',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MtSpace',1,'Microtheory']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MtSpace',1,'Microtheory']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','MtUnionFn',1,'Microtheory']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','MtUnionFn',1,'Microtheory']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','Percent',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','Percent',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','PlusFn',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','PlusFn',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','TheList',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','TheList',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','TheSet',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','TheSet',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','TimesFn',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','TimesFn',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','Unity',1,'ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','Unity',1,'ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','defaultReformulatorModePrecedence',1,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','defaultReformulatorModePrecedence',1,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','different',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','different',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','EvaluateSubLFn',1,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','EvaluateSubLFn',1,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','indexicalReferent',1,'IndeterminateTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','indexicalReferent',1,'IndeterminateTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','Kappa',1,'SubLList']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','Kappa',1,'SubLList']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','UncanonicalizerAssertionFn',1,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','UncanonicalizerAssertionFn',1,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','trueSubL',1,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','trueSubL',1,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','ExpandSubLFn',1,'SubLList']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','ExpandSubLFn',1,'SubLList']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','performSubL',1,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','performSubL',1,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','myCreationPurpose','CycLReifiableDenotationalTerm']]],'BookkeepingMt',[],/*HL*/['arg1QuotedIsa','myCreationPurpose','CycLReifiableDenotationalTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','myCreationSecond','CycLConstant']]],'BookkeepingMt',[],/*HL*/['arg1QuotedIsa','myCreationSecond','CycLConstant']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','myCreationTime','CycLConstant']]],'BookkeepingMt',[],/*HL*/['arg1QuotedIsa','myCreationTime','CycLConstant']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','oldConstantName','CycLConstant']]],'BookkeepingMt',[],/*HL*/['arg1QuotedIsa','oldConstantName','CycLConstant']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1QuotedIsa','myCreator','CycLReifiableDenotationalTerm']]],'BookkeepingMt',[],/*HL*/['arg1QuotedIsa','myCreator','CycLReifiableDenotationalTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','interArgFormat1-2',3,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','interArgFormat1-2',3,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','extConceptOverlapsColAndReln',3,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','extConceptOverlapsColAndReln',3,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','unitMultiplicationFactor',3,'NonNegativeScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','unitMultiplicationFactor',3,'NonNegativeScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','relationInstanceMember',3,'Individual']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','relationInstanceMember',3,'Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','unitMultiplicationFactor',3,'RealNumber']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','unitMultiplicationFactor',3,'RealNumber']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','afterAdding',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','afterAdding',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','afterRemoving',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','afterRemoving',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','collectionExpansion',2,'CycLExpression']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','collectionExpansion',2,'CycLExpression']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','defnIff',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','defnIff',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','defnNecessary',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','defnNecessary',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','defnSufficient',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','defnSufficient',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','evaluationDefn',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','evaluationDefn',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','expansion',2,'CycLExpression']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','expansion',2,'CycLExpression']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','expansionDefn',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','expansionDefn',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','quotedDefnIff',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','quotedDefnIff',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','quotedDefnNecessary',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','quotedDefnNecessary',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','quotedDefnSufficient',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','quotedDefnSufficient',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','reformulatorRuleProperties',2,'CycLAtomicAssertion']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','reformulatorRuleProperties',2,'CycLAtomicAssertion']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','ruleAfterAdding',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','ruleAfterAdding',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','ruleAfterRemoving',2,'CycLNonAtomicTerm']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','ruleAfterRemoving',2,'CycLNonAtomicTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','sharedNotes',2,'DocumentationConstant']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','sharedNotes',2,'DocumentationConstant']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argQuotedIsa','thereExistAtLeast',2,'CycLVariable']]],'UniversalVocabularyMt',[],/*HL*/['argQuotedIsa','thereExistAtLeast',2,'CycLVariable']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','genlPreds','Predicate']]],'BaseKB',[],/*HL*/['arg1Isa','genlPreds','Predicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','greaterThan','ScalarInterval']]],'BaseKB',[],/*HL*/['arg1Isa','greaterThan','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','siblingDisjointExceptions','SetOrCollection']]],'BaseKB',[],/*HL*/['arg1Isa','siblingDisjointExceptions','SetOrCollection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','numericallyEquals','ScalarInterval']]],'BaseKB',[],/*HL*/['arg1Isa','numericallyEquals','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','genlMt','Microtheory']]],'BaseKB',[],/*HL*/['arg1Isa','genlMt','Microtheory']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','sentenceEquiv','Individual']]],'BaseKB',[],/*HL*/['arg1Isa','sentenceEquiv','Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','myCreationPurpose','Thing']]],'BookkeepingMt',[],/*HL*/['arg1Isa','myCreationPurpose','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','Unity','ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','Unity','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','TheSet','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','TheSet','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','greaterThanOrEqualTo','ScalarInterval']]],'BaseKB',[],/*HL*/['arg1Isa','greaterThanOrEqualTo','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','genls','Collection']]],'BaseKB',[],/*HL*/['arg1Isa','genls','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','different','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','different','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','myCreationSecond','Thing']]],'BookkeepingMt',[],/*HL*/['arg1Isa','myCreationSecond','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','myCreationTime','Thing']]],'BookkeepingMt',[],/*HL*/['arg1Isa','myCreationTime','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','Average','SetOrCollection']]],'BaseKB',[],/*HL*/['arg1Isa','Average','SetOrCollection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','PlusFn','ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','PlusFn','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','MtSpace','Microtheory']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','MtSpace','Microtheory']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','MtUnionFn','Microtheory']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','MtUnionFn','Microtheory']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','Minimum','SetOrCollection']]],'BaseKB',[],/*HL*/['arg1Isa','Minimum','SetOrCollection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','MinRangeFn','ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','MinRangeFn','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','defaultReformulatorModePrecedence','Individual']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','defaultReformulatorModePrecedence','Individual']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','resultGenl','Relation']]],'BaseKB',[],/*HL*/['arg1Isa','resultGenl','Relation']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','MaxRangeFn','ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','MaxRangeFn','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','isa','Thing']]],'BaseKB',[],/*HL*/['arg1Isa','isa','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','PlusAll','SetOrCollection']]],'BaseKB',[],/*HL*/['arg1Isa','PlusAll','SetOrCollection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','sentenceEquiv','Thing']]],'BaseKB',[],/*HL*/['arg1Isa','sentenceEquiv','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','myCreator','Thing']]],'BookkeepingMt',[],/*HL*/['arg1Isa','myCreator','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','oldConstantName','Thing']]],'BookkeepingMt',[],/*HL*/['arg1Isa','oldConstantName','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','resultIsa','Relation']]],'BaseKB',[],/*HL*/['arg1Isa','resultIsa','Relation']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','TheList','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','TheList','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','Maximum','SetOrCollection']]],'BaseKB',[],/*HL*/['arg1Isa','Maximum','SetOrCollection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','TimesFn','ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','TimesFn','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','Percent','ScalarInterval']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','Percent','ScalarInterval']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedArgument','thereExistAtLeast',3]]],'UniversalVocabularyMt',[],/*HL*/['quotedArgument','thereExistAtLeast',3]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','EvaluateSubLFn',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','EvaluateSubLFn',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','UncanonicalizerAssertionFn',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','UncanonicalizerAssertionFn',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','trueSubL',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','trueSubL',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','performSubL',1,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','performSubL',1,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','afterAdding',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','afterAdding',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','afterRemoving',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','afterRemoving',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','defnIff',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','defnIff',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','defnNecessary',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','defnNecessary',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','defnSufficient',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','defnSufficient',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','evaluationDefn',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','evaluationDefn',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','expansionDefn',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','expansionDefn',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','quotedDefnIff',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','quotedDefnIff',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','quotedDefnNecessary',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','quotedDefnNecessary',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','quotedDefnSufficient',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','quotedDefnSufficient',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','ruleAfterAdding',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','ruleAfterAdding',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','ruleAfterRemoving',2,'Thing']]],'UniversalVocabularyMt',[],/*HL*/['argIsa','ruleAfterRemoving',2,'Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedArgument','thereExistAtLeast',2]]],'UniversalVocabularyMt',[],/*HL*/['quotedArgument','thereExistAtLeast',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','EvaluateSubLFn','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','EvaluateSubLFn','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','UncanonicalizerAssertionFn','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','UncanonicalizerAssertionFn','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','trueSubL','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','trueSubL','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','performSubL','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg1Isa','performSubL','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','afterAdding','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','afterAdding','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','afterRemoving','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','afterRemoving','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','defnIff','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','defnIff','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','defnNecessary','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','defnNecessary','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','defnSufficient','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','defnSufficient','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','evaluationDefn','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','evaluationDefn','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','expansionDefn','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','expansionDefn','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','quotedDefnIff','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','quotedDefnIff','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','quotedDefnNecessary','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','quotedDefnNecessary','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','quotedDefnSufficient','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','quotedDefnSufficient','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','ruleAfterAdding','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','ruleAfterAdding','Thing']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','ruleAfterRemoving','Thing']]],'UniversalVocabularyMt',[],/*HL*/['arg2Isa','ruleAfterRemoving','Thing']).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['notAssertibleMt','InferencePSC']]],'UniversalVocabularyMt',[],/*HL*/['notAssertibleMt','InferencePSC']).
'TINYKB-ASSERTION'(':TRUE-MON',[[],[['notAssertibleMt','LogicalTruthMt']]],'UniversalVocabularyMt',[],/*HL*/['notAssertibleMt','LogicalTruthMt']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','wsl-ClassificationRoot','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','wsl-ClassificationRoot','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedIsa','ThePrototypicalCollection','HLPrototypicalTerm']]],'UniversalVocabularyMt',[],/*HL*/['quotedIsa','ThePrototypicalCollection','HLPrototypicalTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['hlPrototypicalInstance','ThePrototypicalCollection','Collection']]],'UniversalVocabularyMt',[],/*HL*/['hlPrototypicalInstance','ThePrototypicalCollection','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','ThePrototypicalCollection','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','ThePrototypicalCollection','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','wsl-NonFunctionalParameter','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','wsl-NonFunctionalParameter','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Plugin','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Plugin','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Plugin','wsl-ClassificationRoot']]],'BaseKB',[],/*HL*/['isa','larkc-Plugin','wsl-ClassificationRoot']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-hasUri','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-hasUri','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedIsa','ThePrototypicalBinaryPredicate','HLPrototypicalTerm']]],'UniversalVocabularyMt',[],/*HL*/['quotedIsa','ThePrototypicalBinaryPredicate','HLPrototypicalTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['hlPrototypicalInstance','ThePrototypicalBinaryPredicate','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['hlPrototypicalInstance','ThePrototypicalBinaryPredicate','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','ThePrototypicalBinaryPredicate','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','ThePrototypicalBinaryPredicate','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','ThePrototypicalBinaryPredicate',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','ThePrototypicalBinaryPredicate',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-hasUri',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-hasUri',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','larkc-hasUri','larkc-Plugin']]],'BaseKB',[],/*HL*/['arg1Isa','larkc-hasUri','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasUri',1,'larkc-Plugin']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasUri',1,'larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','larkc-hasUri','CharacterString']]],'BaseKB',[],/*HL*/['arg2Isa','larkc-hasUri','CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasUri',2,'CharacterString']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasUri',2,'CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-hasEndpoint','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-hasEndpoint','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-hasEndpoint',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-hasEndpoint',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','larkc-hasEndpoint','larkc-Plugin']]],'BaseKB',[],/*HL*/['arg1Isa','larkc-hasEndpoint','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasEndpoint',1,'larkc-Plugin']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasEndpoint',1,'larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','larkc-hasEndpoint','CharacterString']]],'BaseKB',[],/*HL*/['arg2Isa','larkc-hasEndpoint','CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasEndpoint',2,'CharacterString']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasEndpoint',2,'CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Identifier','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Identifier','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Identifier','larkc-Plugin']]],'BaseKB',[],/*HL*/['genls','larkc-Identifier','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-InformationSetTransformer','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-InformationSetTransformer','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-InformationSetTransformer','larkc-Plugin']]],'BaseKB',[],/*HL*/['genls','larkc-InformationSetTransformer','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-QueryTransformer','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-QueryTransformer','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-QueryTransformer','larkc-Plugin']]],'BaseKB',[],/*HL*/['genls','larkc-QueryTransformer','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Selecter','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Selecter','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Selecter','larkc-Plugin']]],'BaseKB',[],/*HL*/['genls','larkc-Selecter','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Reasoner','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Reasoner','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Reasoner','larkc-Plugin']]],'BaseKB',[],/*HL*/['genls','larkc-Reasoner','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Decider','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Decider','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Decider','larkc-Plugin']]],'BaseKB',[],/*HL*/['genls','larkc-Decider','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Resource','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Resource','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-InformationSet','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-InformationSet','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-InformationSet','larkc-Resource']]],'BaseKB',[],/*HL*/['genls','larkc-InformationSet','larkc-Resource']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-SetOfStatements','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-SetOfStatements','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-SetOfStatements','larkc-InformationSet']]],'BaseKB',[],/*HL*/['genls','larkc-SetOfStatements','larkc-InformationSet']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-RdfGraph','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-RdfGraph','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-RdfGraph','larkc-SetOfStatements']]],'BaseKB',[],/*HL*/['genls','larkc-RdfGraph','larkc-SetOfStatements']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-DataSet','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-DataSet','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-DataSet','larkc-SetOfStatements']]],'BaseKB',[],/*HL*/['genls','larkc-DataSet','larkc-SetOfStatements']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-LabelledGroupOfStatements','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-LabelledGroupOfStatements','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-LabelledGroupOfStatements','larkc-SetOfStatements']]],'BaseKB',[],/*HL*/['genls','larkc-LabelledGroupOfStatements','larkc-SetOfStatements']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-BooleanInformationSet','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-BooleanInformationSet','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-BooleanInformationSet','larkc-InformationSet']]],'BaseKB',[],/*HL*/['genls','larkc-BooleanInformationSet','larkc-InformationSet']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-NaturalLanguageDocument','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-NaturalLanguageDocument','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-NaturalLanguageDocument','larkc-InformationSet']]],'BaseKB',[],/*HL*/['genls','larkc-NaturalLanguageDocument','larkc-InformationSet']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-VariableBinding','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-VariableBinding','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-VariableBinding','larkc-InformationSet']]],'BaseKB',[],/*HL*/['genls','larkc-VariableBinding','larkc-InformationSet']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Query','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Query','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Query','larkc-Resource']]],'BaseKB',[],/*HL*/['genls','larkc-Query','larkc-Resource']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-SPARQLQuery','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-SPARQLQuery','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-SPARQLQuery','larkc-Query']]],'BaseKB',[],/*HL*/['genls','larkc-SPARQLQuery','larkc-Query']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-TriplePatternQuery','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-TriplePatternQuery','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-TriplePatternQuery','larkc-Query']]],'BaseKB',[],/*HL*/['genls','larkc-TriplePatternQuery','larkc-Query']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-KeywordQuery','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-KeywordQuery','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-KeywordQuery','larkc-Query']]],'BaseKB',[],/*HL*/['genls','larkc-KeywordQuery','larkc-Query']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-hasInputType','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-hasInputType','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-hasInputType',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-hasInputType',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Genl','larkc-hasInputType','larkc-Plugin']]],'BaseKB',[],/*HL*/['arg1Genl','larkc-hasInputType','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Genl','larkc-hasInputType','larkc-Resource']]],'BaseKB',[],/*HL*/['arg2Genl','larkc-hasInputType','larkc-Resource']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-hasOutputType','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-hasOutputType','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-hasOutputType',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-hasOutputType',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Genl','larkc-hasOutputType','larkc-Plugin']]],'BaseKB',[],/*HL*/['arg1Genl','larkc-hasOutputType','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Genl','larkc-hasOutputType','larkc-Resource']]],'BaseKB',[],/*HL*/['arg2Genl','larkc-hasOutputType','larkc-Resource']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-pluginByDataConnectsTo','TransitiveBinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-pluginByDataConnectsTo','TransitiveBinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['quotedIsa','ThePrototypicalTransitiveBinaryPredicate','HLPrototypicalTerm']]],'UniversalVocabularyMt',[],/*HL*/['quotedIsa','ThePrototypicalTransitiveBinaryPredicate','HLPrototypicalTerm']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['hlPrototypicalInstance','ThePrototypicalTransitiveBinaryPredicate','TransitiveBinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['hlPrototypicalInstance','ThePrototypicalTransitiveBinaryPredicate','TransitiveBinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','ThePrototypicalTransitiveBinaryPredicate','TransitiveBinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','ThePrototypicalTransitiveBinaryPredicate','TransitiveBinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','ThePrototypicalTransitiveBinaryPredicate',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','ThePrototypicalTransitiveBinaryPredicate',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-pluginByDataConnectsTo',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-pluginByDataConnectsTo',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Genl','larkc-pluginByDataConnectsTo','larkc-Plugin']]],'BaseKB',[],/*HL*/['arg1Genl','larkc-pluginByDataConnectsTo','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Genl','larkc-pluginByDataConnectsTo','larkc-Plugin']]],'BaseKB',[],/*HL*/['arg2Genl','larkc-pluginByDataConnectsTo','larkc-Plugin']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Scalability','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Scalability','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Scalability','wsl-NonFunctionalParameter']]],'BaseKB',[],/*HL*/['genls','larkc-Scalability','wsl-NonFunctionalParameter']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-Cost','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-Cost','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-Cost','wsl-NonFunctionalParameter']]],'BaseKB',[],/*HL*/['genls','larkc-Cost','wsl-NonFunctionalParameter']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-euro','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-euro','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-hasCostPerInvocation','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-hasCostPerInvocation','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-hasCostPerInvocation',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-hasCostPerInvocation',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','larkc-hasCostPerInvocation','larkc-Cost']]],'BaseKB',[],/*HL*/['arg1Isa','larkc-hasCostPerInvocation','larkc-Cost']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasCostPerInvocation',1,'larkc-Cost']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasCostPerInvocation',1,'larkc-Cost']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','larkc-hasCostPerInvocation','larkc-euro']]],'BaseKB',[],/*HL*/['arg2Isa','larkc-hasCostPerInvocation','larkc-euro']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasCostPerInvocation',2,'larkc-euro']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasCostPerInvocation',2,'larkc-euro']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-hasScalability','BinaryPredicate']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-hasScalability','BinaryPredicate']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arity','larkc-hasScalability',2]]],'UniversalVocabularyMt',[],/*HL*/['arity','larkc-hasScalability',2]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg1Isa','larkc-hasScalability','larkc-Scalability']]],'BaseKB',[],/*HL*/['arg1Isa','larkc-hasScalability','larkc-Scalability']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasScalability',1,'larkc-Scalability']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasScalability',1,'larkc-Scalability']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['arg2Isa','larkc-hasScalability','CharacterString']]],'BaseKB',[],/*HL*/['arg2Isa','larkc-hasScalability','CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['argIsa','larkc-hasScalability',2,'CharacterString']]],'BaseKB',[],/*HL*/['argIsa','larkc-hasScalability',2,'CharacterString']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[['genls','$VAR'(0),'larkc-Plugin'],['larkc-hasOutputType','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)],['larkc-hasInputType','$VAR'(3),'$VAR'(2)],['genls','$VAR'(3),'larkc-Plugin']],[['larkc-pluginByDataConnectsTo','$VAR'(0),'$VAR'(3)]]],'BaseKB',["?X","?TYPE","?TYPE1","?Y"],/*EL*/['implies',['and',['genls','$VAR'(0),'larkc-Plugin'],['larkc-hasOutputType','$VAR'(0),'$VAR'(1)],['genls','$VAR'(1),'$VAR'(2)],['larkc-hasInputType','$VAR'(3),'$VAR'(2)],['genls','$VAR'(3),'larkc-Plugin']],['larkc-pluginByDataConnectsTo','$VAR'(0),'$VAR'(3)]]).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-CycGateDecider','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-CycGateDecider','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-CycGateDecider','larkc-Decider']]],'BaseKB',[],/*HL*/['genls','larkc-CycGateDecider','larkc-Decider']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-ArticleIdentifier','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-ArticleIdentifier','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-ArticleIdentifier','larkc-Identifier']]],'BaseKB',[],/*HL*/['genls','larkc-ArticleIdentifier','larkc-Identifier']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasInputType','larkc-ArticleIdentifier','larkc-SPARQLQuery']]],'BaseKB',[],/*HL*/['larkc-hasInputType','larkc-ArticleIdentifier','larkc-SPARQLQuery']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasOutputType','larkc-ArticleIdentifier','larkc-NaturalLanguageDocument']]],'BaseKB',[],/*HL*/['larkc-hasOutputType','larkc-ArticleIdentifier','larkc-NaturalLanguageDocument']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-CycSelecter','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-CycSelecter','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-CycSelecter','larkc-Selecter']]],'BaseKB',[],/*HL*/['genls','larkc-CycSelecter','larkc-Selecter']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasInputType','larkc-CycSelecter','larkc-SetOfStatements']]],'BaseKB',[],/*HL*/['larkc-hasInputType','larkc-CycSelecter','larkc-SetOfStatements']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasOutputType','larkc-CycSelecter','larkc-RdfGraph']]],'BaseKB',[],/*HL*/['larkc-hasOutputType','larkc-CycSelecter','larkc-RdfGraph']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-pluginByDataConnectsTo','larkc-CycSelecter','larkc-CycSelecter']]],'BaseKB',[],/*HL*/['larkc-pluginByDataConnectsTo','larkc-CycSelecter','larkc-CycSelecter']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-GateTransformer','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-GateTransformer','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-GateTransformer','larkc-InformationSetTransformer']]],'BaseKB',[],/*HL*/['genls','larkc-GateTransformer','larkc-InformationSetTransformer']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasInputType','larkc-GateTransformer','larkc-NaturalLanguageDocument']]],'BaseKB',[],/*HL*/['larkc-hasInputType','larkc-GateTransformer','larkc-NaturalLanguageDocument']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-pluginByDataConnectsTo','larkc-ArticleIdentifier','larkc-GateTransformer']]],'BaseKB',[],/*HL*/['larkc-pluginByDataConnectsTo','larkc-ArticleIdentifier','larkc-GateTransformer']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasOutputType','larkc-GateTransformer','larkc-RdfGraph']]],'BaseKB',[],/*HL*/['larkc-hasOutputType','larkc-GateTransformer','larkc-RdfGraph']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-pluginByDataConnectsTo','larkc-GateTransformer','larkc-CycSelecter']]],'BaseKB',[],/*HL*/['larkc-pluginByDataConnectsTo','larkc-GateTransformer','larkc-CycSelecter']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['isa','larkc-CycReasoner','Collection']]],'UniversalVocabularyMt',[],/*HL*/['isa','larkc-CycReasoner','Collection']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['genls','larkc-CycReasoner','larkc-Reasoner']]],'BaseKB',[],/*HL*/['genls','larkc-CycReasoner','larkc-Reasoner']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasInputType','larkc-CycReasoner','larkc-SetOfStatements']]],'BaseKB',[],/*HL*/['larkc-hasInputType','larkc-CycReasoner','larkc-SetOfStatements']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-pluginByDataConnectsTo','larkc-CycSelecter','larkc-CycReasoner']]],'BaseKB',[],/*HL*/['larkc-pluginByDataConnectsTo','larkc-CycSelecter','larkc-CycReasoner']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-pluginByDataConnectsTo','larkc-GateTransformer','larkc-CycReasoner']]],'BaseKB',[],/*HL*/['larkc-pluginByDataConnectsTo','larkc-GateTransformer','larkc-CycReasoner']).
'TINYKB-ASSERTION'(':TRUE-DEF',[[],[['larkc-hasOutputType','larkc-CycReasoner','larkc-VariableBinding']]],'BaseKB',[],/*HL*/['larkc-hasOutputType','larkc-CycReasoner','larkc-VariableBinding']).

